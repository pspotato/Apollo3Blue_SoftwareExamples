/*
 * Copyright (C) 2015-2017, Ambiq Micro
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of itscontributors may be used to endorse
 * or promote products derived from thissoftware without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     apollo3.sfd
 * @brief    CMSIS-SVD SFD File
 * @version  1.0
 * @date     17. September 2018
 * @note     Generated by SVDConv V3.3.12 on Monday, 17.09.2018 13:07:00
 *           from File 'apollo3.svd',
 *           last modified on Friday, 10.08.2018 13:01:32
 */




// -----------------------------  Register Item Address: ADC_CFG  ---------------------------------
// SVD Line: 84

unsigned int ADC_CFG __AT (0x50010000);



// -------------------------------  Field Item: ADC_CFG_CLKSEL  -----------------------------------
// SVD Line: 94

//  <item> SFDITEM_FIELD__ADC_CFG_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 25..24] RW (@ 0x50010000) \nSelect the source and frequency for the ADC clock. All values not enumerated below are undefined.\n0 : OFF = Off mode. The HFRC or HFRC_DIV2 clock must be selected for the ADC to function. The ADC controller automatically shuts off the clock in it's low power modes. When setting ADCEN to '0', the CLKSEL should remain set to one of the two clock selects for proper power down sequencing. value.\n1 : HFRC = HFRC Core Clock divided by (CORESEL+1) value.\n2 : HFRC_DIV2 = HFRC Core Clock / 2 further divided by (CORESEL+1) value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.25..24> CLKSEL
//        <0=> 0: OFF = Off mode. The HFRC or HFRC_DIV2 clock must be selected for the ADC to function. The ADC controller automatically shuts off the clock in it's low power modes. When setting ADCEN to '0', the CLKSEL should remain set to one of the two clock selects for proper power down sequencing. value.
//        <1=> 1: HFRC = HFRC Core Clock divided by (CORESEL+1) value.
//        <2=> 2: HFRC_DIV2 = HFRC Core Clock / 2 further divided by (CORESEL+1) value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_CFG_TRIGPOL  ----------------------------------
// SVD Line: 117

//  <item> SFDITEM_FIELD__ADC_CFG_TRIGPOL
//    <name> TRIGPOL </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x50010000) \nThis bit selects the ADC trigger polarity for external off chip triggers.\n0 : RISING_EDGE = Trigger on rising edge. value.\n1 : FALLING_EDGE = Trigger on falling edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.19..19> TRIGPOL
//        <0=> 0: RISING_EDGE = Trigger on rising edge. value.
//        <1=> 1: FALLING_EDGE = Trigger on falling edge. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_CFG_TRIGSEL  ----------------------------------
// SVD Line: 135

//  <item> SFDITEM_FIELD__ADC_CFG_TRIGSEL
//    <name> TRIGSEL </name>
//    <rw> 
//    <i> [Bits 18..16] RW (@ 0x50010000) \nSelect the ADC trigger source.\n0 : EXT0 = Off chip External Trigger0 (ADC_ET0) value.\n1 : EXT1 = Off chip External Trigger1 (ADC_ET1) value.\n2 : EXT2 = Off chip External Trigger2 (ADC_ET2) value.\n3 : EXT3 = Off chip External Trigger3 (ADC_ET3) value.\n4 : VCOMP = Voltage Comparator Output value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : SWT = Software Trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.18..16> TRIGSEL
//        <0=> 0: EXT0 = Off chip External Trigger0 (ADC_ET0) value.
//        <1=> 1: EXT1 = Off chip External Trigger1 (ADC_ET1) value.
//        <2=> 2: EXT2 = Off chip External Trigger2 (ADC_ET2) value.
//        <3=> 3: EXT3 = Off chip External Trigger3 (ADC_ET3) value.
//        <4=> 4: VCOMP = Voltage Comparator Output value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: SWT = Software Trigger value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_CFG_DFIFORDEN  ---------------------------------
// SVD Line: 173

//  <item> SFDITEM_FIELD__ADC_CFG_DFIFORDEN
//    <name> DFIFORDEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50010000) \nDestructive FIFO Read Enable. Setting this will enable FIFO pop upon reading the FIFOPR register.\n0 : DIS = Destructive Reads are prevented. Reads to the FIFOPR register will not POP an entry off the FIFO. value.\n1 : EN = Reads to the FIFOPR registger will automatically pop an entry off the FIFO. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.12..12> DFIFORDEN
//        <0=> 0: DIS = Destructive Reads are prevented. Reads to the FIFOPR register will not POP an entry off the FIFO. value.
//        <1=> 1: EN = Reads to the FIFOPR registger will automatically pop an entry off the FIFO. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_CFG_REFSEL  -----------------------------------
// SVD Line: 191

//  <item> SFDITEM_FIELD__ADC_CFG_REFSEL
//    <name> REFSEL </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x50010000) \nSelect the ADC reference voltage.\n0 : INT2P0 = Internal 2.0V Bandgap Reference Voltage value.\n1 : INT1P5 = Internal 1.5V Bandgap Reference Voltage value.\n2 : EXT2P0 = Off Chip 2.0V Reference value.\n3 : EXT1P5 = Off Chip 1.5V Reference value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.9..8> REFSEL
//        <0=> 0: INT2P0 = Internal 2.0V Bandgap Reference Voltage value.
//        <1=> 1: INT1P5 = Internal 1.5V Bandgap Reference Voltage value.
//        <2=> 2: EXT2P0 = Off Chip 2.0V Reference value.
//        <3=> 3: EXT1P5 = Off Chip 1.5V Reference value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_CFG_CKMODE  -----------------------------------
// SVD Line: 219

//  <item> SFDITEM_FIELD__ADC_CFG_CKMODE
//    <name> CKMODE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50010000) \nClock mode register\n0 : LPCKMODE = Disable the clock between scans for LPMODE0. Set LPCKMODE to 0x1 while configuring the ADC. value.\n1 : LLCKMODE = Low Latency Clock Mode. When set, HFRC and the adc_clk will remain on while in functioning in LPMODE0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.4..4> CKMODE
//        <0=> 0: LPCKMODE = Disable the clock between scans for LPMODE0. Set LPCKMODE to 0x1 while configuring the ADC. value.
//        <1=> 1: LLCKMODE = Low Latency Clock Mode. When set, HFRC and the adc_clk will remain on while in functioning in LPMODE0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_CFG_LPMODE  -----------------------------------
// SVD Line: 237

//  <item> SFDITEM_FIELD__ADC_CFG_LPMODE
//    <name> LPMODE </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50010000) \nSelect power mode to enter between active scans.\n0 : MODE0 = Low Power Mode 0. Leaves the ADC fully powered between scans with minimum latency between a trigger event and sample data collection. value.\n1 : MODE1 = Low Power Mode 1. Powers down all circuity and clocks associated with the ADC until the next trigger event. Between scans, the reference buffer requires up to 50us of delay from a scan trigger event before the conversion will commence while operating in this mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.3..3> LPMODE
//        <0=> 0: MODE0 = Low Power Mode 0. Leaves the ADC fully powered between scans with minimum latency between a trigger event and sample data collection. value.
//        <1=> 1: MODE1 = Low Power Mode 1. Powers down all circuity and clocks associated with the ADC until the next trigger event. Between scans, the reference buffer requires up to 50us of delay from a scan trigger event before the conversion will commence while operating in this mode. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: ADC_CFG_RPTEN  -----------------------------------
// SVD Line: 255

//  <item> SFDITEM_FIELD__ADC_CFG_RPTEN
//    <name> RPTEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010000) \nThis bit enables Repeating Scan Mode.\n0 : SINGLE_SCAN = In Single Scan Mode, the ADC will complete a single scan upon each trigger event. value.\n1 : REPEATING_SCAN = In Repeating Scan Mode, the ADC will complete it's first scan upon the initial trigger event and all subsequent scans will occur at regular intervals defined by the configuration programmed for the CTTMRA3 internal timer until the timer is disabled or the ADC is disabled. When disabling the ADC (setting ADCEN to '0'), the RPTEN bit should be cleared. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.2..2> RPTEN
//        <0=> 0: SINGLE_SCAN = In Single Scan Mode, the ADC will complete a single scan upon each trigger event. value.
//        <1=> 1: REPEATING_SCAN = In Repeating Scan Mode, the ADC will complete it's first scan upon the initial trigger event and all subsequent scans will occur at regular intervals defined by the configuration programmed for the CTTMRA3 internal timer until the timer is disabled or the ADC is disabled. When disabling the ADC (setting ADCEN to '0'), the RPTEN bit should be cleared. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: ADC_CFG_ADCEN  -----------------------------------
// SVD Line: 273

//  <item> SFDITEM_FIELD__ADC_CFG_ADCEN
//    <name> ADCEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010000) \nThis bit enables the ADC module. While the ADC is enabled, the ADCCFG and SLOT Configuration regsiter settings must remain stable and unchanged. All configuration register settings, slot configuration settings and window comparison settings should be written prior to setting the ADCEN bit to '1'.\n0 : DIS = Disable the ADC module. value.\n1 : EN = Enable the ADC module. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_CFG ) </loc>
//      <o.0..0> ADCEN
//        <0=> 0: DIS = Disable the ADC module. value.
//        <1=> 1: EN = Enable the ADC module. value.
//    </combo>
//  </item>
//  


// ---------------------------------  Register RTree: ADC_CFG  ------------------------------------
// SVD Line: 84

//  <rtree> SFDITEM_REG__ADC_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010000) Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_CFG >> 0) & 0xFFFFFFFF), ((ADC_CFG = (ADC_CFG & ~(0x30F131DUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x30F131D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_CFG_CLKSEL </item>
//    <item> SFDITEM_FIELD__ADC_CFG_TRIGPOL </item>
//    <item> SFDITEM_FIELD__ADC_CFG_TRIGSEL </item>
//    <item> SFDITEM_FIELD__ADC_CFG_DFIFORDEN </item>
//    <item> SFDITEM_FIELD__ADC_CFG_REFSEL </item>
//    <item> SFDITEM_FIELD__ADC_CFG_CKMODE </item>
//    <item> SFDITEM_FIELD__ADC_CFG_LPMODE </item>
//    <item> SFDITEM_FIELD__ADC_CFG_RPTEN </item>
//    <item> SFDITEM_FIELD__ADC_CFG_ADCEN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: ADC_STAT  --------------------------------
// SVD Line: 293

unsigned int ADC_STAT __AT (0x50010004);



// ------------------------------  Field Item: ADC_STAT_PWDSTAT  ----------------------------------
// SVD Line: 303

//  <item> SFDITEM_FIELD__ADC_STAT_PWDSTAT
//    <name> PWDSTAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010004) \nIndicates the power-status of the ADC.\n0 : ON = Powered on. value.\n1 : POWERED_DOWN = ADC Low Power Mode 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_STAT ) </loc>
//      <o.0..0> PWDSTAT
//        <0=> 0: ON = Powered on. value.
//        <1=> 1: POWERED_DOWN = ADC Low Power Mode 1. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: ADC_STAT  ------------------------------------
// SVD Line: 293

//  <rtree> SFDITEM_REG__ADC_STAT
//    <name> STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010004) ADC Power Status </i>
//    <loc> ( (unsigned int)((ADC_STAT >> 0) & 0xFFFFFFFF), ((ADC_STAT = (ADC_STAT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_STAT_PWDSTAT </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: ADC_SWT  ---------------------------------
// SVD Line: 323

unsigned int ADC_SWT __AT (0x50010008);



// ---------------------------------  Field Item: ADC_SWT_SWT  ------------------------------------
// SVD Line: 333

//  <item> SFDITEM_FIELD__ADC_SWT_SWT
//    <name> SWT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50010008) Writing 0x37 to this register generates a software trigger. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ADC_SWT >> 0) & 0xFF), ((ADC_SWT = (ADC_SWT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Register RTree: ADC_SWT  ------------------------------------
// SVD Line: 323

//  <rtree> SFDITEM_REG__ADC_SWT
//    <name> SWT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010008) Software trigger </i>
//    <loc> ( (unsigned int)((ADC_SWT >> 0) & 0xFFFFFFFF), ((ADC_SWT = (ADC_SWT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SWT_SWT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL0CFG  -------------------------------
// SVD Line: 348

unsigned int ADC_SL0CFG __AT (0x5001000C);



// ------------------------------  Field Item: ADC_SL0CFG_ADSEL0  ---------------------------------
// SVD Line: 358

//  <item> SFDITEM_FIELD__ADC_SL0CFG_ADSEL0
//    <name> ADSEL0 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x5001000C) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL0CFG ) </loc>
//      <o.26..24> ADSEL0
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL0CFG_PRMODE0  ---------------------------------
// SVD Line: 406

//  <item> SFDITEM_FIELD__ADC_SL0CFG_PRMODE0
//    <name> PRMODE0 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x5001000C) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL0CFG ) </loc>
//      <o.17..16> PRMODE0
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL0CFG_CHSEL0  ---------------------------------
// SVD Line: 434

//  <item> SFDITEM_FIELD__ADC_SL0CFG_CHSEL0
//    <name> CHSEL0 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x5001000C) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL0CFG ) </loc>
//      <o.11..8> CHSEL0
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL0CFG_WCEN0  ----------------------------------
// SVD Line: 517

//  <item> SFDITEM_FIELD__ADC_SL0CFG_WCEN0
//    <name> WCEN0 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5001000C) \nThis bit enables the window compare function for slot 0.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL0CFG ) </loc>
//      <o.1..1> WCEN0
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 0. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL0CFG_SLEN0  ----------------------------------
// SVD Line: 530

//  <item> SFDITEM_FIELD__ADC_SL0CFG_SLEN0
//    <name> SLEN0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001000C) \nThis bit enables slot 0 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 0 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL0CFG ) </loc>
//      <o.0..0> SLEN0
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 0 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL0CFG  -----------------------------------
// SVD Line: 348

//  <rtree> SFDITEM_REG__ADC_SL0CFG
//    <name> SL0CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001000C) Slot 0 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL0CFG >> 0) & 0xFFFFFFFF), ((ADC_SL0CFG = (ADC_SL0CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL0CFG_ADSEL0 </item>
//    <item> SFDITEM_FIELD__ADC_SL0CFG_PRMODE0 </item>
//    <item> SFDITEM_FIELD__ADC_SL0CFG_CHSEL0 </item>
//    <item> SFDITEM_FIELD__ADC_SL0CFG_WCEN0 </item>
//    <item> SFDITEM_FIELD__ADC_SL0CFG_SLEN0 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL1CFG  -------------------------------
// SVD Line: 545

unsigned int ADC_SL1CFG __AT (0x50010010);



// ------------------------------  Field Item: ADC_SL1CFG_ADSEL1  ---------------------------------
// SVD Line: 555

//  <item> SFDITEM_FIELD__ADC_SL1CFG_ADSEL1
//    <name> ADSEL1 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010010) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL1CFG ) </loc>
//      <o.26..24> ADSEL1
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL1CFG_PRMODE1  ---------------------------------
// SVD Line: 603

//  <item> SFDITEM_FIELD__ADC_SL1CFG_PRMODE1
//    <name> PRMODE1 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010010) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL1CFG ) </loc>
//      <o.17..16> PRMODE1
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL1CFG_CHSEL1  ---------------------------------
// SVD Line: 631

//  <item> SFDITEM_FIELD__ADC_SL1CFG_CHSEL1
//    <name> CHSEL1 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010010) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL1CFG ) </loc>
//      <o.11..8> CHSEL1
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL1CFG_WCEN1  ----------------------------------
// SVD Line: 714

//  <item> SFDITEM_FIELD__ADC_SL1CFG_WCEN1
//    <name> WCEN1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010010) \nThis bit enables the window compare function for slot 1.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL1CFG ) </loc>
//      <o.1..1> WCEN1
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL1CFG_SLEN1  ----------------------------------
// SVD Line: 727

//  <item> SFDITEM_FIELD__ADC_SL1CFG_SLEN1
//    <name> SLEN1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010010) \nThis bit enables slot 1 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 1 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL1CFG ) </loc>
//      <o.0..0> SLEN1
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 1 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL1CFG  -----------------------------------
// SVD Line: 545

//  <rtree> SFDITEM_REG__ADC_SL1CFG
//    <name> SL1CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010010) Slot 1 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL1CFG >> 0) & 0xFFFFFFFF), ((ADC_SL1CFG = (ADC_SL1CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL1CFG_ADSEL1 </item>
//    <item> SFDITEM_FIELD__ADC_SL1CFG_PRMODE1 </item>
//    <item> SFDITEM_FIELD__ADC_SL1CFG_CHSEL1 </item>
//    <item> SFDITEM_FIELD__ADC_SL1CFG_WCEN1 </item>
//    <item> SFDITEM_FIELD__ADC_SL1CFG_SLEN1 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL2CFG  -------------------------------
// SVD Line: 742

unsigned int ADC_SL2CFG __AT (0x50010014);



// ------------------------------  Field Item: ADC_SL2CFG_ADSEL2  ---------------------------------
// SVD Line: 752

//  <item> SFDITEM_FIELD__ADC_SL2CFG_ADSEL2
//    <name> ADSEL2 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010014) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL2CFG ) </loc>
//      <o.26..24> ADSEL2
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL2CFG_PRMODE2  ---------------------------------
// SVD Line: 800

//  <item> SFDITEM_FIELD__ADC_SL2CFG_PRMODE2
//    <name> PRMODE2 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010014) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL2CFG ) </loc>
//      <o.17..16> PRMODE2
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL2CFG_CHSEL2  ---------------------------------
// SVD Line: 828

//  <item> SFDITEM_FIELD__ADC_SL2CFG_CHSEL2
//    <name> CHSEL2 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010014) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL2CFG ) </loc>
//      <o.11..8> CHSEL2
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL2CFG_WCEN2  ----------------------------------
// SVD Line: 911

//  <item> SFDITEM_FIELD__ADC_SL2CFG_WCEN2
//    <name> WCEN2 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010014) \nThis bit enables the window compare function for slot 2.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL2CFG ) </loc>
//      <o.1..1> WCEN2
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 2. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL2CFG_SLEN2  ----------------------------------
// SVD Line: 924

//  <item> SFDITEM_FIELD__ADC_SL2CFG_SLEN2
//    <name> SLEN2 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010014) \nThis bit enables slot 2 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 2 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL2CFG ) </loc>
//      <o.0..0> SLEN2
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 2 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL2CFG  -----------------------------------
// SVD Line: 742

//  <rtree> SFDITEM_REG__ADC_SL2CFG
//    <name> SL2CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010014) Slot 2 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL2CFG >> 0) & 0xFFFFFFFF), ((ADC_SL2CFG = (ADC_SL2CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL2CFG_ADSEL2 </item>
//    <item> SFDITEM_FIELD__ADC_SL2CFG_PRMODE2 </item>
//    <item> SFDITEM_FIELD__ADC_SL2CFG_CHSEL2 </item>
//    <item> SFDITEM_FIELD__ADC_SL2CFG_WCEN2 </item>
//    <item> SFDITEM_FIELD__ADC_SL2CFG_SLEN2 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL3CFG  -------------------------------
// SVD Line: 939

unsigned int ADC_SL3CFG __AT (0x50010018);



// ------------------------------  Field Item: ADC_SL3CFG_ADSEL3  ---------------------------------
// SVD Line: 949

//  <item> SFDITEM_FIELD__ADC_SL3CFG_ADSEL3
//    <name> ADSEL3 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010018) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL3CFG ) </loc>
//      <o.26..24> ADSEL3
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL3CFG_PRMODE3  ---------------------------------
// SVD Line: 997

//  <item> SFDITEM_FIELD__ADC_SL3CFG_PRMODE3
//    <name> PRMODE3 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010018) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL3CFG ) </loc>
//      <o.17..16> PRMODE3
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL3CFG_CHSEL3  ---------------------------------
// SVD Line: 1025

//  <item> SFDITEM_FIELD__ADC_SL3CFG_CHSEL3
//    <name> CHSEL3 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010018) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL3CFG ) </loc>
//      <o.11..8> CHSEL3
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL3CFG_WCEN3  ----------------------------------
// SVD Line: 1108

//  <item> SFDITEM_FIELD__ADC_SL3CFG_WCEN3
//    <name> WCEN3 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010018) \nThis bit enables the window compare function for slot 3.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL3CFG ) </loc>
//      <o.1..1> WCEN3
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL3CFG_SLEN3  ----------------------------------
// SVD Line: 1121

//  <item> SFDITEM_FIELD__ADC_SL3CFG_SLEN3
//    <name> SLEN3 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010018) \nThis bit enables slot 3 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 3 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL3CFG ) </loc>
//      <o.0..0> SLEN3
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 3 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL3CFG  -----------------------------------
// SVD Line: 939

//  <rtree> SFDITEM_REG__ADC_SL3CFG
//    <name> SL3CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010018) Slot 3 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL3CFG >> 0) & 0xFFFFFFFF), ((ADC_SL3CFG = (ADC_SL3CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL3CFG_ADSEL3 </item>
//    <item> SFDITEM_FIELD__ADC_SL3CFG_PRMODE3 </item>
//    <item> SFDITEM_FIELD__ADC_SL3CFG_CHSEL3 </item>
//    <item> SFDITEM_FIELD__ADC_SL3CFG_WCEN3 </item>
//    <item> SFDITEM_FIELD__ADC_SL3CFG_SLEN3 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL4CFG  -------------------------------
// SVD Line: 1136

unsigned int ADC_SL4CFG __AT (0x5001001C);



// ------------------------------  Field Item: ADC_SL4CFG_ADSEL4  ---------------------------------
// SVD Line: 1146

//  <item> SFDITEM_FIELD__ADC_SL4CFG_ADSEL4
//    <name> ADSEL4 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x5001001C) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL4CFG ) </loc>
//      <o.26..24> ADSEL4
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL4CFG_PRMODE4  ---------------------------------
// SVD Line: 1194

//  <item> SFDITEM_FIELD__ADC_SL4CFG_PRMODE4
//    <name> PRMODE4 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x5001001C) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL4CFG ) </loc>
//      <o.17..16> PRMODE4
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL4CFG_CHSEL4  ---------------------------------
// SVD Line: 1222

//  <item> SFDITEM_FIELD__ADC_SL4CFG_CHSEL4
//    <name> CHSEL4 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x5001001C) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL4CFG ) </loc>
//      <o.11..8> CHSEL4
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL4CFG_WCEN4  ----------------------------------
// SVD Line: 1305

//  <item> SFDITEM_FIELD__ADC_SL4CFG_WCEN4
//    <name> WCEN4 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5001001C) \nThis bit enables the window compare function for slot 4.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 4. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL4CFG ) </loc>
//      <o.1..1> WCEN4
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 4. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL4CFG_SLEN4  ----------------------------------
// SVD Line: 1318

//  <item> SFDITEM_FIELD__ADC_SL4CFG_SLEN4
//    <name> SLEN4 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001001C) \nThis bit enables slot 4 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 4 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL4CFG ) </loc>
//      <o.0..0> SLEN4
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 4 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL4CFG  -----------------------------------
// SVD Line: 1136

//  <rtree> SFDITEM_REG__ADC_SL4CFG
//    <name> SL4CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001001C) Slot 4 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL4CFG >> 0) & 0xFFFFFFFF), ((ADC_SL4CFG = (ADC_SL4CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL4CFG_ADSEL4 </item>
//    <item> SFDITEM_FIELD__ADC_SL4CFG_PRMODE4 </item>
//    <item> SFDITEM_FIELD__ADC_SL4CFG_CHSEL4 </item>
//    <item> SFDITEM_FIELD__ADC_SL4CFG_WCEN4 </item>
//    <item> SFDITEM_FIELD__ADC_SL4CFG_SLEN4 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL5CFG  -------------------------------
// SVD Line: 1333

unsigned int ADC_SL5CFG __AT (0x50010020);



// ------------------------------  Field Item: ADC_SL5CFG_ADSEL5  ---------------------------------
// SVD Line: 1343

//  <item> SFDITEM_FIELD__ADC_SL5CFG_ADSEL5
//    <name> ADSEL5 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010020) \nSelect number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL5CFG ) </loc>
//      <o.26..24> ADSEL5
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL5CFG_PRMODE5  ---------------------------------
// SVD Line: 1391

//  <item> SFDITEM_FIELD__ADC_SL5CFG_PRMODE5
//    <name> PRMODE5 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010020) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL5CFG ) </loc>
//      <o.17..16> PRMODE5
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL5CFG_CHSEL5  ---------------------------------
// SVD Line: 1419

//  <item> SFDITEM_FIELD__ADC_SL5CFG_CHSEL5
//    <name> CHSEL5 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010020) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL5CFG ) </loc>
//      <o.11..8> CHSEL5
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL5CFG_WCEN5  ----------------------------------
// SVD Line: 1502

//  <item> SFDITEM_FIELD__ADC_SL5CFG_WCEN5
//    <name> WCEN5 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010020) \nThis bit enables the window compare function for slot 5.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 5. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL5CFG ) </loc>
//      <o.1..1> WCEN5
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 5. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL5CFG_SLEN5  ----------------------------------
// SVD Line: 1515

//  <item> SFDITEM_FIELD__ADC_SL5CFG_SLEN5
//    <name> SLEN5 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010020) \nThis bit enables slot 5 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 5 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL5CFG ) </loc>
//      <o.0..0> SLEN5
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 5 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL5CFG  -----------------------------------
// SVD Line: 1333

//  <rtree> SFDITEM_REG__ADC_SL5CFG
//    <name> SL5CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010020) Slot 5 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL5CFG >> 0) & 0xFFFFFFFF), ((ADC_SL5CFG = (ADC_SL5CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL5CFG_ADSEL5 </item>
//    <item> SFDITEM_FIELD__ADC_SL5CFG_PRMODE5 </item>
//    <item> SFDITEM_FIELD__ADC_SL5CFG_CHSEL5 </item>
//    <item> SFDITEM_FIELD__ADC_SL5CFG_WCEN5 </item>
//    <item> SFDITEM_FIELD__ADC_SL5CFG_SLEN5 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL6CFG  -------------------------------
// SVD Line: 1530

unsigned int ADC_SL6CFG __AT (0x50010024);



// ------------------------------  Field Item: ADC_SL6CFG_ADSEL6  ---------------------------------
// SVD Line: 1540

//  <item> SFDITEM_FIELD__ADC_SL6CFG_ADSEL6
//    <name> ADSEL6 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010024) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL6CFG ) </loc>
//      <o.26..24> ADSEL6
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL6CFG_PRMODE6  ---------------------------------
// SVD Line: 1588

//  <item> SFDITEM_FIELD__ADC_SL6CFG_PRMODE6
//    <name> PRMODE6 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010024) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL6CFG ) </loc>
//      <o.17..16> PRMODE6
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL6CFG_CHSEL6  ---------------------------------
// SVD Line: 1616

//  <item> SFDITEM_FIELD__ADC_SL6CFG_CHSEL6
//    <name> CHSEL6 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010024) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL6CFG ) </loc>
//      <o.11..8> CHSEL6
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL6CFG_WCEN6  ----------------------------------
// SVD Line: 1699

//  <item> SFDITEM_FIELD__ADC_SL6CFG_WCEN6
//    <name> WCEN6 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010024) \nThis bit enables the window compare function for slot 6.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 6. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL6CFG ) </loc>
//      <o.1..1> WCEN6
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 6. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL6CFG_SLEN6  ----------------------------------
// SVD Line: 1712

//  <item> SFDITEM_FIELD__ADC_SL6CFG_SLEN6
//    <name> SLEN6 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010024) \nThis bit enables slot 6 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 6 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL6CFG ) </loc>
//      <o.0..0> SLEN6
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 6 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL6CFG  -----------------------------------
// SVD Line: 1530

//  <rtree> SFDITEM_REG__ADC_SL6CFG
//    <name> SL6CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010024) Slot 6 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL6CFG >> 0) & 0xFFFFFFFF), ((ADC_SL6CFG = (ADC_SL6CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL6CFG_ADSEL6 </item>
//    <item> SFDITEM_FIELD__ADC_SL6CFG_PRMODE6 </item>
//    <item> SFDITEM_FIELD__ADC_SL6CFG_CHSEL6 </item>
//    <item> SFDITEM_FIELD__ADC_SL6CFG_WCEN6 </item>
//    <item> SFDITEM_FIELD__ADC_SL6CFG_SLEN6 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SL7CFG  -------------------------------
// SVD Line: 1727

unsigned int ADC_SL7CFG __AT (0x50010028);



// ------------------------------  Field Item: ADC_SL7CFG_ADSEL7  ---------------------------------
// SVD Line: 1737

//  <item> SFDITEM_FIELD__ADC_SL7CFG_ADSEL7
//    <name> ADSEL7 </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50010028) \nSelect the number of measurements to average in the accumulate divide module for this slot.\n0 : AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.\n1 : AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.\n2 : AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.\n3 : AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.\n4 : AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.\n5 : AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.\n6 : AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.\n7 : AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL7CFG ) </loc>
//      <o.26..24> ADSEL7
//        <0=> 0: AVG_1_MSRMT = Average in 1 measurement in the accumulate divide module for this slot. value.
//        <1=> 1: AVG_2_MSRMTS = Average in 2 measurements in the accumulate divide module for this slot. value.
//        <2=> 2: AVG_4_MSRMTS = Average in 4 measurements in the accumulate divide module for this slot. value.
//        <3=> 3: AVG_8_MSRMT = Average in 8 measurements in the accumulate divide module for this slot. value.
//        <4=> 4: AVG_16_MSRMTS = Average in 16 measurements in the accumulate divide module for this slot. value.
//        <5=> 5: AVG_32_MSRMTS = Average in 32 measurements in the accumulate divide module for this slot. value.
//        <6=> 6: AVG_64_MSRMTS = Average in 64 measurements in the accumulate divide module for this slot. value.
//        <7=> 7: AVG_128_MSRMTS = Average in 128 measurements in the accumulate divide module for this slot. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_SL7CFG_PRMODE7  ---------------------------------
// SVD Line: 1785

//  <item> SFDITEM_FIELD__ADC_SL7CFG_PRMODE7
//    <name> PRMODE7 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50010028) \nSet the Precision Mode For Slot.\n0 : P14B = 14-bit precision mode value.\n1 : P12B = 12-bit precision mode value.\n2 : P10B = 10-bit precision mode value.\n3 : P8B = 8-bit precision mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL7CFG ) </loc>
//      <o.17..16> PRMODE7
//        <0=> 0: P14B = 14-bit precision mode value.
//        <1=> 1: P12B = 12-bit precision mode value.
//        <2=> 2: P10B = 10-bit precision mode value.
//        <3=> 3: P8B = 8-bit precision mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL7CFG_CHSEL7  ---------------------------------
// SVD Line: 1813

//  <item> SFDITEM_FIELD__ADC_SL7CFG_CHSEL7
//    <name> CHSEL7 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50010028) \nSelect one of the 14 channel inputs for this slot.\n0 : SE0 = single ended external GPIO connection to pad16. value.\n1 : SE1 = single ended external GPIO connection to pad29. value.\n2 : SE2 = single ended external GPIO connection to pad11. value.\n3 : SE3 = single ended external GPIO connection to pad31. value.\n4 : SE4 = single ended external GPIO connection to pad32. value.\n5 : SE5 = single ended external GPIO connection to pad33. value.\n6 : SE6 = single ended external GPIO connection to pad34. value.\n7 : SE7 = single ended external GPIO connection to pad35. value.\n8 : SE8 = single ended external GPIO connection to pad13. value.\n9 : SE9 = single ended external GPIO connection to pad12. value.\n10 : DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.\n11 : DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.\n12 : TEMP = internal temperature sensor. value.\n13 : BATT = internal voltage divide-by-3 connection. value.\n14 : VSS = Input VSS value.\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL7CFG ) </loc>
//      <o.11..8> CHSEL7
//        <0=> 0: SE0 = single ended external GPIO connection to pad16. value.
//        <1=> 1: SE1 = single ended external GPIO connection to pad29. value.
//        <2=> 2: SE2 = single ended external GPIO connection to pad11. value.
//        <3=> 3: SE3 = single ended external GPIO connection to pad31. value.
//        <4=> 4: SE4 = single ended external GPIO connection to pad32. value.
//        <5=> 5: SE5 = single ended external GPIO connection to pad33. value.
//        <6=> 6: SE6 = single ended external GPIO connection to pad34. value.
//        <7=> 7: SE7 = single ended external GPIO connection to pad35. value.
//        <8=> 8: SE8 = single ended external GPIO connection to pad13. value.
//        <9=> 9: SE9 = single ended external GPIO connection to pad12. value.
//        <10=> 10: DF0 = differential external GPIO connections to pad12(N) and pad13(P). value.
//        <11=> 11: DF1 = differential external GPIO connections to pad15(N) and pad14(P). value.
//        <12=> 12: TEMP = internal temperature sensor. value.
//        <13=> 13: BATT = internal voltage divide-by-3 connection. value.
//        <14=> 14: VSS = Input VSS value.
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL7CFG_WCEN7  ----------------------------------
// SVD Line: 1896

//  <item> SFDITEM_FIELD__ADC_SL7CFG_WCEN7
//    <name> WCEN7 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010028) \nThis bit enables the window compare function for slot 7.\n0 : Reserved - do not use\n1 : WCEN = Enable the window compare for slot 7. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL7CFG ) </loc>
//      <o.1..1> WCEN7
//        <0=> 0: 
//        <1=> 1: WCEN = Enable the window compare for slot 7. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_SL7CFG_SLEN7  ----------------------------------
// SVD Line: 1909

//  <item> SFDITEM_FIELD__ADC_SL7CFG_SLEN7
//    <name> SLEN7 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010028) \nThis bit enables slot 7 for ADC conversions.\n0 : Reserved - do not use\n1 : SLEN = Enable slot 7 for ADC conversions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_SL7CFG ) </loc>
//      <o.0..0> SLEN7
//        <0=> 0: 
//        <1=> 1: SLEN = Enable slot 7 for ADC conversions. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SL7CFG  -----------------------------------
// SVD Line: 1727

//  <rtree> SFDITEM_REG__ADC_SL7CFG
//    <name> SL7CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010028) Slot 7 Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_SL7CFG >> 0) & 0xFFFFFFFF), ((ADC_SL7CFG = (ADC_SL7CFG & ~(0x7030F03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7030F03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SL7CFG_ADSEL7 </item>
//    <item> SFDITEM_FIELD__ADC_SL7CFG_PRMODE7 </item>
//    <item> SFDITEM_FIELD__ADC_SL7CFG_CHSEL7 </item>
//    <item> SFDITEM_FIELD__ADC_SL7CFG_WCEN7 </item>
//    <item> SFDITEM_FIELD__ADC_SL7CFG_SLEN7 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_WULIM  --------------------------------
// SVD Line: 1924

unsigned int ADC_WULIM __AT (0x5001002C);



// -------------------------------  Field Item: ADC_WULIM_ULIM  -----------------------------------
// SVD Line: 1934

//  <item> SFDITEM_FIELD__ADC_WULIM_ULIM
//    <name> ULIM </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5001002C) Sets the upper limit for the window comparator. </i>
//    <edit> 
//      <loc> ( (unsigned int)((ADC_WULIM >> 0) & 0xFFFFF), ((ADC_WULIM = (ADC_WULIM & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: ADC_WULIM  -----------------------------------
// SVD Line: 1924

//  <rtree> SFDITEM_REG__ADC_WULIM
//    <name> WULIM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001002C) Window Comparator Upper Limits Register </i>
//    <loc> ( (unsigned int)((ADC_WULIM >> 0) & 0xFFFFFFFF), ((ADC_WULIM = (ADC_WULIM & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_WULIM_ULIM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_WLLIM  --------------------------------
// SVD Line: 1943

unsigned int ADC_WLLIM __AT (0x50010030);



// -------------------------------  Field Item: ADC_WLLIM_LLIM  -----------------------------------
// SVD Line: 1953

//  <item> SFDITEM_FIELD__ADC_WLLIM_LLIM
//    <name> LLIM </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x50010030) Sets the lower limit for the window comparator. </i>
//    <edit> 
//      <loc> ( (unsigned int)((ADC_WLLIM >> 0) & 0xFFFFF), ((ADC_WLLIM = (ADC_WLLIM & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: ADC_WLLIM  -----------------------------------
// SVD Line: 1943

//  <rtree> SFDITEM_REG__ADC_WLLIM
//    <name> WLLIM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010030) Window Comparator Lower Limits Register </i>
//    <loc> ( (unsigned int)((ADC_WLLIM >> 0) & 0xFFFFFFFF), ((ADC_WLLIM = (ADC_WLLIM & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_WLLIM_LLIM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_SCWLIM  -------------------------------
// SVD Line: 1962

unsigned int ADC_SCWLIM __AT (0x50010034);



// -----------------------------  Field Item: ADC_SCWLIM_SCWLIMEN  --------------------------------
// SVD Line: 1972

//  <item> SFDITEM_FIELD__ADC_SCWLIM_SCWLIMEN
//    <name> SCWLIMEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010034) Scale the window limits compare values per precision mode. When set to 0x0 (default), the values in the 20-bit limits registers will compare directly with the FIFO values regardless of the precision mode the slot is configured to. When set to 0x1, the compare values will be divided by the difference in precision bits while performing the window limit comparisons. </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_SCWLIM ) </loc>
//      <o.0..0> SCWLIMEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: ADC_SCWLIM  -----------------------------------
// SVD Line: 1962

//  <rtree> SFDITEM_REG__ADC_SCWLIM
//    <name> SCWLIM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010034) Scale Window Comparator Limits </i>
//    <loc> ( (unsigned int)((ADC_SCWLIM >> 0) & 0xFFFFFFFF), ((ADC_SCWLIM = (ADC_SCWLIM & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_SCWLIM_SCWLIMEN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: ADC_FIFO  --------------------------------
// SVD Line: 1981

unsigned int ADC_FIFO __AT (0x50010038);



// --------------------------------  Field Item: ADC_FIFO_RSVD  -----------------------------------
// SVD Line: 1991

//  <item> SFDITEM_FIELD__ADC_FIFO_RSVD
//    <name> RSVD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50010038) RESERVED. </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_FIFO ) </loc>
//      <o.31..31> RSVD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ADC_FIFO_SLOTNUM  ----------------------------------
// SVD Line: 1998

//  <item> SFDITEM_FIELD__ADC_FIFO_SLOTNUM
//    <name> SLOTNUM </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x50010038) Slot number associated with this FIFO data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ADC_FIFO >> 28) & 0x7), ((ADC_FIFO = (ADC_FIFO & ~(0x7UL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: ADC_FIFO_COUNT  -----------------------------------
// SVD Line: 2005

//  <item> SFDITEM_FIELD__ADC_FIFO_COUNT
//    <name> COUNT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x50010038) Number of valid entries in the ADC FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ADC_FIFO >> 20) & 0xFF), ((ADC_FIFO = (ADC_FIFO & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: ADC_FIFO_DATA  -----------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__ADC_FIFO_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x50010038) Oldest data in the FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned int)((ADC_FIFO >> 0) & 0xFFFFF), ((ADC_FIFO = (ADC_FIFO & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: ADC_FIFO  ------------------------------------
// SVD Line: 1981

//  <rtree> SFDITEM_REG__ADC_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010038) FIFO Data and Valid Count Register </i>
//    <loc> ( (unsigned int)((ADC_FIFO >> 0) & 0xFFFFFFFF), ((ADC_FIFO = (ADC_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_FIFO_RSVD </item>
//    <item> SFDITEM_FIELD__ADC_FIFO_SLOTNUM </item>
//    <item> SFDITEM_FIELD__ADC_FIFO_COUNT </item>
//    <item> SFDITEM_FIELD__ADC_FIFO_DATA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_FIFOPR  -------------------------------
// SVD Line: 2021

unsigned int ADC_FIFOPR __AT (0x5001003C);



// ------------------------------  Field Item: ADC_FIFOPR_RSVDPR  ---------------------------------
// SVD Line: 2031

//  <item> SFDITEM_FIELD__ADC_FIFOPR_RSVDPR
//    <name> RSVDPR </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x5001003C) RESERVED. </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_FIFOPR ) </loc>
//      <o.31..31> RSVDPR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ADC_FIFOPR_SLOTNUMPR  --------------------------------
// SVD Line: 2038

//  <item> SFDITEM_FIELD__ADC_FIFOPR_SLOTNUMPR
//    <name> SLOTNUMPR </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x5001003C) Slot number associated with this FIFO data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ADC_FIFOPR >> 28) & 0x7), ((ADC_FIFOPR = (ADC_FIFOPR & ~(0x7UL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: ADC_FIFOPR_COUNT  ----------------------------------
// SVD Line: 2045

//  <item> SFDITEM_FIELD__ADC_FIFOPR_COUNT
//    <name> COUNT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x5001003C) Number of valid entries in the ADC FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ADC_FIFOPR >> 20) & 0xFF), ((ADC_FIFOPR = (ADC_FIFOPR & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: ADC_FIFOPR_DATA  ----------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__ADC_FIFOPR_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5001003C) Oldest data in the FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned int)((ADC_FIFOPR >> 0) & 0xFFFFF), ((ADC_FIFOPR = (ADC_FIFOPR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: ADC_FIFOPR  -----------------------------------
// SVD Line: 2021

//  <rtree> SFDITEM_REG__ADC_FIFOPR
//    <name> FIFOPR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001003C) FIFO Data and Valid Count Register </i>
//    <loc> ( (unsigned int)((ADC_FIFOPR >> 0) & 0xFFFFFFFF), ((ADC_FIFOPR = (ADC_FIFOPR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_FIFOPR_RSVDPR </item>
//    <item> SFDITEM_FIELD__ADC_FIFOPR_SLOTNUMPR </item>
//    <item> SFDITEM_FIELD__ADC_FIFOPR_COUNT </item>
//    <item> SFDITEM_FIELD__ADC_FIFOPR_DATA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_INTEN  --------------------------------
// SVD Line: 2061

unsigned int ADC_INTEN __AT (0x50010200);



// -------------------------------  Field Item: ADC_INTEN_DERR  -----------------------------------
// SVD Line: 2071

//  <item> SFDITEM_FIELD__ADC_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50010200) \nDMA Error Condition\n0 : Reserved - do not use\n1 : DMAERROR = DMA Error Condition Occurred value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.7..7> DERR
//        <0=> 0: 
//        <1=> 1: DMAERROR = DMA Error Condition Occurred value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_INTEN_DCMP  -----------------------------------
// SVD Line: 2084

//  <item> SFDITEM_FIELD__ADC_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50010200) \nDMA Transfer Complete\n0 : Reserved - do not use\n1 : DMACOMPLETE = DMA Completed a transfer value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.6..6> DCMP
//        <0=> 0: 
//        <1=> 1: DMACOMPLETE = DMA Completed a transfer value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_INTEN_WCINC  ----------------------------------
// SVD Line: 2097

//  <item> SFDITEM_FIELD__ADC_INTEN_WCINC
//    <name> WCINC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50010200) \nWindow comparator voltage incursion interrupt.\n0 : Reserved - do not use\n1 : WCINCINT = Window comparitor voltage incursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.5..5> WCINC
//        <0=> 0: 
//        <1=> 1: WCINCINT = Window comparitor voltage incursion interrupt. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_INTEN_WCEXC  ----------------------------------
// SVD Line: 2110

//  <item> SFDITEM_FIELD__ADC_INTEN_WCEXC
//    <name> WCEXC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50010200) \nWindow comparator voltage excursion interrupt.\n0 : Reserved - do not use\n1 : WCEXCINT = Window comparitor voltage excursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.4..4> WCEXC
//        <0=> 0: 
//        <1=> 1: WCEXCINT = Window comparitor voltage excursion interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTEN_FIFOOVR2  ---------------------------------
// SVD Line: 2123

//  <item> SFDITEM_FIELD__ADC_INTEN_FIFOOVR2
//    <name> FIFOOVR2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50010200) \nFIFO 100 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFOFULLINT = FIFO 100 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.3..3> FIFOOVR2
//        <0=> 0: 
//        <1=> 1: FIFOFULLINT = FIFO 100 percent full interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTEN_FIFOOVR1  ---------------------------------
// SVD Line: 2136

//  <item> SFDITEM_FIELD__ADC_INTEN_FIFOOVR1
//    <name> FIFOOVR1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010200) \nFIFO 75 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFO75INT = FIFO 75 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.2..2> FIFOOVR1
//        <0=> 0: 
//        <1=> 1: FIFO75INT = FIFO 75 percent full interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTEN_SCNCMP  ----------------------------------
// SVD Line: 2149

//  <item> SFDITEM_FIELD__ADC_INTEN_SCNCMP
//    <name> SCNCMP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010200) \nADC scan complete interrupt.\n0 : Reserved - do not use\n1 : SCNCMPINT = ADC scan complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.1..1> SCNCMP
//        <0=> 0: 
//        <1=> 1: SCNCMPINT = ADC scan complete interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTEN_CNVCMP  ----------------------------------
// SVD Line: 2162

//  <item> SFDITEM_FIELD__ADC_INTEN_CNVCMP
//    <name> CNVCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010200) \nADC conversion complete interrupt.\n0 : Reserved - do not use\n1 : CNVCMPINT = ADC conversion complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTEN ) </loc>
//      <o.0..0> CNVCMP
//        <0=> 0: 
//        <1=> 1: CNVCMPINT = ADC conversion complete interrupt. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: ADC_INTEN  -----------------------------------
// SVD Line: 2061

//  <rtree> SFDITEM_REG__ADC_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010200) ADC Interrupt registers: Enable </i>
//    <loc> ( (unsigned int)((ADC_INTEN >> 0) & 0xFFFFFFFF), ((ADC_INTEN = (ADC_INTEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_WCINC </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_WCEXC </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_FIFOOVR2 </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_FIFOOVR1 </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_SCNCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTEN_CNVCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ADC_INTSTAT  -------------------------------
// SVD Line: 2177

unsigned int ADC_INTSTAT __AT (0x50010204);



// ------------------------------  Field Item: ADC_INTSTAT_DERR  ----------------------------------
// SVD Line: 2187

//  <item> SFDITEM_FIELD__ADC_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50010204) \nDMA Error Condition\n0 : Reserved - do not use\n1 : DMAERROR = DMA Error Condition Occurred value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.7..7> DERR
//        <0=> 0: 
//        <1=> 1: DMAERROR = DMA Error Condition Occurred value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSTAT_DCMP  ----------------------------------
// SVD Line: 2200

//  <item> SFDITEM_FIELD__ADC_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50010204) \nDMA Transfer Complete\n0 : Reserved - do not use\n1 : DMACOMPLETE = DMA Completed a transfer value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.6..6> DCMP
//        <0=> 0: 
//        <1=> 1: DMACOMPLETE = DMA Completed a transfer value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSTAT_WCINC  ---------------------------------
// SVD Line: 2213

//  <item> SFDITEM_FIELD__ADC_INTSTAT_WCINC
//    <name> WCINC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50010204) \nWindow comparator voltage incursion interrupt.\n0 : Reserved - do not use\n1 : WCINCINT = Window comparitor voltage incursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.5..5> WCINC
//        <0=> 0: 
//        <1=> 1: WCINCINT = Window comparitor voltage incursion interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSTAT_WCEXC  ---------------------------------
// SVD Line: 2226

//  <item> SFDITEM_FIELD__ADC_INTSTAT_WCEXC
//    <name> WCEXC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50010204) \nWindow comparator voltage excursion interrupt.\n0 : Reserved - do not use\n1 : WCEXCINT = Window comparitor voltage excursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.4..4> WCEXC
//        <0=> 0: 
//        <1=> 1: WCEXCINT = Window comparitor voltage excursion interrupt. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ADC_INTSTAT_FIFOOVR2  --------------------------------
// SVD Line: 2239

//  <item> SFDITEM_FIELD__ADC_INTSTAT_FIFOOVR2
//    <name> FIFOOVR2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50010204) \nFIFO 100 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFOFULLINT = FIFO 100 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.3..3> FIFOOVR2
//        <0=> 0: 
//        <1=> 1: FIFOFULLINT = FIFO 100 percent full interrupt. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ADC_INTSTAT_FIFOOVR1  --------------------------------
// SVD Line: 2252

//  <item> SFDITEM_FIELD__ADC_INTSTAT_FIFOOVR1
//    <name> FIFOOVR1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010204) \nFIFO 75 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFO75INT = FIFO 75 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.2..2> FIFOOVR1
//        <0=> 0: 
//        <1=> 1: FIFO75INT = FIFO 75 percent full interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTSTAT_SCNCMP  ---------------------------------
// SVD Line: 2265

//  <item> SFDITEM_FIELD__ADC_INTSTAT_SCNCMP
//    <name> SCNCMP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010204) \nADC scan complete interrupt.\n0 : Reserved - do not use\n1 : SCNCMPINT = ADC scan complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.1..1> SCNCMP
//        <0=> 0: 
//        <1=> 1: SCNCMPINT = ADC scan complete interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTSTAT_CNVCMP  ---------------------------------
// SVD Line: 2278

//  <item> SFDITEM_FIELD__ADC_INTSTAT_CNVCMP
//    <name> CNVCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010204) \nADC conversion complete interrupt.\n0 : Reserved - do not use\n1 : CNVCMPINT = ADC conversion complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSTAT ) </loc>
//      <o.0..0> CNVCMP
//        <0=> 0: 
//        <1=> 1: CNVCMPINT = ADC conversion complete interrupt. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_INTSTAT  ----------------------------------
// SVD Line: 2177

//  <rtree> SFDITEM_REG__ADC_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010204) ADC Interrupt registers: Status </i>
//    <loc> ( (unsigned int)((ADC_INTSTAT >> 0) & 0xFFFFFFFF), ((ADC_INTSTAT = (ADC_INTSTAT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_WCINC </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_WCEXC </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_FIFOOVR2 </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_FIFOOVR1 </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_SCNCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTSTAT_CNVCMP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_INTCLR  -------------------------------
// SVD Line: 2293

unsigned int ADC_INTCLR __AT (0x50010208);



// -------------------------------  Field Item: ADC_INTCLR_DERR  ----------------------------------
// SVD Line: 2303

//  <item> SFDITEM_FIELD__ADC_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50010208) \nDMA Error Condition\n0 : Reserved - do not use\n1 : DMAERROR = DMA Error Condition Occurred value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.7..7> DERR
//        <0=> 0: 
//        <1=> 1: DMAERROR = DMA Error Condition Occurred value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_INTCLR_DCMP  ----------------------------------
// SVD Line: 2316

//  <item> SFDITEM_FIELD__ADC_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50010208) \nDMA Transfer Complete\n0 : Reserved - do not use\n1 : DMACOMPLETE = DMA Completed a transfer value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.6..6> DCMP
//        <0=> 0: 
//        <1=> 1: DMACOMPLETE = DMA Completed a transfer value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTCLR_WCINC  ----------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__ADC_INTCLR_WCINC
//    <name> WCINC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50010208) \nWindow comparator voltage incursion interrupt.\n0 : Reserved - do not use\n1 : WCINCINT = Window comparitor voltage incursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.5..5> WCINC
//        <0=> 0: 
//        <1=> 1: WCINCINT = Window comparitor voltage incursion interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTCLR_WCEXC  ----------------------------------
// SVD Line: 2342

//  <item> SFDITEM_FIELD__ADC_INTCLR_WCEXC
//    <name> WCEXC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50010208) \nWindow comparator voltage excursion interrupt.\n0 : Reserved - do not use\n1 : WCEXCINT = Window comparitor voltage excursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.4..4> WCEXC
//        <0=> 0: 
//        <1=> 1: WCEXCINT = Window comparitor voltage excursion interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTCLR_FIFOOVR2  --------------------------------
// SVD Line: 2355

//  <item> SFDITEM_FIELD__ADC_INTCLR_FIFOOVR2
//    <name> FIFOOVR2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50010208) \nFIFO 100 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFOFULLINT = FIFO 100 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.3..3> FIFOOVR2
//        <0=> 0: 
//        <1=> 1: FIFOFULLINT = FIFO 100 percent full interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTCLR_FIFOOVR1  --------------------------------
// SVD Line: 2368

//  <item> SFDITEM_FIELD__ADC_INTCLR_FIFOOVR1
//    <name> FIFOOVR1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010208) \nFIFO 75 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFO75INT = FIFO 75 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.2..2> FIFOOVR1
//        <0=> 0: 
//        <1=> 1: FIFO75INT = FIFO 75 percent full interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTCLR_SCNCMP  ---------------------------------
// SVD Line: 2381

//  <item> SFDITEM_FIELD__ADC_INTCLR_SCNCMP
//    <name> SCNCMP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010208) \nADC scan complete interrupt.\n0 : Reserved - do not use\n1 : SCNCMPINT = ADC scan complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.1..1> SCNCMP
//        <0=> 0: 
//        <1=> 1: SCNCMPINT = ADC scan complete interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTCLR_CNVCMP  ---------------------------------
// SVD Line: 2394

//  <item> SFDITEM_FIELD__ADC_INTCLR_CNVCMP
//    <name> CNVCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010208) \nADC conversion complete interrupt.\n0 : Reserved - do not use\n1 : CNVCMPINT = ADC conversion complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTCLR ) </loc>
//      <o.0..0> CNVCMP
//        <0=> 0: 
//        <1=> 1: CNVCMPINT = ADC conversion complete interrupt. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_INTCLR  -----------------------------------
// SVD Line: 2293

//  <rtree> SFDITEM_REG__ADC_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010208) ADC Interrupt registers: Clear </i>
//    <loc> ( (unsigned int)((ADC_INTCLR >> 0) & 0xFFFFFFFF), ((ADC_INTCLR = (ADC_INTCLR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_WCINC </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_WCEXC </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_FIFOOVR2 </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_FIFOOVR1 </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_SCNCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTCLR_CNVCMP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_INTSET  -------------------------------
// SVD Line: 2409

unsigned int ADC_INTSET __AT (0x5001020C);



// -------------------------------  Field Item: ADC_INTSET_DERR  ----------------------------------
// SVD Line: 2419

//  <item> SFDITEM_FIELD__ADC_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5001020C) \nDMA Error Condition\n0 : Reserved - do not use\n1 : DMAERROR = DMA Error Condition Occurred value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.7..7> DERR
//        <0=> 0: 
//        <1=> 1: DMAERROR = DMA Error Condition Occurred value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: ADC_INTSET_DCMP  ----------------------------------
// SVD Line: 2432

//  <item> SFDITEM_FIELD__ADC_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5001020C) \nDMA Transfer Complete\n0 : Reserved - do not use\n1 : DMACOMPLETE = DMA Completed a transfer value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.6..6> DCMP
//        <0=> 0: 
//        <1=> 1: DMACOMPLETE = DMA Completed a transfer value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSET_WCINC  ----------------------------------
// SVD Line: 2445

//  <item> SFDITEM_FIELD__ADC_INTSET_WCINC
//    <name> WCINC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5001020C) \nWindow comparator voltage incursion interrupt.\n0 : Reserved - do not use\n1 : WCINCINT = Window comparitor voltage incursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.5..5> WCINC
//        <0=> 0: 
//        <1=> 1: WCINCINT = Window comparitor voltage incursion interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSET_WCEXC  ----------------------------------
// SVD Line: 2458

//  <item> SFDITEM_FIELD__ADC_INTSET_WCEXC
//    <name> WCEXC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5001020C) \nWindow comparator voltage excursion interrupt.\n0 : Reserved - do not use\n1 : WCEXCINT = Window comparitor voltage excursion interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.4..4> WCEXC
//        <0=> 0: 
//        <1=> 1: WCEXCINT = Window comparitor voltage excursion interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTSET_FIFOOVR2  --------------------------------
// SVD Line: 2471

//  <item> SFDITEM_FIELD__ADC_INTSET_FIFOOVR2
//    <name> FIFOOVR2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5001020C) \nFIFO 100 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFOFULLINT = FIFO 100 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.3..3> FIFOOVR2
//        <0=> 0: 
//        <1=> 1: FIFOFULLINT = FIFO 100 percent full interrupt. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: ADC_INTSET_FIFOOVR1  --------------------------------
// SVD Line: 2484

//  <item> SFDITEM_FIELD__ADC_INTSET_FIFOOVR1
//    <name> FIFOOVR1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5001020C) \nFIFO 75 percent full interrupt.\n0 : Reserved - do not use\n1 : FIFO75INT = FIFO 75 percent full interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.2..2> FIFOOVR1
//        <0=> 0: 
//        <1=> 1: FIFO75INT = FIFO 75 percent full interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSET_SCNCMP  ---------------------------------
// SVD Line: 2497

//  <item> SFDITEM_FIELD__ADC_INTSET_SCNCMP
//    <name> SCNCMP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5001020C) \nADC scan complete interrupt.\n0 : Reserved - do not use\n1 : SCNCMPINT = ADC scan complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.1..1> SCNCMP
//        <0=> 0: 
//        <1=> 1: SCNCMPINT = ADC scan complete interrupt. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_INTSET_CNVCMP  ---------------------------------
// SVD Line: 2510

//  <item> SFDITEM_FIELD__ADC_INTSET_CNVCMP
//    <name> CNVCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001020C) \nADC conversion complete interrupt.\n0 : Reserved - do not use\n1 : CNVCMPINT = ADC conversion complete interrupt. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_INTSET ) </loc>
//      <o.0..0> CNVCMP
//        <0=> 0: 
//        <1=> 1: CNVCMPINT = ADC conversion complete interrupt. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_INTSET  -----------------------------------
// SVD Line: 2409

//  <rtree> SFDITEM_REG__ADC_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001020C) ADC Interrupt registers: Set </i>
//    <loc> ( (unsigned int)((ADC_INTSET >> 0) & 0xFFFFFFFF), ((ADC_INTSET = (ADC_INTSET & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_WCINC </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_WCEXC </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_FIFOOVR2 </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_FIFOOVR1 </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_SCNCMP </item>
//    <item> SFDITEM_FIELD__ADC_INTSET_CNVCMP </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ADC_DMATRIGEN  ------------------------------
// SVD Line: 2525

unsigned int ADC_DMATRIGEN __AT (0x50010240);



// ---------------------------  Field Item: ADC_DMATRIGEN_DFIFOFULL  ------------------------------
// SVD Line: 2535

//  <item> SFDITEM_FIELD__ADC_DMATRIGEN_DFIFOFULL
//    <name> DFIFOFULL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010240) Trigger DMA upon FIFO 100 percent Full </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMATRIGEN ) </loc>
//      <o.1..1> DFIFOFULL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ADC_DMATRIGEN_DFIFO75  -------------------------------
// SVD Line: 2542

//  <item> SFDITEM_FIELD__ADC_DMATRIGEN_DFIFO75
//    <name> DFIFO75 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010240) Trigger DMA upon FIFO 75 percent Full </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMATRIGEN ) </loc>
//      <o.0..0> DFIFO75
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ADC_DMATRIGEN  ---------------------------------
// SVD Line: 2525

//  <rtree> SFDITEM_REG__ADC_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((ADC_DMATRIGEN >> 0) & 0xFFFFFFFF), ((ADC_DMATRIGEN = (ADC_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMATRIGEN_DFIFOFULL </item>
//    <item> SFDITEM_FIELD__ADC_DMATRIGEN_DFIFO75 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ADC_DMATRIGSTAT  -----------------------------
// SVD Line: 2551

unsigned int ADC_DMATRIGSTAT __AT (0x50010244);



// --------------------------  Field Item: ADC_DMATRIGSTAT_DFULLSTAT  -----------------------------
// SVD Line: 2561

//  <item> SFDITEM_FIELD__ADC_DMATRIGSTAT_DFULLSTAT
//    <name> DFULLSTAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010244) Triggered DMA from FIFO 100 percent Full </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMATRIGSTAT ) </loc>
//      <o.1..1> DFULLSTAT
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ADC_DMATRIGSTAT_D75STAT  ------------------------------
// SVD Line: 2568

//  <item> SFDITEM_FIELD__ADC_DMATRIGSTAT_D75STAT
//    <name> D75STAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010244) Triggered DMA from FIFO 75 percent Full </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMATRIGSTAT ) </loc>
//      <o.0..0> D75STAT
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ADC_DMATRIGSTAT  --------------------------------
// SVD Line: 2551

//  <rtree> SFDITEM_REG__ADC_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((ADC_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((ADC_DMATRIGSTAT = (ADC_DMATRIGSTAT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMATRIGSTAT_DFULLSTAT </item>
//    <item> SFDITEM_FIELD__ADC_DMATRIGSTAT_D75STAT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: ADC_DMACFG  -------------------------------
// SVD Line: 2577

unsigned int ADC_DMACFG __AT (0x50010280);



// -----------------------------  Field Item: ADC_DMACFG_DPWROFF  ---------------------------------
// SVD Line: 2587

//  <item> SFDITEM_FIELD__ADC_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50010280) Power Off the ADC System upon DMACPL. </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.18..18> DPWROFF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ADC_DMACFG_DMAMSK  ---------------------------------
// SVD Line: 2594

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMAMSK
//    <name> DMAMSK </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50010280) \nMask the FIFOCNT and SLOTNUM when transferring FIFO contents to memory\n0 : DIS = FIFO Contents are copied directly to memory without modification. value.\n1 : EN = Only the FIFODATA contents are copied to memory on DMA transfers. The SLOTNUM and FIFOCNT contents are cleared to zero. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.17..17> DMAMSK
//        <0=> 0: DIS = FIFO Contents are copied directly to memory without modification. value.
//        <1=> 1: EN = Only the FIFODATA contents are copied to memory on DMA transfers. The SLOTNUM and FIFOCNT contents are cleared to zero. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ADC_DMACFG_DMAHONSTAT  -------------------------------
// SVD Line: 2612

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMAHONSTAT
//    <name> DMAHONSTAT </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50010280) \nHalt New ADC conversions until DMA Status DMAERR and DMACPL Cleared.\n0 : DIS = ADC conversions will continue regardless of DMA status register value.\n1 : EN = ADC conversions will not progress if DMAERR or DMACPL bits in DMA status register are set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.16..16> DMAHONSTAT
//        <0=> 0: DIS = ADC conversions will continue regardless of DMA status register value.
//        <1=> 1: EN = ADC conversions will not progress if DMAERR or DMACPL bits in DMA status register are set. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ADC_DMACFG_DMADYNPRI  --------------------------------
// SVD Line: 2630

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMADYNPRI
//    <name> DMADYNPRI </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50010280) \nEnables dynamic priority based on FIFO fullness. When FIFO is full, priority is automatically set to HIGH. Otherwise, DMAPRI is used.\n0 : DIS = Disable dynamic priority (use DMAPRI setting only) value.\n1 : EN = Enable dynamic priority value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.9..9> DMADYNPRI
//        <0=> 0: DIS = Disable dynamic priority (use DMAPRI setting only) value.
//        <1=> 1: EN = Enable dynamic priority value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 2648

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50010280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_DMACFG_DMADIR  ---------------------------------
// SVD Line: 2666

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction value.\n1 : M2P = Memory to Peripheral transaction value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.2..2> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction value.
//        <1=> 1: M2P = Memory to Peripheral transaction value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: ADC_DMACFG_DMAEN  ----------------------------------
// SVD Line: 2684

//  <item> SFDITEM_FIELD__ADC_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010280) \nDMA Enable\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) ADC_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: ADC_DMACFG  -----------------------------------
// SVD Line: 2577

//  <rtree> SFDITEM_REG__ADC_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((ADC_DMACFG >> 0) & 0xFFFFFFFF), ((ADC_DMACFG = (ADC_DMACFG & ~(0x70305UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x70305) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMAMSK </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMAHONSTAT </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMADYNPRI </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__ADC_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ADC_DMATOTCOUNT  -----------------------------
// SVD Line: 2704

unsigned int ADC_DMATOTCOUNT __AT (0x50010288);



// --------------------------  Field Item: ADC_DMATOTCOUNT_TOTCOUNT  ------------------------------
// SVD Line: 2714

//  <item> SFDITEM_FIELD__ADC_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 17..2] RW (@ 0x50010288) Total Transfer Count </i>
//    <edit> 
//      <loc> ( (unsigned short)((ADC_DMATOTCOUNT >> 2) & 0xFFFF), ((ADC_DMATOTCOUNT = (ADC_DMATOTCOUNT & ~(0xFFFFUL << 2 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ADC_DMATOTCOUNT  --------------------------------
// SVD Line: 2704

//  <rtree> SFDITEM_REG__ADC_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((ADC_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((ADC_DMATOTCOUNT = (ADC_DMATOTCOUNT & ~(0x3FFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ADC_DMATARGADDR  -----------------------------
// SVD Line: 2723

unsigned int ADC_DMATARGADDR __AT (0x5001028C);



// --------------------------  Field Item: ADC_DMATARGADDR_UTARGADDR  -----------------------------
// SVD Line: 2733

//  <item> SFDITEM_FIELD__ADC_DMATARGADDR_UTARGADDR
//    <name> UTARGADDR </name>
//    <rw> 
//    <i> [Bits 31..19] RW (@ 0x5001028C) SRAM Target </i>
//    <edit> 
//      <loc> ( (unsigned short)((ADC_DMATARGADDR >> 19) & 0x1FFF), ((ADC_DMATARGADDR = (ADC_DMATARGADDR & ~(0x1FFFUL << 19 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 19 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: ADC_DMATARGADDR_LTARGADDR  -----------------------------
// SVD Line: 2740

//  <item> SFDITEM_FIELD__ADC_DMATARGADDR_LTARGADDR
//    <name> LTARGADDR </name>
//    <rw> 
//    <i> [Bits 18..0] RW (@ 0x5001028C) DMA Target Address </i>
//    <edit> 
//      <loc> ( (unsigned int)((ADC_DMATARGADDR >> 0) & 0x7FFFF), ((ADC_DMATARGADDR = (ADC_DMATARGADDR & ~(0x7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ADC_DMATARGADDR  --------------------------------
// SVD Line: 2723

//  <rtree> SFDITEM_REG__ADC_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001028C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((ADC_DMATARGADDR >> 0) & 0xFFFFFFFF), ((ADC_DMATARGADDR = (ADC_DMATARGADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMATARGADDR_UTARGADDR </item>
//    <item> SFDITEM_FIELD__ADC_DMATARGADDR_LTARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ADC_DMASTAT  -------------------------------
// SVD Line: 2749

unsigned int ADC_DMASTAT __AT (0x50010290);



// -----------------------------  Field Item: ADC_DMASTAT_DMAERR  ---------------------------------
// SVD Line: 2759

//  <item> SFDITEM_FIELD__ADC_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50010290) DMA Error </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ADC_DMASTAT_DMACPL  ---------------------------------
// SVD Line: 2766

//  <item> SFDITEM_FIELD__ADC_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50010290) DMA Transfer Complete </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ADC_DMASTAT_DMATIP  ---------------------------------
// SVD Line: 2773

//  <item> SFDITEM_FIELD__ADC_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50010290) DMA Transfer In Progress </i>
//    <check> 
//      <loc> ( (unsigned int) ADC_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: ADC_DMASTAT  ----------------------------------
// SVD Line: 2749

//  <rtree> SFDITEM_REG__ADC_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50010290) DMA Status Register </i>
//    <loc> ( (unsigned int)((ADC_DMASTAT >> 0) & 0xFFFFFFFF), ((ADC_DMASTAT = (ADC_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ADC_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__ADC_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__ADC_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: ADC  --------------------------------------
// SVD Line: 65

//  <view> ADC
//    <name> ADC </name>
//    <item> SFDITEM_REG__ADC_CFG </item>
//    <item> SFDITEM_REG__ADC_STAT </item>
//    <item> SFDITEM_REG__ADC_SWT </item>
//    <item> SFDITEM_REG__ADC_SL0CFG </item>
//    <item> SFDITEM_REG__ADC_SL1CFG </item>
//    <item> SFDITEM_REG__ADC_SL2CFG </item>
//    <item> SFDITEM_REG__ADC_SL3CFG </item>
//    <item> SFDITEM_REG__ADC_SL4CFG </item>
//    <item> SFDITEM_REG__ADC_SL5CFG </item>
//    <item> SFDITEM_REG__ADC_SL6CFG </item>
//    <item> SFDITEM_REG__ADC_SL7CFG </item>
//    <item> SFDITEM_REG__ADC_WULIM </item>
//    <item> SFDITEM_REG__ADC_WLLIM </item>
//    <item> SFDITEM_REG__ADC_SCWLIM </item>
//    <item> SFDITEM_REG__ADC_FIFO </item>
//    <item> SFDITEM_REG__ADC_FIFOPR </item>
//    <item> SFDITEM_REG__ADC_INTEN </item>
//    <item> SFDITEM_REG__ADC_INTSTAT </item>
//    <item> SFDITEM_REG__ADC_INTCLR </item>
//    <item> SFDITEM_REG__ADC_INTSET </item>
//    <item> SFDITEM_REG__ADC_DMATRIGEN </item>
//    <item> SFDITEM_REG__ADC_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__ADC_DMACFG </item>
//    <item> SFDITEM_REG__ADC_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__ADC_DMATARGADDR </item>
//    <item> SFDITEM_REG__ADC_DMASTAT </item>
//  </view>
//  


// --------------------------  Register Item Address: APBDMA_BBVALUE  -----------------------------
// SVD Line: 2801

unsigned int APBDMA_BBVALUE __AT (0x40011000);



// -----------------------------  Field Item: APBDMA_BBVALUE_PIN  ---------------------------------
// SVD Line: 2811

//  <item> SFDITEM_FIELD__APBDMA_BBVALUE_PIN
//    <name> PIN </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40011000) PIO values </i>
//    <edit> 
//      <loc> ( (unsigned char)((APBDMA_BBVALUE >> 16) & 0xFF), ((APBDMA_BBVALUE = (APBDMA_BBVALUE & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: APBDMA_BBVALUE_DATAOUT  -------------------------------
// SVD Line: 2818

//  <item> SFDITEM_FIELD__APBDMA_BBVALUE_DATAOUT
//    <name> DATAOUT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40011000) Data Output Values </i>
//    <edit> 
//      <loc> ( (unsigned char)((APBDMA_BBVALUE >> 0) & 0xFF), ((APBDMA_BBVALUE = (APBDMA_BBVALUE & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: APBDMA_BBVALUE  ---------------------------------
// SVD Line: 2801

//  <rtree> SFDITEM_REG__APBDMA_BBVALUE
//    <name> BBVALUE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011000) Control Register </i>
//    <loc> ( (unsigned int)((APBDMA_BBVALUE >> 0) & 0xFFFFFFFF), ((APBDMA_BBVALUE = (APBDMA_BBVALUE & ~(0xFF00FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF00FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__APBDMA_BBVALUE_PIN </item>
//    <item> SFDITEM_FIELD__APBDMA_BBVALUE_DATAOUT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: APBDMA_BBSETCLEAR  ----------------------------
// SVD Line: 2827

unsigned int APBDMA_BBSETCLEAR __AT (0x40011004);



// ---------------------------  Field Item: APBDMA_BBSETCLEAR_CLEAR  ------------------------------
// SVD Line: 2837

//  <item> SFDITEM_FIELD__APBDMA_BBSETCLEAR_CLEAR
//    <name> CLEAR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40011004) Write 1 to Clear PIO value </i>
//    <edit> 
//      <loc> ( (unsigned char)((APBDMA_BBSETCLEAR >> 16) & 0xFF), ((APBDMA_BBSETCLEAR = (APBDMA_BBSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: APBDMA_BBSETCLEAR_SET  -------------------------------
// SVD Line: 2844

//  <item> SFDITEM_FIELD__APBDMA_BBSETCLEAR_SET
//    <name> SET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40011004) Write 1 to Set PIO value (set hier priority than clear if both bit set) </i>
//    <edit> 
//      <loc> ( (unsigned char)((APBDMA_BBSETCLEAR >> 0) & 0xFF), ((APBDMA_BBSETCLEAR = (APBDMA_BBSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: APBDMA_BBSETCLEAR  -------------------------------
// SVD Line: 2827

//  <rtree> SFDITEM_REG__APBDMA_BBSETCLEAR
//    <name> BBSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011004) Set/Clear Register </i>
//    <loc> ( (unsigned int)((APBDMA_BBSETCLEAR >> 0) & 0xFFFFFFFF), ((APBDMA_BBSETCLEAR = (APBDMA_BBSETCLEAR & ~(0xFF00FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF00FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__APBDMA_BBSETCLEAR_CLEAR </item>
//    <item> SFDITEM_FIELD__APBDMA_BBSETCLEAR_SET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: APBDMA_BBINPUT  -----------------------------
// SVD Line: 2853

unsigned int APBDMA_BBINPUT __AT (0x40011008);



// ----------------------------  Field Item: APBDMA_BBINPUT_DATAIN  -------------------------------
// SVD Line: 2863

//  <item> SFDITEM_FIELD__APBDMA_BBINPUT_DATAIN
//    <name> DATAIN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40011008) PIO values </i>
//    <edit> 
//      <loc> ( (unsigned char)((APBDMA_BBINPUT >> 0) & 0xFF), ((APBDMA_BBINPUT = (APBDMA_BBINPUT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: APBDMA_BBINPUT  ---------------------------------
// SVD Line: 2853

//  <rtree> SFDITEM_REG__APBDMA_BBINPUT
//    <name> BBINPUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011008) PIO Input Values </i>
//    <loc> ( (unsigned int)((APBDMA_BBINPUT >> 0) & 0xFFFFFFFF), ((APBDMA_BBINPUT = (APBDMA_BBINPUT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__APBDMA_BBINPUT_DATAIN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: APBDMA_DEBUGDATA  ----------------------------
// SVD Line: 2872

unsigned int APBDMA_DEBUGDATA __AT (0x40011020);



// -------------------------  Field Item: APBDMA_DEBUGDATA_DEBUGDATA  -----------------------------
// SVD Line: 2882

//  <item> SFDITEM_FIELD__APBDMA_DEBUGDATA_DEBUGDATA
//    <name> DEBUGDATA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011020) Debug Data </i>
//    <edit> 
//      <loc> ( (unsigned int)((APBDMA_DEBUGDATA >> 0) & 0xFFFFFFFF), ((APBDMA_DEBUGDATA = (APBDMA_DEBUGDATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: APBDMA_DEBUGDATA  --------------------------------
// SVD Line: 2872

//  <rtree> SFDITEM_REG__APBDMA_DEBUGDATA
//    <name> DEBUGDATA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011020) PIO Input Values </i>
//    <loc> ( (unsigned int)((APBDMA_DEBUGDATA >> 0) & 0xFFFFFFFF), ((APBDMA_DEBUGDATA = (APBDMA_DEBUGDATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__APBDMA_DEBUGDATA_DEBUGDATA </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: APBDMA_DEBUG  ------------------------------
// SVD Line: 2891

unsigned int APBDMA_DEBUG __AT (0x40011040);



// ----------------------------  Field Item: APBDMA_DEBUG_DEBUGEN  --------------------------------
// SVD Line: 2901

//  <item> SFDITEM_FIELD__APBDMA_DEBUG_DEBUGEN
//    <name> DEBUGEN </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40011040) \nDebug Enable\n0 : OFF = Debug Disabled value.\n1 : ARB = Debug Arb values value.\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) APBDMA_DEBUG ) </loc>
//      <o.3..0> DEBUGEN
//        <0=> 0: OFF = Debug Disabled value.
//        <1=> 1: ARB = Debug Arb values value.
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: APBDMA_DEBUG  ----------------------------------
// SVD Line: 2891

//  <rtree> SFDITEM_REG__APBDMA_DEBUG
//    <name> DEBUG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40011040) PIO Input Values </i>
//    <loc> ( (unsigned int)((APBDMA_DEBUG >> 0) & 0xFFFFFFFF), ((APBDMA_DEBUG = (APBDMA_DEBUG & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__APBDMA_DEBUG_DEBUGEN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: APBDMA  ------------------------------------
// SVD Line: 2785

//  <view> APBDMA
//    <name> APBDMA </name>
//    <item> SFDITEM_REG__APBDMA_BBVALUE </item>
//    <item> SFDITEM_REG__APBDMA_BBSETCLEAR </item>
//    <item> SFDITEM_REG__APBDMA_BBINPUT </item>
//    <item> SFDITEM_REG__APBDMA_DEBUGDATA </item>
//    <item> SFDITEM_REG__APBDMA_DEBUG </item>
//  </view>
//  


// ----------------------------  Register Item Address: BLEIF_FIFO  -------------------------------
// SVD Line: 2943

unsigned int BLEIF_FIFO __AT (0x5000C000);



// -------------------------------  Field Item: BLEIF_FIFO_FIFO  ----------------------------------
// SVD Line: 2953

//  <item> SFDITEM_FIELD__BLEIF_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_FIFO >> 0) & 0xFFFFFFFF), ((BLEIF_FIFO = (BLEIF_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: BLEIF_FIFO  -----------------------------------
// SVD Line: 2943

//  <rtree> SFDITEM_REG__BLEIF_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((BLEIF_FIFO >> 0) & 0xFFFFFFFF), ((BLEIF_FIFO = (BLEIF_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFO_FIFO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOPTR  ------------------------------
// SVD Line: 2962

unsigned int BLEIF_FIFOPTR __AT (0x5000C100);



// ---------------------------  Field Item: BLEIF_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 2972

//  <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x5000C100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOPTR >> 24) & 0xFF), ((BLEIF_FIFOPTR = (BLEIF_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 2979

//  <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x5000C100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOPTR >> 16) & 0xFF), ((BLEIF_FIFOPTR = (BLEIF_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 2986

//  <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x5000C100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOPTR >> 8) & 0xFF), ((BLEIF_FIFOPTR = (BLEIF_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 2993

//  <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x5000C100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOPTR >> 0) & 0xFF), ((BLEIF_FIFOPTR = (BLEIF_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_FIFOPTR  ---------------------------------
// SVD Line: 2962

//  <rtree> SFDITEM_REG__BLEIF_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOPTR >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOPTR = (BLEIF_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOTHR  ------------------------------
// SVD Line: 3002

unsigned int BLEIF_FIFOTHR __AT (0x5000C104);



// ---------------------------  Field Item: BLEIF_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 3012

//  <item> SFDITEM_FIELD__BLEIF_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x5000C104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOTHR >> 8) & 0x3F), ((BLEIF_FIFOTHR = (BLEIF_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 3019

//  <item> SFDITEM_FIELD__BLEIF_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x5000C104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOTHR >> 0) & 0x3F), ((BLEIF_FIFOTHR = (BLEIF_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_FIFOTHR  ---------------------------------
// SVD Line: 3002

//  <rtree> SFDITEM_REG__BLEIF_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOTHR >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOTHR = (BLEIF_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOPOP  ------------------------------
// SVD Line: 3028

unsigned int BLEIF_FIFOPOP __AT (0x5000C108);



// ---------------------------  Field Item: BLEIF_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 3038

//  <item> SFDITEM_FIELD__BLEIF_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_FIFOPOP >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOPOP = (BLEIF_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_FIFOPOP  ---------------------------------
// SVD Line: 3028

//  <rtree> SFDITEM_REG__BLEIF_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C108) FIFO POP register </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOPOP >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOPOP = (BLEIF_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOPUSH  -----------------------------
// SVD Line: 3049

unsigned int BLEIF_FIFOPUSH __AT (0x5000C10C);



// ---------------------------  Field Item: BLEIF_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 3059

//  <item> SFDITEM_FIELD__BLEIF_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C10C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_FIFOPUSH >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOPUSH = (BLEIF_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_FIFOPUSH  ---------------------------------
// SVD Line: 3049

//  <rtree> SFDITEM_REG__BLEIF_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C10C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOPUSH >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOPUSH = (BLEIF_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOCTRL  -----------------------------
// SVD Line: 3068

unsigned int BLEIF_FIFOCTRL __AT (0x5000C110);



// ---------------------------  Field Item: BLEIF_FIFOCTRL_FIFORSTN  ------------------------------
// SVD Line: 3078

//  <item> SFDITEM_FIELD__BLEIF_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 3085

//  <item> SFDITEM_FIELD__BLEIF_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_FIFOCTRL  ---------------------------------
// SVD Line: 3068

//  <rtree> SFDITEM_REG__BLEIF_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOCTRL >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOCTRL = (BLEIF_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_FIFOLOC  ------------------------------
// SVD Line: 3095

unsigned int BLEIF_FIFOLOC __AT (0x5000C114);



// ---------------------------  Field Item: BLEIF_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 3105

//  <item> SFDITEM_FIELD__BLEIF_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x5000C114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOLOC >> 8) & 0xF), ((BLEIF_FIFOLOC = (BLEIF_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 3112

//  <item> SFDITEM_FIELD__BLEIF_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x5000C114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_FIFOLOC >> 0) & 0xF), ((BLEIF_FIFOLOC = (BLEIF_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_FIFOLOC  ---------------------------------
// SVD Line: 3095

//  <rtree> SFDITEM_REG__BLEIF_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((BLEIF_FIFOLOC >> 0) & 0xFFFFFFFF), ((BLEIF_FIFOLOC = (BLEIF_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__BLEIF_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_CLKCFG  ------------------------------
// SVD Line: 3121

unsigned int BLEIF_CLKCFG __AT (0x5000C200);



// ------------------------------  Field Item: BLEIF_CLKCFG_DIV3  ---------------------------------
// SVD Line: 3131

//  <item> SFDITEM_FIELD__BLEIF_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C200) Enable of the divide by 3 of the source IOCLK. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CLKCFG ) </loc>
//      <o.12..12> DIV3
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_CLKCFG_CLK32KEN  -------------------------------
// SVD Line: 3138

//  <item> SFDITEM_FIELD__BLEIF_CLKCFG_CLK32KEN
//    <name> CLK32KEN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C200) Enable for the 32Khz clock to the BLE module </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CLKCFG ) </loc>
//      <o.11..11> CLK32KEN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_CLKCFG_FSEL  ---------------------------------
// SVD Line: 3145

//  <item> SFDITEM_FIELD__BLEIF_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x5000C200) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 3193

//  <item> SFDITEM_FIELD__BLEIF_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C200) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CLKCFG  ----------------------------------
// SVD Line: 3121

//  <rtree> SFDITEM_REG__BLEIF_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C200) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((BLEIF_CLKCFG >> 0) & 0xFFFFFFFF), ((BLEIF_CLKCFG = (BLEIF_CLKCFG & ~(0x1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__BLEIF_CLKCFG_CLK32KEN </item>
//    <item> SFDITEM_FIELD__BLEIF_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__BLEIF_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: BLEIF_CMD  --------------------------------
// SVD Line: 3202

unsigned int BLEIF_CMD __AT (0x5000C20C);



// -----------------------------  Field Item: BLEIF_CMD_OFFSETLO  ---------------------------------
// SVD Line: 3212

//  <item> SFDITEM_FIELD__BLEIF_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x5000C20C) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. Offset bytes are transferred starting from the highest byte first. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CMD >> 24) & 0xFF), ((BLEIF_CMD = (BLEIF_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_CMD_CMDSEL  ----------------------------------
// SVD Line: 3219

//  <item> SFDITEM_FIELD__BLEIF_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x5000C20C) Command Specific selection information </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CMD >> 20) & 0x3), ((BLEIF_CMD = (BLEIF_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: BLEIF_CMD_TSIZE  ----------------------------------
// SVD Line: 3226

//  <item> SFDITEM_FIELD__BLEIF_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x5000C20C) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_CMD >> 8) & 0xFFF), ((BLEIF_CMD = (BLEIF_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: BLEIF_CMD_CONT  -----------------------------------
// SVD Line: 3233

//  <item> SFDITEM_FIELD__BLEIF_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C20C) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_CMD_OFFSETCNT  --------------------------------
// SVD Line: 3240

//  <item> SFDITEM_FIELD__BLEIF_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x5000C20C) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CMD >> 5) & 0x3), ((BLEIF_CMD = (BLEIF_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: BLEIF_CMD_CMD  -----------------------------------
// SVD Line: 3251

//  <item> SFDITEM_FIELD__BLEIF_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000C20C) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: BLEIF_CMD  -----------------------------------
// SVD Line: 3202

//  <rtree> SFDITEM_REG__BLEIF_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C20C) Command and offset Register </i>
//    <loc> ( (unsigned int)((BLEIF_CMD >> 0) & 0xFFFFFFFF), ((BLEIF_CMD = (BLEIF_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__BLEIF_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__BLEIF_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__BLEIF_CMD_CONT </item>
//    <item> SFDITEM_FIELD__BLEIF_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__BLEIF_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_CMDRPT  ------------------------------
// SVD Line: 3271

unsigned int BLEIF_CMDRPT __AT (0x5000C210);



// -----------------------------  Field Item: BLEIF_CMDRPT_CMDRPT  --------------------------------
// SVD Line: 3281

//  <item> SFDITEM_FIELD__BLEIF_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000C210) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CMDRPT >> 0) & 0x1F), ((BLEIF_CMDRPT = (BLEIF_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CMDRPT  ----------------------------------
// SVD Line: 3271

//  <rtree> SFDITEM_REG__BLEIF_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C210) Command Repeat Register </i>
//    <loc> ( (unsigned int)((BLEIF_CMDRPT >> 0) & 0xFFFFFFFF), ((BLEIF_CMDRPT = (BLEIF_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_OFFSETHI  -----------------------------
// SVD Line: 3290

unsigned int BLEIF_OFFSETHI __AT (0x5000C214);



// ---------------------------  Field Item: BLEIF_OFFSETHI_OFFSETHI  ------------------------------
// SVD Line: 3300

//  <item> SFDITEM_FIELD__BLEIF_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x5000C214) Holds the high order bytes of the 2 or 3 byte offset phase of a transaction. </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_OFFSETHI >> 0) & 0xFFFF), ((BLEIF_OFFSETHI = (BLEIF_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_OFFSETHI  ---------------------------------
// SVD Line: 3290

//  <rtree> SFDITEM_REG__BLEIF_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C214) High order offset bytes </i>
//    <loc> ( (unsigned int)((BLEIF_OFFSETHI >> 0) & 0xFFFFFFFF), ((BLEIF_OFFSETHI = (BLEIF_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_CMDSTAT  ------------------------------
// SVD Line: 3309

unsigned int BLEIF_CMDSTAT __AT (0x5000C218);



// ----------------------------  Field Item: BLEIF_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 3319

//  <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x5000C218) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_CMDSTAT >> 8) & 0xFFF), ((BLEIF_CMDSTAT = (BLEIF_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_CMDSTAT_CMDSTAT  -------------------------------
// SVD Line: 3326

//  <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x5000C218) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 3354

//  <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000C218) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CMDSTAT >> 0) & 0x1F), ((BLEIF_CMDSTAT = (BLEIF_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CMDSTAT  ---------------------------------
// SVD Line: 3309

//  <rtree> SFDITEM_REG__BLEIF_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C218) Command status </i>
//    <loc> ( (unsigned int)((BLEIF_CMDSTAT >> 0) & 0xFFFFFFFF), ((BLEIF_CMDSTAT = (BLEIF_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__BLEIF_CMDSTAT_CCMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_INTEN  -------------------------------
// SVD Line: 3363

unsigned int BLEIF_INTEN __AT (0x5000C220);



// ----------------------------  Field Item: BLEIF_INTEN_B2MSHUTDN  -------------------------------
// SVD Line: 3373

//  <item> SFDITEM_FIELD__BLEIF_INTEN_B2MSHUTDN
//    <name> B2MSHUTDN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x5000C220) The B2M_STATE from the BLE Core transitioned into shutdown state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.16..16> B2MSHUTDN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTEN_B2MACTIVE  -------------------------------
// SVD Line: 3380

//  <item> SFDITEM_FIELD__BLEIF_INTEN_B2MACTIVE
//    <name> B2MACTIVE </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x5000C220) The B2M_STATE from the BLE Core transitioned into the active state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.15..15> B2MACTIVE
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTEN_B2MSLEEP  --------------------------------
// SVD Line: 3387

//  <item> SFDITEM_FIELD__BLEIF_INTEN_B2MSLEEP
//    <name> B2MSLEEP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000C220) The B2M_STATE from the BLE Core transitioned into the sleep state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.14..14> B2MSLEEP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_CQERR  ---------------------------------
// SVD Line: 3394

//  <item> SFDITEM_FIELD__BLEIF_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000C220) Command queue error during processing. When an error occurs, the system will stop processing and halt operations to allow software to take recovery actions </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.13..13> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_CQUPD  ---------------------------------
// SVD Line: 3401

//  <item> SFDITEM_FIELD__BLEIF_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C220) Command queue write operation executed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.12..12> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTEN_CQPAUSED  --------------------------------
// SVD Line: 3408

//  <item> SFDITEM_FIELD__BLEIF_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C220) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.11..11> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_DERR  ----------------------------------
// SVD Line: 3415

//  <item> SFDITEM_FIELD__BLEIF_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000C220) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.10..10> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_DCMP  ----------------------------------
// SVD Line: 3422

//  <item> SFDITEM_FIELD__BLEIF_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C220) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.9..9> DCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTEN_BLECSSTAT  -------------------------------
// SVD Line: 3429

//  <item> SFDITEM_FIELD__BLEIF_INTEN_BLECSSTAT
//    <name> BLECSSTAT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C220) BLE Core SPI Status interrupt. Asserted when the SPI_STATUS signal from the BLE Core is asserted, indicating that SPI writes can be done to the BLE Core. Transfers to the BLE Core should only be done when this signal is high. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.8..8> BLECSSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTEN_BLECIRQ  --------------------------------
// SVD Line: 3437

//  <item> SFDITEM_FIELD__BLEIF_INTEN_BLECIRQ
//    <name> BLECIRQ </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C220) BLE Core IRQ signal. Asserted when the BLE_IRQ signal from the BLE Core is asserted, indicating the availability of read data from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.7..7> BLECIRQ
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_ICMD  ----------------------------------
// SVD Line: 3444

//  <item> SFDITEM_FIELD__BLEIF_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000C220) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_IACC  ----------------------------------
// SVD Line: 3451

//  <item> SFDITEM_FIELD__BLEIF_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000C220) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_B2MST  ---------------------------------
// SVD Line: 3458

//  <item> SFDITEM_FIELD__BLEIF_INTEN_B2MST
//    <name> B2MST </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000C220) B2M State change interrupt. Asserted on any change in the B2M_STATE signal from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.4..4> B2MST
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTEN_FOVFL  ---------------------------------
// SVD Line: 3465

//  <item> SFDITEM_FIELD__BLEIF_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000C220) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTEN_FUNDFL  ---------------------------------
// SVD Line: 3472

//  <item> SFDITEM_FIELD__BLEIF_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C220) Read FIFO Underflow interrupt. Asserted when a pop operation is done to a empty read FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: BLEIF_INTEN_THR  ----------------------------------
// SVD Line: 3479

//  <item> SFDITEM_FIELD__BLEIF_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C220) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTEN_CMDCMP  ---------------------------------
// SVD Line: 3487

//  <item> SFDITEM_FIELD__BLEIF_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C220) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: BLEIF_INTEN  ----------------------------------
// SVD Line: 3363

//  <rtree> SFDITEM_REG__BLEIF_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C220) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((BLEIF_INTEN >> 0) & 0xFFFFFFFF), ((BLEIF_INTEN = (BLEIF_INTEN & ~(0x1FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_B2MSHUTDN </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_B2MACTIVE </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_B2MSLEEP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_BLECSSTAT </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_BLECIRQ </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_B2MST </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_THR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTEN_CMDCMP </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_INTSTAT  ------------------------------
// SVD Line: 3496

unsigned int BLEIF_INTSTAT __AT (0x5000C224);



// ---------------------------  Field Item: BLEIF_INTSTAT_B2MSHUTDN  ------------------------------
// SVD Line: 3506

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MSHUTDN
//    <name> B2MSHUTDN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x5000C224) The B2M_STATE from the BLE Core transitioned into shutdown state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.16..16> B2MSHUTDN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSTAT_B2MACTIVE  ------------------------------
// SVD Line: 3513

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MACTIVE
//    <name> B2MACTIVE </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x5000C224) The B2M_STATE from the BLE Core transitioned into the active state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.15..15> B2MACTIVE
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSTAT_B2MSLEEP  -------------------------------
// SVD Line: 3520

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MSLEEP
//    <name> B2MSLEEP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000C224) The B2M_STATE from the BLE Core transitioned into the sleep state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.14..14> B2MSLEEP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_CQERR  --------------------------------
// SVD Line: 3527

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000C224) Command queue error during processing. When an error occurs, the system will stop processing and halt operations to allow software to take recovery actions </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.13..13> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_CQUPD  --------------------------------
// SVD Line: 3534

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C224) Command queue write operation executed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.12..12> CQUPD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 3541

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C224) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.11..11> CQPAUSED
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_DERR  ---------------------------------
// SVD Line: 3548

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000C224) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.10..10> DERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_DCMP  ---------------------------------
// SVD Line: 3555

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C224) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.9..9> DCMP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSTAT_BLECSSTAT  ------------------------------
// SVD Line: 3562

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_BLECSSTAT
//    <name> BLECSSTAT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C224) BLE Core SPI Status interrupt. Asserted when the SPI_STATUS signal from the BLE Core is asserted, indicating that SPI writes can be done to the BLE Core. Transfers to the BLE Core should only be done when this signal is high. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.8..8> BLECSSTAT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSTAT_BLECIRQ  -------------------------------
// SVD Line: 3570

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_BLECIRQ
//    <name> BLECIRQ </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C224) BLE Core IRQ signal. Asserted when the BLE_IRQ signal from the BLE Core is asserted, indicating the availability of read data from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.7..7> BLECIRQ
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_ICMD  ---------------------------------
// SVD Line: 3577

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000C224) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_IACC  ---------------------------------
// SVD Line: 3584

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000C224) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_B2MST  --------------------------------
// SVD Line: 3591

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MST
//    <name> B2MST </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000C224) B2M State change interrupt. Asserted on any change in the B2M_STATE signal from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.4..4> B2MST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSTAT_FOVFL  --------------------------------
// SVD Line: 3598

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000C224) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 3605

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C224) Read FIFO Underflow interrupt. Asserted when a pop operation is done to a empty read FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSTAT_THR  ---------------------------------
// SVD Line: 3612

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C224) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 3620

//  <item> SFDITEM_FIELD__BLEIF_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C224) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_INTSTAT  ---------------------------------
// SVD Line: 3496

//  <rtree> SFDITEM_REG__BLEIF_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C224) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((BLEIF_INTSTAT >> 0) & 0xFFFFFFFF), ((BLEIF_INTSTAT = (BLEIF_INTSTAT & ~(0x1FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MSHUTDN </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MACTIVE </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MSLEEP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_BLECSSTAT </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_BLECIRQ </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_B2MST </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_INTCLR  ------------------------------
// SVD Line: 3629

unsigned int BLEIF_INTCLR __AT (0x5000C228);



// ---------------------------  Field Item: BLEIF_INTCLR_B2MSHUTDN  -------------------------------
// SVD Line: 3639

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MSHUTDN
//    <name> B2MSHUTDN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x5000C228) The B2M_STATE from the BLE Core transitioned into shutdown state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.16..16> B2MSHUTDN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTCLR_B2MACTIVE  -------------------------------
// SVD Line: 3646

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MACTIVE
//    <name> B2MACTIVE </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x5000C228) The B2M_STATE from the BLE Core transitioned into the active state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.15..15> B2MACTIVE
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTCLR_B2MSLEEP  -------------------------------
// SVD Line: 3653

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MSLEEP
//    <name> B2MSLEEP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000C228) The B2M_STATE from the BLE Core transitioned into the sleep state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.14..14> B2MSLEEP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_CQERR  ---------------------------------
// SVD Line: 3660

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000C228) Command queue error during processing. When an error occurs, the system will stop processing and halt operations to allow software to take recovery actions </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.13..13> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_CQUPD  ---------------------------------
// SVD Line: 3667

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C228) Command queue write operation executed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.12..12> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTCLR_CQPAUSED  -------------------------------
// SVD Line: 3674

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C228) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.11..11> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTCLR_DERR  ---------------------------------
// SVD Line: 3681

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000C228) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.10..10> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTCLR_DCMP  ---------------------------------
// SVD Line: 3688

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C228) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.9..9> DCMP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTCLR_BLECSSTAT  -------------------------------
// SVD Line: 3695

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_BLECSSTAT
//    <name> BLECSSTAT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C228) BLE Core SPI Status interrupt. Asserted when the SPI_STATUS signal from the BLE Core is asserted, indicating that SPI writes can be done to the BLE Core. Transfers to the BLE Core should only be done when this signal is high. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.8..8> BLECSSTAT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTCLR_BLECIRQ  --------------------------------
// SVD Line: 3703

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_BLECIRQ
//    <name> BLECIRQ </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C228) BLE Core IRQ signal. Asserted when the BLE_IRQ signal from the BLE Core is asserted, indicating the availability of read data from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.7..7> BLECIRQ
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTCLR_ICMD  ---------------------------------
// SVD Line: 3710

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000C228) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTCLR_IACC  ---------------------------------
// SVD Line: 3717

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000C228) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_B2MST  ---------------------------------
// SVD Line: 3724

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MST
//    <name> B2MST </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000C228) B2M State change interrupt. Asserted on any change in the B2M_STATE signal from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.4..4> B2MST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_FOVFL  ---------------------------------
// SVD Line: 3731

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000C228) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_FUNDFL  --------------------------------
// SVD Line: 3738

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C228) Read FIFO Underflow interrupt. Asserted when a pop operation is done to a empty read FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTCLR_THR  ----------------------------------
// SVD Line: 3745

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C228) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTCLR_CMDCMP  --------------------------------
// SVD Line: 3753

//  <item> SFDITEM_FIELD__BLEIF_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C228) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_INTCLR  ----------------------------------
// SVD Line: 3629

//  <rtree> SFDITEM_REG__BLEIF_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C228) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((BLEIF_INTCLR >> 0) & 0xFFFFFFFF), ((BLEIF_INTCLR = (BLEIF_INTCLR & ~(0x1FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MSHUTDN </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MACTIVE </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MSLEEP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_BLECSSTAT </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_BLECIRQ </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_B2MST </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_INTSET  ------------------------------
// SVD Line: 3762

unsigned int BLEIF_INTSET __AT (0x5000C22C);



// ---------------------------  Field Item: BLEIF_INTSET_B2MSHUTDN  -------------------------------
// SVD Line: 3772

//  <item> SFDITEM_FIELD__BLEIF_INTSET_B2MSHUTDN
//    <name> B2MSHUTDN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x5000C22C) The B2M_STATE from the BLE Core transitioned into shutdown state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.16..16> B2MSHUTDN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSET_B2MACTIVE  -------------------------------
// SVD Line: 3779

//  <item> SFDITEM_FIELD__BLEIF_INTSET_B2MACTIVE
//    <name> B2MACTIVE </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x5000C22C) The B2M_STATE from the BLE Core transitioned into the active state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.15..15> B2MACTIVE
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSET_B2MSLEEP  -------------------------------
// SVD Line: 3786

//  <item> SFDITEM_FIELD__BLEIF_INTSET_B2MSLEEP
//    <name> B2MSLEEP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000C22C) The B2M_STATE from the BLE Core transitioned into the sleep state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.14..14> B2MSLEEP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_CQERR  ---------------------------------
// SVD Line: 3793

//  <item> SFDITEM_FIELD__BLEIF_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000C22C) Command queue error during processing. When an error occurs, the system will stop processing and halt operations to allow software to take recovery actions </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.13..13> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_CQUPD  ---------------------------------
// SVD Line: 3800

//  <item> SFDITEM_FIELD__BLEIF_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C22C) Command queue write operation executed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.12..12> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSET_CQPAUSED  -------------------------------
// SVD Line: 3807

//  <item> SFDITEM_FIELD__BLEIF_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C22C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.11..11> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSET_DERR  ---------------------------------
// SVD Line: 3814

//  <item> SFDITEM_FIELD__BLEIF_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000C22C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.10..10> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSET_DCMP  ---------------------------------
// SVD Line: 3821

//  <item> SFDITEM_FIELD__BLEIF_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C22C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.9..9> DCMP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_INTSET_BLECSSTAT  -------------------------------
// SVD Line: 3828

//  <item> SFDITEM_FIELD__BLEIF_INTSET_BLECSSTAT
//    <name> BLECSSTAT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C22C) BLE Core SPI Status interrupt. Asserted when the SPI_STATUS signal from the BLE Core is asserted, indicating that SPI writes can be done to the BLE Core. Transfers to the BLE Core should only be done when this signal is high. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.8..8> BLECSSTAT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_INTSET_BLECIRQ  --------------------------------
// SVD Line: 3836

//  <item> SFDITEM_FIELD__BLEIF_INTSET_BLECIRQ
//    <name> BLECIRQ </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C22C) BLE Core IRQ signal. Asserted when the BLE_IRQ signal from the BLE Core is asserted, indicating the availability of read data from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.7..7> BLECIRQ
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSET_ICMD  ---------------------------------
// SVD Line: 3843

//  <item> SFDITEM_FIELD__BLEIF_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000C22C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSET_IACC  ---------------------------------
// SVD Line: 3850

//  <item> SFDITEM_FIELD__BLEIF_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000C22C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_B2MST  ---------------------------------
// SVD Line: 3857

//  <item> SFDITEM_FIELD__BLEIF_INTSET_B2MST
//    <name> B2MST </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000C22C) B2M State change interrupt. Asserted on any change in the B2M_STATE signal from the BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.4..4> B2MST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_FOVFL  ---------------------------------
// SVD Line: 3864

//  <item> SFDITEM_FIELD__BLEIF_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000C22C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_FUNDFL  --------------------------------
// SVD Line: 3871

//  <item> SFDITEM_FIELD__BLEIF_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C22C) Read FIFO Underflow interrupt. Asserted when a pop operation is done to a empty read FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_INTSET_THR  ----------------------------------
// SVD Line: 3878

//  <item> SFDITEM_FIELD__BLEIF_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C22C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_INTSET_CMDCMP  --------------------------------
// SVD Line: 3886

//  <item> SFDITEM_FIELD__BLEIF_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C22C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_INTSET  ----------------------------------
// SVD Line: 3762

//  <rtree> SFDITEM_REG__BLEIF_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C22C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((BLEIF_INTSET >> 0) & 0xFFFFFFFF), ((BLEIF_INTSET = (BLEIF_INTSET & ~(0x1FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_B2MSHUTDN </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_B2MACTIVE </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_B2MSLEEP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_BLECSSTAT </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_BLECIRQ </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_B2MST </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_THR </item>
//    <item> SFDITEM_FIELD__BLEIF_INTSET_CMDCMP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: BLEIF_DMATRIGEN  -----------------------------
// SVD Line: 3895

unsigned int BLEIF_DMATRIGEN __AT (0x5000C230);



// ---------------------------  Field Item: BLEIF_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 3905

//  <item> SFDITEM_FIELD__BLEIF_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C230) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, enabling the CMDCMP trigger will transfer the remaining data from the commmand. If the CMDCMP trigger is not enabled, the module will initiate a transfer when the amount of data in the FIFO is equal to or greater than the remaining data in the DMA. In cases where one DMA setup covers multiple commands, this will only occur at the end of the last transaction when the DMA is near complete. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: BLEIF_DMATRIGEN_DCMDCMPEN  -----------------------------
// SVD Line: 3915

//  <item> SFDITEM_FIELD__BLEIF_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C230) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or the number of bytes in the FIFO when the command completed. If this is disabled, and the number of bytes in the FIFO is equal or greater than the TOTCOUNT bytes, a transfer of TOTCOUNT bytes will be done to ensure read data is stored when the DMA is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_DMATRIGEN  --------------------------------
// SVD Line: 3895

//  <rtree> SFDITEM_REG__BLEIF_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C230) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((BLEIF_DMATRIGEN >> 0) & 0xFFFFFFFF), ((BLEIF_DMATRIGEN = (BLEIF_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__BLEIF_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: BLEIF_DMATRIGSTAT  ----------------------------
// SVD Line: 3924

unsigned int BLEIF_DMATRIGSTAT __AT (0x5000C234);



// --------------------------  Field Item: BLEIF_DMATRIGSTAT_DTOTCMP  -----------------------------
// SVD Line: 3934

//  <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C234) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 3942

//  <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C234) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: BLEIF_DMATRIGSTAT_DCMDCMP  -----------------------------
// SVD Line: 3949

//  <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C234) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: BLEIF_DMATRIGSTAT  -------------------------------
// SVD Line: 3924

//  <rtree> SFDITEM_REG__BLEIF_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C234) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((BLEIF_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((BLEIF_DMATRIGSTAT = (BLEIF_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__BLEIF_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_DMACFG  ------------------------------
// SVD Line: 3958

unsigned int BLEIF_DMACFG __AT (0x5000C238);



// ----------------------------  Field Item: BLEIF_DMACFG_DPWROFF  --------------------------------
// SVD Line: 3968

//  <item> SFDITEM_FIELD__BLEIF_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C238) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_DMACFG_DMAPRI  --------------------------------
// SVD Line: 3986

//  <item> SFDITEM_FIELD__BLEIF_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C238) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_DMACFG_DMADIR  --------------------------------
// SVD Line: 4004

//  <item> SFDITEM_FIELD__BLEIF_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C238) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_DMACFG_DMAEN  ---------------------------------
// SVD Line: 4022

//  <item> SFDITEM_FIELD__BLEIF_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C238) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_DMACFG  ----------------------------------
// SVD Line: 3958

//  <rtree> SFDITEM_REG__BLEIF_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C238) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((BLEIF_DMACFG >> 0) & 0xFFFFFFFF), ((BLEIF_DMACFG = (BLEIF_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__BLEIF_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__BLEIF_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__BLEIF_DMACFG_DMAEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: BLEIF_DMATOTCOUNT  ----------------------------
// SVD Line: 4042

unsigned int BLEIF_DMATOTCOUNT __AT (0x5000C23C);



// -------------------------  Field Item: BLEIF_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 4052

//  <item> SFDITEM_FIELD__BLEIF_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x5000C23C) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_DMATOTCOUNT >> 0) & 0xFFF), ((BLEIF_DMATOTCOUNT = (BLEIF_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: BLEIF_DMATOTCOUNT  -------------------------------
// SVD Line: 4042

//  <rtree> SFDITEM_REG__BLEIF_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C23C) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((BLEIF_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((BLEIF_DMATOTCOUNT = (BLEIF_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: BLEIF_DMATARGADDR  ----------------------------
// SVD Line: 4061

unsigned int BLEIF_DMATARGADDR __AT (0x5000C240);



// ------------------------  Field Item: BLEIF_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 4071

//  <item> SFDITEM_FIELD__BLEIF_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000C240) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// -------------------------  Field Item: BLEIF_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 4079

//  <item> SFDITEM_FIELD__BLEIF_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000C240) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_DMATARGADDR >> 0) & 0xFFFFF), ((BLEIF_DMATARGADDR = (BLEIF_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: BLEIF_DMATARGADDR  -------------------------------
// SVD Line: 4061

//  <rtree> SFDITEM_REG__BLEIF_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C240) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((BLEIF_DMATARGADDR >> 0) & 0xFFFFFFFF), ((BLEIF_DMATARGADDR = (BLEIF_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__BLEIF_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_DMASTAT  ------------------------------
// SVD Line: 4088

unsigned int BLEIF_DMASTAT __AT (0x5000C244);



// ----------------------------  Field Item: BLEIF_DMASTAT_DMAERR  --------------------------------
// SVD Line: 4098

//  <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C244) DMA Error. This active high bit signals that an error was encountered during the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_DMASTAT_DMACPL  --------------------------------
// SVD Line: 4105

//  <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C244) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_DMASTAT_DMATIP  --------------------------------
// SVD Line: 4112

//  <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C244) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_DMASTAT  ---------------------------------
// SVD Line: 4088

//  <rtree> SFDITEM_REG__BLEIF_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C244) DMA Status Register </i>
//    <loc> ( (unsigned int)((BLEIF_DMASTAT >> 0) & 0xFFFFFFFF), ((BLEIF_DMASTAT = (BLEIF_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__BLEIF_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_CQCFG  -------------------------------
// SVD Line: 4122

unsigned int BLEIF_CQCFG __AT (0x5000C248);



// ------------------------------  Field Item: BLEIF_CQCFG_CQPRI  ---------------------------------
// SVD Line: 4132

//  <item> SFDITEM_FIELD__BLEIF_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C248) \nSets the Priority of the command queue dma request.\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_CQCFG_CQEN  ----------------------------------
// SVD Line: 4150

//  <item> SFDITEM_FIELD__BLEIF_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C248) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: BLEIF_CQCFG  ----------------------------------
// SVD Line: 4122

//  <rtree> SFDITEM_REG__BLEIF_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C248) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQCFG >> 0) & 0xFFFFFFFF), ((BLEIF_CQCFG = (BLEIF_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__BLEIF_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_CQADDR  ------------------------------
// SVD Line: 4171

unsigned int BLEIF_CQADDR __AT (0x5000C24C);



// ----------------------------  Field Item: BLEIF_CQADDR_CQADDR28  -------------------------------
// SVD Line: 4181

//  <item> SFDITEM_FIELD__BLEIF_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000C24C) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_CQADDR_CQADDR  --------------------------------
// SVD Line: 4188

//  <item> SFDITEM_FIELD__BLEIF_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x5000C24C) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_CQADDR >> 2) & 0x3FFFF), ((BLEIF_CQADDR = (BLEIF_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CQADDR  ----------------------------------
// SVD Line: 4171

//  <rtree> SFDITEM_REG__BLEIF_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C24C) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQADDR >> 0) & 0xFFFFFFFF), ((BLEIF_CQADDR = (BLEIF_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__BLEIF_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_CQSTAT  ------------------------------
// SVD Line: 4197

unsigned int BLEIF_CQSTAT __AT (0x5000C250);



// -----------------------------  Field Item: BLEIF_CQSTAT_CQERR  ---------------------------------
// SVD Line: 4207

//  <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C250) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_CQSTAT_CQPAUSED  -------------------------------
// SVD Line: 4214

//  <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C250) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 4221

//  <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C250) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CQSTAT  ----------------------------------
// SVD Line: 4197

//  <rtree> SFDITEM_REG__BLEIF_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C250) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQSTAT >> 0) & 0xFFFFFFFF), ((BLEIF_CQSTAT = (BLEIF_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__BLEIF_CQSTAT_CQTIP </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_CQFLAGS  ------------------------------
// SVD Line: 4230

unsigned int BLEIF_CQFLAGS __AT (0x5000C254);



// ---------------------------  Field Item: BLEIF_CQFLAGS_CQIRQMASK  ------------------------------
// SVD Line: 4240

//  <item> SFDITEM_FIELD__BLEIF_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x5000C254) Provides for a per-bit mask of the flags used to invoke an interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_CQFLAGS >> 16) & 0xFFFF), ((BLEIF_CQFLAGS = (BLEIF_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_CQFLAGS_CQFLAGS  -------------------------------
// SVD Line: 4248

//  <item> SFDITEM_FIELD__BLEIF_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x5000C254) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_CQFLAGS >> 0) & 0xFFFF), ((BLEIF_CQFLAGS = (BLEIF_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_CQFLAGS  ---------------------------------
// SVD Line: 4230

//  <rtree> SFDITEM_REG__BLEIF_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C254) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQFLAGS >> 0) & 0xFFFFFFFF), ((BLEIF_CQFLAGS = (BLEIF_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__BLEIF_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: BLEIF_CQSETCLEAR  ----------------------------
// SVD Line: 4257

unsigned int BLEIF_CQSETCLEAR __AT (0x5000C258);



// ---------------------------  Field Item: BLEIF_CQSETCLEAR_CQFCLR  ------------------------------
// SVD Line: 4267

//  <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x5000C258) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CQSETCLEAR >> 16) & 0xFF), ((BLEIF_CQSETCLEAR = (BLEIF_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_CQSETCLEAR_CQFTGL  ------------------------------
// SVD Line: 4274

//  <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x5000C258) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CQSETCLEAR >> 8) & 0xFF), ((BLEIF_CQSETCLEAR = (BLEIF_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_CQSETCLEAR_CQFSET  ------------------------------
// SVD Line: 4281

//  <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x5000C258) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CQSETCLEAR >> 0) & 0xFF), ((BLEIF_CQSETCLEAR = (BLEIF_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: BLEIF_CQSETCLEAR  --------------------------------
// SVD Line: 4257

//  <rtree> SFDITEM_REG__BLEIF_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C258) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((BLEIF_CQSETCLEAR = (BLEIF_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__BLEIF_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// -------------------------  Register Item Address: BLEIF_CQPAUSEEN  -----------------------------
// SVD Line: 4290

unsigned int BLEIF_CQPAUSEEN __AT (0x5000C25C);



// ----------------------------  Field Item: BLEIF_CQPAUSEEN_CQPEN  -------------------------------
// SVD Line: 4300

//  <item> SFDITEM_FIELD__BLEIF_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x5000C25C) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((BLEIF_CQPAUSEEN >> 0) & 0xFFFF), ((BLEIF_CQPAUSEEN = (BLEIF_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_CQPAUSEEN  --------------------------------
// SVD Line: 4290

//  <rtree> SFDITEM_REG__BLEIF_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C25C) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((BLEIF_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((BLEIF_CQPAUSEEN = (BLEIF_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_CQCURIDX  -----------------------------
// SVD Line: 4390

unsigned int BLEIF_CQCURIDX __AT (0x5000C260);



// ---------------------------  Field Item: BLEIF_CQCURIDX_CQCURIDX  ------------------------------
// SVD Line: 4400

//  <item> SFDITEM_FIELD__BLEIF_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x5000C260) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CQCURIDX >> 0) & 0xFF), ((BLEIF_CQCURIDX = (BLEIF_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_CQCURIDX  ---------------------------------
// SVD Line: 4390

//  <rtree> SFDITEM_REG__BLEIF_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C260) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((BLEIF_CQCURIDX >> 0) & 0xFFFFFFFF), ((BLEIF_CQCURIDX = (BLEIF_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_CQENDIDX  -----------------------------
// SVD Line: 4409

unsigned int BLEIF_CQENDIDX __AT (0x5000C264);



// ---------------------------  Field Item: BLEIF_CQENDIDX_CQENDIDX  ------------------------------
// SVD Line: 4419

//  <item> SFDITEM_FIELD__BLEIF_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x5000C264) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_CQENDIDX >> 0) & 0xFF), ((BLEIF_CQENDIDX = (BLEIF_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: BLEIF_CQENDIDX  ---------------------------------
// SVD Line: 4409

//  <rtree> SFDITEM_REG__BLEIF_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C264) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((BLEIF_CQENDIDX >> 0) & 0xFFFFFFFF), ((BLEIF_CQENDIDX = (BLEIF_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_STATUS  ------------------------------
// SVD Line: 4428

unsigned int BLEIF_STATUS __AT (0x5000C268);



// -----------------------------  Field Item: BLEIF_STATUS_IDLEST  --------------------------------
// SVD Line: 4438

//  <item> SFDITEM_FIELD__BLEIF_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C268) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_STATUS_CMDACT  --------------------------------
// SVD Line: 4451

//  <item> SFDITEM_FIELD__BLEIF_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C268) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: BLEIF_STATUS_ERR  ----------------------------------
// SVD Line: 4465

//  <item> SFDITEM_FIELD__BLEIF_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C268) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_STATUS  ----------------------------------
// SVD Line: 4428

//  <rtree> SFDITEM_REG__BLEIF_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C268) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((BLEIF_STATUS >> 0) & 0xFFFFFFFF), ((BLEIF_STATUS = (BLEIF_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__BLEIF_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__BLEIF_STATUS_ERR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_MSPICFG  ------------------------------
// SVD Line: 4480

unsigned int BLEIF_MSPICFG __AT (0x5000C300);



// ----------------------------  Field Item: BLEIF_MSPICFG_MSPIRST  -------------------------------
// SVD Line: 4490

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x5000C300) Bit is deprecated. setting it will have no effect. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_DOUTDLY  -------------------------------
// SVD Line: 4497

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x5000C300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_MSPICFG >> 27) & 0x7), ((BLEIF_MSPICFG = (BLEIF_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_DINDLY  --------------------------------
// SVD Line: 4504

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x5000C300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((BLEIF_MSPICFG >> 24) & 0x7), ((BLEIF_MSPICFG = (BLEIF_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_SPILSB  --------------------------------
// SVD Line: 4511

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x5000C300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_RDFCPOL  -------------------------------
// SVD Line: 4529

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x5000C300) \nSelects the read flow control signal polarity. When set, the clock will be held low until the flow control is de-asserted.\n0 : NORMAL = SPI_STATUS signal from BLE Core high(1) creates flow control and new read spi transactions will not be started until the signal goes low.(default) value.\n1 : INVERTED = SPI_STATUS signal from BLE Core low(0) creates flow control and new read spi transactions will not be started until the signal goes high. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: NORMAL = SPI_STATUS signal from BLE Core high(1) creates flow control and new read spi transactions will not be started until the signal goes low.(default) value.
//        <1=> 1: INVERTED = SPI_STATUS signal from BLE Core low(0) creates flow control and new read spi transactions will not be started until the signal goes high. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_WTFCPOL  -------------------------------
// SVD Line: 4547

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x5000C300) \nSelects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of this bit. (For example: WTFCPOL = 0 will allow a SPI_STATUS=1 to pause transfers).\n0 : NORMAL = SPI_STATUS signal from BLE Core high(1) creates flow control and new write spi transactions will not be started until the signal goes low.(default) value.\n1 : INVERTED = SPI_STATUS signal from BLE Core high(1) creates low(0) control and new write spi transactions will not be started until the signal goes high. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: NORMAL = SPI_STATUS signal from BLE Core high(1) creates flow control and new write spi transactions will not be started until the signal goes low.(default) value.
//        <1=> 1: INVERTED = SPI_STATUS signal from BLE Core high(1) creates low(0) control and new write spi transactions will not be started until the signal goes high. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_MSPICFG_RDFC  ---------------------------------
// SVD Line: 4565

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x5000C300) \nEnables flow control of new read transactions based on the SPI_STATUS signal from the BLE Core.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_MSPICFG_WTFC  ---------------------------------
// SVD Line: 4583

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x5000C300) \nEnables flow control of new write transactions based on the SPI_STATUS signal from the BLE Core.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_MSPICFG_FULLDUP  -------------------------------
// SVD Line: 4601

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C300) Full Duplex mode. Capture read data during writes operations </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_MSPICFG_SPHA  ---------------------------------
// SVD Line: 4608

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C300) \nSelects the SPI phase; When 1, will shift the sampling edge by 1/2 clock.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge, rising or falling dependant on the value of SPOL value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge, rising of falling dependant on the value of SPOL value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge, rising or falling dependant on the value of SPOL value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge, rising of falling dependant on the value of SPOL value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_MSPICFG_SPOL  ---------------------------------
// SVD Line: 4626

//  <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C300) \nThis bit selects SPI polarity.\n0 : CLK_BASE_0 = The initial value of the clock is 0. value.\n1 : CLK_BASE_1 = The initial value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The initial value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The initial value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_MSPICFG  ---------------------------------
// SVD Line: 4480

//  <rtree> SFDITEM_REG__BLEIF_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((BLEIF_MSPICFG >> 0) & 0xFFFFFFFF), ((BLEIF_MSPICFG = (BLEIF_MSPICFG & ~(0x7FE30007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FE30007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__BLEIF_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_BLECFG  ------------------------------
// SVD Line: 4646

unsigned int BLEIF_BLECFG __AT (0x5000C304);



// ---------------------------  Field Item: BLEIF_BLECFG_SPIISOCTL  -------------------------------
// SVD Line: 4656

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_SPIISOCTL
//    <name> SPIISOCTL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x5000C304) \nConfiguration of BLEH isolation controls for SPI related signals.\n0 : AUTO = SPI signals from BLE Core to/from MCU Core are automatically isolated by the logic value.\n1 : Reserved - do not use\n2 : OFF = SPI signals from BLE Core to/from MCU Core are not isolated. value.\n3 : ON = SPI signals from BLE Core to/from MCU Core are isolated. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.15..14> SPIISOCTL
//        <0=> 0: AUTO = SPI signals from BLE Core to/from MCU Core are automatically isolated by the logic value.
//        <1=> 1: 
//        <2=> 2: OFF = SPI signals from BLE Core to/from MCU Core are not isolated. value.
//        <3=> 3: ON = SPI signals from BLE Core to/from MCU Core are isolated. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_PWRISOCTL  -------------------------------
// SVD Line: 4679

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_PWRISOCTL
//    <name> PWRISOCTL </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x5000C304) \nConfiguration of BLEH isolation control for power related signals.\n0 : AUTO = BLEH Power signal isolation is controlled automatically through the interface logic value.\n1 : Reserved - do not use\n2 : OFF = BLEH power signal isolation to off (not isolated). value.\n3 : ON = BLEH power signal isolation to on (isolated). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.13..12> PWRISOCTL
//        <0=> 0: AUTO = BLEH Power signal isolation is controlled automatically through the interface logic value.
//        <1=> 1: 
//        <2=> 2: OFF = BLEH power signal isolation to off (not isolated). value.
//        <3=> 3: ON = BLEH power signal isolation to on (isolated). value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_STAYASLEEP  ------------------------------
// SVD Line: 4702

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_STAYASLEEP
//    <name> STAYASLEEP </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C304) Set to prevent the BLE power control module from waking up the BLE Core after going into power down. To be used for graceful shutdown, set by software prior to powering off and will allow assertion of reset from sleep state. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.11..11> STAYASLEEP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_BLECFG_FRCCLK  --------------------------------
// SVD Line: 4709

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_FRCCLK
//    <name> FRCCLK </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000C304) Force the clock in the BLEIF to be always running </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.10..10> FRCCLK
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_MCUFRCSLP  -------------------------------
// SVD Line: 4716

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_MCUFRCSLP
//    <name> MCUFRCSLP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000C304) Force power state machine to go to the sleep state. Intended for debug only. Has no effect on the actual BLE Core state, only the state of the BLEIF interface state machine. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.9..9> MCUFRCSLP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_WT4ACTOFF  -------------------------------
// SVD Line: 4723

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_WT4ACTOFF
//    <name> WT4ACTOFF </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000C304) Debug control of BLEIF power state machine. Allows transition into the active state in the BLEIF state without waiting for dcdc req from BLE Core. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.8..8> WT4ACTOFF
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_BLEHREQCTL  ------------------------------
// SVD Line: 4730

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_BLEHREQCTL
//    <name> BLEHREQCTL </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x5000C304) \nBLEH power on request override. The value of this field will be sent to the BLE Core when the PWRSM is off. Otherwise, the value is supplied from internal logic.\n0 : AUTO = BLEH Power-on signal is controlled by the PWRSM logic and automatically controlled value.\n1 : Reserved - do not use\n2 : OFF = BLEH Power-on signal is set to off (0). value.\n3 : ON = BLEH Power-on reg signal is set to on (1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.7..6> BLEHREQCTL
//        <0=> 0: AUTO = BLEH Power-on signal is controlled by the PWRSM logic and automatically controlled value.
//        <1=> 1: 
//        <2=> 2: OFF = BLEH Power-on signal is set to off (0). value.
//        <3=> 3: ON = BLEH Power-on reg signal is set to on (1). value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_DCDCFLGCTL  ------------------------------
// SVD Line: 4753

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_DCDCFLGCTL
//    <name> DCDCFLGCTL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x5000C304) \nDCDCFLG signal override. The value of this field will be sent to the BLE Core when the PWRSM is off. Otherwise, the value is supplied from internal logic.\n0 : AUTO = DCDC Flag signal is controlled by the PWRSM logic and automatically controlled value.\n1 : Reserved - do not use\n2 : OFF = DCDC Flag signal is set to off (0). value.\n3 : ON = DCDC Flag signal is set to on (1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.5..4> DCDCFLGCTL
//        <0=> 0: AUTO = DCDC Flag signal is controlled by the PWRSM logic and automatically controlled value.
//        <1=> 1: 
//        <2=> 2: OFF = DCDC Flag signal is set to off (0). value.
//        <3=> 3: ON = DCDC Flag signal is set to on (1). value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BLECFG_WAKEUPCTL  -------------------------------
// SVD Line: 4776

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_WAKEUPCTL
//    <name> WAKEUPCTL </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x5000C304) \nWAKE signal override. Controls the source of the WAKE signal to the BLE Core.\n0 : AUTO = Wake signal is controlled by the PWRSM logic and automatically controlled value.\n1 : Reserved - do not use\n2 : OFF = Wake signal is set to off (0). value.\n3 : ON = Wake signal is set to on (1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.3..2> WAKEUPCTL
//        <0=> 0: AUTO = Wake signal is controlled by the PWRSM logic and automatically controlled value.
//        <1=> 1: 
//        <2=> 2: OFF = Wake signal is set to off (0). value.
//        <3=> 3: ON = Wake signal is set to on (1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BLECFG_BLERSTN  --------------------------------
// SVD Line: 4799

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_BLERSTN
//    <name> BLERSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C304) \nReset line to the BLE Core. This will reset the BLE core when asserted ('0') and must be written to '1' prior to performing any BTLE related operations to the core.\n0 : INACTIVE = The reset signal is inactive (1) value.\n1 : ACTIVE = The reset signal is active (0) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.1..1> BLERSTN
//        <0=> 0: INACTIVE = The reset signal is inactive (1) value.
//        <1=> 1: ACTIVE = The reset signal is active (0) value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BLECFG_PWRSMEN  --------------------------------
// SVD Line: 4817

//  <item> SFDITEM_FIELD__BLEIF_BLECFG_PWRSMEN
//    <name> PWRSMEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C304) \nEnable the power state machine for automatic sequencing and control of power states of the BLE Core module.\n0 : OFF = Internal power state machine is disabled and will not sequence the BLEH power domain. The values of the overrides will be used to drive the output sequencing signals value.\n1 : ON = Internal power state machine is enabled and will sequence the BLEH power domain as indicated in the design document. Overrides for the power signals are not enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BLECFG ) </loc>
//      <o.0..0> PWRSMEN
//        <0=> 0: OFF = Internal power state machine is disabled and will not sequence the BLEH power domain. The values of the overrides will be used to drive the output sequencing signals value.
//        <1=> 1: ON = Internal power state machine is enabled and will sequence the BLEH power domain as indicated in the design document. Overrides for the power signals are not enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_BLECFG  ----------------------------------
// SVD Line: 4646

//  <rtree> SFDITEM_REG__BLEIF_BLECFG
//    <name> BLECFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C304) BLE Core Control </i>
//    <loc> ( (unsigned int)((BLEIF_BLECFG >> 0) & 0xFFFFFFFF), ((BLEIF_BLECFG = (BLEIF_BLECFG & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_SPIISOCTL </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_PWRISOCTL </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_STAYASLEEP </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_FRCCLK </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_MCUFRCSLP </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_WT4ACTOFF </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_BLEHREQCTL </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_DCDCFLGCTL </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_WAKEUPCTL </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_BLERSTN </item>
//    <item> SFDITEM_FIELD__BLEIF_BLECFG_PWRSMEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_PWRCMD  ------------------------------
// SVD Line: 4837

unsigned int BLEIF_PWRCMD __AT (0x5000C308);



// ----------------------------  Field Item: BLEIF_PWRCMD_RESTART  --------------------------------
// SVD Line: 4847

//  <item> SFDITEM_FIELD__BLEIF_PWRCMD_RESTART
//    <name> RESTART </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C308) Restart the BLE Core after going into the shutdown state. Only valid when in the shutdown state. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_PWRCMD ) </loc>
//      <o.1..1> RESTART
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_PWRCMD_WAKEREQ  --------------------------------
// SVD Line: 4854

//  <item> SFDITEM_FIELD__BLEIF_PWRCMD_WAKEREQ
//    <name> WAKEREQ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C308) Wake request from the MCU. When asserted (1), the BLE Interface logic will assert the wakeup request signal to the BLE Core. Only recognized when in the sleep state </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_PWRCMD ) </loc>
//      <o.0..0> WAKEREQ
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_PWRCMD  ----------------------------------
// SVD Line: 4837

//  <rtree> SFDITEM_REG__BLEIF_PWRCMD
//    <name> PWRCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C308) BLE Power command interface </i>
//    <loc> ( (unsigned int)((BLEIF_PWRCMD >> 0) & 0xFFFFFFFF), ((BLEIF_PWRCMD = (BLEIF_PWRCMD & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_PWRCMD_RESTART </item>
//    <item> SFDITEM_FIELD__BLEIF_PWRCMD_WAKEREQ </item>
//  </rtree>
//  


// --------------------------  Register Item Address: BLEIF_BSTATUS  ------------------------------
// SVD Line: 4863

unsigned int BLEIF_BSTATUS __AT (0x5000C30C);



// ----------------------------  Field Item: BLEIF_BSTATUS_BLEHREQ  -------------------------------
// SVD Line: 4873

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEHREQ
//    <name> BLEHREQ </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000C30C) Value of the BLEHREQ signal to the power control unit. The BLEHREQ signal is sent from the BLEIF module to the power control module to request the BLEH power up. When the BLEHACK signal is asserted, BLEH power is stable and ready for use. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.12..12> BLEHREQ
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BSTATUS_BLEHACK  -------------------------------
// SVD Line: 4881

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEHACK
//    <name> BLEHACK </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000C30C) Value of the BLEHACK signal from the power control unit. If the signal is '1', the BLEH power is active and ready for use. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.11..11> BLEHACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_BSTATUS_PWRST  --------------------------------
// SVD Line: 4888

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_PWRST
//    <name> PWRST </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x5000C30C) \nCurrent status of the power state machine\n0 : OFF = Internal power state machine is disabled and will not sequence the BLEH power domain. The values of the overrides will be used to drive the output sequencing signals value.\n1 : INIT = Initialization state. BLEH not powered value.\n2 : PWRON = Waiting for the powerup of the BLEH value.\n3 : ACTIVE = The BLE Core is powered and active value.\n4 : SHUTDOWN = The BLE Core is in shutdown mode value.\n5 : Reserved - do not use\n6 : SLEEP = The BLE Core has entered sleep mode and the power request is inactive value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.10..8> PWRST
//        <0=> 0: OFF = Internal power state machine is disabled and will not sequence the BLEH power domain. The values of the overrides will be used to drive the output sequencing signals value.
//        <1=> 1: INIT = Initialization state. BLEH not powered value.
//        <2=> 2: PWRON = Waiting for the powerup of the BLEH value.
//        <3=> 3: ACTIVE = The BLE Core is powered and active value.
//        <4=> 4: SHUTDOWN = The BLE Core is in shutdown mode value.
//        <5=> 5: 
//        <6=> 6: SLEEP = The BLE Core has entered sleep mode and the power request is inactive value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BSTATUS_BLEIRQ  --------------------------------
// SVD Line: 4926

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEIRQ
//    <name> BLEIRQ </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000C30C) Status of the BLEIRQ signal from the BLE Core. A value of 1 idicates that read data is available in the core and a read operation needs to be performed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.7..7> BLEIRQ
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BSTATUS_WAKEUP  --------------------------------
// SVD Line: 4933

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_WAKEUP
//    <name> WAKEUP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000C30C) Value of the WAKEUP signal to the BLE Core . The WAKEUP signals is sent from the BLEIF to the BLECORE to request the BLE Core transition from sleep state to active state. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.6..6> WAKEUP
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BSTATUS_DCDCFLAG  -------------------------------
// SVD Line: 4940

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_DCDCFLAG
//    <name> DCDCFLAG </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000C30C) Value of the DCDCFLAG signal to the BLE Core. The DCDCFLAG is a signal to the BLE Core indicating that the BLEH ppower is active. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.5..5> DCDCFLAG
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BSTATUS_DCDCREQ  -------------------------------
// SVD Line: 4947

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_DCDCREQ
//    <name> DCDCREQ </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000C30C) Value of the DCDCREQ signal from the BLE Core. The DCDCREQ signal is sent from the core to the BLEIF module when the BLE core requires BLEH power to be active. When activated, this is indicated by DCDCFLAG going to 1. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.4..4> DCDCREQ
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BSTATUS_SPISTATUS  ------------------------------
// SVD Line: 4955

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_SPISTATUS
//    <name> SPISTATUS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000C30C) Value of the SPISTATUS signal from the BLE Core. The signal is asserted when the BLE Core is able to accept write data via the SPI interface. Data should be transmitted to the BLE core only when this signal is 1. The hardware will automatically wait for this signal prior to performing a write operation if flow control is active. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.3..3> SPISTATUS
//    </check>
//  </item>
//  


// ---------------------------  Field Item: BLEIF_BSTATUS_B2MSTATE  -------------------------------
// SVD Line: 4963

//  <item> SFDITEM_FIELD__BLEIF_BSTATUS_B2MSTATE
//    <name> B2MSTATE </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x5000C30C) \nState of the BLE Core logic.\n0 : RESET = Reset State value.\n1 : Sleep = Sleep state. value.\n2 : Standby = Standby State value.\n3 : Idle = Idle state value.\n4 : Active = Active state. value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) BLEIF_BSTATUS ) </loc>
//      <o.2..0> B2MSTATE
//        <0=> 0: RESET = Reset State value.
//        <1=> 1: Sleep = Sleep state. value.
//        <2=> 2: Standby = Standby State value.
//        <3=> 3: Idle = Idle state value.
//        <4=> 4: Active = Active state. value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_BSTATUS  ---------------------------------
// SVD Line: 4863

//  <rtree> SFDITEM_REG__BLEIF_BSTATUS
//    <name> BSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C30C) BLE Core status </i>
//    <loc> ( (unsigned int)((BLEIF_BSTATUS >> 0) & 0xFFFFFFFF), ((BLEIF_BSTATUS = (BLEIF_BSTATUS & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEHREQ </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEHACK </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_PWRST </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_BLEIRQ </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_WAKEUP </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_DCDCFLAG </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_DCDCREQ </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_SPISTATUS </item>
//    <item> SFDITEM_FIELD__BLEIF_BSTATUS_B2MSTATE </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: BLEIF_BLEDBG  ------------------------------
// SVD Line: 4998

unsigned int BLEIF_BLEDBG __AT (0x5000C410);



// ----------------------------  Field Item: BLEIF_BLEDBG_DBGDATA  --------------------------------
// SVD Line: 5008

//  <item> SFDITEM_FIELD__BLEIF_BLEDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x5000C410) Debug data </i>
//    <edit> 
//      <loc> ( (unsigned int)((BLEIF_BLEDBG >> 3) & 0x1FFFFFFF), ((BLEIF_BLEDBG = (BLEIF_BLEDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BLEDBG_APBCLKON  -------------------------------
// SVD Line: 5015

//  <item> SFDITEM_FIELD__BLEIF_BLEDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000C410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLEDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// ----------------------------  Field Item: BLEIF_BLEDBG_IOCLKON  --------------------------------
// SVD Line: 5022

//  <item> SFDITEM_FIELD__BLEIF_BLEDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000C410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLEDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: BLEIF_BLEDBG_DBGEN  ---------------------------------
// SVD Line: 5029

//  <item> SFDITEM_FIELD__BLEIF_BLEDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000C410) Debug Enable. Setting this bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) BLEIF_BLEDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: BLEIF_BLEDBG  ----------------------------------
// SVD Line: 4998

//  <rtree> SFDITEM_REG__BLEIF_BLEDBG
//    <name> BLEDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000C410) BLEIF Master Debug Register </i>
//    <loc> ( (unsigned int)((BLEIF_BLEDBG >> 0) & 0xFFFFFFFF), ((BLEIF_BLEDBG = (BLEIF_BLEDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__BLEIF_BLEDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__BLEIF_BLEDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__BLEIF_BLEDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__BLEIF_BLEDBG_DBGEN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: BLEIF  -------------------------------------
// SVD Line: 2924

//  <view> BLEIF
//    <name> BLEIF </name>
//    <item> SFDITEM_REG__BLEIF_FIFO </item>
//    <item> SFDITEM_REG__BLEIF_FIFOPTR </item>
//    <item> SFDITEM_REG__BLEIF_FIFOTHR </item>
//    <item> SFDITEM_REG__BLEIF_FIFOPOP </item>
//    <item> SFDITEM_REG__BLEIF_FIFOPUSH </item>
//    <item> SFDITEM_REG__BLEIF_FIFOCTRL </item>
//    <item> SFDITEM_REG__BLEIF_FIFOLOC </item>
//    <item> SFDITEM_REG__BLEIF_CLKCFG </item>
//    <item> SFDITEM_REG__BLEIF_CMD </item>
//    <item> SFDITEM_REG__BLEIF_CMDRPT </item>
//    <item> SFDITEM_REG__BLEIF_OFFSETHI </item>
//    <item> SFDITEM_REG__BLEIF_CMDSTAT </item>
//    <item> SFDITEM_REG__BLEIF_INTEN </item>
//    <item> SFDITEM_REG__BLEIF_INTSTAT </item>
//    <item> SFDITEM_REG__BLEIF_INTCLR </item>
//    <item> SFDITEM_REG__BLEIF_INTSET </item>
//    <item> SFDITEM_REG__BLEIF_DMATRIGEN </item>
//    <item> SFDITEM_REG__BLEIF_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__BLEIF_DMACFG </item>
//    <item> SFDITEM_REG__BLEIF_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__BLEIF_DMATARGADDR </item>
//    <item> SFDITEM_REG__BLEIF_DMASTAT </item>
//    <item> SFDITEM_REG__BLEIF_CQCFG </item>
//    <item> SFDITEM_REG__BLEIF_CQADDR </item>
//    <item> SFDITEM_REG__BLEIF_CQSTAT </item>
//    <item> SFDITEM_REG__BLEIF_CQFLAGS </item>
//    <item> SFDITEM_REG__BLEIF_CQSETCLEAR </item>
//    <item> SFDITEM_REG__BLEIF_CQPAUSEEN </item>
//    <item> SFDITEM_REG__BLEIF_CQCURIDX </item>
//    <item> SFDITEM_REG__BLEIF_CQENDIDX </item>
//    <item> SFDITEM_REG__BLEIF_STATUS </item>
//    <item> SFDITEM_REG__BLEIF_MSPICFG </item>
//    <item> SFDITEM_REG__BLEIF_BLECFG </item>
//    <item> SFDITEM_REG__BLEIF_PWRCMD </item>
//    <item> SFDITEM_REG__BLEIF_BSTATUS </item>
//    <item> SFDITEM_REG__BLEIF_BLEDBG </item>
//  </view>
//  


// ------------------------  Register Item Address: CACHECTRL_CACHECFG  ---------------------------
// SVD Line: 5057

unsigned int CACHECTRL_CACHECFG __AT (0x40018000);



// ----------------------  Field Item: CACHECTRL_CACHECFG_ENABLE_MONITOR  -------------------------
// SVD Line: 5067

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_MONITOR
//    <name> ENABLE_MONITOR </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40018000) Enable Cache Monitoring Stats. Cache monitoring consumes additional power and should only be enabled when profiling code and counters will increment when this bit is set. Counter values will be retained when this is set to 0, allowing software to enable/disable counting for multiple code segments. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.24..24> ENABLE_MONITOR
//    </check>
//  </item>
//  


// -----------------------  Field Item: CACHECTRL_CACHECFG_DATA_CLKGATE  --------------------------
// SVD Line: 5074

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_DATA_CLKGATE
//    <name> DATA_CLKGATE </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40018000) Enable aggressive clock gating of entire data array. This bit should be set to 1 for optimal power efficiency. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.20..20> DATA_CLKGATE
//    </check>
//  </item>
//  


// -------------------------  Field Item: CACHECTRL_CACHECFG_CACHE_LS  ----------------------------
// SVD Line: 5081

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CACHE_LS
//    <name> CACHE_LS </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40018000) Enable LS (light sleep) of cache RAMs. Software should DISABLE this bit since cache activity is too high to benefit from LS usage. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.11..11> CACHE_LS
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CACHECFG_CACHE_CLKGATE  --------------------------
// SVD Line: 5088

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CACHE_CLKGATE
//    <name> CACHE_CLKGATE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40018000) Enable clock gating of cache TAG RAM. Software should enable this bit for optimal power efficiency. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.10..10> CACHE_CLKGATE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CACHECFG_DCACHE_ENABLE  --------------------------
// SVD Line: 5095

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_DCACHE_ENABLE
//    <name> DCACHE_ENABLE </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40018000) Enable Flash Data Caching. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.9..9> DCACHE_ENABLE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CACHECFG_ICACHE_ENABLE  --------------------------
// SVD Line: 5102

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ICACHE_ENABLE
//    <name> ICACHE_ENABLE </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40018000) Enable Flash Instruction Caching </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.8..8> ICACHE_ENABLE
//    </check>
//  </item>
//  


// --------------------------  Field Item: CACHECTRL_CACHECFG_CONFIG  -----------------------------
// SVD Line: 5109

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CONFIG
//    <name> CONFIG </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40018000) \nSets the cache configuration\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : W1_128B_512E = Direct mapped, 128-bit linesize, 512 entries (4 SRAMs active) value.\n5 : W2_128B_512E = Two-way set associative, 128-bit linesize, 512 entries (8 SRAMs active) value.\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : W1_128B_1024E = Direct mapped, 128-bit linesize, 1024 entries (8 SRAMs active) value.\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.7..4> CONFIG
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: W1_128B_512E = Direct mapped, 128-bit linesize, 512 entries (4 SRAMs active) value.
//        <5=> 5: W2_128B_512E = Two-way set associative, 128-bit linesize, 512 entries (8 SRAMs active) value.
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: W1_128B_1024E = Direct mapped, 128-bit linesize, 1024 entries (8 SRAMs active) value.
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------  Field Item: CACHECTRL_CACHECFG_ENABLE_NC1  ---------------------------
// SVD Line: 5132

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_NC1
//    <name> ENABLE_NC1 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40018000) Enable Non-cacheable region 1. See NCR1 registers to define the region. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.3..3> ENABLE_NC1
//    </check>
//  </item>
//  


// ------------------------  Field Item: CACHECTRL_CACHECFG_ENABLE_NC0  ---------------------------
// SVD Line: 5139

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_NC0
//    <name> ENABLE_NC0 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40018000) Enable Non-cacheable region 0. See NCR0 registers to define the region. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.2..2> ENABLE_NC0
//    </check>
//  </item>
//  


// ---------------------------  Field Item: CACHECTRL_CACHECFG_LRU  -------------------------------
// SVD Line: 5146

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_LRU
//    <name> LRU </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40018000) Sets the cache repleacment policy. 0=LRR (least recently replaced), 1=LRU (least recently used). LRR minimizes writes to the TAG SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.1..1> LRU
//    </check>
//  </item>
//  


// --------------------------  Field Item: CACHECTRL_CACHECFG_ENABLE  -----------------------------
// SVD Line: 5153

//  <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40018000) Enables the flash cache controller and enables power to the cache SRAMs. The ICACHE_ENABLE and DCACHE_ENABLE should be set to enable caching for each type of access. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CACHECFG ) </loc>
//      <o.0..0> ENABLE
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: CACHECTRL_CACHECFG  -------------------------------
// SVD Line: 5057

//  <rtree> SFDITEM_REG__CACHECTRL_CACHECFG
//    <name> CACHECFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018000) Flash Cache Control Register </i>
//    <loc> ( (unsigned int)((CACHECTRL_CACHECFG >> 0) & 0xFFFFFFFF), ((CACHECTRL_CACHECFG = (CACHECTRL_CACHECFG & ~(0x1100FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1100FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_MONITOR </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_DATA_CLKGATE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CACHE_LS </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CACHE_CLKGATE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_DCACHE_ENABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ICACHE_ENABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_CONFIG </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_NC1 </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE_NC0 </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_LRU </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CACHECFG_ENABLE </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CACHECTRL_FLASHCFG  ---------------------------
// SVD Line: 5162

unsigned int CACHECTRL_FLASHCFG __AT (0x40018004);



// -------------------------  Field Item: CACHECTRL_FLASHCFG_LPMMODE  -----------------------------
// SVD Line: 5172

//  <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_LPMMODE
//    <name> LPMMODE </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x40018004) \nControls flash low power modes (control of LPM pin).\n0 : NEVER = High power mode (LPM not used). value.\n1 : STANDBY = Fast Standby mode. LPM deasserted for read operations, but asserted while flash IDLE. value.\n2 : ALWAYS = Low Power mode. LPM always asserted for reads. LPM_RD_WAIT must be programmed to accomodate longer read access times. value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) CACHECTRL_FLASHCFG ) </loc>
//      <o.13..12> LPMMODE
//        <0=> 0: NEVER = High power mode (LPM not used). value.
//        <1=> 1: STANDBY = Fast Standby mode. LPM deasserted for read operations, but asserted while flash IDLE. value.
//        <2=> 2: ALWAYS = Low Power mode. LPM always asserted for reads. LPM_RD_WAIT must be programmed to accomodate longer read access times. value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -----------------------  Field Item: CACHECTRL_FLASHCFG_LPM_RD_WAIT  ---------------------------
// SVD Line: 5195

//  <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_LPM_RD_WAIT
//    <name> LPM_RD_WAIT </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40018004) Sets flash waitstates when in LPM Mode 2 (RD_WAIT in LPM mode 2 only) </i>
//    <edit> 
//      <loc> ( (unsigned char)((CACHECTRL_FLASHCFG >> 8) & 0xF), ((CACHECTRL_FLASHCFG = (CACHECTRL_FLASHCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: CACHECTRL_FLASHCFG_SEDELAY  -----------------------------
// SVD Line: 5202

//  <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_SEDELAY
//    <name> SEDELAY </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40018004) Sets SE delay (flash address setup). A value of 5 is recommended. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CACHECTRL_FLASHCFG >> 4) & 0x7), ((CACHECTRL_FLASHCFG = (CACHECTRL_FLASHCFG & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: CACHECTRL_FLASHCFG_RD_WAIT  -----------------------------
// SVD Line: 5209

//  <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_RD_WAIT
//    <name> RD_WAIT </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40018004) Sets read waitstates for normal (fast) operation. A value of 1 is recommended. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CACHECTRL_FLASHCFG >> 0) & 0xF), ((CACHECTRL_FLASHCFG = (CACHECTRL_FLASHCFG & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CACHECTRL_FLASHCFG  -------------------------------
// SVD Line: 5162

//  <rtree> SFDITEM_REG__CACHECTRL_FLASHCFG
//    <name> FLASHCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018004) Flash Control Register </i>
//    <loc> ( (unsigned int)((CACHECTRL_FLASHCFG >> 0) & 0xFFFFFFFF), ((CACHECTRL_FLASHCFG = (CACHECTRL_FLASHCFG & ~(0x3F7FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_LPMMODE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_LPM_RD_WAIT </item>
//    <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_SEDELAY </item>
//    <item> SFDITEM_FIELD__CACHECTRL_FLASHCFG_RD_WAIT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CACHECTRL_CTRL  -----------------------------
// SVD Line: 5218

unsigned int CACHECTRL_CTRL __AT (0x40018008);



// ----------------------  Field Item: CACHECTRL_CTRL_FLASH1_SLM_ENABLE  --------------------------
// SVD Line: 5228

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_ENABLE
//    <name> FLASH1_SLM_ENABLE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40018008) Enable Flash Sleep Mode. Write to 1 to put flash 1 into sleep mode. NOTE: there is a 5us latency after waking flash until the first access will be returned. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.10..10> FLASH1_SLM_ENABLE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CTRL_FLASH1_SLM_DISABLE  -------------------------
// SVD Line: 5235

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_DISABLE
//    <name> FLASH1_SLM_DISABLE </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40018008) Disable Flash Sleep Mode. Write 1 to wake flash1 from sleep mode (reading the array will also automatically wake it). </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.9..9> FLASH1_SLM_DISABLE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CTRL_FLASH1_SLM_STATUS  --------------------------
// SVD Line: 5242

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_STATUS
//    <name> FLASH1_SLM_STATUS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40018008) Flash Sleep Mode Status. 1 indicates that flash1 is in sleep mode, 0 indicates flash1 is in normal mode. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.8..8> FLASH1_SLM_STATUS
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CTRL_FLASH0_SLM_ENABLE  --------------------------
// SVD Line: 5249

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_ENABLE
//    <name> FLASH0_SLM_ENABLE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40018008) Enable Flash Sleep Mode. Write to 1 to put flash 0 into sleep mode. NOTE: there is a 5us latency after waking flash until the first access will be returned. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.6..6> FLASH0_SLM_ENABLE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CTRL_FLASH0_SLM_DISABLE  -------------------------
// SVD Line: 5256

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_DISABLE
//    <name> FLASH0_SLM_DISABLE </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40018008) Disable Flash Sleep Mode. Write 1 to wake flash0 from sleep mode (reading the array will also automatically wake it). </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.5..5> FLASH0_SLM_DISABLE
//    </check>
//  </item>
//  


// ----------------------  Field Item: CACHECTRL_CTRL_FLASH0_SLM_STATUS  --------------------------
// SVD Line: 5263

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_STATUS
//    <name> FLASH0_SLM_STATUS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40018008) Flash Sleep Mode Status. 1 indicates that flash0 is in sleep mode, 0 indicates flash0 is in normal mode. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.4..4> FLASH0_SLM_STATUS
//    </check>
//  </item>
//  


// -------------------------  Field Item: CACHECTRL_CTRL_CACHE_READY  -----------------------------
// SVD Line: 5270

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_CACHE_READY
//    <name> CACHE_READY </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40018008) Cache Ready Status (enabled and not processing an invalidate operation) </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.2..2> CACHE_READY
//    </check>
//  </item>
//  


// --------------------------  Field Item: CACHECTRL_CTRL_RESET_STAT  -----------------------------
// SVD Line: 5277

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_RESET_STAT
//    <name> RESET_STAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40018008) \nReset Cache Statistics. When written to a 1, the cache monitor counters will be cleared. The monitor counters can be reset only when the CACHECFG.ENABLE_MONITOR bit is set.\n0 : Reserved - do not use\n1 : CLEAR = Clear Cache Stats value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.1..1> RESET_STAT
//        <0=> 0: 
//        <1=> 1: CLEAR = Clear Cache Stats value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CACHECTRL_CTRL_INVALIDATE  -----------------------------
// SVD Line: 5290

//  <item> SFDITEM_FIELD__CACHECTRL_CTRL_INVALIDATE
//    <name> INVALIDATE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40018008) Writing a 1 to this bitfield invalidates the flash cache contents. </i>
//    <check> 
//      <loc> ( (unsigned int) CACHECTRL_CTRL ) </loc>
//      <o.0..0> INVALIDATE
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_CTRL  ---------------------------------
// SVD Line: 5218

//  <rtree> SFDITEM_REG__CACHECTRL_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018008) Cache Control </i>
//    <loc> ( (unsigned int)((CACHECTRL_CTRL >> 0) & 0xFFFFFFFF), ((CACHECTRL_CTRL = (CACHECTRL_CTRL & ~(0x777UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x777) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_ENABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_DISABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH1_SLM_STATUS </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_ENABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_DISABLE </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_FLASH0_SLM_STATUS </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_CACHE_READY </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_RESET_STAT </item>
//    <item> SFDITEM_FIELD__CACHECTRL_CTRL_INVALIDATE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: CACHECTRL_NCR0START  ---------------------------
// SVD Line: 5299

unsigned int CACHECTRL_NCR0START __AT (0x40018010);



// --------------------------  Field Item: CACHECTRL_NCR0START_ADDR  ------------------------------
// SVD Line: 5309

//  <item> SFDITEM_FIELD__CACHECTRL_NCR0START_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 26..4] RW (@ 0x40018010) Start address for non-cacheable region 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_NCR0START >> 4) & 0x7FFFFF), ((CACHECTRL_NCR0START = (CACHECTRL_NCR0START & ~(0x7FFFFFUL << 4 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CACHECTRL_NCR0START  ------------------------------
// SVD Line: 5299

//  <rtree> SFDITEM_REG__CACHECTRL_NCR0START
//    <name> NCR0START </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018010) Flash Cache Noncachable Region 0 Start </i>
//    <loc> ( (unsigned int)((CACHECTRL_NCR0START >> 0) & 0xFFFFFFFF), ((CACHECTRL_NCR0START = (CACHECTRL_NCR0START & ~(0x7FFFFF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_NCR0START_ADDR </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CACHECTRL_NCR0END  ----------------------------
// SVD Line: 5318

unsigned int CACHECTRL_NCR0END __AT (0x40018014);



// ---------------------------  Field Item: CACHECTRL_NCR0END_ADDR  -------------------------------
// SVD Line: 5328

//  <item> SFDITEM_FIELD__CACHECTRL_NCR0END_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 26..4] RW (@ 0x40018014) End address for non-cacheable region 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_NCR0END >> 4) & 0x7FFFFF), ((CACHECTRL_NCR0END = (CACHECTRL_NCR0END & ~(0x7FFFFFUL << 4 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CACHECTRL_NCR0END  -------------------------------
// SVD Line: 5318

//  <rtree> SFDITEM_REG__CACHECTRL_NCR0END
//    <name> NCR0END </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018014) Flash Cache Noncachable Region 0 End </i>
//    <loc> ( (unsigned int)((CACHECTRL_NCR0END >> 0) & 0xFFFFFFFF), ((CACHECTRL_NCR0END = (CACHECTRL_NCR0END & ~(0x7FFFFF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_NCR0END_ADDR </item>
//  </rtree>
//  


// -----------------------  Register Item Address: CACHECTRL_NCR1START  ---------------------------
// SVD Line: 5337

unsigned int CACHECTRL_NCR1START __AT (0x40018018);



// --------------------------  Field Item: CACHECTRL_NCR1START_ADDR  ------------------------------
// SVD Line: 5347

//  <item> SFDITEM_FIELD__CACHECTRL_NCR1START_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 26..4] RW (@ 0x40018018) Start address for non-cacheable region 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_NCR1START >> 4) & 0x7FFFFF), ((CACHECTRL_NCR1START = (CACHECTRL_NCR1START & ~(0x7FFFFFUL << 4 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CACHECTRL_NCR1START  ------------------------------
// SVD Line: 5337

//  <rtree> SFDITEM_REG__CACHECTRL_NCR1START
//    <name> NCR1START </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018018) Flash Cache Noncachable Region 1 Start </i>
//    <loc> ( (unsigned int)((CACHECTRL_NCR1START >> 0) & 0xFFFFFFFF), ((CACHECTRL_NCR1START = (CACHECTRL_NCR1START & ~(0x7FFFFF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_NCR1START_ADDR </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CACHECTRL_NCR1END  ----------------------------
// SVD Line: 5356

unsigned int CACHECTRL_NCR1END __AT (0x4001801C);



// ---------------------------  Field Item: CACHECTRL_NCR1END_ADDR  -------------------------------
// SVD Line: 5366

//  <item> SFDITEM_FIELD__CACHECTRL_NCR1END_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 26..4] RW (@ 0x4001801C) End address for non-cacheable region 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_NCR1END >> 4) & 0x7FFFFF), ((CACHECTRL_NCR1END = (CACHECTRL_NCR1END & ~(0x7FFFFFUL << 4 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CACHECTRL_NCR1END  -------------------------------
// SVD Line: 5356

//  <rtree> SFDITEM_REG__CACHECTRL_NCR1END
//    <name> NCR1END </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001801C) Flash Cache Noncachable Region 1 End </i>
//    <loc> ( (unsigned int)((CACHECTRL_NCR1END >> 0) & 0xFFFFFFFF), ((CACHECTRL_NCR1END = (CACHECTRL_NCR1END & ~(0x7FFFFF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFFF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_NCR1END_ADDR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_DMON0  -----------------------------
// SVD Line: 5375

unsigned int CACHECTRL_DMON0 __AT (0x40018040);



// ------------------------  Field Item: CACHECTRL_DMON0_DACCESS_COUNT  ---------------------------
// SVD Line: 5385

//  <item> SFDITEM_FIELD__CACHECTRL_DMON0_DACCESS_COUNT
//    <name> DACCESS_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018040) Total accesses to data cache. All performance metrics should be relative to the number of accesses performed. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_DMON0 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON0 = (CACHECTRL_DMON0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_DMON0  --------------------------------
// SVD Line: 5375

//  <rtree> SFDITEM_REG__CACHECTRL_DMON0
//    <name> DMON0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018040) Data Cache Total Accesses </i>
//    <loc> ( (unsigned int)((CACHECTRL_DMON0 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON0 = (CACHECTRL_DMON0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_DMON0_DACCESS_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_DMON1  -----------------------------
// SVD Line: 5394

unsigned int CACHECTRL_DMON1 __AT (0x40018044);



// ------------------------  Field Item: CACHECTRL_DMON1_DLOOKUP_COUNT  ---------------------------
// SVD Line: 5404

//  <item> SFDITEM_FIELD__CACHECTRL_DMON1_DLOOKUP_COUNT
//    <name> DLOOKUP_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018044) Total tag lookups from data cache. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_DMON1 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON1 = (CACHECTRL_DMON1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_DMON1  --------------------------------
// SVD Line: 5394

//  <rtree> SFDITEM_REG__CACHECTRL_DMON1
//    <name> DMON1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018044) Data Cache Tag Lookups </i>
//    <loc> ( (unsigned int)((CACHECTRL_DMON1 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON1 = (CACHECTRL_DMON1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_DMON1_DLOOKUP_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_DMON2  -----------------------------
// SVD Line: 5413

unsigned int CACHECTRL_DMON2 __AT (0x40018048);



// -------------------------  Field Item: CACHECTRL_DMON2_DHIT_COUNT  -----------------------------
// SVD Line: 5423

//  <item> SFDITEM_FIELD__CACHECTRL_DMON2_DHIT_COUNT
//    <name> DHIT_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018048) Cache hits from lookup operations. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_DMON2 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON2 = (CACHECTRL_DMON2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_DMON2  --------------------------------
// SVD Line: 5413

//  <rtree> SFDITEM_REG__CACHECTRL_DMON2
//    <name> DMON2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018048) Data Cache Hits </i>
//    <loc> ( (unsigned int)((CACHECTRL_DMON2 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON2 = (CACHECTRL_DMON2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_DMON2_DHIT_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_DMON3  -----------------------------
// SVD Line: 5432

unsigned int CACHECTRL_DMON3 __AT (0x4001804C);



// -------------------------  Field Item: CACHECTRL_DMON3_DLINE_COUNT  ----------------------------
// SVD Line: 5442

//  <item> SFDITEM_FIELD__CACHECTRL_DMON3_DLINE_COUNT
//    <name> DLINE_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001804C) Cache hits from line cache </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_DMON3 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON3 = (CACHECTRL_DMON3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_DMON3  --------------------------------
// SVD Line: 5432

//  <rtree> SFDITEM_REG__CACHECTRL_DMON3
//    <name> DMON3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001804C) Data Cache Line Hits </i>
//    <loc> ( (unsigned int)((CACHECTRL_DMON3 >> 0) & 0xFFFFFFFF), ((CACHECTRL_DMON3 = (CACHECTRL_DMON3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_DMON3_DLINE_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_IMON0  -----------------------------
// SVD Line: 5451

unsigned int CACHECTRL_IMON0 __AT (0x40018050);



// ------------------------  Field Item: CACHECTRL_IMON0_IACCESS_COUNT  ---------------------------
// SVD Line: 5461

//  <item> SFDITEM_FIELD__CACHECTRL_IMON0_IACCESS_COUNT
//    <name> IACCESS_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018050) Total accesses to Instruction cache </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_IMON0 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON0 = (CACHECTRL_IMON0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_IMON0  --------------------------------
// SVD Line: 5451

//  <rtree> SFDITEM_REG__CACHECTRL_IMON0
//    <name> IMON0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018050) Instruction Cache Total Accesses </i>
//    <loc> ( (unsigned int)((CACHECTRL_IMON0 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON0 = (CACHECTRL_IMON0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_IMON0_IACCESS_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_IMON1  -----------------------------
// SVD Line: 5470

unsigned int CACHECTRL_IMON1 __AT (0x40018054);



// ------------------------  Field Item: CACHECTRL_IMON1_ILOOKUP_COUNT  ---------------------------
// SVD Line: 5480

//  <item> SFDITEM_FIELD__CACHECTRL_IMON1_ILOOKUP_COUNT
//    <name> ILOOKUP_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018054) Total tag lookups from Instruction cache </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_IMON1 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON1 = (CACHECTRL_IMON1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_IMON1  --------------------------------
// SVD Line: 5470

//  <rtree> SFDITEM_REG__CACHECTRL_IMON1
//    <name> IMON1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018054) Instruction Cache Tag Lookups </i>
//    <loc> ( (unsigned int)((CACHECTRL_IMON1 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON1 = (CACHECTRL_IMON1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_IMON1_ILOOKUP_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_IMON2  -----------------------------
// SVD Line: 5489

unsigned int CACHECTRL_IMON2 __AT (0x40018058);



// -------------------------  Field Item: CACHECTRL_IMON2_IHIT_COUNT  -----------------------------
// SVD Line: 5499

//  <item> SFDITEM_FIELD__CACHECTRL_IMON2_IHIT_COUNT
//    <name> IHIT_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018058) Cache hits from lookup operations </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_IMON2 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON2 = (CACHECTRL_IMON2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_IMON2  --------------------------------
// SVD Line: 5489

//  <rtree> SFDITEM_REG__CACHECTRL_IMON2
//    <name> IMON2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40018058) Instruction Cache Hits </i>
//    <loc> ( (unsigned int)((CACHECTRL_IMON2 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON2 = (CACHECTRL_IMON2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_IMON2_IHIT_COUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CACHECTRL_IMON3  -----------------------------
// SVD Line: 5508

unsigned int CACHECTRL_IMON3 __AT (0x4001805C);



// -------------------------  Field Item: CACHECTRL_IMON3_ILINE_COUNT  ----------------------------
// SVD Line: 5518

//  <item> SFDITEM_FIELD__CACHECTRL_IMON3_ILINE_COUNT
//    <name> ILINE_COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001805C) Cache hits from line cache </i>
//    <edit> 
//      <loc> ( (unsigned int)((CACHECTRL_IMON3 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON3 = (CACHECTRL_IMON3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CACHECTRL_IMON3  --------------------------------
// SVD Line: 5508

//  <rtree> SFDITEM_REG__CACHECTRL_IMON3
//    <name> IMON3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001805C) Instruction Cache Line Hits </i>
//    <loc> ( (unsigned int)((CACHECTRL_IMON3 >> 0) & 0xFFFFFFFF), ((CACHECTRL_IMON3 = (CACHECTRL_IMON3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CACHECTRL_IMON3_ILINE_COUNT </item>
//  </rtree>
//  


// -------------------------------  Peripheral View: CACHECTRL  -----------------------------------
// SVD Line: 5041

//  <view> CACHECTRL
//    <name> CACHECTRL </name>
//    <item> SFDITEM_REG__CACHECTRL_CACHECFG </item>
//    <item> SFDITEM_REG__CACHECTRL_FLASHCFG </item>
//    <item> SFDITEM_REG__CACHECTRL_CTRL </item>
//    <item> SFDITEM_REG__CACHECTRL_NCR0START </item>
//    <item> SFDITEM_REG__CACHECTRL_NCR0END </item>
//    <item> SFDITEM_REG__CACHECTRL_NCR1START </item>
//    <item> SFDITEM_REG__CACHECTRL_NCR1END </item>
//    <item> SFDITEM_REG__CACHECTRL_DMON0 </item>
//    <item> SFDITEM_REG__CACHECTRL_DMON1 </item>
//    <item> SFDITEM_REG__CACHECTRL_DMON2 </item>
//    <item> SFDITEM_REG__CACHECTRL_DMON3 </item>
//    <item> SFDITEM_REG__CACHECTRL_IMON0 </item>
//    <item> SFDITEM_REG__CACHECTRL_IMON1 </item>
//    <item> SFDITEM_REG__CACHECTRL_IMON2 </item>
//    <item> SFDITEM_REG__CACHECTRL_IMON3 </item>
//  </view>
//  


// ---------------------------  Register Item Address: CLKGEN_CALXT  ------------------------------
// SVD Line: 5549

unsigned int CLKGEN_CALXT __AT (0x40004000);



// -----------------------------  Field Item: CLKGEN_CALXT_CALXT  ---------------------------------
// SVD Line: 5559

//  <item> SFDITEM_FIELD__CLKGEN_CALXT_CALXT
//    <name> CALXT </name>
//    <rw> 
//    <i> [Bits 10..0] RW (@ 0x40004000) XT Oscillator calibration value. This register will enable the hardware to increase or decrease the number of cycles in a 16KHz clock derived from the original 32KHz version. The most significant bit is the sign. A '1' is a reduction, and a '0' is an addition. This calibration value will add or reduce the number of cycles programmed here across a 32 second interval. The maximum value that is effective is from -1024 to 1023. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CLKGEN_CALXT >> 0) & 0x7FF), ((CLKGEN_CALXT = (CLKGEN_CALXT & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_CALXT  ----------------------------------
// SVD Line: 5549

//  <rtree> SFDITEM_REG__CLKGEN_CALXT
//    <name> CALXT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004000) XT Oscillator Control </i>
//    <loc> ( (unsigned int)((CLKGEN_CALXT >> 0) & 0xFFFFFFFF), ((CLKGEN_CALXT = (CLKGEN_CALXT & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CALXT_CALXT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CLKGEN_CALRC  ------------------------------
// SVD Line: 5568

unsigned int CLKGEN_CALRC __AT (0x40004004);



// -----------------------------  Field Item: CLKGEN_CALRC_CALRC  ---------------------------------
// SVD Line: 5578

//  <item> SFDITEM_FIELD__CLKGEN_CALRC_CALRC
//    <name> CALRC </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x40004004) LFRC Oscillator calibration value. This register will enable the hardware to increase or decrease the number of cycles in a 512 Hz clock derived from the original 1024 version. The most significant bit is the sign. A '1' is a reduction, and a '0' is an addition. This calibration value will add or reduce the number of cycles programmed here across a 32 second interval. The range is from -131072 (decimal) to 131071 (decimal). This register is normally used in conjuction with ACALCTR register. The CALRC register will load the ACALCTR register (bits 17:0) if the ACALCTR register is set to measure the LFRC with the XT clock. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_CALRC >> 0) & 0x3FFFF), ((CLKGEN_CALRC = (CLKGEN_CALRC & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_CALRC  ----------------------------------
// SVD Line: 5568

//  <rtree> SFDITEM_REG__CLKGEN_CALRC
//    <name> CALRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004004) RC Oscillator Control </i>
//    <loc> ( (unsigned int)((CLKGEN_CALRC >> 0) & 0xFFFFFFFF), ((CLKGEN_CALRC = (CLKGEN_CALRC & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CALRC_CALRC </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CLKGEN_ACALCTR  -----------------------------
// SVD Line: 5587

unsigned int CLKGEN_ACALCTR __AT (0x40004008);



// ---------------------------  Field Item: CLKGEN_ACALCTR_ACALCTR  -------------------------------
// SVD Line: 5597

//  <item> SFDITEM_FIELD__CLKGEN_ACALCTR_ACALCTR
//    <name> ACALCTR </name>
//    <rw> 
//    <i> [Bits 23..0] RW (@ 0x40004008) Autocalibration Counter result. Bits 17 down to 0 of this is feed directly to the CALRC register if ACAL register in OCTRL register is set to 1024SEC or 512SEC. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_ACALCTR >> 0) & 0xFFFFFF), ((CLKGEN_ACALCTR = (CLKGEN_ACALCTR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: CLKGEN_ACALCTR  ---------------------------------
// SVD Line: 5587

//  <rtree> SFDITEM_REG__CLKGEN_ACALCTR
//    <name> ACALCTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004008) Autocalibration Counter </i>
//    <loc> ( (unsigned int)((CLKGEN_ACALCTR >> 0) & 0xFFFFFFFF), ((CLKGEN_ACALCTR = (CLKGEN_ACALCTR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_ACALCTR_ACALCTR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CLKGEN_OCTRL  ------------------------------
// SVD Line: 5606

unsigned int CLKGEN_OCTRL __AT (0x4000400C);



// ------------------------------  Field Item: CLKGEN_OCTRL_ACAL  ---------------------------------
// SVD Line: 5616

//  <item> SFDITEM_FIELD__CLKGEN_OCTRL_ACAL
//    <name> ACAL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4000400C) \nAutocalibration control. This selects the source to be used in the autocalibration flow. This flow can also be used to measure an internal clock against an external clock source, with the external clock normally used as the reference.\n0 : DIS = Disable Autocalibration value.\n1 : Reserved - do not use\n2 : 1024SEC = Autocalibrate every 1024 seconds. Once autocalibration is done, an interrupt will be triggered at the end of 1024 seconds. value.\n3 : 512SEC = Autocalibrate every 512 seconds. Once autocalibration is done, an interrupt will be trigged at the end of 512 seconds. value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : XTFREQ = Frequency measurement using XT. The XT clock is normally considered much more accurate than the LFRC clock source. value.\n7 : EXTFREQ = Frequency measurement using external clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_OCTRL ) </loc>
//      <o.10..8> ACAL
//        <0=> 0: DIS = Disable Autocalibration value.
//        <1=> 1: 
//        <2=> 2: 1024SEC = Autocalibrate every 1024 seconds. Once autocalibration is done, an interrupt will be triggered at the end of 1024 seconds. value.
//        <3=> 3: 512SEC = Autocalibrate every 512 seconds. Once autocalibration is done, an interrupt will be trigged at the end of 512 seconds. value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: XTFREQ = Frequency measurement using XT. The XT clock is normally considered much more accurate than the LFRC clock source. value.
//        <7=> 7: EXTFREQ = Frequency measurement using external clock. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: CLKGEN_OCTRL_OSEL  ---------------------------------
// SVD Line: 5649

//  <item> SFDITEM_FIELD__CLKGEN_OCTRL_OSEL
//    <name> OSEL </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000400C) \nSelects the RTC oscillator (1 => LFRC, 0 => XT)\n0 : RTC_XT = RTC uses the XT value.\n1 : RTC_LFRC = RTC uses the LFRC value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_OCTRL ) </loc>
//      <o.7..7> OSEL
//        <0=> 0: RTC_XT = RTC uses the XT value.
//        <1=> 1: RTC_LFRC = RTC uses the LFRC value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: CLKGEN_OCTRL_FOS  ----------------------------------
// SVD Line: 5667

//  <item> SFDITEM_FIELD__CLKGEN_OCTRL_FOS
//    <name> FOS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000400C) \nOscillator switch on failure function. If this is set, then LFRC clock source will switch from XT to RC.\n0 : DIS = Disable the oscillator switch on failure function. value.\n1 : EN = Enable the oscillator switch on failure function. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_OCTRL ) </loc>
//      <o.6..6> FOS
//        <0=> 0: DIS = Disable the oscillator switch on failure function. value.
//        <1=> 1: EN = Enable the oscillator switch on failure function. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_OCTRL_STOPRC  --------------------------------
// SVD Line: 5685

//  <item> SFDITEM_FIELD__CLKGEN_OCTRL_STOPRC
//    <name> STOPRC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000400C) \nStop the LFRC Oscillator to the RTC\n0 : EN = Enable the LFRC Oscillator to drive the RTC value.\n1 : STOP = Stop the LFRC Oscillator when driving the RTC value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_OCTRL ) </loc>
//      <o.1..1> STOPRC
//        <0=> 0: EN = Enable the LFRC Oscillator to drive the RTC value.
//        <1=> 1: STOP = Stop the LFRC Oscillator when driving the RTC value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_OCTRL_STOPXT  --------------------------------
// SVD Line: 5703

//  <item> SFDITEM_FIELD__CLKGEN_OCTRL_STOPXT
//    <name> STOPXT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000400C) \nStop the XT Oscillator to the RTC\n0 : EN = Enable the XT Oscillator to drive the RTC value.\n1 : STOP = Stop the XT Oscillator when driving the RTC value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_OCTRL ) </loc>
//      <o.0..0> STOPXT
//        <0=> 0: EN = Enable the XT Oscillator to drive the RTC value.
//        <1=> 1: STOP = Stop the XT Oscillator when driving the RTC value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_OCTRL  ----------------------------------
// SVD Line: 5606

//  <rtree> SFDITEM_REG__CLKGEN_OCTRL
//    <name> OCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000400C) Oscillator Control </i>
//    <loc> ( (unsigned int)((CLKGEN_OCTRL >> 0) & 0xFFFFFFFF), ((CLKGEN_OCTRL = (CLKGEN_OCTRL & ~(0x7C3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7C3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_OCTRL_ACAL </item>
//    <item> SFDITEM_FIELD__CLKGEN_OCTRL_OSEL </item>
//    <item> SFDITEM_FIELD__CLKGEN_OCTRL_FOS </item>
//    <item> SFDITEM_FIELD__CLKGEN_OCTRL_STOPRC </item>
//    <item> SFDITEM_FIELD__CLKGEN_OCTRL_STOPXT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CLKGEN_CLKOUT  ------------------------------
// SVD Line: 5723

unsigned int CLKGEN_CLKOUT __AT (0x40004010);



// -----------------------------  Field Item: CLKGEN_CLKOUT_CKEN  ---------------------------------
// SVD Line: 5733

//  <item> SFDITEM_FIELD__CLKGEN_CLKOUT_CKEN
//    <name> CKEN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40004010) \nEnable the CLKOUT signal\n0 : DIS = Disable CLKOUT value.\n1 : EN = Enable CLKOUT value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_CLKOUT ) </loc>
//      <o.7..7> CKEN
//        <0=> 0: DIS = Disable CLKOUT value.
//        <1=> 1: EN = Enable CLKOUT value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_CLKOUT_CKSEL  --------------------------------
// SVD Line: 5751

//  <item> SFDITEM_FIELD__CLKGEN_CLKOUT_CKSEL
//    <name> CKSEL </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40004010) \nCLKOUT signal select\n0 : LFRC = LFRC value.\n1 : XT_DIV2 = XT / 2 value.\n2 : XT_DIV4 = XT / 4 value.\n3 : XT_DIV8 = XT / 8 value.\n4 : XT_DIV16 = XT / 16 value.\n5 : XT_DIV32 = XT / 32 value.\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : RTC_1Hz = 1 Hz as selected in RTC value.\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : XT_DIV2M = XT / 2^21 value.\n23 : XT = XT value.\n24 : CG_100Hz = 100 Hz as selected in CLKGEN value.\n25 : HFRC = HFRC value.\n26 : HFRC_DIV4 = HFRC / 4 value.\n27 : HFRC_DIV8 = HFRC / 8 value.\n28 : HFRC_DIV16 = HFRC / 16 value.\n29 : HFRC_DIV64 = HFRC / 64 value.\n30 : HFRC_DIV128 = HFRC / 128 value.\n31 : HFRC_DIV256 = HFRC / 256 value.\n32 : HFRC_DIV512 = HFRC / 512 value.\n33 : Reserved - do not use\n34 : FLASH_CLK = Flash Clock value.\n35 : LFRC_DIV2 = LFRC / 2 value.\n36 : LFRC_DIV32 = LFRC / 32 value.\n37 : LFRC_DIV512 = LFRC / 512 value.\n38 : LFRC_DIV32K = LFRC / 32768 value.\n39 : XT_DIV256 = XT / 256 value.\n40 : XT_DIV8K = XT / 8192 value.\n41 : XT_DIV64K = XT / 2^16 value.\n42 : ULFRC_DIV16 = Uncal LFRC / 16 value.\n43 : ULFRC_DIV128 = Uncal LFRC / 128 value.\n44 : ULFRC_1Hz = Uncal LFRC / 1024 value.\n45 : ULFRC_DIV4K = Uncal LFRC / 4096 value.\n46 : ULFRC_DIV1M = Uncal LFRC / 2^20 value.\n47 : HFRC_DIV64K = HFRC / 2^16 value.\n48 : HFRC_DIV16M = HFRC / 2^24 value.\n49 : LFRC_DIV1M = LFRC / 2^20 value.\n50 : HFRCNE = HFRC (not autoenabled) value.\n51 : HFRCNE_DIV8 = HFRC / 8 (not autoenabled) value.\n52 : Reserved - do not use\n53 : XTNE = XT (not autoenabled) value.\n54 : XTNE_DIV16 = XT / 16 (not autoenabled) value.\n55 : LFRCNE_DIV32 = LFRC / 32 (not autoenabled) value.\n56 : Reserved - do not use\n57 : LFRCNE = LFRC (not autoenabled) - Default for undefined values value.\n58 : Reserved - do not use\n59 : Reserved - do not use\n60 : Reserved - do not use\n61 : Reserved - do not use\n62 : Reserved - do not use\n63 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_CLKOUT ) </loc>
//      <o.5..0> CKSEL
//        <0=> 0: LFRC = LFRC value.
//        <1=> 1: XT_DIV2 = XT / 2 value.
//        <2=> 2: XT_DIV4 = XT / 4 value.
//        <3=> 3: XT_DIV8 = XT / 8 value.
//        <4=> 4: XT_DIV16 = XT / 16 value.
//        <5=> 5: XT_DIV32 = XT / 32 value.
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: RTC_1Hz = 1 Hz as selected in RTC value.
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: XT_DIV2M = XT / 2^21 value.
//        <23=> 23: XT = XT value.
//        <24=> 24: CG_100Hz = 100 Hz as selected in CLKGEN value.
//        <25=> 25: HFRC = HFRC value.
//        <26=> 26: HFRC_DIV4 = HFRC / 4 value.
//        <27=> 27: HFRC_DIV8 = HFRC / 8 value.
//        <28=> 28: HFRC_DIV16 = HFRC / 16 value.
//        <29=> 29: HFRC_DIV64 = HFRC / 64 value.
//        <30=> 30: HFRC_DIV128 = HFRC / 128 value.
//        <31=> 31: HFRC_DIV256 = HFRC / 256 value.
//        <32=> 32: HFRC_DIV512 = HFRC / 512 value.
//        <33=> 33: 
//        <34=> 34: FLASH_CLK = Flash Clock value.
//        <35=> 35: LFRC_DIV2 = LFRC / 2 value.
//        <36=> 36: LFRC_DIV32 = LFRC / 32 value.
//        <37=> 37: LFRC_DIV512 = LFRC / 512 value.
//        <38=> 38: LFRC_DIV32K = LFRC / 32768 value.
//        <39=> 39: XT_DIV256 = XT / 256 value.
//        <40=> 40: XT_DIV8K = XT / 8192 value.
//        <41=> 41: XT_DIV64K = XT / 2^16 value.
//        <42=> 42: ULFRC_DIV16 = Uncal LFRC / 16 value.
//        <43=> 43: ULFRC_DIV128 = Uncal LFRC / 128 value.
//        <44=> 44: ULFRC_1Hz = Uncal LFRC / 1024 value.
//        <45=> 45: ULFRC_DIV4K = Uncal LFRC / 4096 value.
//        <46=> 46: ULFRC_DIV1M = Uncal LFRC / 2^20 value.
//        <47=> 47: HFRC_DIV64K = HFRC / 2^16 value.
//        <48=> 48: HFRC_DIV16M = HFRC / 2^24 value.
//        <49=> 49: LFRC_DIV1M = LFRC / 2^20 value.
//        <50=> 50: HFRCNE = HFRC (not autoenabled) value.
//        <51=> 51: HFRCNE_DIV8 = HFRC / 8 (not autoenabled) value.
//        <52=> 52: 
//        <53=> 53: XTNE = XT (not autoenabled) value.
//        <54=> 54: XTNE_DIV16 = XT / 16 (not autoenabled) value.
//        <55=> 55: LFRCNE_DIV32 = LFRC / 32 (not autoenabled) value.
//        <56=> 56: 
//        <57=> 57: LFRCNE = LFRC (not autoenabled) - Default for undefined values value.
//        <58=> 58: 
//        <59=> 59: 
//        <60=> 60: 
//        <61=> 61: 
//        <62=> 62: 
//        <63=> 63: 
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_CLKOUT  ---------------------------------
// SVD Line: 5723

//  <rtree> SFDITEM_REG__CLKGEN_CLKOUT
//    <name> CLKOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004010) CLKOUT Frequency Select </i>
//    <loc> ( (unsigned int)((CLKGEN_CLKOUT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLKOUT = (CLKGEN_CLKOUT & ~(0xBFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xBF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CLKOUT_CKEN </item>
//    <item> SFDITEM_FIELD__CLKGEN_CLKOUT_CKSEL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CLKGEN_CLKKEY  ------------------------------
// SVD Line: 5961

unsigned int CLKGEN_CLKKEY __AT (0x40004014);



// ----------------------------  Field Item: CLKGEN_CLKKEY_CLKKEY  --------------------------------
// SVD Line: 5971

//  <item> SFDITEM_FIELD__CLKGEN_CLKKEY_CLKKEY
//    <name> CLKKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004014) Key register value. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_CLKKEY >> 0) & 0xFFFFFFFF), ((CLKGEN_CLKKEY = (CLKGEN_CLKKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_CLKKEY  ---------------------------------
// SVD Line: 5961

//  <rtree> SFDITEM_REG__CLKGEN_CLKKEY
//    <name> CLKKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004014) Key Register for Clock Control Register </i>
//    <loc> ( (unsigned int)((CLKGEN_CLKKEY >> 0) & 0xFFFFFFFF), ((CLKGEN_CLKKEY = (CLKGEN_CLKKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CLKKEY_CLKKEY </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CLKGEN_CCTRL  ------------------------------
// SVD Line: 5986

unsigned int CLKGEN_CCTRL __AT (0x40004018);



// ----------------------------  Field Item: CLKGEN_CCTRL_CORESEL  --------------------------------
// SVD Line: 5996

//  <item> SFDITEM_FIELD__CLKGEN_CCTRL_CORESEL
//    <name> CORESEL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004018) \nCore Clock divisor\n0 : HFRC = Core Clock is HFRC value.\n1 : HFRC_DIV2 = Core Clock is HFRC / 2 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_CCTRL ) </loc>
//      <o.0..0> CORESEL
//        <0=> 0: HFRC = Core Clock is HFRC value.
//        <1=> 1: HFRC_DIV2 = Core Clock is HFRC / 2 value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_CCTRL  ----------------------------------
// SVD Line: 5986

//  <rtree> SFDITEM_REG__CLKGEN_CCTRL
//    <name> CCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004018) HFRC Clock Control </i>
//    <loc> ( (unsigned int)((CLKGEN_CCTRL >> 0) & 0xFFFFFFFF), ((CLKGEN_CCTRL = (CLKGEN_CCTRL & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CCTRL_CORESEL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CLKGEN_STATUS  ------------------------------
// SVD Line: 6016

unsigned int CLKGEN_STATUS __AT (0x4000401C);



// -----------------------------  Field Item: CLKGEN_STATUS_OSCF  ---------------------------------
// SVD Line: 6026

//  <item> SFDITEM_FIELD__CLKGEN_STATUS_OSCF
//    <name> OSCF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000401C) XT Oscillator is enabled but not oscillating </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_STATUS ) </loc>
//      <o.1..1> OSCF
//    </check>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_STATUS_OMODE  --------------------------------
// SVD Line: 6033

//  <item> SFDITEM_FIELD__CLKGEN_STATUS_OMODE
//    <name> OMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000401C) Current RTC oscillator (1 => LFRC, 0 => XT). After an RTC oscillator change, it may take up to 2 seconds for this field to reflect the new oscillator. </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_STATUS ) </loc>
//      <o.0..0> OMODE
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_STATUS  ---------------------------------
// SVD Line: 6016

//  <rtree> SFDITEM_REG__CLKGEN_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000401C) Clock Generator Status </i>
//    <loc> ( (unsigned int)((CLKGEN_STATUS >> 0) & 0xFFFFFFFF), ((CLKGEN_STATUS = (CLKGEN_STATUS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_STATUS_OSCF </item>
//    <item> SFDITEM_FIELD__CLKGEN_STATUS_OMODE </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CLKGEN_HFADJ  ------------------------------
// SVD Line: 6042

unsigned int CLKGEN_HFADJ __AT (0x40004020);



// ---------------------------  Field Item: CLKGEN_HFADJ_HFADJGAIN  -------------------------------
// SVD Line: 6052

//  <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJGAIN
//    <name> HFADJGAIN </name>
//    <rw> 
//    <i> [Bits 23..21] RW (@ 0x40004020) \nGain control for HFRC adjustment\n0 : Gain_of_1 = HF Adjust with Gain of 1 value.\n1 : Gain_of_1_in_2 = HF Adjust with Gain of 0.5 value.\n2 : Gain_of_1_in_4 = HF Adjust with Gain of 0.25 value.\n3 : Gain_of_1_in_8 = HF Adjust with Gain of 0.125 value.\n4 : Gain_of_1_in_16 = HF Adjust with Gain of 0.0625 value.\n5 : Gain_of_1_in_32 = HF Adjust with Gain of 0.03125 value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_HFADJ ) </loc>
//      <o.23..21> HFADJGAIN
//        <0=> 0: Gain_of_1 = HF Adjust with Gain of 1 value.
//        <1=> 1: Gain_of_1_in_2 = HF Adjust with Gain of 0.5 value.
//        <2=> 2: Gain_of_1_in_4 = HF Adjust with Gain of 0.25 value.
//        <3=> 3: Gain_of_1_in_8 = HF Adjust with Gain of 0.125 value.
//        <4=> 4: Gain_of_1_in_16 = HF Adjust with Gain of 0.0625 value.
//        <5=> 5: Gain_of_1_in_32 = HF Adjust with Gain of 0.03125 value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_HFADJ_HFWARMUP  -------------------------------
// SVD Line: 6090

//  <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFWARMUP
//    <name> HFWARMUP </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40004020) \nXT warmup period for HFRC adjustment\n0 : 1SEC = Autoadjust XT warmup period = 1-2 seconds value.\n1 : 2SEC = Autoadjust XT warmup period = 2-4 seconds value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_HFADJ ) </loc>
//      <o.20..20> HFWARMUP
//        <0=> 0: 1SEC = Autoadjust XT warmup period = 1-2 seconds value.
//        <1=> 1: 2SEC = Autoadjust XT warmup period = 2-4 seconds value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_HFADJ_HFXTADJ  --------------------------------
// SVD Line: 6108

//  <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFXTADJ
//    <name> HFXTADJ </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x40004020) Target HFRC adjustment value. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CLKGEN_HFADJ >> 8) & 0xFFF), ((CLKGEN_HFADJ = (CLKGEN_HFADJ & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_HFADJ_HFADJCK  --------------------------------
// SVD Line: 6115

//  <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJCK
//    <name> HFADJCK </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40004020) \nRepeat period for HFRC adjustment\n0 : 4SEC = Autoadjust repeat period = 4 seconds value.\n1 : 16SEC = Autoadjust repeat period = 16 seconds value.\n2 : 32SEC = Autoadjust repeat period = 32 seconds value.\n3 : 64SEC = Autoadjust repeat period = 64 seconds value.\n4 : 128SEC = Autoadjust repeat period = 128 seconds value.\n5 : 256SEC = Autoadjust repeat period = 256 seconds value.\n6 : 512SEC = Autoadjust repeat period = 512 seconds value.\n7 : 1024SEC = Autoadjust repeat period = 1024 seconds value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_HFADJ ) </loc>
//      <o.3..1> HFADJCK
//        <0=> 0: 4SEC = Autoadjust repeat period = 4 seconds value.
//        <1=> 1: 16SEC = Autoadjust repeat period = 16 seconds value.
//        <2=> 2: 32SEC = Autoadjust repeat period = 32 seconds value.
//        <3=> 3: 64SEC = Autoadjust repeat period = 64 seconds value.
//        <4=> 4: 128SEC = Autoadjust repeat period = 128 seconds value.
//        <5=> 5: 256SEC = Autoadjust repeat period = 256 seconds value.
//        <6=> 6: 512SEC = Autoadjust repeat period = 512 seconds value.
//        <7=> 7: 1024SEC = Autoadjust repeat period = 1024 seconds value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_HFADJ_HFADJEN  --------------------------------
// SVD Line: 6163

//  <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJEN
//    <name> HFADJEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004020) \nHFRC adjustment control\n0 : DIS = Disable the HFRC adjustment value.\n1 : EN = Enable the HFRC adjustment value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_HFADJ ) </loc>
//      <o.0..0> HFADJEN
//        <0=> 0: DIS = Disable the HFRC adjustment value.
//        <1=> 1: EN = Enable the HFRC adjustment value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CLKGEN_HFADJ  ----------------------------------
// SVD Line: 6042

//  <rtree> SFDITEM_REG__CLKGEN_HFADJ
//    <name> HFADJ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004020) HFRC Adjustment </i>
//    <loc> ( (unsigned int)((CLKGEN_HFADJ >> 0) & 0xFFFFFFFF), ((CLKGEN_HFADJ = (CLKGEN_HFADJ & ~(0xFFFF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJGAIN </item>
//    <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFWARMUP </item>
//    <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFXTADJ </item>
//    <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJCK </item>
//    <item> SFDITEM_FIELD__CLKGEN_HFADJ_HFADJEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CLKGEN_CLOCKENSTAT  ---------------------------
// SVD Line: 6183

unsigned int CLKGEN_CLOCKENSTAT __AT (0x40004028);



// -----------------------  Field Item: CLKGEN_CLOCKENSTAT_CLOCKENSTAT  ---------------------------
// SVD Line: 6193

//  <item> SFDITEM_FIELD__CLKGEN_CLOCKENSTAT_CLOCKENSTAT
//    <name> CLOCKENSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004028) Clock enable status </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_CLOCKENSTAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKENSTAT = (CLKGEN_CLOCKENSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CLKGEN_CLOCKENSTAT  -------------------------------
// SVD Line: 6183

//  <rtree> SFDITEM_REG__CLKGEN_CLOCKENSTAT
//    <name> CLOCKENSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004028) Clock Enable Status </i>
//    <loc> ( (unsigned int)((CLKGEN_CLOCKENSTAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKENSTAT = (CLKGEN_CLOCKENSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CLOCKENSTAT_CLOCKENSTAT </item>
//  </rtree>
//  


// -----------------------  Register Item Address: CLKGEN_CLOCKEN2STAT  ---------------------------
// SVD Line: 6363

unsigned int CLKGEN_CLOCKEN2STAT __AT (0x4000402C);



// ----------------------  Field Item: CLKGEN_CLOCKEN2STAT_CLOCKEN2STAT  --------------------------
// SVD Line: 6373

//  <item> SFDITEM_FIELD__CLKGEN_CLOCKEN2STAT_CLOCKEN2STAT
//    <name> CLOCKEN2STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000402C) Clock enable status 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_CLOCKEN2STAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKEN2STAT = (CLKGEN_CLOCKEN2STAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CLKGEN_CLOCKEN2STAT  ------------------------------
// SVD Line: 6363

//  <rtree> SFDITEM_REG__CLKGEN_CLOCKEN2STAT
//    <name> CLOCKEN2STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000402C) Clock Enable Status </i>
//    <loc> ( (unsigned int)((CLKGEN_CLOCKEN2STAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKEN2STAT = (CLKGEN_CLOCKEN2STAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CLOCKEN2STAT_CLOCKEN2STAT </item>
//  </rtree>
//  


// -----------------------  Register Item Address: CLKGEN_CLOCKEN3STAT  ---------------------------
// SVD Line: 6468

unsigned int CLKGEN_CLOCKEN3STAT __AT (0x40004030);



// ----------------------  Field Item: CLKGEN_CLOCKEN3STAT_CLOCKEN3STAT  --------------------------
// SVD Line: 6478

//  <item> SFDITEM_FIELD__CLKGEN_CLOCKEN3STAT_CLOCKEN3STAT
//    <name> CLOCKEN3STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004030) Clock enable status 3 </i>
//    <edit> 
//      <loc> ( (unsigned int)((CLKGEN_CLOCKEN3STAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKEN3STAT = (CLKGEN_CLOCKEN3STAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: CLKGEN_CLOCKEN3STAT  ------------------------------
// SVD Line: 6468

//  <rtree> SFDITEM_REG__CLKGEN_CLOCKEN3STAT
//    <name> CLOCKEN3STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004030) Clock Enable Status </i>
//    <loc> ( (unsigned int)((CLKGEN_CLOCKEN3STAT >> 0) & 0xFFFFFFFF), ((CLKGEN_CLOCKEN3STAT = (CLKGEN_CLOCKEN3STAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_CLOCKEN3STAT_CLOCKEN3STAT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CLKGEN_FREQCTRL  -----------------------------
// SVD Line: 6528

unsigned int CLKGEN_FREQCTRL __AT (0x40004034);



// -------------------------  Field Item: CLKGEN_FREQCTRL_BURSTSTATUS  ----------------------------
// SVD Line: 6538

//  <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTSTATUS
//    <name> BURSTSTATUS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40004034) This represents frequency burst status. </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_FREQCTRL ) </loc>
//      <o.2..2> BURSTSTATUS
//    </check>
//  </item>
//  


// --------------------------  Field Item: CLKGEN_FREQCTRL_BURSTACK  ------------------------------
// SVD Line: 6545

//  <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTACK
//    <name> BURSTACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40004034) Frequency Burst Request Acknowledge. Frequency burst requested is always acknowledged whether burst is granted or not depending on feature enable. </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_FREQCTRL ) </loc>
//      <o.1..1> BURSTACK
//    </check>
//  </item>
//  


// --------------------------  Field Item: CLKGEN_FREQCTRL_BURSTREQ  ------------------------------
// SVD Line: 6552

//  <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTREQ
//    <name> BURSTREQ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004034) \nFrequency Burst Enable Request\n0 : DIS = Frequency for ARM core stays at 48MHz value.\n1 : EN = Frequency for ARM core is increased to 96MHz value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_FREQCTRL ) </loc>
//      <o.0..0> BURSTREQ
//        <0=> 0: DIS = Frequency for ARM core stays at 48MHz value.
//        <1=> 1: EN = Frequency for ARM core is increased to 96MHz value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CLKGEN_FREQCTRL  --------------------------------
// SVD Line: 6528

//  <rtree> SFDITEM_REG__CLKGEN_FREQCTRL
//    <name> FREQCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004034) HFRC Frequency Control register </i>
//    <loc> ( (unsigned int)((CLKGEN_FREQCTRL >> 0) & 0xFFFFFFFF), ((CLKGEN_FREQCTRL = (CLKGEN_FREQCTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTSTATUS </item>
//    <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTACK </item>
//    <item> SFDITEM_FIELD__CLKGEN_FREQCTRL_BURSTREQ </item>
//  </rtree>
//  


// -----------------------  Register Item Address: CLKGEN_BLEBUCKTONADJ  --------------------------
// SVD Line: 6572

unsigned int CLKGEN_BLEBUCKTONADJ __AT (0x4000403C);



// --------------------  Field Item: CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTEN  ------------------------
// SVD Line: 6582

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTEN
//    <name> ZEROLENDETECTEN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000403C) \nBLEBUCK ZERO LENGTH DETECT ENABLE\n0 : DIS = Disable Zero Length Detect value.\n1 : EN = Enable Zero Length Detect value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_BLEBUCKTONADJ ) </loc>
//      <o.27..27> ZEROLENDETECTEN
//        <0=> 0: DIS = Disable Zero Length Detect value.
//        <1=> 1: EN = Enable Zero Length Detect value.
//    </combo>
//  </item>
//  


// -------------------  Field Item: CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTTRIM  -----------------------
// SVD Line: 6600

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTTRIM
//    <name> ZEROLENDETECTTRIM </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000403C) \nBLEBUCK ZERO LENGTH DETECT TRIM\n0 : Set0 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 2.0us (10 percent margin of error) or more value.\n1 : Set1 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 5.4us (10 percent margin of error) or more value.\n2 : Set2 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 10.8us (10 percent margin of error) or more value.\n3 : Set3 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 16.2us (10 percent margin of error) or more value.\n4 : Set4 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 21.6us (10 percent margin of error) or more value.\n5 : Set5 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 27.0us (10 percent margin of error) or more value.\n6 : Set6 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 32.4us (10 percent margin of error) or more value.\n7 : Set7 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 37.8us (10 percent margin of error) or more value.\n8 : Set8 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 43.2us (10 percent margin of error) or more value.\n9 : Set9 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 48.6us (10 percent margin of error) or more value.\n10 : SetA = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 54.0us (10 percent margin of error) or more value.\n11 : SetB = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 59.4us (10 percent margin of error) or more value.\n12 : SetC = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 64.8us (10 percent margin of error) or more value.\n13 : SetD = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 70.2us (10 percent margin of error) or more value.\n14 : SetE = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 75.6us (10 percent margin of error) or more value.\n15 : SetF = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 81us (10 percent margin of error) or more value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_BLEBUCKTONADJ ) </loc>
//      <o.26..23> ZEROLENDETECTTRIM
//        <0=> 0: Set0 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 2.0us (10 percent margin of error) or more value.
//        <1=> 1: Set1 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 5.4us (10 percent margin of error) or more value.
//        <2=> 2: Set2 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 10.8us (10 percent margin of error) or more value.
//        <3=> 3: Set3 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 16.2us (10 percent margin of error) or more value.
//        <4=> 4: Set4 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 21.6us (10 percent margin of error) or more value.
//        <5=> 5: Set5 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 27.0us (10 percent margin of error) or more value.
//        <6=> 6: Set6 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 32.4us (10 percent margin of error) or more value.
//        <7=> 7: Set7 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 37.8us (10 percent margin of error) or more value.
//        <8=> 8: Set8 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 43.2us (10 percent margin of error) or more value.
//        <9=> 9: Set9 = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 48.6us (10 percent margin of error) or more value.
//        <10=> 10: SetA = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 54.0us (10 percent margin of error) or more value.
//        <11=> 11: SetB = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 59.4us (10 percent margin of error) or more value.
//        <12=> 12: SetC = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 64.8us (10 percent margin of error) or more value.
//        <13=> 13: SetD = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 70.2us (10 percent margin of error) or more value.
//        <14=> 14: SetE = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 75.6us (10 percent margin of error) or more value.
//        <15=> 15: SetF = Indicator send when the BLE BUCK asserts blebuck_comp1 for about 81us (10 percent margin of error) or more value.
//    </combo>
//  </item>
//  


// ----------------------  Field Item: CLKGEN_BLEBUCKTONADJ_TONADJUSTEN  --------------------------
// SVD Line: 6688

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONADJUSTEN
//    <name> TONADJUSTEN </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x4000403C) \nTON ADJUST ENABLE\n0 : DIS = Disable Adjust for BLE BUCK TON trim value.\n1 : EN = Enable Adjust for BLE BUCK TON trim value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_BLEBUCKTONADJ ) </loc>
//      <o.22..22> TONADJUSTEN
//        <0=> 0: DIS = Disable Adjust for BLE BUCK TON trim value.
//        <1=> 1: EN = Enable Adjust for BLE BUCK TON trim value.
//    </combo>
//  </item>
//  


// --------------------  Field Item: CLKGEN_BLEBUCKTONADJ_TONADJUSTPERIOD  ------------------------
// SVD Line: 6706

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONADJUSTPERIOD
//    <name> TONADJUSTPERIOD </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x4000403C) \nTON ADJUST PERIOD\n0 : HFRC_94KHz = Adjust done for every 1 94KHz period value.\n1 : HFRC_47KHz = Adjust done for every 1 47KHz period value.\n2 : HFRC_12KHz = Adjust done for every 1 12KHz period value.\n3 : HFRC_3KHz = Adjust done for every 1 3KHz period value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CLKGEN_BLEBUCKTONADJ ) </loc>
//      <o.21..20> TONADJUSTPERIOD
//        <0=> 0: HFRC_94KHz = Adjust done for every 1 94KHz period value.
//        <1=> 1: HFRC_47KHz = Adjust done for every 1 47KHz period value.
//        <2=> 2: HFRC_12KHz = Adjust done for every 1 12KHz period value.
//        <3=> 3: HFRC_3KHz = Adjust done for every 1 3KHz period value.
//    </combo>
//  </item>
//  


// --------------------  Field Item: CLKGEN_BLEBUCKTONADJ_TONHIGHTHRESHOLD  -----------------------
// SVD Line: 6734

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONHIGHTHRESHOLD
//    <name> TONHIGHTHRESHOLD </name>
//    <rw> 
//    <i> [Bits 19..10] RW (@ 0x4000403C) TON ADJUST HIGH THRESHOLD. Suggested values are #15(94KHz) #2A(47Khz) #A6(12Khz) #29A(3Khz) </i>
//    <edit> 
//      <loc> ( (unsigned short)((CLKGEN_BLEBUCKTONADJ >> 10) & 0x3FF), ((CLKGEN_BLEBUCKTONADJ = (CLKGEN_BLEBUCKTONADJ & ~(0x3FFUL << 10 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 10 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: CLKGEN_BLEBUCKTONADJ_TONLOWTHRESHOLD  ------------------------
// SVD Line: 6741

//  <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONLOWTHRESHOLD
//    <name> TONLOWTHRESHOLD </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x4000403C) TON ADJUST LOW THRESHOLD. Suggested values are #A(94KHz) #15(47KHz) #53(12Khz) #14D(3Khz) </i>
//    <edit> 
//      <loc> ( (unsigned short)((CLKGEN_BLEBUCKTONADJ >> 0) & 0x3FF), ((CLKGEN_BLEBUCKTONADJ = (CLKGEN_BLEBUCKTONADJ & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: CLKGEN_BLEBUCKTONADJ  ------------------------------
// SVD Line: 6572

//  <rtree> SFDITEM_REG__CLKGEN_BLEBUCKTONADJ
//    <name> BLEBUCKTONADJ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000403C) BLE BUCK TON ADJUST </i>
//    <loc> ( (unsigned int)((CLKGEN_BLEBUCKTONADJ >> 0) & 0xFFFFFFFF), ((CLKGEN_BLEBUCKTONADJ = (CLKGEN_BLEBUCKTONADJ & ~(0xFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTEN </item>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_ZEROLENDETECTTRIM </item>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONADJUSTEN </item>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONADJUSTPERIOD </item>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONHIGHTHRESHOLD </item>
//    <item> SFDITEM_FIELD__CLKGEN_BLEBUCKTONADJ_TONLOWTHRESHOLD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CLKGEN_INTRPTEN  -----------------------------
// SVD Line: 6750

unsigned int CLKGEN_INTRPTEN __AT (0x40004100);



// -----------------------------  Field Item: CLKGEN_INTRPTEN_OF  ---------------------------------
// SVD Line: 6760

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_OF
//    <name> OF </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40004100) XT Oscillator Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTEN ) </loc>
//      <o.2..2> OF
//    </check>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_INTRPTEN_ACC  --------------------------------
// SVD Line: 6767

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_ACC
//    <name> ACC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40004100) Autocalibration Complete interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTEN ) </loc>
//      <o.1..1> ACC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: CLKGEN_INTRPTEN_ACF  --------------------------------
// SVD Line: 6774

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_ACF
//    <name> ACF </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004100) Autocalibration Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTEN ) </loc>
//      <o.0..0> ACF
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: CLKGEN_INTRPTEN  --------------------------------
// SVD Line: 6750

//  <rtree> SFDITEM_REG__CLKGEN_INTRPTEN
//    <name> INTRPTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004100) CLKGEN Interrupt Register: Enable </i>
//    <loc> ( (unsigned int)((CLKGEN_INTRPTEN >> 0) & 0xFFFFFFFF), ((CLKGEN_INTRPTEN = (CLKGEN_INTRPTEN & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_OF </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_ACC </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTEN_ACF </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CLKGEN_INTRPTSTAT  ----------------------------
// SVD Line: 6783

unsigned int CLKGEN_INTRPTSTAT __AT (0x40004104);



// ----------------------------  Field Item: CLKGEN_INTRPTSTAT_OF  --------------------------------
// SVD Line: 6793

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_OF
//    <name> OF </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40004104) XT Oscillator Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSTAT ) </loc>
//      <o.2..2> OF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTSTAT_ACC  -------------------------------
// SVD Line: 6800

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_ACC
//    <name> ACC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40004104) Autocalibration Complete interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSTAT ) </loc>
//      <o.1..1> ACC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTSTAT_ACF  -------------------------------
// SVD Line: 6807

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_ACF
//    <name> ACF </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004104) Autocalibration Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSTAT ) </loc>
//      <o.0..0> ACF
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: CLKGEN_INTRPTSTAT  -------------------------------
// SVD Line: 6783

//  <rtree> SFDITEM_REG__CLKGEN_INTRPTSTAT
//    <name> INTRPTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004104) CLKGEN Interrupt Register: Status </i>
//    <loc> ( (unsigned int)((CLKGEN_INTRPTSTAT >> 0) & 0xFFFFFFFF), ((CLKGEN_INTRPTSTAT = (CLKGEN_INTRPTSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_OF </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_ACC </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSTAT_ACF </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CLKGEN_INTRPTCLR  ----------------------------
// SVD Line: 6816

unsigned int CLKGEN_INTRPTCLR __AT (0x40004108);



// -----------------------------  Field Item: CLKGEN_INTRPTCLR_OF  --------------------------------
// SVD Line: 6826

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_OF
//    <name> OF </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40004108) XT Oscillator Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTCLR ) </loc>
//      <o.2..2> OF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTCLR_ACC  --------------------------------
// SVD Line: 6833

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_ACC
//    <name> ACC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40004108) Autocalibration Complete interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTCLR ) </loc>
//      <o.1..1> ACC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTCLR_ACF  --------------------------------
// SVD Line: 6840

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_ACF
//    <name> ACF </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004108) Autocalibration Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTCLR ) </loc>
//      <o.0..0> ACF
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: CLKGEN_INTRPTCLR  --------------------------------
// SVD Line: 6816

//  <rtree> SFDITEM_REG__CLKGEN_INTRPTCLR
//    <name> INTRPTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004108) CLKGEN Interrupt Register: Clear </i>
//    <loc> ( (unsigned int)((CLKGEN_INTRPTCLR >> 0) & 0xFFFFFFFF), ((CLKGEN_INTRPTCLR = (CLKGEN_INTRPTCLR & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_OF </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_ACC </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTCLR_ACF </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CLKGEN_INTRPTSET  ----------------------------
// SVD Line: 6849

unsigned int CLKGEN_INTRPTSET __AT (0x4000410C);



// -----------------------------  Field Item: CLKGEN_INTRPTSET_OF  --------------------------------
// SVD Line: 6859

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_OF
//    <name> OF </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000410C) XT Oscillator Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSET ) </loc>
//      <o.2..2> OF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTSET_ACC  --------------------------------
// SVD Line: 6866

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_ACC
//    <name> ACC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000410C) Autocalibration Complete interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSET ) </loc>
//      <o.1..1> ACC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CLKGEN_INTRPTSET_ACF  --------------------------------
// SVD Line: 6873

//  <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_ACF
//    <name> ACF </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000410C) Autocalibration Fail interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) CLKGEN_INTRPTSET ) </loc>
//      <o.0..0> ACF
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: CLKGEN_INTRPTSET  --------------------------------
// SVD Line: 6849

//  <rtree> SFDITEM_REG__CLKGEN_INTRPTSET
//    <name> INTRPTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000410C) CLKGEN Interrupt Register: Set </i>
//    <loc> ( (unsigned int)((CLKGEN_INTRPTSET >> 0) & 0xFFFFFFFF), ((CLKGEN_INTRPTSET = (CLKGEN_INTRPTSET & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_OF </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_ACC </item>
//    <item> SFDITEM_FIELD__CLKGEN_INTRPTSET_ACF </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: CLKGEN  ------------------------------------
// SVD Line: 5530

//  <view> CLKGEN
//    <name> CLKGEN </name>
//    <item> SFDITEM_REG__CLKGEN_CALXT </item>
//    <item> SFDITEM_REG__CLKGEN_CALRC </item>
//    <item> SFDITEM_REG__CLKGEN_ACALCTR </item>
//    <item> SFDITEM_REG__CLKGEN_OCTRL </item>
//    <item> SFDITEM_REG__CLKGEN_CLKOUT </item>
//    <item> SFDITEM_REG__CLKGEN_CLKKEY </item>
//    <item> SFDITEM_REG__CLKGEN_CCTRL </item>
//    <item> SFDITEM_REG__CLKGEN_STATUS </item>
//    <item> SFDITEM_REG__CLKGEN_HFADJ </item>
//    <item> SFDITEM_REG__CLKGEN_CLOCKENSTAT </item>
//    <item> SFDITEM_REG__CLKGEN_CLOCKEN2STAT </item>
//    <item> SFDITEM_REG__CLKGEN_CLOCKEN3STAT </item>
//    <item> SFDITEM_REG__CLKGEN_FREQCTRL </item>
//    <item> SFDITEM_REG__CLKGEN_BLEBUCKTONADJ </item>
//    <item> SFDITEM_REG__CLKGEN_INTRPTEN </item>
//    <item> SFDITEM_REG__CLKGEN_INTRPTSTAT </item>
//    <item> SFDITEM_REG__CLKGEN_INTRPTCLR </item>
//    <item> SFDITEM_REG__CLKGEN_INTRPTSET </item>
//  </view>
//  


// ---------------------------  Register Item Address: CTIMER_TMR0  -------------------------------
// SVD Line: 6931

unsigned int CTIMER_TMR0 __AT (0x40008000);



// -----------------------------  Field Item: CTIMER_TMR0_CTTMRB0  --------------------------------
// SVD Line: 6941

//  <item> SFDITEM_FIELD__CTIMER_TMR0_CTTMRB0
//    <name> CTTMRB0 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008000) Counter/Timer B0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR0 >> 16) & 0xFFFF), ((CTIMER_TMR0 = (CTIMER_TMR0 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR0_CTTMRA0  --------------------------------
// SVD Line: 6948

//  <item> SFDITEM_FIELD__CTIMER_TMR0_CTTMRA0
//    <name> CTTMRA0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008000) Counter/Timer A0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR0 >> 0) & 0xFFFF), ((CTIMER_TMR0 = (CTIMER_TMR0 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR0  ----------------------------------
// SVD Line: 6931

//  <rtree> SFDITEM_REG__CTIMER_TMR0
//    <name> TMR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008000) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR0 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR0 = (CTIMER_TMR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR0_CTTMRB0 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR0_CTTMRA0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA0  ------------------------------
// SVD Line: 6957

unsigned int CTIMER_CMPRA0 __AT (0x40008004);



// ----------------------------  Field Item: CTIMER_CMPRA0_CMPR1A0  -------------------------------
// SVD Line: 6967

//  <item> SFDITEM_FIELD__CTIMER_CMPRA0_CMPR1A0
//    <name> CMPR1A0 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008004) Counter/Timer A0 Compare Register 1. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA0 >> 16) & 0xFFFF), ((CTIMER_CMPRA0 = (CTIMER_CMPRA0 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA0_CMPR0A0  -------------------------------
// SVD Line: 6974

//  <item> SFDITEM_FIELD__CTIMER_CMPRA0_CMPR0A0
//    <name> CMPR0A0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008004) Counter/Timer A0 Compare Register 0. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA0 >> 0) & 0xFFFF), ((CTIMER_CMPRA0 = (CTIMER_CMPRA0 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA0  ---------------------------------
// SVD Line: 6957

//  <rtree> SFDITEM_REG__CTIMER_CMPRA0
//    <name> CMPRA0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008004) Counter/Timer A0 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA0 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA0 = (CTIMER_CMPRA0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA0_CMPR1A0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA0_CMPR0A0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB0  ------------------------------
// SVD Line: 6983

unsigned int CTIMER_CMPRB0 __AT (0x40008008);



// ----------------------------  Field Item: CTIMER_CMPRB0_CMPR1B0  -------------------------------
// SVD Line: 6993

//  <item> SFDITEM_FIELD__CTIMER_CMPRB0_CMPR1B0
//    <name> CMPR1B0 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008008) Counter/Timer B0 Compare Register 1. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB0 >> 16) & 0xFFFF), ((CTIMER_CMPRB0 = (CTIMER_CMPRB0 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB0_CMPR0B0  -------------------------------
// SVD Line: 7000

//  <item> SFDITEM_FIELD__CTIMER_CMPRB0_CMPR0B0
//    <name> CMPR0B0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008008) Counter/Timer B0 Compare Register 0. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB0 >> 0) & 0xFFFF), ((CTIMER_CMPRB0 = (CTIMER_CMPRB0 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB0  ---------------------------------
// SVD Line: 6983

//  <rtree> SFDITEM_REG__CTIMER_CMPRB0
//    <name> CMPRB0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008008) Counter/Timer B0 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB0 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB0 = (CTIMER_CMPRB0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB0_CMPR1B0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB0_CMPR0B0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL0  ------------------------------
// SVD Line: 7009

unsigned int CTIMER_CTRL0 __AT (0x4000800C);



// ----------------------------  Field Item: CTIMER_CTRL0_CTLINK0  --------------------------------
// SVD Line: 7019

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_CTLINK0
//    <name> CTLINK0 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000800C) \nCounter/Timer A0/B0 Link bit.\n0 : TWO_16BIT_TIMERS = Use A0/B0 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A0/B0 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.31..31> CTLINK0
//        <0=> 0: TWO_16BIT_TIMERS = Use A0/B0 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A0/B0 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0POL  -------------------------------
// SVD Line: 7037

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0POL
//    <name> TMRB0POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000800C) \nCounter/Timer B0 output polarity.\n0 : NORMAL = The polarity of the TMRPINB0 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB0 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.28..28> TMRB0POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB0 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB0 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0CLR  -------------------------------
// SVD Line: 7055

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0CLR
//    <name> TMRB0CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000800C) \nCounter/Timer B0 Clear bit.\n0 : RUN = Allow counter/timer B0 to run value.\n1 : CLEAR = Holds counter/timer B0 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.27..27> TMRB0CLR
//        <0=> 0: RUN = Allow counter/timer B0 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B0 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0IE1  -------------------------------
// SVD Line: 7073

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0IE1
//    <name> TMRB0IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000800C) \nCounter/Timer B0 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B0 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B0 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.26..26> TMRB0IE1
//        <0=> 0: DIS = Disable counter/timer B0 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B0 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0IE0  -------------------------------
// SVD Line: 7091

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0IE0
//    <name> TMRB0IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000800C) \nCounter/Timer B0 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B0 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B0 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.25..25> TMRB0IE0
//        <0=> 0: DIS = Disable counter/timer B0 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B0 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0FN  --------------------------------
// SVD Line: 7109

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0FN
//    <name> TMRB0FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000800C) \nCounter/Timer B0 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B0, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B0, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B0, assert, count to CMPR1B0, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B0, assert, count to CMPR1B0, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.24..22> TMRB0FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B0, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B0, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B0, assert, count to CMPR1B0, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B0, assert, count to CMPR1B0, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0CLK  -------------------------------
// SVD Line: 7157

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0CLK
//    <name> TMRB0CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x4000800C) \nCounter/Timer B0 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n21 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n22 : CTMRA1 = Clock source is CTIMERA1 OUT. value.\n23 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n24 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n25 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n26 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.21..17> TMRB0CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <21=> 21: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <22=> 22: CTMRA1 = Clock source is CTIMERA1 OUT. value.
//        <23=> 23: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <24=> 24: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <25=> 25: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <26=> 26: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRB0EN  --------------------------------
// SVD Line: 7320

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0EN
//    <name> TMRB0EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000800C) \nCounter/Timer B0 Enable bit.\n0 : DIS = Counter/Timer B0 Disable. value.\n1 : EN = Counter/Timer B0 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.16..16> TMRB0EN
//        <0=> 0: DIS = Counter/Timer B0 Disable. value.
//        <1=> 1: EN = Counter/Timer B0 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0POL  -------------------------------
// SVD Line: 7338

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0POL
//    <name> TMRA0POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000800C) \nCounter/Timer A0 output polarity.\n0 : NORMAL = The polarity of the TMRPINA0 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA0 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.12..12> TMRA0POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA0 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA0 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0CLR  -------------------------------
// SVD Line: 7356

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0CLR
//    <name> TMRA0CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000800C) \nCounter/Timer A0 Clear bit.\n0 : RUN = Allow counter/timer A0 to run value.\n1 : CLEAR = Holds counter/timer A0 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.11..11> TMRA0CLR
//        <0=> 0: RUN = Allow counter/timer A0 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A0 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0IE1  -------------------------------
// SVD Line: 7374

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0IE1
//    <name> TMRA0IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000800C) \nCounter/Timer A0 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A0 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A0 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.10..10> TMRA0IE1
//        <0=> 0: DIS = Disable counter/timer A0 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A0 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0IE0  -------------------------------
// SVD Line: 7392

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0IE0
//    <name> TMRA0IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000800C) \nCounter/Timer A0 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A0 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A0 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.9..9> TMRA0IE0
//        <0=> 0: DIS = Disable counter/timer A0 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A0 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0FN  --------------------------------
// SVD Line: 7410

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0FN
//    <name> TMRA0FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000800C) \nCounter/Timer A0 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A0, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A0, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A0, assert, count to CMPR1A0, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A0, assert, count to CMPR1A0, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.8..6> TMRA0FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A0, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A0, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A0, assert, count to CMPR1A0, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A0, assert, count to CMPR1A0, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0CLK  -------------------------------
// SVD Line: 7458

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0CLK
//    <name> TMRA0CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x4000800C) \nCounter/Timer A0 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK_DIV4 = Clock source is HCLK / 4. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n21 : CTMRA1 = Clock source is CTIMERA1 OUT. value.\n22 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n23 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n24 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n25 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n26 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.5..1> TMRA0CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK_DIV4 = Clock source is HCLK / 4. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <21=> 21: CTMRA1 = Clock source is CTIMERA1 OUT. value.
//        <22=> 22: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <23=> 23: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <24=> 24: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <25=> 25: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <26=> 26: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL0_TMRA0EN  --------------------------------
// SVD Line: 7621

//  <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0EN
//    <name> TMRA0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000800C) \nCounter/Timer A0 Enable bit.\n0 : DIS = Counter/Timer A0 Disable. value.\n1 : EN = Counter/Timer A0 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL0 ) </loc>
//      <o.0..0> TMRA0EN
//        <0=> 0: DIS = Counter/Timer A0 Disable. value.
//        <1=> 1: EN = Counter/Timer A0 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL0  ----------------------------------
// SVD Line: 7009

//  <rtree> SFDITEM_REG__CTIMER_CTRL0
//    <name> CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000800C) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL0 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL0 = (CTIMER_CTRL0 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_CTLINK0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRB0EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL0_TMRA0EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA0  ----------------------------
// SVD Line: 7641

unsigned int CTIMER_CMPRAUXA0 __AT (0x40008014);



// --------------------------  Field Item: CTIMER_CMPRAUXA0_CMPR3A0  ------------------------------
// SVD Line: 7651

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA0_CMPR3A0
//    <name> CMPR3A0 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008014) Counter/Timer A0 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA0 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA0 = (CTIMER_CMPRAUXA0 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA0_CMPR2A0  ------------------------------
// SVD Line: 7658

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA0_CMPR2A0
//    <name> CMPR2A0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008014) Counter/Timer A0 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA0 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA0 = (CTIMER_CMPRAUXA0 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA0  --------------------------------
// SVD Line: 7641

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA0
//    <name> CMPRAUXA0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008014) Counter/Timer A0 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA0 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA0 = (CTIMER_CMPRAUXA0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA0_CMPR3A0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA0_CMPR2A0 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB0  ----------------------------
// SVD Line: 7667

unsigned int CTIMER_CMPRAUXB0 __AT (0x40008018);



// --------------------------  Field Item: CTIMER_CMPRAUXB0_CMPR3B0  ------------------------------
// SVD Line: 7677

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB0_CMPR3B0
//    <name> CMPR3B0 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008018) Counter/Timer B0 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB0 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB0 = (CTIMER_CMPRAUXB0 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB0_CMPR2B0  ------------------------------
// SVD Line: 7684

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB0_CMPR2B0
//    <name> CMPR2B0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008018) Counter/Timer B0 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB0 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB0 = (CTIMER_CMPRAUXB0 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB0  --------------------------------
// SVD Line: 7667

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB0
//    <name> CMPRAUXB0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008018) Counter/Timer B0 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB0 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB0 = (CTIMER_CMPRAUXB0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB0_CMPR3B0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB0_CMPR2B0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX0  -------------------------------
// SVD Line: 7693

unsigned int CTIMER_AUX0 __AT (0x4000801C);



// ----------------------------  Field Item: CTIMER_AUX0_TMRB0EN23  -------------------------------
// SVD Line: 7703

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0EN23
//    <name> TMRB0EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000801C) \nCounter/Timer B0 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.30..30> TMRB0EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX0_TMRB0POL23  -------------------------------
// SVD Line: 7721

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0POL23
//    <name> TMRB0POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000801C) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.29..29> TMRB0POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRB0TINV  -------------------------------
// SVD Line: 7739

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0TINV
//    <name> TMRB0TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000801C) \nCounter/Timer B0 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.28..28> TMRB0TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX0_TMRB0NOSYNC  ------------------------------
// SVD Line: 7757

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0NOSYNC
//    <name> TMRB0NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000801C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.27..27> TMRB0NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRB0TRIG  -------------------------------
// SVD Line: 7775

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0TRIG
//    <name> TMRB0TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000801C) \nCounter/Timer B0 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A0OUT = Trigger source is CTIMERA0 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n5 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n6 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n7 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : B7OUT2 = Trigger source is CTIMERB7 OUT2. value.\n11 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.\n15 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.26..23> TMRB0TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A0OUT = Trigger source is CTIMERA0 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <5=> 5: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <6=> 6: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <7=> 7: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: B7OUT2 = Trigger source is CTIMERB7 OUT2. value.
//        <11=> 11: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.
//        <15=> 15: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRB0LMT  --------------------------------
// SVD Line: 7863

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0LMT
//    <name> TMRB0LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x4000801C) Counter/Timer B0 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX0 >> 16) & 0x3F), ((CTIMER_AUX0 = (CTIMER_AUX0 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRA0EN23  -------------------------------
// SVD Line: 7870

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0EN23
//    <name> TMRA0EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000801C) \nCounter/Timer A0 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.14..14> TMRA0EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX0_TMRA0POL23  -------------------------------
// SVD Line: 7888

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0POL23
//    <name> TMRA0POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000801C) \nCounter/Timer A0 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.13..13> TMRA0POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRA0TINV  -------------------------------
// SVD Line: 7906

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0TINV
//    <name> TMRA0TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000801C) \nCounter/Timer A0 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.12..12> TMRA0TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX0_TMRA0NOSYNC  ------------------------------
// SVD Line: 7924

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0NOSYNC
//    <name> TMRA0NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000801C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.11..11> TMRA0NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRA0TRIG  -------------------------------
// SVD Line: 7942

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0TRIG
//    <name> TMRA0TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000801C) \nCounter/Timer A0 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B0OUT = Trigger source is CTIMERB0 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n5 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n6 : A5OUT = Trigger source is CTIMERA5 OUT. value.\n7 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : B6OUT2 = Trigger source is CTIMERB6 OUT2. value.\n11 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX0 ) </loc>
//      <o.10..7> TMRA0TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B0OUT = Trigger source is CTIMERB0 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <5=> 5: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <6=> 6: A5OUT = Trigger source is CTIMERA5 OUT. value.
//        <7=> 7: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: B6OUT2 = Trigger source is CTIMERB6 OUT2. value.
//        <11=> 11: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX0_TMRA0LMT  --------------------------------
// SVD Line: 8030

//  <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0LMT
//    <name> TMRA0LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x4000801C) Counter/Timer A0 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX0 >> 0) & 0x7F), ((CTIMER_AUX0 = (CTIMER_AUX0 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX0  ----------------------------------
// SVD Line: 7693

//  <rtree> SFDITEM_REG__CTIMER_AUX0
//    <name> AUX0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000801C) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX0 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX0 = (CTIMER_AUX0 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRB0LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX0_TMRA0LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR1  -------------------------------
// SVD Line: 8039

unsigned int CTIMER_TMR1 __AT (0x40008020);



// -----------------------------  Field Item: CTIMER_TMR1_CTTMRB1  --------------------------------
// SVD Line: 8049

//  <item> SFDITEM_FIELD__CTIMER_TMR1_CTTMRB1
//    <name> CTTMRB1 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008020) Counter/Timer B1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR1 >> 16) & 0xFFFF), ((CTIMER_TMR1 = (CTIMER_TMR1 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR1_CTTMRA1  --------------------------------
// SVD Line: 8056

//  <item> SFDITEM_FIELD__CTIMER_TMR1_CTTMRA1
//    <name> CTTMRA1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008020) Counter/Timer A1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR1 >> 0) & 0xFFFF), ((CTIMER_TMR1 = (CTIMER_TMR1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR1  ----------------------------------
// SVD Line: 8039

//  <rtree> SFDITEM_REG__CTIMER_TMR1
//    <name> TMR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008020) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR1 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR1 = (CTIMER_TMR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR1_CTTMRB1 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR1_CTTMRA1 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA1  ------------------------------
// SVD Line: 8065

unsigned int CTIMER_CMPRA1 __AT (0x40008024);



// ----------------------------  Field Item: CTIMER_CMPRA1_CMPR1A1  -------------------------------
// SVD Line: 8075

//  <item> SFDITEM_FIELD__CTIMER_CMPRA1_CMPR1A1
//    <name> CMPR1A1 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008024) Counter/Timer A1 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA1 >> 16) & 0xFFFF), ((CTIMER_CMPRA1 = (CTIMER_CMPRA1 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA1_CMPR0A1  -------------------------------
// SVD Line: 8082

//  <item> SFDITEM_FIELD__CTIMER_CMPRA1_CMPR0A1
//    <name> CMPR0A1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008024) Counter/Timer A1 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA1 >> 0) & 0xFFFF), ((CTIMER_CMPRA1 = (CTIMER_CMPRA1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA1  ---------------------------------
// SVD Line: 8065

//  <rtree> SFDITEM_REG__CTIMER_CMPRA1
//    <name> CMPRA1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008024) Counter/Timer A1 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA1 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA1 = (CTIMER_CMPRA1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA1_CMPR1A1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA1_CMPR0A1 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB1  ------------------------------
// SVD Line: 8091

unsigned int CTIMER_CMPRB1 __AT (0x40008028);



// ----------------------------  Field Item: CTIMER_CMPRB1_CMPR1B1  -------------------------------
// SVD Line: 8101

//  <item> SFDITEM_FIELD__CTIMER_CMPRB1_CMPR1B1
//    <name> CMPR1B1 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008028) Counter/Timer B1 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB1 >> 16) & 0xFFFF), ((CTIMER_CMPRB1 = (CTIMER_CMPRB1 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB1_CMPR0B1  -------------------------------
// SVD Line: 8108

//  <item> SFDITEM_FIELD__CTIMER_CMPRB1_CMPR0B1
//    <name> CMPR0B1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008028) Counter/Timer B1 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB1 >> 0) & 0xFFFF), ((CTIMER_CMPRB1 = (CTIMER_CMPRB1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB1  ---------------------------------
// SVD Line: 8091

//  <rtree> SFDITEM_REG__CTIMER_CMPRB1
//    <name> CMPRB1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008028) Counter/Timer B1 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB1 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB1 = (CTIMER_CMPRB1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB1_CMPR1B1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB1_CMPR0B1 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL1  ------------------------------
// SVD Line: 8117

unsigned int CTIMER_CTRL1 __AT (0x4000802C);



// ----------------------------  Field Item: CTIMER_CTRL1_CTLINK1  --------------------------------
// SVD Line: 8127

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_CTLINK1
//    <name> CTLINK1 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000802C) \nCounter/Timer A1/B1 Link bit.\n0 : TWO_16BIT_TIMERS = Use A1/B1 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A1/B1 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.31..31> CTLINK1
//        <0=> 0: TWO_16BIT_TIMERS = Use A1/B1 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A1/B1 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1POL  -------------------------------
// SVD Line: 8145

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1POL
//    <name> TMRB1POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000802C) \nCounter/Timer B1 output polarity.\n0 : NORMAL = The polarity of the TMRPINB1 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB1 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.28..28> TMRB1POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB1 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB1 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1CLR  -------------------------------
// SVD Line: 8163

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1CLR
//    <name> TMRB1CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000802C) \nCounter/Timer B1 Clear bit.\n0 : RUN = Allow counter/timer B1 to run value.\n1 : CLEAR = Holds counter/timer B1 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.27..27> TMRB1CLR
//        <0=> 0: RUN = Allow counter/timer B1 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B1 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1IE1  -------------------------------
// SVD Line: 8181

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1IE1
//    <name> TMRB1IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000802C) \nCounter/Timer B1 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B1 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B1 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.26..26> TMRB1IE1
//        <0=> 0: DIS = Disable counter/timer B1 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B1 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1IE0  -------------------------------
// SVD Line: 8199

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1IE0
//    <name> TMRB1IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000802C) \nCounter/Timer B1 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B1 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B1 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.25..25> TMRB1IE0
//        <0=> 0: DIS = Disable counter/timer B1 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B1 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1FN  --------------------------------
// SVD Line: 8217

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1FN
//    <name> TMRB1FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000802C) \nCounter/Timer B1 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B1, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B1, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B1, assert, count to CMPR1B1, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B1, assert, count to CMPR1B1, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.24..22> TMRB1FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B1, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B1, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B1, assert, count to CMPR1B1, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B1, assert, count to CMPR1B1, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1CLK  -------------------------------
// SVD Line: 8265

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1CLK
//    <name> TMRB1CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x4000802C) \nCounter/Timer B1 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA1 = Clock source is CTIMERA1 OUT. value.\n21 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n22 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n23 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n24 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n25 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n26 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.21..17> TMRB1CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA1 = Clock source is CTIMERA1 OUT. value.
//        <21=> 21: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <22=> 22: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <23=> 23: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <24=> 24: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <25=> 25: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <26=> 26: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRB1EN  --------------------------------
// SVD Line: 8428

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1EN
//    <name> TMRB1EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000802C) \nCounter/Timer B1 Enable bit.\n0 : DIS = Counter/Timer B1 Disable. value.\n1 : EN = Counter/Timer B1 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.16..16> TMRB1EN
//        <0=> 0: DIS = Counter/Timer B1 Disable. value.
//        <1=> 1: EN = Counter/Timer B1 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1POL  -------------------------------
// SVD Line: 8446

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1POL
//    <name> TMRA1POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000802C) \nCounter/Timer A1 output polarity.\n0 : NORMAL = The polarity of the TMRPINA1 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA1 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.12..12> TMRA1POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA1 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA1 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1CLR  -------------------------------
// SVD Line: 8464

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1CLR
//    <name> TMRA1CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000802C) \nCounter/Timer A1 Clear bit.\n0 : RUN = Allow counter/timer A1 to run value.\n1 : CLEAR = Holds counter/timer A1 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.11..11> TMRA1CLR
//        <0=> 0: RUN = Allow counter/timer A1 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A1 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1IE1  -------------------------------
// SVD Line: 8482

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1IE1
//    <name> TMRA1IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000802C) \nCounter/Timer A1 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A1 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A1 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.10..10> TMRA1IE1
//        <0=> 0: DIS = Disable counter/timer A1 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A1 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1IE0  -------------------------------
// SVD Line: 8500

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1IE0
//    <name> TMRA1IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000802C) \nCounter/Timer A1 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A1 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A1 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.9..9> TMRA1IE0
//        <0=> 0: DIS = Disable counter/timer A1 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A1 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1FN  --------------------------------
// SVD Line: 8518

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1FN
//    <name> TMRA1FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000802C) \nCounter/Timer A1 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A1, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A1, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A1, assert, count to CMPR1A1, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A1, assert, count to CMPR1A1, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.8..6> TMRA1FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A1, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A1, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A1, assert, count to CMPR1A1, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A1, assert, count to CMPR1A1, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1CLK  -------------------------------
// SVD Line: 8566

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1CLK
//    <name> TMRA1CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x4000802C) \nCounter/Timer A1 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n21 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n22 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n23 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n24 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n25 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n26 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.5..1> TMRA1CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <21=> 21: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <22=> 22: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <23=> 23: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <24=> 24: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <25=> 25: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <26=> 26: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL1_TMRA1EN  --------------------------------
// SVD Line: 8729

//  <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1EN
//    <name> TMRA1EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000802C) \nCounter/Timer A1 Enable bit.\n0 : DIS = Counter/Timer A1 Disable. value.\n1 : EN = Counter/Timer A1 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL1 ) </loc>
//      <o.0..0> TMRA1EN
//        <0=> 0: DIS = Counter/Timer A1 Disable. value.
//        <1=> 1: EN = Counter/Timer A1 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL1  ----------------------------------
// SVD Line: 8117

//  <rtree> SFDITEM_REG__CTIMER_CTRL1
//    <name> CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000802C) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL1 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL1 = (CTIMER_CTRL1 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_CTLINK1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRB1EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL1_TMRA1EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA1  ----------------------------
// SVD Line: 8749

unsigned int CTIMER_CMPRAUXA1 __AT (0x40008034);



// --------------------------  Field Item: CTIMER_CMPRAUXA1_CMPR3A1  ------------------------------
// SVD Line: 8759

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA1_CMPR3A1
//    <name> CMPR3A1 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008034) Counter/Timer A1 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA1 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA1 = (CTIMER_CMPRAUXA1 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA1_CMPR2A1  ------------------------------
// SVD Line: 8766

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA1_CMPR2A1
//    <name> CMPR2A1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008034) Counter/Timer A1 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA1 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA1 = (CTIMER_CMPRAUXA1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA1  --------------------------------
// SVD Line: 8749

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA1
//    <name> CMPRAUXA1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008034) Counter/Timer A1 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA1 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA1 = (CTIMER_CMPRAUXA1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA1_CMPR3A1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA1_CMPR2A1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB1  ----------------------------
// SVD Line: 8775

unsigned int CTIMER_CMPRAUXB1 __AT (0x40008038);



// --------------------------  Field Item: CTIMER_CMPRAUXB1_CMPR3B1  ------------------------------
// SVD Line: 8785

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB1_CMPR3B1
//    <name> CMPR3B1 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008038) Counter/Timer B1 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB1 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB1 = (CTIMER_CMPRAUXB1 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB1_CMPR2B1  ------------------------------
// SVD Line: 8792

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB1_CMPR2B1
//    <name> CMPR2B1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008038) Counter/Timer B1 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB1 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB1 = (CTIMER_CMPRAUXB1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB1  --------------------------------
// SVD Line: 8775

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB1
//    <name> CMPRAUXB1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008038) Counter/Timer B1 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB1 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB1 = (CTIMER_CMPRAUXB1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB1_CMPR3B1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB1_CMPR2B1 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX1  -------------------------------
// SVD Line: 8801

unsigned int CTIMER_AUX1 __AT (0x4000803C);



// ----------------------------  Field Item: CTIMER_AUX1_TMRB1EN23  -------------------------------
// SVD Line: 8811

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1EN23
//    <name> TMRB1EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000803C) \nCounter/Timer B1 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.30..30> TMRB1EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX1_TMRB1POL23  -------------------------------
// SVD Line: 8829

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1POL23
//    <name> TMRB1POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000803C) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.29..29> TMRB1POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRB1TINV  -------------------------------
// SVD Line: 8847

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1TINV
//    <name> TMRB1TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000803C) \nCounter/Timer B1 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.28..28> TMRB1TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX1_TMRB1NOSYNC  ------------------------------
// SVD Line: 8865

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1NOSYNC
//    <name> TMRB1NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000803C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.27..27> TMRB1NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRB1TRIG  -------------------------------
// SVD Line: 8883

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1TRIG
//    <name> TMRB1TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000803C) \nCounter/Timer B1 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A6OUT = Trigger source is CTIMERA6 OUT. value.\n5 : B6OUT = Trigger source is CTIMERB6 OUT. value.\n6 : A0OUT = Trigger source is CTIMERA0 OUT. value.\n7 : B0OUT = Trigger source is CTIMERB0 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A4OUT2 = Trigger source is CTIMERA4 OUT2. value.\n11 : B4OUT2 = Trigger source is CTIMERB4 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.\n15 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.26..23> TMRB1TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A6OUT = Trigger source is CTIMERA6 OUT. value.
//        <5=> 5: B6OUT = Trigger source is CTIMERB6 OUT. value.
//        <6=> 6: A0OUT = Trigger source is CTIMERA0 OUT. value.
//        <7=> 7: B0OUT = Trigger source is CTIMERB0 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A4OUT2 = Trigger source is CTIMERA4 OUT2. value.
//        <11=> 11: B4OUT2 = Trigger source is CTIMERB4 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.
//        <15=> 15: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRB1LMT  --------------------------------
// SVD Line: 8971

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1LMT
//    <name> TMRB1LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x4000803C) Counter/Timer B1 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX1 >> 16) & 0x3F), ((CTIMER_AUX1 = (CTIMER_AUX1 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRA1EN23  -------------------------------
// SVD Line: 8978

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1EN23
//    <name> TMRA1EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000803C) \nCounter/Timer A1 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.14..14> TMRA1EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX1_TMRA1POL23  -------------------------------
// SVD Line: 8996

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1POL23
//    <name> TMRA1POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000803C) \nCounter/Timer A1 Upper output polarity\n0 : NORMAL = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.13..13> TMRA1POL23
//        <0=> 0: NORMAL = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRA1TINV  -------------------------------
// SVD Line: 9014

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1TINV
//    <name> TMRA1TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000803C) \nCounter/Timer A1 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.12..12> TMRA1TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX1_TMRA1NOSYNC  ------------------------------
// SVD Line: 9032

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1NOSYNC
//    <name> TMRA1NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000803C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.11..11> TMRA1NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRA1TRIG  -------------------------------
// SVD Line: 9050

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1TRIG
//    <name> TMRA1TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000803C) \nCounter/Timer A1 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A0OUT = Trigger source is CTIMERA0 OUT. value.\n5 : B0OUT = Trigger source is CTIMERB0 OUT. value.\n6 : A5OUT = Trigger source is CTIMERA5 OUT. value.\n7 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A4OUT2 = Trigger source is CTIMERA4 OUT2. value.\n11 : B4OUT2 = Trigger source is CTIMERB4 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.\n15 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX1 ) </loc>
//      <o.10..7> TMRA1TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A0OUT = Trigger source is CTIMERA0 OUT. value.
//        <5=> 5: B0OUT = Trigger source is CTIMERB0 OUT. value.
//        <6=> 6: A5OUT = Trigger source is CTIMERA5 OUT. value.
//        <7=> 7: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A4OUT2 = Trigger source is CTIMERA4 OUT2. value.
//        <11=> 11: B4OUT2 = Trigger source is CTIMERB4 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.
//        <15=> 15: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX1_TMRA1LMT  --------------------------------
// SVD Line: 9138

//  <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1LMT
//    <name> TMRA1LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x4000803C) Counter/Timer A1 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX1 >> 0) & 0x7F), ((CTIMER_AUX1 = (CTIMER_AUX1 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX1  ----------------------------------
// SVD Line: 8801

//  <rtree> SFDITEM_REG__CTIMER_AUX1
//    <name> AUX1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000803C) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX1 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX1 = (CTIMER_AUX1 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRB1LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX1_TMRA1LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR2  -------------------------------
// SVD Line: 9147

unsigned int CTIMER_TMR2 __AT (0x40008040);



// -----------------------------  Field Item: CTIMER_TMR2_CTTMRB2  --------------------------------
// SVD Line: 9157

//  <item> SFDITEM_FIELD__CTIMER_TMR2_CTTMRB2
//    <name> CTTMRB2 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008040) Counter/Timer B2. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR2 >> 16) & 0xFFFF), ((CTIMER_TMR2 = (CTIMER_TMR2 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR2_CTTMRA2  --------------------------------
// SVD Line: 9164

//  <item> SFDITEM_FIELD__CTIMER_TMR2_CTTMRA2
//    <name> CTTMRA2 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008040) Counter/Timer A2. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR2 >> 0) & 0xFFFF), ((CTIMER_TMR2 = (CTIMER_TMR2 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR2  ----------------------------------
// SVD Line: 9147

//  <rtree> SFDITEM_REG__CTIMER_TMR2
//    <name> TMR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008040) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR2 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR2 = (CTIMER_TMR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR2_CTTMRB2 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR2_CTTMRA2 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA2  ------------------------------
// SVD Line: 9173

unsigned int CTIMER_CMPRA2 __AT (0x40008044);



// ----------------------------  Field Item: CTIMER_CMPRA2_CMPR1A2  -------------------------------
// SVD Line: 9183

//  <item> SFDITEM_FIELD__CTIMER_CMPRA2_CMPR1A2
//    <name> CMPR1A2 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008044) Counter/Timer A2 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA2 >> 16) & 0xFFFF), ((CTIMER_CMPRA2 = (CTIMER_CMPRA2 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA2_CMPR0A2  -------------------------------
// SVD Line: 9190

//  <item> SFDITEM_FIELD__CTIMER_CMPRA2_CMPR0A2
//    <name> CMPR0A2 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008044) Counter/Timer A2 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA2 >> 0) & 0xFFFF), ((CTIMER_CMPRA2 = (CTIMER_CMPRA2 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA2  ---------------------------------
// SVD Line: 9173

//  <rtree> SFDITEM_REG__CTIMER_CMPRA2
//    <name> CMPRA2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008044) Counter/Timer A2 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA2 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA2 = (CTIMER_CMPRA2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA2_CMPR1A2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA2_CMPR0A2 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB2  ------------------------------
// SVD Line: 9199

unsigned int CTIMER_CMPRB2 __AT (0x40008048);



// ----------------------------  Field Item: CTIMER_CMPRB2_CMPR1B2  -------------------------------
// SVD Line: 9209

//  <item> SFDITEM_FIELD__CTIMER_CMPRB2_CMPR1B2
//    <name> CMPR1B2 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008048) Counter/Timer B2 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB2 >> 16) & 0xFFFF), ((CTIMER_CMPRB2 = (CTIMER_CMPRB2 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB2_CMPR0B2  -------------------------------
// SVD Line: 9216

//  <item> SFDITEM_FIELD__CTIMER_CMPRB2_CMPR0B2
//    <name> CMPR0B2 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008048) Counter/Timer B2 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB2 >> 0) & 0xFFFF), ((CTIMER_CMPRB2 = (CTIMER_CMPRB2 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB2  ---------------------------------
// SVD Line: 9199

//  <rtree> SFDITEM_REG__CTIMER_CMPRB2
//    <name> CMPRB2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008048) Counter/Timer B2 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB2 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB2 = (CTIMER_CMPRB2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB2_CMPR1B2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB2_CMPR0B2 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL2  ------------------------------
// SVD Line: 9225

unsigned int CTIMER_CTRL2 __AT (0x4000804C);



// ----------------------------  Field Item: CTIMER_CTRL2_CTLINK2  --------------------------------
// SVD Line: 9235

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_CTLINK2
//    <name> CTLINK2 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000804C) \nCounter/Timer A2/B2 Link bit.\n0 : TWO_16BIT_TIMERS = Use A2/B2 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A2/B2 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.31..31> CTLINK2
//        <0=> 0: TWO_16BIT_TIMERS = Use A2/B2 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A2/B2 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2POL  -------------------------------
// SVD Line: 9253

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2POL
//    <name> TMRB2POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000804C) \nCounter/Timer B2 output polarity.\n0 : NORMAL = The polarity of the TMRPINB2 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB2 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.28..28> TMRB2POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB2 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB2 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2CLR  -------------------------------
// SVD Line: 9271

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2CLR
//    <name> TMRB2CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000804C) \nCounter/Timer B2 Clear bit.\n0 : RUN = Allow counter/timer B2 to run value.\n1 : CLEAR = Holds counter/timer B2 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.27..27> TMRB2CLR
//        <0=> 0: RUN = Allow counter/timer B2 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B2 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2IE1  -------------------------------
// SVD Line: 9289

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2IE1
//    <name> TMRB2IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000804C) \nCounter/Timer B2 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B2 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B2 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.26..26> TMRB2IE1
//        <0=> 0: DIS = Disable counter/timer B2 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B2 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2IE0  -------------------------------
// SVD Line: 9307

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2IE0
//    <name> TMRB2IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000804C) \nCounter/Timer B2 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B2 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B2 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.25..25> TMRB2IE0
//        <0=> 0: DIS = Disable counter/timer B2 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B2 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2FN  --------------------------------
// SVD Line: 9325

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2FN
//    <name> TMRB2FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000804C) \nCounter/Timer B2 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B2, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B2, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B2, assert, count to CMPR1B2, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B2, assert, count to CMPR1B2, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.24..22> TMRB2FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B2, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B2, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B2, assert, count to CMPR1B2, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B2, assert, count to CMPR1B2, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2CLK  -------------------------------
// SVD Line: 9373

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2CLK
//    <name> TMRB2CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x4000804C) \nCounter/Timer B2 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n21 : CTMRB3 = Clock source is CTIMERA3 OUT. value.\n22 : CTMRA3 = Clock source is CTIMERB3 OUT. value.\n23 : CTMRA4 = Clock source is CTIMERA4 OUT. value.\n24 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.21..17> TMRB2CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <21=> 21: CTMRB3 = Clock source is CTIMERA3 OUT. value.
//        <22=> 22: CTMRA3 = Clock source is CTIMERB3 OUT. value.
//        <23=> 23: CTMRA4 = Clock source is CTIMERA4 OUT. value.
//        <24=> 24: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRB2EN  --------------------------------
// SVD Line: 9536

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2EN
//    <name> TMRB2EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000804C) \nCounter/Timer B2 Enable bit.\n0 : DIS = Counter/Timer B2 Disable. value.\n1 : EN = Counter/Timer B2 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.16..16> TMRB2EN
//        <0=> 0: DIS = Counter/Timer B2 Disable. value.
//        <1=> 1: EN = Counter/Timer B2 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2POL  -------------------------------
// SVD Line: 9554

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2POL
//    <name> TMRA2POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000804C) \nCounter/Timer A2 output polarity.\n0 : NORMAL = The polarity of the TMRPINA2 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA2 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.12..12> TMRA2POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA2 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA2 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2CLR  -------------------------------
// SVD Line: 9572

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2CLR
//    <name> TMRA2CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000804C) \nCounter/Timer A2 Clear bit.\n0 : RUN = Allow counter/timer A2 to run value.\n1 : CLEAR = Holds counter/timer A2 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.11..11> TMRA2CLR
//        <0=> 0: RUN = Allow counter/timer A2 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A2 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2IE1  -------------------------------
// SVD Line: 9590

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2IE1
//    <name> TMRA2IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000804C) \nCounter/Timer A2 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A2 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A2 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.10..10> TMRA2IE1
//        <0=> 0: DIS = Disable counter/timer A2 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A2 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2IE0  -------------------------------
// SVD Line: 9608

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2IE0
//    <name> TMRA2IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000804C) \nCounter/Timer A2 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A2 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A2 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.9..9> TMRA2IE0
//        <0=> 0: DIS = Disable counter/timer A2 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A2 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2FN  --------------------------------
// SVD Line: 9626

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2FN
//    <name> TMRA2FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000804C) \nCounter/Timer A2 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A2, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A2, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A2, assert, count to CMPR1A2, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A2, assert, count to CMPR1A2, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.8..6> TMRA2FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A2, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A2, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A2, assert, count to CMPR1A2, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A2, assert, count to CMPR1A2, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2CLK  -------------------------------
// SVD Line: 9674

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2CLK
//    <name> TMRA2CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x4000804C) \nCounter/Timer A2 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n21 : CTMRB3 = Clock source is CTIMERA3 OUT. value.\n22 : CTMRA3 = Clock source is CTIMERB3 OUT. value.\n23 : CTMRA4 = Clock source is CTIMERA4 OUT. value.\n24 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.5..1> TMRA2CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <21=> 21: CTMRB3 = Clock source is CTIMERA3 OUT. value.
//        <22=> 22: CTMRA3 = Clock source is CTIMERB3 OUT. value.
//        <23=> 23: CTMRA4 = Clock source is CTIMERA4 OUT. value.
//        <24=> 24: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL2_TMRA2EN  --------------------------------
// SVD Line: 9837

//  <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2EN
//    <name> TMRA2EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000804C) \nCounter/Timer A2 Enable bit.\n0 : DIS = Counter/Timer A2 Disable. value.\n1 : EN = Counter/Timer A2 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL2 ) </loc>
//      <o.0..0> TMRA2EN
//        <0=> 0: DIS = Counter/Timer A2 Disable. value.
//        <1=> 1: EN = Counter/Timer A2 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL2  ----------------------------------
// SVD Line: 9225

//  <rtree> SFDITEM_REG__CTIMER_CTRL2
//    <name> CTRL2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000804C) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL2 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL2 = (CTIMER_CTRL2 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_CTLINK2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRB2EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL2_TMRA2EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA2  ----------------------------
// SVD Line: 9857

unsigned int CTIMER_CMPRAUXA2 __AT (0x40008054);



// --------------------------  Field Item: CTIMER_CMPRAUXA2_CMPR3A2  ------------------------------
// SVD Line: 9867

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA2_CMPR3A2
//    <name> CMPR3A2 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008054) Counter/Timer A2 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA2 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA2 = (CTIMER_CMPRAUXA2 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA2_CMPR2A2  ------------------------------
// SVD Line: 9874

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA2_CMPR2A2
//    <name> CMPR2A2 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008054) Counter/Timer A2 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA2 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA2 = (CTIMER_CMPRAUXA2 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA2  --------------------------------
// SVD Line: 9857

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA2
//    <name> CMPRAUXA2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008054) Counter/Timer A2 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA2 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA2 = (CTIMER_CMPRAUXA2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA2_CMPR3A2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA2_CMPR2A2 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB2  ----------------------------
// SVD Line: 9883

unsigned int CTIMER_CMPRAUXB2 __AT (0x40008058);



// --------------------------  Field Item: CTIMER_CMPRAUXB2_CMPR3B2  ------------------------------
// SVD Line: 9893

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB2_CMPR3B2
//    <name> CMPR3B2 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008058) Counter/Timer B2 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB2 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB2 = (CTIMER_CMPRAUXB2 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB2_CMPR2B2  ------------------------------
// SVD Line: 9900

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB2_CMPR2B2
//    <name> CMPR2B2 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008058) Counter/Timer B2 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB2 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB2 = (CTIMER_CMPRAUXB2 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB2  --------------------------------
// SVD Line: 9883

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB2
//    <name> CMPRAUXB2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008058) Counter/Timer B2 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB2 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB2 = (CTIMER_CMPRAUXB2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB2_CMPR3B2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB2_CMPR2B2 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX2  -------------------------------
// SVD Line: 9909

unsigned int CTIMER_AUX2 __AT (0x4000805C);



// ----------------------------  Field Item: CTIMER_AUX2_TMRB2EN23  -------------------------------
// SVD Line: 9919

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2EN23
//    <name> TMRB2EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000805C) \nCounter/Timer B2 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.30..30> TMRB2EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX2_TMRB2POL23  -------------------------------
// SVD Line: 9937

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2POL23
//    <name> TMRB2POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000805C) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.29..29> TMRB2POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRB2TINV  -------------------------------
// SVD Line: 9955

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2TINV
//    <name> TMRB2TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000805C) \nCounter/Timer B2 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.28..28> TMRB2TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX2_TMRB2NOSYNC  ------------------------------
// SVD Line: 9973

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2NOSYNC
//    <name> TMRB2NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000805C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.27..27> TMRB2NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRB2TRIG  -------------------------------
// SVD Line: 9991

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2TRIG
//    <name> TMRB2TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000805C) \nCounter/Timer B2 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n5 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n6 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n7 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A5OUT2 = Trigger source is CTIMERA5 OUT2. value.\n11 : B5OUT2 = Trigger source is CTIMERB5 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.26..23> TMRB2TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <5=> 5: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <6=> 6: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <7=> 7: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A5OUT2 = Trigger source is CTIMERA5 OUT2. value.
//        <11=> 11: B5OUT2 = Trigger source is CTIMERB5 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRB2LMT  --------------------------------
// SVD Line: 10079

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2LMT
//    <name> TMRB2LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x4000805C) Counter/Timer B2 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX2 >> 16) & 0x3F), ((CTIMER_AUX2 = (CTIMER_AUX2 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRA2EN23  -------------------------------
// SVD Line: 10086

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2EN23
//    <name> TMRA2EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000805C) \nCounter/Timer A2 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.14..14> TMRA2EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX2_TMRA2POL23  -------------------------------
// SVD Line: 10104

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2POL23
//    <name> TMRA2POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000805C) \nCounter/Timer A2 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.13..13> TMRA2POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRA2TINV  -------------------------------
// SVD Line: 10122

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2TINV
//    <name> TMRA2TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000805C) \nCounter/Timer A2 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.12..12> TMRA2TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX2_TMRA2NOSYNC  ------------------------------
// SVD Line: 10140

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2NOSYNC
//    <name> TMRA2NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000805C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.11..11> TMRA2NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRA2TRIG  -------------------------------
// SVD Line: 10158

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2TRIG
//    <name> TMRA2TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000805C) \nCounter/Timer A2 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A0OUT = Trigger source is CTIMERA0 OUT. value.\n5 : B0OUT = Trigger source is CTIMERB0 OUT. value.\n6 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n7 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A5OUT2 = Trigger source is CTIMERA5 OUT2. value.\n11 : B5OUT2 = Trigger source is CTIMERB5 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX2 ) </loc>
//      <o.10..7> TMRA2TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A0OUT = Trigger source is CTIMERA0 OUT. value.
//        <5=> 5: B0OUT = Trigger source is CTIMERB0 OUT. value.
//        <6=> 6: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <7=> 7: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A5OUT2 = Trigger source is CTIMERA5 OUT2. value.
//        <11=> 11: B5OUT2 = Trigger source is CTIMERB5 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX2_TMRA2LMT  --------------------------------
// SVD Line: 10246

//  <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2LMT
//    <name> TMRA2LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x4000805C) Counter/Timer A2 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX2 >> 0) & 0x7F), ((CTIMER_AUX2 = (CTIMER_AUX2 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX2  ----------------------------------
// SVD Line: 9909

//  <rtree> SFDITEM_REG__CTIMER_AUX2
//    <name> AUX2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000805C) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX2 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX2 = (CTIMER_AUX2 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRB2LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX2_TMRA2LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR3  -------------------------------
// SVD Line: 10255

unsigned int CTIMER_TMR3 __AT (0x40008060);



// -----------------------------  Field Item: CTIMER_TMR3_CTTMRB3  --------------------------------
// SVD Line: 10265

//  <item> SFDITEM_FIELD__CTIMER_TMR3_CTTMRB3
//    <name> CTTMRB3 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008060) Counter/Timer B3. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR3 >> 16) & 0xFFFF), ((CTIMER_TMR3 = (CTIMER_TMR3 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR3_CTTMRA3  --------------------------------
// SVD Line: 10272

//  <item> SFDITEM_FIELD__CTIMER_TMR3_CTTMRA3
//    <name> CTTMRA3 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008060) Counter/Timer A3. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR3 >> 0) & 0xFFFF), ((CTIMER_TMR3 = (CTIMER_TMR3 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR3  ----------------------------------
// SVD Line: 10255

//  <rtree> SFDITEM_REG__CTIMER_TMR3
//    <name> TMR3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008060) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR3 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR3 = (CTIMER_TMR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR3_CTTMRB3 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR3_CTTMRA3 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA3  ------------------------------
// SVD Line: 10281

unsigned int CTIMER_CMPRA3 __AT (0x40008064);



// ----------------------------  Field Item: CTIMER_CMPRA3_CMPR1A3  -------------------------------
// SVD Line: 10291

//  <item> SFDITEM_FIELD__CTIMER_CMPRA3_CMPR1A3
//    <name> CMPR1A3 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008064) Counter/Timer A3 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA3 >> 16) & 0xFFFF), ((CTIMER_CMPRA3 = (CTIMER_CMPRA3 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA3_CMPR0A3  -------------------------------
// SVD Line: 10298

//  <item> SFDITEM_FIELD__CTIMER_CMPRA3_CMPR0A3
//    <name> CMPR0A3 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008064) Counter/Timer A3 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA3 >> 0) & 0xFFFF), ((CTIMER_CMPRA3 = (CTIMER_CMPRA3 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA3  ---------------------------------
// SVD Line: 10281

//  <rtree> SFDITEM_REG__CTIMER_CMPRA3
//    <name> CMPRA3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008064) Counter/Timer A3 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA3 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA3 = (CTIMER_CMPRA3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA3_CMPR1A3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA3_CMPR0A3 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB3  ------------------------------
// SVD Line: 10307

unsigned int CTIMER_CMPRB3 __AT (0x40008068);



// ----------------------------  Field Item: CTIMER_CMPRB3_CMPR1B3  -------------------------------
// SVD Line: 10317

//  <item> SFDITEM_FIELD__CTIMER_CMPRB3_CMPR1B3
//    <name> CMPR1B3 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008068) Counter/Timer B3 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB3 >> 16) & 0xFFFF), ((CTIMER_CMPRB3 = (CTIMER_CMPRB3 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB3_CMPR0B3  -------------------------------
// SVD Line: 10324

//  <item> SFDITEM_FIELD__CTIMER_CMPRB3_CMPR0B3
//    <name> CMPR0B3 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008068) Counter/Timer B3 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB3 >> 0) & 0xFFFF), ((CTIMER_CMPRB3 = (CTIMER_CMPRB3 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB3  ---------------------------------
// SVD Line: 10307

//  <rtree> SFDITEM_REG__CTIMER_CMPRB3
//    <name> CMPRB3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008068) Counter/Timer B3 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB3 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB3 = (CTIMER_CMPRB3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB3_CMPR1B3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB3_CMPR0B3 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL3  ------------------------------
// SVD Line: 10333

unsigned int CTIMER_CTRL3 __AT (0x4000806C);



// ----------------------------  Field Item: CTIMER_CTRL3_CTLINK3  --------------------------------
// SVD Line: 10343

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_CTLINK3
//    <name> CTLINK3 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000806C) \nCounter/Timer A3/B3 Link bit.\n0 : TWO_16BIT_TIMERS = Use A3/B3 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A3/B3 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.31..31> CTLINK3
//        <0=> 0: TWO_16BIT_TIMERS = Use A3/B3 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A3/B3 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3POL  -------------------------------
// SVD Line: 10361

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3POL
//    <name> TMRB3POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000806C) \nCounter/Timer B3 output polarity.\n0 : NORMAL = The polarity of the TMRPINB3 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB3 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.28..28> TMRB3POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB3 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB3 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3CLR  -------------------------------
// SVD Line: 10379

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3CLR
//    <name> TMRB3CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000806C) \nCounter/Timer B3 Clear bit.\n0 : RUN = Allow counter/timer B3 to run value.\n1 : CLEAR = Holds counter/timer B3 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.27..27> TMRB3CLR
//        <0=> 0: RUN = Allow counter/timer B3 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B3 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3IE1  -------------------------------
// SVD Line: 10397

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3IE1
//    <name> TMRB3IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000806C) \nCounter/Timer B3 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B3 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B3 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.26..26> TMRB3IE1
//        <0=> 0: DIS = Disable counter/timer B3 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B3 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3IE0  -------------------------------
// SVD Line: 10415

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3IE0
//    <name> TMRB3IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000806C) \nCounter/Timer B3 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B3 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B3 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.25..25> TMRB3IE0
//        <0=> 0: DIS = Disable counter/timer B3 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B3 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3FN  --------------------------------
// SVD Line: 10433

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3FN
//    <name> TMRB3FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000806C) \nCounter/Timer B3 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B3, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B3, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B3, assert, count to CMPR1B3, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B3, assert, count to CMPR1B3, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.24..22> TMRB3FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B3, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B3, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B3, assert, count to CMPR1B3, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B3, assert, count to CMPR1B3, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3CLK  -------------------------------
// SVD Line: 10481

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3CLK
//    <name> TMRB3CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x4000806C) \nCounter/Timer B3 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA3 = Clock source is CTIMERA3 OUT. value.\n21 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n22 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n23 : CTMRA4 = Clock source is CTIMERA4 OUT. value.\n24 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.21..17> TMRB3CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA3 = Clock source is CTIMERA3 OUT. value.
//        <21=> 21: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <22=> 22: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <23=> 23: CTMRA4 = Clock source is CTIMERA4 OUT. value.
//        <24=> 24: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRB3EN  --------------------------------
// SVD Line: 10644

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3EN
//    <name> TMRB3EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000806C) \nCounter/Timer B3 Enable bit.\n0 : DIS = Counter/Timer B3 Disable. value.\n1 : EN = Counter/Timer B3 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.16..16> TMRB3EN
//        <0=> 0: DIS = Counter/Timer B3 Disable. value.
//        <1=> 1: EN = Counter/Timer B3 Enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_CTRL3_ADCEN  ---------------------------------
// SVD Line: 10662

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_ADCEN
//    <name> ADCEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4000806C) Special Timer A3 enable for ADC function. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.15..15> ADCEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3POL  -------------------------------
// SVD Line: 10669

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3POL
//    <name> TMRA3POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000806C) \nCounter/Timer A3 output polarity.\n0 : NORMAL = The polarity of the TMRPINA3 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA3 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.12..12> TMRA3POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA3 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA3 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3CLR  -------------------------------
// SVD Line: 10687

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3CLR
//    <name> TMRA3CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000806C) \nCounter/Timer A3 Clear bit.\n0 : RUN = Allow counter/timer A3 to run value.\n1 : CLEAR = Holds counter/timer A3 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.11..11> TMRA3CLR
//        <0=> 0: RUN = Allow counter/timer A3 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A3 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3IE1  -------------------------------
// SVD Line: 10705

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3IE1
//    <name> TMRA3IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000806C) \nCounter/Timer A3 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A3 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A3 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.10..10> TMRA3IE1
//        <0=> 0: DIS = Disable counter/timer A3 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A3 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3IE0  -------------------------------
// SVD Line: 10723

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3IE0
//    <name> TMRA3IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000806C) \nCounter/Timer A3 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A3 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A3 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.9..9> TMRA3IE0
//        <0=> 0: DIS = Disable counter/timer A3 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A3 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3FN  --------------------------------
// SVD Line: 10741

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3FN
//    <name> TMRA3FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000806C) \nCounter/Timer A3 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A3, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A3, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A3, assert, count to CMPR1A3, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A3, assert, count to CMPR1A3, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.8..6> TMRA3FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A3, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A3, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A3, assert, count to CMPR1A3, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A3, assert, count to CMPR1A3, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3CLK  -------------------------------
// SVD Line: 10789

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3CLK
//    <name> TMRA3CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x4000806C) \nCounter/Timer A3 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n21 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n22 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n23 : CTMRA4 = Clock source is CTIMERA4 OUT. value.\n24 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.5..1> TMRA3CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <21=> 21: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <22=> 22: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <23=> 23: CTMRA4 = Clock source is CTIMERA4 OUT. value.
//        <24=> 24: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL3_TMRA3EN  --------------------------------
// SVD Line: 10952

//  <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3EN
//    <name> TMRA3EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000806C) \nCounter/Timer A3 Enable bit.\n0 : DIS = Counter/Timer A3 Disable. value.\n1 : EN = Counter/Timer A3 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL3 ) </loc>
//      <o.0..0> TMRA3EN
//        <0=> 0: DIS = Counter/Timer A3 Disable. value.
//        <1=> 1: EN = Counter/Timer A3 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL3  ----------------------------------
// SVD Line: 10333

//  <rtree> SFDITEM_REG__CTIMER_CTRL3
//    <name> CTRL3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000806C) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL3 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL3 = (CTIMER_CTRL3 & ~(0x9FFF9FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF9FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_CTLINK3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRB3EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_ADCEN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL3_TMRA3EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA3  ----------------------------
// SVD Line: 10972

unsigned int CTIMER_CMPRAUXA3 __AT (0x40008074);



// --------------------------  Field Item: CTIMER_CMPRAUXA3_CMPR3A3  ------------------------------
// SVD Line: 10982

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA3_CMPR3A3
//    <name> CMPR3A3 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008074) Counter/Timer A3 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA3 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA3 = (CTIMER_CMPRAUXA3 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA3_CMPR2A3  ------------------------------
// SVD Line: 10989

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA3_CMPR2A3
//    <name> CMPR2A3 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008074) Counter/Timer A3 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA3 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA3 = (CTIMER_CMPRAUXA3 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA3  --------------------------------
// SVD Line: 10972

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA3
//    <name> CMPRAUXA3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008074) Counter/Timer A3 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA3 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA3 = (CTIMER_CMPRAUXA3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA3_CMPR3A3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA3_CMPR2A3 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB3  ----------------------------
// SVD Line: 10998

unsigned int CTIMER_CMPRAUXB3 __AT (0x40008078);



// --------------------------  Field Item: CTIMER_CMPRAUXB3_CMPR3B3  ------------------------------
// SVD Line: 11008

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB3_CMPR3B3
//    <name> CMPR3B3 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008078) Counter/Timer B3 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB3 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB3 = (CTIMER_CMPRAUXB3 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB3_CMPR2B3  ------------------------------
// SVD Line: 11015

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB3_CMPR2B3
//    <name> CMPR2B3 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008078) Counter/Timer B3 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB3 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB3 = (CTIMER_CMPRAUXB3 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB3  --------------------------------
// SVD Line: 10998

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB3
//    <name> CMPRAUXB3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008078) Counter/Timer B3 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB3 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB3 = (CTIMER_CMPRAUXB3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB3_CMPR3B3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB3_CMPR2B3 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX3  -------------------------------
// SVD Line: 11024

unsigned int CTIMER_AUX3 __AT (0x4000807C);



// ----------------------------  Field Item: CTIMER_AUX3_TMRB3EN23  -------------------------------
// SVD Line: 11034

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3EN23
//    <name> TMRB3EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000807C) \nCounter/Timer B3 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.30..30> TMRB3EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX3_TMRB3POL23  -------------------------------
// SVD Line: 11052

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3POL23
//    <name> TMRB3POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000807C) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.29..29> TMRB3POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRB3TINV  -------------------------------
// SVD Line: 11070

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3TINV
//    <name> TMRB3TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000807C) \nCounter/Timer B3 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.28..28> TMRB3TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX3_TMRB3NOSYNC  ------------------------------
// SVD Line: 11088

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3NOSYNC
//    <name> TMRB3NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000807C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.27..27> TMRB3NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRB3TRIG  -------------------------------
// SVD Line: 11106

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3TRIG
//    <name> TMRB3TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000807C) \nCounter/Timer B3 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n2 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n3 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n4 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n5 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n6 : A6OUT = Trigger source is CTIMERA6 OUT. value.\n7 : B6OUT = Trigger source is CTIMERB6 OUT. value.\n8 : B5OUT2 = Trigger source is CTIMERB5 OUT2. value.\n9 : A5OUT2 = Trigger source is CTIMERA5 OUT2. value.\n10 : A1OUT2 = Trigger source is CTIMERA1 OUT2. value.\n11 : B1OUT2 = Trigger source is CTIMERB1 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B2OUT2DUAL = Trigger source is CTIMERB2 OUT2, dual edge. value.\n15 : A2OUT2DUAL = Trigger source is CTIMERA2 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.26..23> TMRB3TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <2=> 2: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <3=> 3: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <4=> 4: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <5=> 5: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <6=> 6: A6OUT = Trigger source is CTIMERA6 OUT. value.
//        <7=> 7: B6OUT = Trigger source is CTIMERB6 OUT. value.
//        <8=> 8: B5OUT2 = Trigger source is CTIMERB5 OUT2. value.
//        <9=> 9: A5OUT2 = Trigger source is CTIMERA5 OUT2. value.
//        <10=> 10: A1OUT2 = Trigger source is CTIMERA1 OUT2. value.
//        <11=> 11: B1OUT2 = Trigger source is CTIMERB1 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B2OUT2DUAL = Trigger source is CTIMERB2 OUT2, dual edge. value.
//        <15=> 15: A2OUT2DUAL = Trigger source is CTIMERA2 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRB3LMT  --------------------------------
// SVD Line: 11194

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3LMT
//    <name> TMRB3LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x4000807C) Counter/Timer B3 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX3 >> 16) & 0x3F), ((CTIMER_AUX3 = (CTIMER_AUX3 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRA3EN23  -------------------------------
// SVD Line: 11201

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3EN23
//    <name> TMRA3EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000807C) \nCounter/Timer A3 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.14..14> TMRA3EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX3_TMRA3POL23  -------------------------------
// SVD Line: 11219

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3POL23
//    <name> TMRA3POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000807C) \nCounter/Timer A3 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.13..13> TMRA3POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRA3TINV  -------------------------------
// SVD Line: 11237

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3TINV
//    <name> TMRA3TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000807C) \nCounter/Timer A3 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.12..12> TMRA3TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX3_TMRA3NOSYNC  ------------------------------
// SVD Line: 11255

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3NOSYNC
//    <name> TMRA3NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000807C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.11..11> TMRA3NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRA3TRIG  -------------------------------
// SVD Line: 11273

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3TRIG
//    <name> TMRA3TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000807C) \nCounter/Timer A3 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n2 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n3 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n4 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n5 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n6 : A7OUT = Trigger source is CTIMERA7 OUT. value.\n7 : B7OUT = Trigger source is CTIMERB7 OUT. value.\n8 : B5OUT2 = Trigger source is CTIMERB5 OUT2. value.\n9 : A5OUT2 = Trigger source is CTIMERA5 OUT2. value.\n10 : A1OUT2 = Trigger source is CTIMERA1 OUT2. value.\n11 : B1OUT2 = Trigger source is CTIMERB1 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B2OUT2DUAL = Trigger source is CTIMERB2 OUT2, dual edge. value.\n15 : A2OUT2DUAL = Trigger source is CTIMERA2 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX3 ) </loc>
//      <o.10..7> TMRA3TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <2=> 2: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <3=> 3: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <4=> 4: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <5=> 5: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <6=> 6: A7OUT = Trigger source is CTIMERA7 OUT. value.
//        <7=> 7: B7OUT = Trigger source is CTIMERB7 OUT. value.
//        <8=> 8: B5OUT2 = Trigger source is CTIMERB5 OUT2. value.
//        <9=> 9: A5OUT2 = Trigger source is CTIMERA5 OUT2. value.
//        <10=> 10: A1OUT2 = Trigger source is CTIMERA1 OUT2. value.
//        <11=> 11: B1OUT2 = Trigger source is CTIMERB1 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B2OUT2DUAL = Trigger source is CTIMERB2 OUT2, dual edge. value.
//        <15=> 15: A2OUT2DUAL = Trigger source is CTIMERA2 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX3_TMRA3LMT  --------------------------------
// SVD Line: 11361

//  <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3LMT
//    <name> TMRA3LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x4000807C) Counter/Timer A3 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX3 >> 0) & 0x7F), ((CTIMER_AUX3 = (CTIMER_AUX3 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX3  ----------------------------------
// SVD Line: 11024

//  <rtree> SFDITEM_REG__CTIMER_AUX3
//    <name> AUX3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000807C) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX3 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX3 = (CTIMER_AUX3 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRB3LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX3_TMRA3LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR4  -------------------------------
// SVD Line: 11370

unsigned int CTIMER_TMR4 __AT (0x40008080);



// -----------------------------  Field Item: CTIMER_TMR4_CTTMRB4  --------------------------------
// SVD Line: 11380

//  <item> SFDITEM_FIELD__CTIMER_TMR4_CTTMRB4
//    <name> CTTMRB4 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008080) Counter/Timer B4. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR4 >> 16) & 0xFFFF), ((CTIMER_TMR4 = (CTIMER_TMR4 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR4_CTTMRA4  --------------------------------
// SVD Line: 11387

//  <item> SFDITEM_FIELD__CTIMER_TMR4_CTTMRA4
//    <name> CTTMRA4 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008080) Counter/Timer A4. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR4 >> 0) & 0xFFFF), ((CTIMER_TMR4 = (CTIMER_TMR4 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR4  ----------------------------------
// SVD Line: 11370

//  <rtree> SFDITEM_REG__CTIMER_TMR4
//    <name> TMR4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008080) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR4 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR4 = (CTIMER_TMR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR4_CTTMRB4 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR4_CTTMRA4 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA4  ------------------------------
// SVD Line: 11396

unsigned int CTIMER_CMPRA4 __AT (0x40008084);



// ----------------------------  Field Item: CTIMER_CMPRA4_CMPR1A4  -------------------------------
// SVD Line: 11406

//  <item> SFDITEM_FIELD__CTIMER_CMPRA4_CMPR1A4
//    <name> CMPR1A4 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008084) Counter/Timer A4 Compare Register 1. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA4 >> 16) & 0xFFFF), ((CTIMER_CMPRA4 = (CTIMER_CMPRA4 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA4_CMPR0A4  -------------------------------
// SVD Line: 11413

//  <item> SFDITEM_FIELD__CTIMER_CMPRA4_CMPR0A4
//    <name> CMPR0A4 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008084) Counter/Timer A4 Compare Register 0. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA4 >> 0) & 0xFFFF), ((CTIMER_CMPRA4 = (CTIMER_CMPRA4 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA4  ---------------------------------
// SVD Line: 11396

//  <rtree> SFDITEM_REG__CTIMER_CMPRA4
//    <name> CMPRA4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008084) Counter/Timer A4 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA4 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA4 = (CTIMER_CMPRA4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA4_CMPR1A4 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA4_CMPR0A4 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB4  ------------------------------
// SVD Line: 11422

unsigned int CTIMER_CMPRB4 __AT (0x40008088);



// ----------------------------  Field Item: CTIMER_CMPRB4_CMPR1B4  -------------------------------
// SVD Line: 11432

//  <item> SFDITEM_FIELD__CTIMER_CMPRB4_CMPR1B4
//    <name> CMPR1B4 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008088) Counter/Timer B4 Compare Register 1. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB4 >> 16) & 0xFFFF), ((CTIMER_CMPRB4 = (CTIMER_CMPRB4 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB4_CMPR0B4  -------------------------------
// SVD Line: 11439

//  <item> SFDITEM_FIELD__CTIMER_CMPRB4_CMPR0B4
//    <name> CMPR0B4 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008088) Counter/Timer B4 Compare Register 0. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB4 >> 0) & 0xFFFF), ((CTIMER_CMPRB4 = (CTIMER_CMPRB4 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB4  ---------------------------------
// SVD Line: 11422

//  <rtree> SFDITEM_REG__CTIMER_CMPRB4
//    <name> CMPRB4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008088) Counter/Timer B4 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB4 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB4 = (CTIMER_CMPRB4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB4_CMPR1B4 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB4_CMPR0B4 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL4  ------------------------------
// SVD Line: 11448

unsigned int CTIMER_CTRL4 __AT (0x4000808C);



// ----------------------------  Field Item: CTIMER_CTRL4_CTLINK4  --------------------------------
// SVD Line: 11458

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_CTLINK4
//    <name> CTLINK4 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000808C) \nCounter/Timer A4/B4 Link bit.\n0 : TWO_16BIT_TIMERS = Use A4/B4 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A4/B4 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.31..31> CTLINK4
//        <0=> 0: TWO_16BIT_TIMERS = Use A4/B4 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A4/B4 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4POL  -------------------------------
// SVD Line: 11476

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4POL
//    <name> TMRB4POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000808C) \nCounter/Timer B4 output polarity.\n0 : NORMAL = The polarity of the TMRPINB4 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB4 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.28..28> TMRB4POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB4 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB4 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4CLR  -------------------------------
// SVD Line: 11494

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4CLR
//    <name> TMRB4CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000808C) \nCounter/Timer B4 Clear bit.\n0 : RUN = Allow counter/timer B4 to run value.\n1 : CLEAR = Holds counter/timer B4 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.27..27> TMRB4CLR
//        <0=> 0: RUN = Allow counter/timer B4 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B4 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4IE1  -------------------------------
// SVD Line: 11512

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4IE1
//    <name> TMRB4IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000808C) \nCounter/Timer B4 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B4 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B4 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.26..26> TMRB4IE1
//        <0=> 0: DIS = Disable counter/timer B4 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B4 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4IE0  -------------------------------
// SVD Line: 11530

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4IE0
//    <name> TMRB4IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000808C) \nCounter/Timer B4 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B4 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B4 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.25..25> TMRB4IE0
//        <0=> 0: DIS = Disable counter/timer B4 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B4 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4FN  --------------------------------
// SVD Line: 11548

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4FN
//    <name> TMRB4FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000808C) \nCounter/Timer B4 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B4, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B4, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B4, assert, count to CMPR1B4, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B4, assert, count to CMPR1B4, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.24..22> TMRB4FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B4, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B4, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B4, assert, count to CMPR1B4, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B4, assert, count to CMPR1B4, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4CLK  -------------------------------
// SVD Line: 11596

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4CLK
//    <name> TMRB4CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x4000808C) \nCounter/Timer B4 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA4 = Clock source is CTIMERA4 OUT. value.\n21 : CTMRA1 = Clock source is CTIMERA1 OUT. value.\n22 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n23 : CTMRA5 = Clock source is CTIMERA5 OUT. value.\n24 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n27 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.21..17> TMRB4CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA4 = Clock source is CTIMERA4 OUT. value.
//        <21=> 21: CTMRA1 = Clock source is CTIMERA1 OUT. value.
//        <22=> 22: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <23=> 23: CTMRA5 = Clock source is CTIMERA5 OUT. value.
//        <24=> 24: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <27=> 27: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRB4EN  --------------------------------
// SVD Line: 11759

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4EN
//    <name> TMRB4EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000808C) \nCounter/Timer B4 Enable bit.\n0 : DIS = Counter/Timer B4 Disable. value.\n1 : EN = Counter/Timer B4 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.16..16> TMRB4EN
//        <0=> 0: DIS = Counter/Timer B4 Disable. value.
//        <1=> 1: EN = Counter/Timer B4 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4POL  -------------------------------
// SVD Line: 11777

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4POL
//    <name> TMRA4POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000808C) \nCounter/Timer A4 output polarity.\n0 : NORMAL = The polarity of the TMRPINA4 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA4 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.12..12> TMRA4POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA4 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA4 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4CLR  -------------------------------
// SVD Line: 11795

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4CLR
//    <name> TMRA4CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000808C) \nCounter/Timer A4 Clear bit.\n0 : RUN = Allow counter/timer A4 to run value.\n1 : CLEAR = Holds counter/timer A4 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.11..11> TMRA4CLR
//        <0=> 0: RUN = Allow counter/timer A4 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A4 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4IE1  -------------------------------
// SVD Line: 11813

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4IE1
//    <name> TMRA4IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000808C) \nCounter/Timer A4 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A4 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A4 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.10..10> TMRA4IE1
//        <0=> 0: DIS = Disable counter/timer A4 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A4 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4IE0  -------------------------------
// SVD Line: 11831

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4IE0
//    <name> TMRA4IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000808C) \nCounter/Timer A4 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A4 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A4 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.9..9> TMRA4IE0
//        <0=> 0: DIS = Disable counter/timer A4 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A4 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4FN  --------------------------------
// SVD Line: 11849

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4FN
//    <name> TMRA4FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000808C) \nCounter/Timer A4 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A4, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A4, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A4, assert, count to CMPR1A4, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A4, assert, count to CMPR1A4, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.8..6> TMRA4FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A4, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A4, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A4, assert, count to CMPR1A4, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A4, assert, count to CMPR1A4, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4CLK  -------------------------------
// SVD Line: 11897

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4CLK
//    <name> TMRA4CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x4000808C) \nCounter/Timer A4 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK_DIV4 = Clock source is HCLK / 4. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n21 : CTMRA1 = Clock source is CTIMERA1 OUT. value.\n22 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n23 : CTMRA5 = Clock source is CTIMERA5 OUT. value.\n24 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n27 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n28 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.5..1> TMRA4CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK_DIV4 = Clock source is HCLK / 4. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <21=> 21: CTMRA1 = Clock source is CTIMERA1 OUT. value.
//        <22=> 22: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <23=> 23: CTMRA5 = Clock source is CTIMERA5 OUT. value.
//        <24=> 24: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <27=> 27: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <28=> 28: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL4_TMRA4EN  --------------------------------
// SVD Line: 12060

//  <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4EN
//    <name> TMRA4EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000808C) \nCounter/Timer A4 Enable bit.\n0 : DIS = Counter/Timer A4 Disable. value.\n1 : EN = Counter/Timer A4 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL4 ) </loc>
//      <o.0..0> TMRA4EN
//        <0=> 0: DIS = Counter/Timer A4 Disable. value.
//        <1=> 1: EN = Counter/Timer A4 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL4  ----------------------------------
// SVD Line: 11448

//  <rtree> SFDITEM_REG__CTIMER_CTRL4
//    <name> CTRL4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000808C) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL4 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL4 = (CTIMER_CTRL4 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_CTLINK4 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRB4EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL4_TMRA4EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA4  ----------------------------
// SVD Line: 12080

unsigned int CTIMER_CMPRAUXA4 __AT (0x40008094);



// --------------------------  Field Item: CTIMER_CMPRAUXA4_CMPR3A4  ------------------------------
// SVD Line: 12090

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA4_CMPR3A4
//    <name> CMPR3A4 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008094) Counter/Timer A4 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA4 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA4 = (CTIMER_CMPRAUXA4 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA4_CMPR2A4  ------------------------------
// SVD Line: 12097

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA4_CMPR2A4
//    <name> CMPR2A4 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008094) Counter/Timer A4 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA4 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA4 = (CTIMER_CMPRAUXA4 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA4  --------------------------------
// SVD Line: 12080

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA4
//    <name> CMPRAUXA4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008094) Counter/Timer A4 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA4 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA4 = (CTIMER_CMPRAUXA4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA4_CMPR3A4 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA4_CMPR2A4 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB4  ----------------------------
// SVD Line: 12106

unsigned int CTIMER_CMPRAUXB4 __AT (0x40008098);



// --------------------------  Field Item: CTIMER_CMPRAUXB4_CMPR3B4  ------------------------------
// SVD Line: 12116

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB4_CMPR3B4
//    <name> CMPR3B4 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x40008098) Counter/Timer B4 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB4 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB4 = (CTIMER_CMPRAUXB4 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB4_CMPR2B4  ------------------------------
// SVD Line: 12123

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB4_CMPR2B4
//    <name> CMPR2B4 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40008098) Counter/Timer B4 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB4 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB4 = (CTIMER_CMPRAUXB4 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB4  --------------------------------
// SVD Line: 12106

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB4
//    <name> CMPRAUXB4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008098) Counter/Timer B4 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB4 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB4 = (CTIMER_CMPRAUXB4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB4_CMPR3B4 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB4_CMPR2B4 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX4  -------------------------------
// SVD Line: 12132

unsigned int CTIMER_AUX4 __AT (0x4000809C);



// ----------------------------  Field Item: CTIMER_AUX4_TMRB4EN23  -------------------------------
// SVD Line: 12142

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4EN23
//    <name> TMRB4EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000809C) \nCounter/Timer B4 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.30..30> TMRB4EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX4_TMRB4POL23  -------------------------------
// SVD Line: 12160

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4POL23
//    <name> TMRB4POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000809C) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.29..29> TMRB4POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRB4TINV  -------------------------------
// SVD Line: 12178

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4TINV
//    <name> TMRB4TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000809C) \nCounter/Timer B4 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.28..28> TMRB4TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX4_TMRB4NOSYNC  ------------------------------
// SVD Line: 12196

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4NOSYNC
//    <name> TMRB4NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000809C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.27..27> TMRB4NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRB4TRIG  -------------------------------
// SVD Line: 12214

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4TRIG
//    <name> TMRB4TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x4000809C) \nCounter/Timer B4 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A7OUT = Trigger source is CTIMERA7 OUT. value.\n5 : B7OUT = Trigger source is CTIMERB7 OUT. value.\n6 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n7 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A1OUT2 = Trigger source is CTIMERA1 OUT2. value.\n11 : B1OUT2 = Trigger source is CTIMERB1 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.\n15 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.26..23> TMRB4TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A7OUT = Trigger source is CTIMERA7 OUT. value.
//        <5=> 5: B7OUT = Trigger source is CTIMERB7 OUT. value.
//        <6=> 6: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <7=> 7: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A1OUT2 = Trigger source is CTIMERA1 OUT2. value.
//        <11=> 11: B1OUT2 = Trigger source is CTIMERB1 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.
//        <15=> 15: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRB4LMT  --------------------------------
// SVD Line: 12302

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4LMT
//    <name> TMRB4LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x4000809C) Counter/Timer B4 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX4 >> 16) & 0x3F), ((CTIMER_AUX4 = (CTIMER_AUX4 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRA4EN23  -------------------------------
// SVD Line: 12309

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4EN23
//    <name> TMRA4EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000809C) \nCounter/Timer A4 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.14..14> TMRA4EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX4_TMRA4POL23  -------------------------------
// SVD Line: 12327

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4POL23
//    <name> TMRA4POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000809C) \nCounter/Timer A4 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.13..13> TMRA4POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRA4TINV  -------------------------------
// SVD Line: 12345

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4TINV
//    <name> TMRA4TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000809C) \nCounter/Timer A4 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.12..12> TMRA4TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX4_TMRA4NOSYNC  ------------------------------
// SVD Line: 12363

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4NOSYNC
//    <name> TMRA4NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000809C) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.11..11> TMRA4NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRA4TRIG  -------------------------------
// SVD Line: 12381

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4TRIG
//    <name> TMRA4TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000809C) \nCounter/Timer A4 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A6OUT = Trigger source is CTIMERA6 OUT. value.\n5 : B6OUT = Trigger source is CTIMERB6 OUT. value.\n6 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n7 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A1OUT2 = Trigger source is CTIMERA1 OUT2. value.\n11 : B1OUT2 = Trigger source is CTIMERB1 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.\n15 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX4 ) </loc>
//      <o.10..7> TMRA4TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A6OUT = Trigger source is CTIMERA6 OUT. value.
//        <5=> 5: B6OUT = Trigger source is CTIMERB6 OUT. value.
//        <6=> 6: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <7=> 7: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A1OUT2 = Trigger source is CTIMERA1 OUT2. value.
//        <11=> 11: B1OUT2 = Trigger source is CTIMERB1 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B5OUT2DUAL = Trigger source is CTIMERB5 OUT2, dual edge. value.
//        <15=> 15: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX4_TMRA4LMT  --------------------------------
// SVD Line: 12469

//  <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4LMT
//    <name> TMRA4LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x4000809C) Counter/Timer A4 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX4 >> 0) & 0x7F), ((CTIMER_AUX4 = (CTIMER_AUX4 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX4  ----------------------------------
// SVD Line: 12132

//  <rtree> SFDITEM_REG__CTIMER_AUX4
//    <name> AUX4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000809C) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX4 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX4 = (CTIMER_AUX4 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRB4LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX4_TMRA4LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR5  -------------------------------
// SVD Line: 12478

unsigned int CTIMER_TMR5 __AT (0x400080A0);



// -----------------------------  Field Item: CTIMER_TMR5_CTTMRB5  --------------------------------
// SVD Line: 12488

//  <item> SFDITEM_FIELD__CTIMER_TMR5_CTTMRB5
//    <name> CTTMRB5 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080A0) Counter/Timer B5. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR5 >> 16) & 0xFFFF), ((CTIMER_TMR5 = (CTIMER_TMR5 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR5_CTTMRA5  --------------------------------
// SVD Line: 12495

//  <item> SFDITEM_FIELD__CTIMER_TMR5_CTTMRA5
//    <name> CTTMRA5 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080A0) Counter/Timer A5. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR5 >> 0) & 0xFFFF), ((CTIMER_TMR5 = (CTIMER_TMR5 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR5  ----------------------------------
// SVD Line: 12478

//  <rtree> SFDITEM_REG__CTIMER_TMR5
//    <name> TMR5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080A0) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR5 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR5 = (CTIMER_TMR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR5_CTTMRB5 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR5_CTTMRA5 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA5  ------------------------------
// SVD Line: 12504

unsigned int CTIMER_CMPRA5 __AT (0x400080A4);



// ----------------------------  Field Item: CTIMER_CMPRA5_CMPR1A5  -------------------------------
// SVD Line: 12514

//  <item> SFDITEM_FIELD__CTIMER_CMPRA5_CMPR1A5
//    <name> CMPR1A5 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080A4) Counter/Timer A5 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA5 >> 16) & 0xFFFF), ((CTIMER_CMPRA5 = (CTIMER_CMPRA5 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA5_CMPR0A5  -------------------------------
// SVD Line: 12521

//  <item> SFDITEM_FIELD__CTIMER_CMPRA5_CMPR0A5
//    <name> CMPR0A5 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080A4) Counter/Timer A5 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA5 >> 0) & 0xFFFF), ((CTIMER_CMPRA5 = (CTIMER_CMPRA5 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA5  ---------------------------------
// SVD Line: 12504

//  <rtree> SFDITEM_REG__CTIMER_CMPRA5
//    <name> CMPRA5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080A4) Counter/Timer A5 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA5 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA5 = (CTIMER_CMPRA5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA5_CMPR1A5 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA5_CMPR0A5 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB5  ------------------------------
// SVD Line: 12530

unsigned int CTIMER_CMPRB5 __AT (0x400080A8);



// ----------------------------  Field Item: CTIMER_CMPRB5_CMPR1B5  -------------------------------
// SVD Line: 12540

//  <item> SFDITEM_FIELD__CTIMER_CMPRB5_CMPR1B5
//    <name> CMPR1B5 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080A8) Counter/Timer B5 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB5 >> 16) & 0xFFFF), ((CTIMER_CMPRB5 = (CTIMER_CMPRB5 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB5_CMPR0B5  -------------------------------
// SVD Line: 12547

//  <item> SFDITEM_FIELD__CTIMER_CMPRB5_CMPR0B5
//    <name> CMPR0B5 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080A8) Counter/Timer B5 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB5 >> 0) & 0xFFFF), ((CTIMER_CMPRB5 = (CTIMER_CMPRB5 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB5  ---------------------------------
// SVD Line: 12530

//  <rtree> SFDITEM_REG__CTIMER_CMPRB5
//    <name> CMPRB5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080A8) Counter/Timer B5 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB5 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB5 = (CTIMER_CMPRB5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB5_CMPR1B5 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB5_CMPR0B5 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL5  ------------------------------
// SVD Line: 12556

unsigned int CTIMER_CTRL5 __AT (0x400080AC);



// ----------------------------  Field Item: CTIMER_CTRL5_CTLINK5  --------------------------------
// SVD Line: 12566

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_CTLINK5
//    <name> CTLINK5 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400080AC) \nCounter/Timer A5/B5 Link bit.\n0 : TWO_16BIT_TIMERS = Use A5/B5 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A5/B5 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.31..31> CTLINK5
//        <0=> 0: TWO_16BIT_TIMERS = Use A5/B5 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A5/B5 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5POL  -------------------------------
// SVD Line: 12584

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5POL
//    <name> TMRB5POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080AC) \nCounter/Timer B5 output polarity.\n0 : NORMAL = The polarity of the TMRPINB5 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB5 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.28..28> TMRB5POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB5 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB5 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5CLR  -------------------------------
// SVD Line: 12602

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5CLR
//    <name> TMRB5CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080AC) \nCounter/Timer B5 Clear bit.\n0 : RUN = Allow counter/timer B5 to run value.\n1 : CLEAR = Holds counter/timer B5 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.27..27> TMRB5CLR
//        <0=> 0: RUN = Allow counter/timer B5 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B5 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5IE1  -------------------------------
// SVD Line: 12620

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5IE1
//    <name> TMRB5IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x400080AC) \nCounter/Timer B5 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B5 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B5 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.26..26> TMRB5IE1
//        <0=> 0: DIS = Disable counter/timer B5 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B5 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5IE0  -------------------------------
// SVD Line: 12638

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5IE0
//    <name> TMRB5IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x400080AC) \nCounter/Timer B5 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B5 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B5 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.25..25> TMRB5IE0
//        <0=> 0: DIS = Disable counter/timer B5 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B5 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5FN  --------------------------------
// SVD Line: 12656

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5FN
//    <name> TMRB5FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x400080AC) \nCounter/Timer B5 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B5, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B5, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B5, assert, count to CMPR1B5, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B5, assert, count to CMPR1B5, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.24..22> TMRB5FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B5, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B5, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B5, assert, count to CMPR1B5, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B5, assert, count to CMPR1B5, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5CLK  -------------------------------
// SVD Line: 12704

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5CLK
//    <name> TMRB5CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x400080AC) \nCounter/Timer B5 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA5 = Clock source is CTIMERA5 OUT. value.\n21 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n22 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n23 : CTMRA6 = Clock source is CTIMERA6 OUT. value.\n24 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n25 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n26 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n27 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n28 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.21..17> TMRB5CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA5 = Clock source is CTIMERA5 OUT. value.
//        <21=> 21: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <22=> 22: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <23=> 23: CTMRA6 = Clock source is CTIMERA6 OUT. value.
//        <24=> 24: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <25=> 25: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <26=> 26: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <27=> 27: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <28=> 28: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRB5EN  --------------------------------
// SVD Line: 12867

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5EN
//    <name> TMRB5EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400080AC) \nCounter/Timer B5 Enable bit.\n0 : DIS = Counter/Timer B5 Disable. value.\n1 : EN = Counter/Timer B5 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.16..16> TMRB5EN
//        <0=> 0: DIS = Counter/Timer B5 Disable. value.
//        <1=> 1: EN = Counter/Timer B5 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5POL  -------------------------------
// SVD Line: 12885

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5POL
//    <name> TMRA5POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080AC) \nCounter/Timer A5 output polarity.\n0 : NORMAL = The polarity of the TMRPINA5 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA5 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.12..12> TMRA5POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA5 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA5 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5CLR  -------------------------------
// SVD Line: 12903

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5CLR
//    <name> TMRA5CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080AC) \nCounter/Timer A5 Clear bit.\n0 : RUN = Allow counter/timer A5 to run value.\n1 : CLEAR = Holds counter/timer A5 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.11..11> TMRA5CLR
//        <0=> 0: RUN = Allow counter/timer A5 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A5 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5IE1  -------------------------------
// SVD Line: 12921

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5IE1
//    <name> TMRA5IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400080AC) \nCounter/Timer A5 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A5 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A5 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.10..10> TMRA5IE1
//        <0=> 0: DIS = Disable counter/timer A5 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A5 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5IE0  -------------------------------
// SVD Line: 12939

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5IE0
//    <name> TMRA5IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400080AC) \nCounter/Timer A5 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A5 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A5 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.9..9> TMRA5IE0
//        <0=> 0: DIS = Disable counter/timer A5 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A5 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5FN  --------------------------------
// SVD Line: 12957

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5FN
//    <name> TMRA5FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x400080AC) \nCounter/Timer A5 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A5, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A5, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A5, assert, count to CMPR1A5, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A5, assert, count to CMPR1A5, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.8..6> TMRA5FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A5, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A5, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A5, assert, count to CMPR1A5, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A5, assert, count to CMPR1A5, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5CLK  -------------------------------
// SVD Line: 13005

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5CLK
//    <name> TMRA5CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x400080AC) \nCounter/Timer A5 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n21 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n22 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n23 : CTMRA6 = Clock source is CTIMERA6 OUT. value.\n24 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n25 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n26 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n27 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n28 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.5..1> TMRA5CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <21=> 21: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <22=> 22: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <23=> 23: CTMRA6 = Clock source is CTIMERA6 OUT. value.
//        <24=> 24: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <25=> 25: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <26=> 26: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <27=> 27: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <28=> 28: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL5_TMRA5EN  --------------------------------
// SVD Line: 13168

//  <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5EN
//    <name> TMRA5EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400080AC) \nCounter/Timer A5 Enable bit.\n0 : DIS = Counter/Timer A5 Disable. value.\n1 : EN = Counter/Timer A5 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL5 ) </loc>
//      <o.0..0> TMRA5EN
//        <0=> 0: DIS = Counter/Timer A5 Disable. value.
//        <1=> 1: EN = Counter/Timer A5 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL5  ----------------------------------
// SVD Line: 12556

//  <rtree> SFDITEM_REG__CTIMER_CTRL5
//    <name> CTRL5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080AC) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL5 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL5 = (CTIMER_CTRL5 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_CTLINK5 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRB5EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL5_TMRA5EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA5  ----------------------------
// SVD Line: 13188

unsigned int CTIMER_CMPRAUXA5 __AT (0x400080B4);



// --------------------------  Field Item: CTIMER_CMPRAUXA5_CMPR3A5  ------------------------------
// SVD Line: 13198

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA5_CMPR3A5
//    <name> CMPR3A5 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080B4) Counter/Timer A5 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA5 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA5 = (CTIMER_CMPRAUXA5 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA5_CMPR2A5  ------------------------------
// SVD Line: 13205

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA5_CMPR2A5
//    <name> CMPR2A5 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080B4) Counter/Timer A5 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA5 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA5 = (CTIMER_CMPRAUXA5 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA5  --------------------------------
// SVD Line: 13188

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA5
//    <name> CMPRAUXA5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080B4) Counter/Timer A5 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA5 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA5 = (CTIMER_CMPRAUXA5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA5_CMPR3A5 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA5_CMPR2A5 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB5  ----------------------------
// SVD Line: 13214

unsigned int CTIMER_CMPRAUXB5 __AT (0x400080B8);



// --------------------------  Field Item: CTIMER_CMPRAUXB5_CMPR3B5  ------------------------------
// SVD Line: 13224

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB5_CMPR3B5
//    <name> CMPR3B5 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080B8) Counter/Timer B5 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB5 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB5 = (CTIMER_CMPRAUXB5 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB5_CMPR2B5  ------------------------------
// SVD Line: 13231

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB5_CMPR2B5
//    <name> CMPR2B5 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080B8) Counter/Timer B5 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB5 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB5 = (CTIMER_CMPRAUXB5 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB5  --------------------------------
// SVD Line: 13214

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB5
//    <name> CMPRAUXB5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080B8) Counter/Timer B5 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB5 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB5 = (CTIMER_CMPRAUXB5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB5_CMPR3B5 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB5_CMPR2B5 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX5  -------------------------------
// SVD Line: 13240

unsigned int CTIMER_AUX5 __AT (0x400080BC);



// ----------------------------  Field Item: CTIMER_AUX5_TMRB5EN23  -------------------------------
// SVD Line: 13250

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5EN23
//    <name> TMRB5EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400080BC) \nCounter/Timer B5 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.30..30> TMRB5EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX5_TMRB5POL23  -------------------------------
// SVD Line: 13268

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5POL23
//    <name> TMRB5POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x400080BC) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.29..29> TMRB5POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRB5TINV  -------------------------------
// SVD Line: 13286

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5TINV
//    <name> TMRB5TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080BC) \nCounter/Timer B5 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.28..28> TMRB5TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX5_TMRB5NOSYNC  ------------------------------
// SVD Line: 13304

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5NOSYNC
//    <name> TMRB5NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080BC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.27..27> TMRB5NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRB5TRIG  -------------------------------
// SVD Line: 13322

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5TRIG
//    <name> TMRB5TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x400080BC) \nCounter/Timer B5 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A5OUT = Trigger source is CTIMERA5 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A6OUT = Trigger source is CTIMERA6 OUT. value.\n5 : B6OUT = Trigger source is CTIMERB6 OUT. value.\n6 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n7 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A0OUT2 = Trigger source is CTIMERA0 OUT2. value.\n11 : B0OUT2 = Trigger source is CTIMERB0 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.26..23> TMRB5TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A5OUT = Trigger source is CTIMERA5 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A6OUT = Trigger source is CTIMERA6 OUT. value.
//        <5=> 5: B6OUT = Trigger source is CTIMERB6 OUT. value.
//        <6=> 6: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <7=> 7: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A0OUT2 = Trigger source is CTIMERA0 OUT2. value.
//        <11=> 11: B0OUT2 = Trigger source is CTIMERB0 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRB5LMT  --------------------------------
// SVD Line: 13410

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5LMT
//    <name> TMRB5LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x400080BC) Counter/Timer B5 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX5 >> 16) & 0x3F), ((CTIMER_AUX5 = (CTIMER_AUX5 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRA5EN23  -------------------------------
// SVD Line: 13417

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5EN23
//    <name> TMRA5EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x400080BC) \nCounter/Timer A5 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.14..14> TMRA5EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX5_TMRA5POL23  -------------------------------
// SVD Line: 13435

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5POL23
//    <name> TMRA5POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x400080BC) \nCounter/Timer A5 Upper output polarity\n0 : NORMAL = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.13..13> TMRA5POL23
//        <0=> 0: NORMAL = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRA5TINV  -------------------------------
// SVD Line: 13453

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5TINV
//    <name> TMRA5TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080BC) \nCounter/Timer A5 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.12..12> TMRA5TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX5_TMRA5NOSYNC  ------------------------------
// SVD Line: 13471

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5NOSYNC
//    <name> TMRA5NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080BC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.11..11> TMRA5NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRA5TRIG  -------------------------------
// SVD Line: 13489

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5TRIG
//    <name> TMRA5TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400080BC) \nCounter/Timer A5 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n5 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n6 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n7 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A0OUT2 = Trigger source is CTIMERA0 OUT2. value.\n11 : B0OUT2 = Trigger source is CTIMERB0 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX5 ) </loc>
//      <o.10..7> TMRA5TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <5=> 5: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <6=> 6: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <7=> 7: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A0OUT2 = Trigger source is CTIMERA0 OUT2. value.
//        <11=> 11: B0OUT2 = Trigger source is CTIMERB0 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX5_TMRA5LMT  --------------------------------
// SVD Line: 13577

//  <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5LMT
//    <name> TMRA5LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x400080BC) Counter/Timer A5 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX5 >> 0) & 0x7F), ((CTIMER_AUX5 = (CTIMER_AUX5 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX5  ----------------------------------
// SVD Line: 13240

//  <rtree> SFDITEM_REG__CTIMER_AUX5
//    <name> AUX5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080BC) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX5 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX5 = (CTIMER_AUX5 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRB5LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX5_TMRA5LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR6  -------------------------------
// SVD Line: 13586

unsigned int CTIMER_TMR6 __AT (0x400080C0);



// -----------------------------  Field Item: CTIMER_TMR6_CTTMRB6  --------------------------------
// SVD Line: 13596

//  <item> SFDITEM_FIELD__CTIMER_TMR6_CTTMRB6
//    <name> CTTMRB6 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080C0) Counter/Timer B6. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR6 >> 16) & 0xFFFF), ((CTIMER_TMR6 = (CTIMER_TMR6 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR6_CTTMRA6  --------------------------------
// SVD Line: 13603

//  <item> SFDITEM_FIELD__CTIMER_TMR6_CTTMRA6
//    <name> CTTMRA6 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080C0) Counter/Timer A6. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR6 >> 0) & 0xFFFF), ((CTIMER_TMR6 = (CTIMER_TMR6 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR6  ----------------------------------
// SVD Line: 13586

//  <rtree> SFDITEM_REG__CTIMER_TMR6
//    <name> TMR6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080C0) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR6 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR6 = (CTIMER_TMR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR6_CTTMRB6 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR6_CTTMRA6 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA6  ------------------------------
// SVD Line: 13612

unsigned int CTIMER_CMPRA6 __AT (0x400080C4);



// ----------------------------  Field Item: CTIMER_CMPRA6_CMPR1A6  -------------------------------
// SVD Line: 13622

//  <item> SFDITEM_FIELD__CTIMER_CMPRA6_CMPR1A6
//    <name> CMPR1A6 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080C4) Counter/Timer A6 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA6 >> 16) & 0xFFFF), ((CTIMER_CMPRA6 = (CTIMER_CMPRA6 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA6_CMPR0A6  -------------------------------
// SVD Line: 13629

//  <item> SFDITEM_FIELD__CTIMER_CMPRA6_CMPR0A6
//    <name> CMPR0A6 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080C4) Counter/Timer A6 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA6 >> 0) & 0xFFFF), ((CTIMER_CMPRA6 = (CTIMER_CMPRA6 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA6  ---------------------------------
// SVD Line: 13612

//  <rtree> SFDITEM_REG__CTIMER_CMPRA6
//    <name> CMPRA6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080C4) Counter/Timer A6 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA6 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA6 = (CTIMER_CMPRA6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA6_CMPR1A6 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA6_CMPR0A6 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB6  ------------------------------
// SVD Line: 13638

unsigned int CTIMER_CMPRB6 __AT (0x400080C8);



// ----------------------------  Field Item: CTIMER_CMPRB6_CMPR1B6  -------------------------------
// SVD Line: 13648

//  <item> SFDITEM_FIELD__CTIMER_CMPRB6_CMPR1B6
//    <name> CMPR1B6 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080C8) Counter/Timer B6 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB6 >> 16) & 0xFFFF), ((CTIMER_CMPRB6 = (CTIMER_CMPRB6 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB6_CMPR0B6  -------------------------------
// SVD Line: 13655

//  <item> SFDITEM_FIELD__CTIMER_CMPRB6_CMPR0B6
//    <name> CMPR0B6 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080C8) Counter/Timer B6 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB6 >> 0) & 0xFFFF), ((CTIMER_CMPRB6 = (CTIMER_CMPRB6 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB6  ---------------------------------
// SVD Line: 13638

//  <rtree> SFDITEM_REG__CTIMER_CMPRB6
//    <name> CMPRB6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080C8) Counter/Timer B6 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB6 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB6 = (CTIMER_CMPRB6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB6_CMPR1B6 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB6_CMPR0B6 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL6  ------------------------------
// SVD Line: 13664

unsigned int CTIMER_CTRL6 __AT (0x400080CC);



// ----------------------------  Field Item: CTIMER_CTRL6_CTLINK6  --------------------------------
// SVD Line: 13674

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_CTLINK6
//    <name> CTLINK6 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400080CC) \nCounter/Timer A6/B6 Link bit.\n0 : TWO_16BIT_TIMERS = Use A6/B6 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A6/B6 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.31..31> CTLINK6
//        <0=> 0: TWO_16BIT_TIMERS = Use A6/B6 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A6/B6 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6POL  -------------------------------
// SVD Line: 13692

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6POL
//    <name> TMRB6POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080CC) \nCounter/Timer B6 output polarity.\n0 : NORMAL = The polarity of the TMRPINB6 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB6 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.28..28> TMRB6POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB6 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB6 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6CLR  -------------------------------
// SVD Line: 13710

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6CLR
//    <name> TMRB6CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080CC) \nCounter/Timer B6 Clear bit.\n0 : RUN = Allow counter/timer B6 to run value.\n1 : CLEAR = Holds counter/timer B6 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.27..27> TMRB6CLR
//        <0=> 0: RUN = Allow counter/timer B6 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B6 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6IE1  -------------------------------
// SVD Line: 13728

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6IE1
//    <name> TMRB6IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x400080CC) \nCounter/Timer B6 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B6 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B6 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.26..26> TMRB6IE1
//        <0=> 0: DIS = Disable counter/timer B6 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B6 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6IE0  -------------------------------
// SVD Line: 13746

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6IE0
//    <name> TMRB6IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x400080CC) \nCounter/Timer B6 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B6 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B6 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.25..25> TMRB6IE0
//        <0=> 0: DIS = Disable counter/timer B6 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B6 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6FN  --------------------------------
// SVD Line: 13764

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6FN
//    <name> TMRB6FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x400080CC) \nCounter/Timer B6 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B6, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B6, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B6, assert, count to CMPR1B6, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B6, assert, count to CMPR1B6, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.24..22> TMRB6FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B6, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B6, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B6, assert, count to CMPR1B6, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B6, assert, count to CMPR1B6, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6CLK  -------------------------------
// SVD Line: 13812

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6CLK
//    <name> TMRB6CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x400080CC) \nCounter/Timer B6 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA6 = Clock source is CTIMERA6 OUT. value.\n21 : CTMRA3 = Clock source is CTIMERA3 OUT. value.\n22 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n23 : CTMRA7 = Clock source is CTIMERA7 OUT. value.\n24 : CTMRB7 = Clock source is CTIMERB7 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n28 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.21..17> TMRB6CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA6 = Clock source is CTIMERA6 OUT. value.
//        <21=> 21: CTMRA3 = Clock source is CTIMERA3 OUT. value.
//        <22=> 22: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <23=> 23: CTMRA7 = Clock source is CTIMERA7 OUT. value.
//        <24=> 24: CTMRB7 = Clock source is CTIMERB7 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <28=> 28: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRB6EN  --------------------------------
// SVD Line: 13975

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6EN
//    <name> TMRB6EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400080CC) \nCounter/Timer B6 Enable bit.\n0 : DIS = Counter/Timer B6 Disable. value.\n1 : EN = Counter/Timer B6 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.16..16> TMRB6EN
//        <0=> 0: DIS = Counter/Timer B6 Disable. value.
//        <1=> 1: EN = Counter/Timer B6 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6POL  -------------------------------
// SVD Line: 13993

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6POL
//    <name> TMRA6POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080CC) \nCounter/Timer A6 output polarity.\n0 : NORMAL = The polarity of the TMRPINA6 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA6 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.12..12> TMRA6POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA6 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA6 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6CLR  -------------------------------
// SVD Line: 14011

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6CLR
//    <name> TMRA6CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080CC) \nCounter/Timer A6 Clear bit.\n0 : RUN = Allow counter/timer A6 to run value.\n1 : CLEAR = Holds counter/timer A6 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.11..11> TMRA6CLR
//        <0=> 0: RUN = Allow counter/timer A6 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A6 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6IE1  -------------------------------
// SVD Line: 14029

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6IE1
//    <name> TMRA6IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400080CC) \nCounter/Timer A6 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A6 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A6 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.10..10> TMRA6IE1
//        <0=> 0: DIS = Disable counter/timer A6 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A6 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6IE0  -------------------------------
// SVD Line: 14047

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6IE0
//    <name> TMRA6IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400080CC) \nCounter/Timer A6 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A6 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A6 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.9..9> TMRA6IE0
//        <0=> 0: DIS = Disable counter/timer A6 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A6 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6FN  --------------------------------
// SVD Line: 14065

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6FN
//    <name> TMRA6FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x400080CC) \nCounter/Timer A6 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A6, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A6, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A6, assert, count to CMPR1A6, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A6, assert, count to CMPR1A6, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.8..6> TMRA6FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A6, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A6, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A6, assert, count to CMPR1A6, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A6, assert, count to CMPR1A6, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6CLK  -------------------------------
// SVD Line: 14113

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6CLK
//    <name> TMRA6CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x400080CC) \nCounter/Timer A6 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB6 = Clock source is CTIMERB6 OUT. value.\n21 : CTMRA3 = Clock source is CTIMERA3 OUT. value.\n22 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n23 : CTMRA7 = Clock source is CTIMERA7 OUT. value.\n24 : CTMRB7 = Clock source is CTIMERB7 OUT. value.\n25 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n26 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n27 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n28 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.5..1> TMRA6CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB6 = Clock source is CTIMERB6 OUT. value.
//        <21=> 21: CTMRA3 = Clock source is CTIMERA3 OUT. value.
//        <22=> 22: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <23=> 23: CTMRA7 = Clock source is CTIMERA7 OUT. value.
//        <24=> 24: CTMRB7 = Clock source is CTIMERB7 OUT. value.
//        <25=> 25: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <26=> 26: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <27=> 27: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <28=> 28: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL6_TMRA6EN  --------------------------------
// SVD Line: 14276

//  <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6EN
//    <name> TMRA6EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400080CC) \nCounter/Timer A6 Enable bit.\n0 : DIS = Counter/Timer A6 Disable. value.\n1 : EN = Counter/Timer A6 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL6 ) </loc>
//      <o.0..0> TMRA6EN
//        <0=> 0: DIS = Counter/Timer A6 Disable. value.
//        <1=> 1: EN = Counter/Timer A6 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL6  ----------------------------------
// SVD Line: 13664

//  <rtree> SFDITEM_REG__CTIMER_CTRL6
//    <name> CTRL6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080CC) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL6 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL6 = (CTIMER_CTRL6 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_CTLINK6 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRB6EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL6_TMRA6EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA6  ----------------------------
// SVD Line: 14296

unsigned int CTIMER_CMPRAUXA6 __AT (0x400080D4);



// --------------------------  Field Item: CTIMER_CMPRAUXA6_CMPR3A6  ------------------------------
// SVD Line: 14306

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA6_CMPR3A6
//    <name> CMPR3A6 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080D4) Counter/Timer A6 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA6 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA6 = (CTIMER_CMPRAUXA6 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA6_CMPR2A6  ------------------------------
// SVD Line: 14313

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA6_CMPR2A6
//    <name> CMPR2A6 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080D4) Counter/Timer A6 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA6 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA6 = (CTIMER_CMPRAUXA6 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA6  --------------------------------
// SVD Line: 14296

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA6
//    <name> CMPRAUXA6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080D4) Counter/Timer A6 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA6 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA6 = (CTIMER_CMPRAUXA6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA6_CMPR3A6 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA6_CMPR2A6 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB6  ----------------------------
// SVD Line: 14322

unsigned int CTIMER_CMPRAUXB6 __AT (0x400080D8);



// --------------------------  Field Item: CTIMER_CMPRAUXB6_CMPR3B6  ------------------------------
// SVD Line: 14332

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB6_CMPR3B6
//    <name> CMPR3B6 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080D8) Counter/Timer B6 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB6 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB6 = (CTIMER_CMPRAUXB6 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB6_CMPR2B6  ------------------------------
// SVD Line: 14339

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB6_CMPR2B6
//    <name> CMPR2B6 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080D8) Counter/Timer B6 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB6 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB6 = (CTIMER_CMPRAUXB6 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB6  --------------------------------
// SVD Line: 14322

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB6
//    <name> CMPRAUXB6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080D8) Counter/Timer B6 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB6 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB6 = (CTIMER_CMPRAUXB6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB6_CMPR3B6 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB6_CMPR2B6 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX6  -------------------------------
// SVD Line: 14348

unsigned int CTIMER_AUX6 __AT (0x400080DC);



// ----------------------------  Field Item: CTIMER_AUX6_TMRB6EN23  -------------------------------
// SVD Line: 14358

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6EN23
//    <name> TMRB6EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400080DC) \nCounter/Timer B6 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.30..30> TMRB6EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX6_TMRB6POL23  -------------------------------
// SVD Line: 14376

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6POL23
//    <name> TMRB6POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x400080DC) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.29..29> TMRB6POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRB6TINV  -------------------------------
// SVD Line: 14394

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6TINV
//    <name> TMRB6TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080DC) \nCounter/Timer B6 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.28..28> TMRB6TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX6_TMRB6NOSYNC  ------------------------------
// SVD Line: 14412

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6NOSYNC
//    <name> TMRB6NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080DC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.27..27> TMRB6NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRB6TRIG  -------------------------------
// SVD Line: 14430

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6TRIG
//    <name> TMRB6TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x400080DC) \nCounter/Timer B6 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A6OUT = Trigger source is CTIMERA6 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n5 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n6 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n7 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n11 : B2OUT2 = Trigger source is CTIMERB2 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B0OUT2DUAL = Trigger source is CTIMERB0 OUT2, dual edge. value.\n15 : A0OUT2DUAL = Trigger source is CTIMERA0 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.26..23> TMRB6TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A6OUT = Trigger source is CTIMERA6 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <5=> 5: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <6=> 6: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <7=> 7: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <11=> 11: B2OUT2 = Trigger source is CTIMERB2 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B0OUT2DUAL = Trigger source is CTIMERB0 OUT2, dual edge. value.
//        <15=> 15: A0OUT2DUAL = Trigger source is CTIMERA0 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRB6LMT  --------------------------------
// SVD Line: 14518

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6LMT
//    <name> TMRB6LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x400080DC) Counter/Timer B6 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX6 >> 16) & 0x3F), ((CTIMER_AUX6 = (CTIMER_AUX6 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRA6EN23  -------------------------------
// SVD Line: 14525

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6EN23
//    <name> TMRA6EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x400080DC) \nCounter/Timer A6 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.14..14> TMRA6EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX6_TMRA6POL23  -------------------------------
// SVD Line: 14543

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6POL23
//    <name> TMRA6POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x400080DC) \nCounter/Timer A6 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.13..13> TMRA6POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRA6TINV  -------------------------------
// SVD Line: 14561

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6TINV
//    <name> TMRA6TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080DC) \nCounter/Timer A6 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.12..12> TMRA6TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX6_TMRA6NOSYNC  ------------------------------
// SVD Line: 14579

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6NOSYNC
//    <name> TMRA6NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080DC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.11..11> TMRA6NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRA6TRIG  -------------------------------
// SVD Line: 14597

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6TRIG
//    <name> TMRA6TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400080DC) \nCounter/Timer A6 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B6OUT = Trigger source is CTIMERB6 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A5OUT = Trigger source is CTIMERA5 OUT. value.\n5 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n6 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n7 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n11 : B2OUT2 = Trigger source is CTIMERBb OUT2. value.\n12 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B0OUT2DUAL = Trigger source is CTIMERB0 OUT2, dual edge. value.\n15 : A0OUT2DUAL = Trigger source is CTIMERA0 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX6 ) </loc>
//      <o.10..7> TMRA6TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B6OUT = Trigger source is CTIMERB6 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A5OUT = Trigger source is CTIMERA5 OUT. value.
//        <5=> 5: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <6=> 6: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <7=> 7: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <11=> 11: B2OUT2 = Trigger source is CTIMERBb OUT2. value.
//        <12=> 12: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B0OUT2DUAL = Trigger source is CTIMERB0 OUT2, dual edge. value.
//        <15=> 15: A0OUT2DUAL = Trigger source is CTIMERA0 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX6_TMRA6LMT  --------------------------------
// SVD Line: 14685

//  <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6LMT
//    <name> TMRA6LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x400080DC) Counter/Timer A6 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX6 >> 0) & 0x7F), ((CTIMER_AUX6 = (CTIMER_AUX6 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX6  ----------------------------------
// SVD Line: 14348

//  <rtree> SFDITEM_REG__CTIMER_AUX6
//    <name> AUX6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080DC) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX6 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX6 = (CTIMER_AUX6 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRB6LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX6_TMRA6LMT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_TMR7  -------------------------------
// SVD Line: 14694

unsigned int CTIMER_TMR7 __AT (0x400080E0);



// -----------------------------  Field Item: CTIMER_TMR7_CTTMRB7  --------------------------------
// SVD Line: 14704

//  <item> SFDITEM_FIELD__CTIMER_TMR7_CTTMRB7
//    <name> CTTMRB7 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080E0) Counter/Timer B7. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR7 >> 16) & 0xFFFF), ((CTIMER_TMR7 = (CTIMER_TMR7 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_TMR7_CTTMRA7  --------------------------------
// SVD Line: 14711

//  <item> SFDITEM_FIELD__CTIMER_TMR7_CTTMRA7
//    <name> CTTMRA7 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080E0) Counter/Timer A7. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_TMR7 >> 0) & 0xFFFF), ((CTIMER_TMR7 = (CTIMER_TMR7 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_TMR7  ----------------------------------
// SVD Line: 14694

//  <rtree> SFDITEM_REG__CTIMER_TMR7
//    <name> TMR7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080E0) Counter/Timer Register </i>
//    <loc> ( (unsigned int)((CTIMER_TMR7 >> 0) & 0xFFFFFFFF), ((CTIMER_TMR7 = (CTIMER_TMR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_TMR7_CTTMRB7 </item>
//    <item> SFDITEM_FIELD__CTIMER_TMR7_CTTMRA7 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRA7  ------------------------------
// SVD Line: 14720

unsigned int CTIMER_CMPRA7 __AT (0x400080E4);



// ----------------------------  Field Item: CTIMER_CMPRA7_CMPR1A7  -------------------------------
// SVD Line: 14730

//  <item> SFDITEM_FIELD__CTIMER_CMPRA7_CMPR1A7
//    <name> CMPR1A7 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080E4) Counter/Timer A7 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA7 >> 16) & 0xFFFF), ((CTIMER_CMPRA7 = (CTIMER_CMPRA7 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRA7_CMPR0A7  -------------------------------
// SVD Line: 14737

//  <item> SFDITEM_FIELD__CTIMER_CMPRA7_CMPR0A7
//    <name> CMPR0A7 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080E4) Counter/Timer A7 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRA7 >> 0) & 0xFFFF), ((CTIMER_CMPRA7 = (CTIMER_CMPRA7 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRA7  ---------------------------------
// SVD Line: 14720

//  <rtree> SFDITEM_REG__CTIMER_CMPRA7
//    <name> CMPRA7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080E4) Counter/Timer A7 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRA7 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRA7 = (CTIMER_CMPRA7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA7_CMPR1A7 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRA7_CMPR0A7 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_CMPRB7  ------------------------------
// SVD Line: 14746

unsigned int CTIMER_CMPRB7 __AT (0x400080E8);



// ----------------------------  Field Item: CTIMER_CMPRB7_CMPR1B7  -------------------------------
// SVD Line: 14756

//  <item> SFDITEM_FIELD__CTIMER_CMPRB7_CMPR1B7
//    <name> CMPR1B7 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080E8) Counter/Timer B3 Compare Register 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB7 >> 16) & 0xFFFF), ((CTIMER_CMPRB7 = (CTIMER_CMPRB7 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CMPRB7_CMPR0B7  -------------------------------
// SVD Line: 14763

//  <item> SFDITEM_FIELD__CTIMER_CMPRB7_CMPR0B7
//    <name> CMPR0B7 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080E8) Counter/Timer B3 Compare Register 0. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRB7 >> 0) & 0xFFFF), ((CTIMER_CMPRB7 = (CTIMER_CMPRB7 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CMPRB7  ---------------------------------
// SVD Line: 14746

//  <rtree> SFDITEM_REG__CTIMER_CMPRB7
//    <name> CMPRB7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080E8) Counter/Timer B7 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRB7 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRB7 = (CTIMER_CMPRB7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB7_CMPR1B7 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRB7_CMPR0B7 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_CTRL7  ------------------------------
// SVD Line: 14772

unsigned int CTIMER_CTRL7 __AT (0x400080EC);



// ----------------------------  Field Item: CTIMER_CTRL7_CTLINK7  --------------------------------
// SVD Line: 14782

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_CTLINK7
//    <name> CTLINK7 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400080EC) \nCounter/Timer A7/B7 Link bit.\n0 : TWO_16BIT_TIMERS = Use A7/B7 timers as two independent 16-bit timers (default). value.\n1 : 32BIT_TIMER = Link A7/B7 timers into a single 32-bit timer. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.31..31> CTLINK7
//        <0=> 0: TWO_16BIT_TIMERS = Use A7/B7 timers as two independent 16-bit timers (default). value.
//        <1=> 1: 32BIT_TIMER = Link A7/B7 timers into a single 32-bit timer. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7POL  -------------------------------
// SVD Line: 14800

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7POL
//    <name> TMRB7POL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080EC) \nCounter/Timer B7 output polarity.\n0 : NORMAL = The polarity of the TMRPINB7 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINB7 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.28..28> TMRB7POL
//        <0=> 0: NORMAL = The polarity of the TMRPINB7 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINB7 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7CLR  -------------------------------
// SVD Line: 14818

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7CLR
//    <name> TMRB7CLR </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080EC) \nCounter/Timer B7 Clear bit.\n0 : RUN = Allow counter/timer B7 to run value.\n1 : CLEAR = Holds counter/timer B7 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.27..27> TMRB7CLR
//        <0=> 0: RUN = Allow counter/timer B7 to run value.
//        <1=> 1: CLEAR = Holds counter/timer B7 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7IE1  -------------------------------
// SVD Line: 14836

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7IE1
//    <name> TMRB7IE1 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x400080EC) \nCounter/Timer B7 Interrupt Enable bit for COMPR1.\n0 : DIS = Disable counter/timer B7 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer B7 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.26..26> TMRB7IE1
//        <0=> 0: DIS = Disable counter/timer B7 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer B7 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7IE0  -------------------------------
// SVD Line: 14854

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7IE0
//    <name> TMRB7IE0 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x400080EC) \nCounter/Timer B7 Interrupt Enable bit for COMPR0.\n0 : DIS = Disable counter/timer B7 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer B7 to generate an interrupt based on COMPR0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.25..25> TMRB7IE0
//        <0=> 0: DIS = Disable counter/timer B7 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer B7 to generate an interrupt based on COMPR0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7FN  --------------------------------
// SVD Line: 14872

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7FN
//    <name> TMRB7FN </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x400080EC) \nCounter/Timer B7 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B7, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B7, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B7, assert, count to CMPR1B7, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0B7, assert, count to CMPR1B7, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.24..22> TMRB7FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0B7, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0B7, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0B7, assert, count to CMPR1B7, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0B7, assert, count to CMPR1B7, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7CLK  -------------------------------
// SVD Line: 14920

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7CLK
//    <name> TMRB7CLK </name>
//    <rw> 
//    <i> [Bits 21..17] RW (@ 0x400080EC) \nCounter/Timer B7 Clock Select.\n0 : TMRPIN = Clock source is TMRPINB. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRA7 = Clock source is CTIMERA7 OUT. value.\n21 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n22 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n23 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n24 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n25 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n26 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n27 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n28 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.21..17> TMRB7CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINB. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRA7 = Clock source is CTIMERA7 OUT. value.
//        <21=> 21: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <22=> 22: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <23=> 23: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <24=> 24: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <25=> 25: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <26=> 26: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <27=> 27: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <28=> 28: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRB7EN  --------------------------------
// SVD Line: 15083

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7EN
//    <name> TMRB7EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400080EC) \nCounter/Timer B7 Enable bit.\n0 : DIS = Counter/Timer B7 Disable. value.\n1 : EN = Counter/Timer B7 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.16..16> TMRB7EN
//        <0=> 0: DIS = Counter/Timer B7 Disable. value.
//        <1=> 1: EN = Counter/Timer B7 Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7POL  -------------------------------
// SVD Line: 15101

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7POL
//    <name> TMRA7POL </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080EC) \nCounter/Timer A7 output polarity.\n0 : NORMAL = The polarity of the TMRPINA7 pin is the same as the timer output. value.\n1 : INVERTED = The polarity of the TMRPINA7 pin is the inverse of the timer output. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.12..12> TMRA7POL
//        <0=> 0: NORMAL = The polarity of the TMRPINA7 pin is the same as the timer output. value.
//        <1=> 1: INVERTED = The polarity of the TMRPINA7 pin is the inverse of the timer output. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7CLR  -------------------------------
// SVD Line: 15119

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7CLR
//    <name> TMRA7CLR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080EC) \nCounter/Timer A7 Clear bit.\n0 : RUN = Allow counter/timer A7 to run value.\n1 : CLEAR = Holds counter/timer A7 at 0x0000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.11..11> TMRA7CLR
//        <0=> 0: RUN = Allow counter/timer A7 to run value.
//        <1=> 1: CLEAR = Holds counter/timer A7 at 0x0000. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7IE1  -------------------------------
// SVD Line: 15137

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7IE1
//    <name> TMRA7IE1 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400080EC) \nCounter/Timer A7 Interrupt Enable bit based on COMPR1.\n0 : DIS = Disable counter/timer A7 from generating an interrupt based on COMPR1. value.\n1 : EN = Enable counter/timer A7 to generate an interrupt based on COMPR1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.10..10> TMRA7IE1
//        <0=> 0: DIS = Disable counter/timer A7 from generating an interrupt based on COMPR1. value.
//        <1=> 1: EN = Enable counter/timer A7 to generate an interrupt based on COMPR1. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7IE0  -------------------------------
// SVD Line: 15155

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7IE0
//    <name> TMRA7IE0 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400080EC) \nCounter/Timer A7 Interrupt Enable bit based on COMPR0.\n0 : DIS = Disable counter/timer A7 from generating an interrupt based on COMPR0. value.\n1 : EN = Enable counter/timer A7 to generate an interrupt based on COMPR0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.9..9> TMRA7IE0
//        <0=> 0: DIS = Disable counter/timer A7 from generating an interrupt based on COMPR0. value.
//        <1=> 1: EN = Enable counter/timer A7 to generate an interrupt based on COMPR0. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7FN  --------------------------------
// SVD Line: 15173

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7FN
//    <name> TMRA7FN </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x400080EC) \nCounter/Timer A7 Function Select.\n0 : SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A7, stop. value.\n1 : REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A7, restart. value.\n2 : PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A7, assert, count to CMPR1A7, deassert, stop. value.\n3 : PULSE_CONT = Pulse continously. Count to CMPR0A7, assert, count to CMPR1A7, deassert, restart. value.\n4 : SINGLEPATTERN = Single pattern. value.\n5 : REPEATPATTERN = Repeated pattern. value.\n6 : CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.\n7 : ALTPWN = Alternate PWM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.8..6> TMRA7FN
//        <0=> 0: SINGLECOUNT = Single count (output toggles and sticks). Count to CMPR0A7, stop. value.
//        <1=> 1: REPEATEDCOUNT = Repeated count (periodic 1-clock-cycle-wide pulses). Count to CMPR0A7, restart. value.
//        <2=> 2: PULSE_ONCE = Pulse once (aka one-shot). Count to CMPR0A7, assert, count to CMPR1A7, deassert, stop. value.
//        <3=> 3: PULSE_CONT = Pulse continously. Count to CMPR0A7, assert, count to CMPR1A7, deassert, restart. value.
//        <4=> 4: SINGLEPATTERN = Single pattern. value.
//        <5=> 5: REPEATPATTERN = Repeated pattern. value.
//        <6=> 6: CONTINUOUS = Continuous run (aka Free Run). Count continuously. value.
//        <7=> 7: ALTPWN = Alternate PWM value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7CLK  -------------------------------
// SVD Line: 15221

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7CLK
//    <name> TMRA7CLK </name>
//    <rw> 
//    <i> [Bits 5..1] RW (@ 0x400080EC) \nCounter/Timer A7 Clock Select.\n0 : TMRPIN = Clock source is TMRPINA. value.\n1 : HFRC_DIV4 = Clock source is the HFRC / 4 value.\n2 : HFRC_DIV16 = Clock source is HFRC / 16 value.\n3 : HFRC_DIV256 = Clock source is HFRC / 256 value.\n4 : HFRC_DIV1024 = Clock source is HFRC / 1024 value.\n5 : HFRC_DIV4K = Clock source is HFRC / 4096 value.\n6 : XT = Clock source is the XT (uncalibrated). value.\n7 : XT_DIV2 = Clock source is XT / 2 value.\n8 : XT_DIV16 = Clock source is XT / 16 value.\n9 : XT_DIV128 = Clock source is XT / 128 value.\n10 : LFRC_DIV2 = Clock source is LFRC / 2 value.\n11 : LFRC_DIV32 = Clock source is LFRC / 32 value.\n12 : LFRC_DIV1K = Clock source is LFRC / 1024 value.\n13 : LFRC = Clock source is LFRC value.\n14 : RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.\n15 : HCLK = Clock source is HCLK. value.\n16 : XT_DIV4 = Clock source is XT / 4 value.\n17 : XT_DIV8 = Clock source is XT / 8 value.\n18 : XT_DIV32 = Clock source is XT / 32 value.\n19 : Reserved - do not use\n20 : CTMRB7 = Clock source is CTIMERB7 OUT. value.\n21 : CTMRA2 = Clock source is CTIMERA2 OUT. value.\n22 : CTMRB2 = Clock source is CTIMERB2 OUT. value.\n23 : CTMRA0 = Clock source is CTIMERA0 OUT. value.\n24 : CTMRB0 = Clock source is CTIMERB0 OUT. value.\n25 : CTMRB1 = Clock source is CTIMERB1 OUT. value.\n26 : CTMRB3 = Clock source is CTIMERB3 OUT. value.\n27 : CTMRB4 = Clock source is CTIMERB4 OUT. value.\n28 : CTMRB5 = Clock source is CTIMERB5 OUT. value.\n29 : BUCKBLE = Clock source is BLE buck converter TON pulses. value.\n30 : BUCKB = Clock source is Memory buck converter TON pulses. value.\n31 : BUCKA = Clock source is CPU buck converter TON pulses. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.5..1> TMRA7CLK
//        <0=> 0: TMRPIN = Clock source is TMRPINA. value.
//        <1=> 1: HFRC_DIV4 = Clock source is the HFRC / 4 value.
//        <2=> 2: HFRC_DIV16 = Clock source is HFRC / 16 value.
//        <3=> 3: HFRC_DIV256 = Clock source is HFRC / 256 value.
//        <4=> 4: HFRC_DIV1024 = Clock source is HFRC / 1024 value.
//        <5=> 5: HFRC_DIV4K = Clock source is HFRC / 4096 value.
//        <6=> 6: XT = Clock source is the XT (uncalibrated). value.
//        <7=> 7: XT_DIV2 = Clock source is XT / 2 value.
//        <8=> 8: XT_DIV16 = Clock source is XT / 16 value.
//        <9=> 9: XT_DIV128 = Clock source is XT / 128 value.
//        <10=> 10: LFRC_DIV2 = Clock source is LFRC / 2 value.
//        <11=> 11: LFRC_DIV32 = Clock source is LFRC / 32 value.
//        <12=> 12: LFRC_DIV1K = Clock source is LFRC / 1024 value.
//        <13=> 13: LFRC = Clock source is LFRC value.
//        <14=> 14: RTC_100HZ = Clock source is 100 Hz from the current RTC oscillator. value.
//        <15=> 15: HCLK = Clock source is HCLK. value.
//        <16=> 16: XT_DIV4 = Clock source is XT / 4 value.
//        <17=> 17: XT_DIV8 = Clock source is XT / 8 value.
//        <18=> 18: XT_DIV32 = Clock source is XT / 32 value.
//        <19=> 19: 
//        <20=> 20: CTMRB7 = Clock source is CTIMERB7 OUT. value.
//        <21=> 21: CTMRA2 = Clock source is CTIMERA2 OUT. value.
//        <22=> 22: CTMRB2 = Clock source is CTIMERB2 OUT. value.
//        <23=> 23: CTMRA0 = Clock source is CTIMERA0 OUT. value.
//        <24=> 24: CTMRB0 = Clock source is CTIMERB0 OUT. value.
//        <25=> 25: CTMRB1 = Clock source is CTIMERB1 OUT. value.
//        <26=> 26: CTMRB3 = Clock source is CTIMERB3 OUT. value.
//        <27=> 27: CTMRB4 = Clock source is CTIMERB4 OUT. value.
//        <28=> 28: CTMRB5 = Clock source is CTIMERB5 OUT. value.
//        <29=> 29: BUCKBLE = Clock source is BLE buck converter TON pulses. value.
//        <30=> 30: BUCKB = Clock source is Memory buck converter TON pulses. value.
//        <31=> 31: BUCKA = Clock source is CPU buck converter TON pulses. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_CTRL7_TMRA7EN  --------------------------------
// SVD Line: 15384

//  <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7EN
//    <name> TMRA7EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400080EC) \nCounter/Timer A7 Enable bit.\n0 : DIS = Counter/Timer A7 Disable. value.\n1 : EN = Counter/Timer A7 Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CTRL7 ) </loc>
//      <o.0..0> TMRA7EN
//        <0=> 0: DIS = Counter/Timer A7 Disable. value.
//        <1=> 1: EN = Counter/Timer A7 Enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_CTRL7  ----------------------------------
// SVD Line: 14772

//  <rtree> SFDITEM_REG__CTIMER_CTRL7
//    <name> CTRL7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080EC) Counter/Timer Control </i>
//    <loc> ( (unsigned int)((CTIMER_CTRL7 >> 0) & 0xFFFFFFFF), ((CTIMER_CTRL7 = (CTIMER_CTRL7 & ~(0x9FFF1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_CTLINK7 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRB7EN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7POL </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7CLR </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7IE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7IE0 </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7FN </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7CLK </item>
//    <item> SFDITEM_FIELD__CTIMER_CTRL7_TMRA7EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXA7  ----------------------------
// SVD Line: 15404

unsigned int CTIMER_CMPRAUXA7 __AT (0x400080F4);



// --------------------------  Field Item: CTIMER_CMPRAUXA7_CMPR3A7  ------------------------------
// SVD Line: 15414

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA7_CMPR3A7
//    <name> CMPR3A7 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080F4) Counter/Timer A7 Compare Register 3. Holds the upper limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA7 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXA7 = (CTIMER_CMPRAUXA7 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXA7_CMPR2A7  ------------------------------
// SVD Line: 15421

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXA7_CMPR2A7
//    <name> CMPR2A7 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080F4) Counter/Timer A7 Compare Register 2. Holds the lower limit for timer half A. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXA7 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXA7 = (CTIMER_CMPRAUXA7 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXA7  --------------------------------
// SVD Line: 15404

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXA7
//    <name> CMPRAUXA7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080F4) Counter/Timer A7 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXA7 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXA7 = (CTIMER_CMPRAUXA7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA7_CMPR3A7 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXA7_CMPR2A7 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_CMPRAUXB7  ----------------------------
// SVD Line: 15430

unsigned int CTIMER_CMPRAUXB7 __AT (0x400080F8);



// --------------------------  Field Item: CTIMER_CMPRAUXB7_CMPR3B7  ------------------------------
// SVD Line: 15440

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB7_CMPR3B7
//    <name> CMPR3B7 </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x400080F8) Counter/Timer B7 Compare Register 3. Holds the upper limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB7 >> 16) & 0xFFFF), ((CTIMER_CMPRAUXB7 = (CTIMER_CMPRAUXB7 & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: CTIMER_CMPRAUXB7_CMPR2B7  ------------------------------
// SVD Line: 15447

//  <item> SFDITEM_FIELD__CTIMER_CMPRAUXB7_CMPR2B7
//    <name> CMPR2B7 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400080F8) Counter/Timer B7 Compare Register 2. Holds the lower limit for timer half B. </i>
//    <edit> 
//      <loc> ( (unsigned short)((CTIMER_CMPRAUXB7 >> 0) & 0xFFFF), ((CTIMER_CMPRAUXB7 = (CTIMER_CMPRAUXB7 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_CMPRAUXB7  --------------------------------
// SVD Line: 15430

//  <rtree> SFDITEM_REG__CTIMER_CMPRAUXB7
//    <name> CMPRAUXB7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080F8) Counter/Timer B7 Compare Registers </i>
//    <loc> ( (unsigned int)((CTIMER_CMPRAUXB7 >> 0) & 0xFFFFFFFF), ((CTIMER_CMPRAUXB7 = (CTIMER_CMPRAUXB7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB7_CMPR3B7 </item>
//    <item> SFDITEM_FIELD__CTIMER_CMPRAUXB7_CMPR2B7 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_AUX7  -------------------------------
// SVD Line: 15456

unsigned int CTIMER_AUX7 __AT (0x400080FC);



// ----------------------------  Field Item: CTIMER_AUX7_TMRB7EN23  -------------------------------
// SVD Line: 15466

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7EN23
//    <name> TMRB7EN23 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400080FC) \nCounter/Timer B7 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.30..30> TMRB7EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX7_TMRB7POL23  -------------------------------
// SVD Line: 15484

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7POL23
//    <name> TMRB7POL23 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x400080FC) \nUpper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.29..29> TMRB7POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRB7TINV  -------------------------------
// SVD Line: 15502

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7TINV
//    <name> TMRB7TINV </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400080FC) \nCounter/Timer B7 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.28..28> TMRB7TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX7_TMRB7NOSYNC  ------------------------------
// SVD Line: 15520

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7NOSYNC
//    <name> TMRB7NOSYNC </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400080FC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.27..27> TMRB7NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRB7TRIG  -------------------------------
// SVD Line: 15538

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7TRIG
//    <name> TMRB7TRIG </name>
//    <rw> 
//    <i> [Bits 26..23] RW (@ 0x400080FC) \nCounter/Timer B7 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : A7OUT = Trigger source is CTIMERA7 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A5OUT = Trigger source is CTIMERA5 OUT. value.\n5 : B5OUT = Trigger source is CTIMERB5 OUT. value.\n6 : A2OUT = Trigger source is CTIMERA2 OUT. value.\n7 : B2OUT = Trigger source is CTIMERB2 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n11 : B2OUT2 = Trigger source is CTIMERB2 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.\n14 : B1OUT2DUAL = Trigger source is CTIMERB1 OUT2, dual edge. value.\n15 : A1OUT2DUAL = Trigger source is CTIMERA1 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.26..23> TMRB7TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: A7OUT = Trigger source is CTIMERA7 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A5OUT = Trigger source is CTIMERA5 OUT. value.
//        <5=> 5: B5OUT = Trigger source is CTIMERB5 OUT. value.
//        <6=> 6: A2OUT = Trigger source is CTIMERA2 OUT. value.
//        <7=> 7: B2OUT = Trigger source is CTIMERB2 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <11=> 11: B2OUT2 = Trigger source is CTIMERB2 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A7OUT2DUAL = Trigger source is CTIMERA7 OUT2, dual edge. value.
//        <14=> 14: B1OUT2DUAL = Trigger source is CTIMERB1 OUT2, dual edge. value.
//        <15=> 15: A1OUT2DUAL = Trigger source is CTIMERA1 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRB7LMT  --------------------------------
// SVD Line: 15626

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7LMT
//    <name> TMRB7LMT </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x400080FC) Counter/Timer B7 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX7 >> 16) & 0x3F), ((CTIMER_AUX7 = (CTIMER_AUX7 & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRA7EN23  -------------------------------
// SVD Line: 15633

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7EN23
//    <name> TMRA7EN23 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x400080FC) \nCounter/Timer A7 Upper compare enable.\n0 : EN = Enable enhanced functions. value.\n1 : DIS = Disable enhanced functions. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.14..14> TMRA7EN23
//        <0=> 0: EN = Enable enhanced functions. value.
//        <1=> 1: DIS = Disable enhanced functions. value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX7_TMRA7POL23  -------------------------------
// SVD Line: 15651

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7POL23
//    <name> TMRA7POL23 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x400080FC) \nCounter/Timer A7 Upper output polarity\n0 : NORM = Upper output normal polarity value.\n1 : INV = Upper output inverted polarity. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.13..13> TMRA7POL23
//        <0=> 0: NORM = Upper output normal polarity value.
//        <1=> 1: INV = Upper output inverted polarity. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRA7TINV  -------------------------------
// SVD Line: 15669

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7TINV
//    <name> TMRA7TINV </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400080FC) \nCounter/Timer A7 Invert on trigger.\n0 : DIS = Disable invert on trigger value.\n1 : EN = Enable invert on trigger value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.12..12> TMRA7TINV
//        <0=> 0: DIS = Disable invert on trigger value.
//        <1=> 1: EN = Enable invert on trigger value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: CTIMER_AUX7_TMRA7NOSYNC  ------------------------------
// SVD Line: 15687

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7NOSYNC
//    <name> TMRA7NOSYNC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400080FC) \nSource clock synchronization control.\n0 : DIS = Synchronization on source clock value.\n1 : NOSYNC = No synchronization on source clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.11..11> TMRA7NOSYNC
//        <0=> 0: DIS = Synchronization on source clock value.
//        <1=> 1: NOSYNC = No synchronization on source clock value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRA7TRIG  -------------------------------
// SVD Line: 15705

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7TRIG
//    <name> TMRA7TRIG </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400080FC) \nCounter/Timer A7 Trigger Select.\n0 : DIS = Trigger source is disabled. value.\n1 : B7OUT = Trigger source is CTIMERB7 OUT. value.\n2 : B3OUT = Trigger source is CTIMERB3 OUT. value.\n3 : A3OUT = Trigger source is CTIMERA3 OUT. value.\n4 : A1OUT = Trigger source is CTIMERA1 OUT. value.\n5 : B1OUT = Trigger source is CTIMERB1 OUT. value.\n6 : A4OUT = Trigger source is CTIMERA4 OUT. value.\n7 : B4OUT = Trigger source is CTIMERB4 OUT. value.\n8 : B3OUT2 = Trigger source is CTIMERB3 OUT2. value.\n9 : A3OUT2 = Trigger source is CTIMERA3 OUT2. value.\n10 : A2OUT2 = Trigger source is CTIMERA2 OUT2. value.\n11 : B2OUT2 = Trigger source is CTIMERB2 OUT2. value.\n12 : A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.\n13 : A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.\n14 : B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.\n15 : A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_AUX7 ) </loc>
//      <o.10..7> TMRA7TRIG
//        <0=> 0: DIS = Trigger source is disabled. value.
//        <1=> 1: B7OUT = Trigger source is CTIMERB7 OUT. value.
//        <2=> 2: B3OUT = Trigger source is CTIMERB3 OUT. value.
//        <3=> 3: A3OUT = Trigger source is CTIMERA3 OUT. value.
//        <4=> 4: A1OUT = Trigger source is CTIMERA1 OUT. value.
//        <5=> 5: B1OUT = Trigger source is CTIMERB1 OUT. value.
//        <6=> 6: A4OUT = Trigger source is CTIMERA4 OUT. value.
//        <7=> 7: B4OUT = Trigger source is CTIMERB4 OUT. value.
//        <8=> 8: B3OUT2 = Trigger source is CTIMERB3 OUT2. value.
//        <9=> 9: A3OUT2 = Trigger source is CTIMERA3 OUT2. value.
//        <10=> 10: A2OUT2 = Trigger source is CTIMERA2 OUT2. value.
//        <11=> 11: B2OUT2 = Trigger source is CTIMERB2 OUT2. value.
//        <12=> 12: A6OUT2DUAL = Trigger source is CTIMERA6 OUT2, dual edge. value.
//        <13=> 13: A5OUT2DUAL = Trigger source is CTIMERA5 OUT2, dual edge. value.
//        <14=> 14: B4OUT2DUAL = Trigger source is CTIMERB4 OUT2, dual edge. value.
//        <15=> 15: A4OUT2DUAL = Trigger source is CTIMERA4 OUT2, dual edge. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_AUX7_TMRA7LMT  --------------------------------
// SVD Line: 15793

//  <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7LMT
//    <name> TMRA7LMT </name>
//    <rw> 
//    <i> [Bits 6..0] RW (@ 0x400080FC) Counter/Timer A7 Pattern Limit Count. </i>
//    <edit> 
//      <loc> ( (unsigned char)((CTIMER_AUX7 >> 0) & 0x7F), ((CTIMER_AUX7 = (CTIMER_AUX7 & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CTIMER_AUX7  ----------------------------------
// SVD Line: 15456

//  <rtree> SFDITEM_REG__CTIMER_AUX7
//    <name> AUX7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400080FC) Counter/Timer Auxiliary </i>
//    <loc> ( (unsigned int)((CTIMER_AUX7 >> 0) & 0xFFFFFFFF), ((CTIMER_AUX7 = (CTIMER_AUX7 & ~(0x7FBF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FBF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRB7LMT </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7EN23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7POL23 </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7TINV </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7NOSYNC </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7TRIG </item>
//    <item> SFDITEM_FIELD__CTIMER_AUX7_TMRA7LMT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_GLOBEN  ------------------------------
// SVD Line: 15802

unsigned int CTIMER_GLOBEN __AT (0x40008100);



// -----------------------------  Field Item: CTIMER_GLOBEN_ENB7  ---------------------------------
// SVD Line: 15812

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB7
//    <name> ENB7 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008100) \nAlternate enable for B7.\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.15..15> ENB7
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA7  ---------------------------------
// SVD Line: 15830

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA7
//    <name> ENA7 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008100) \nAlternate enable for A7\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.14..14> ENA7
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB6  ---------------------------------
// SVD Line: 15848

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB6
//    <name> ENB6 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008100) \nAlternate enable for B6\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.13..13> ENB6
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA6  ---------------------------------
// SVD Line: 15866

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA6
//    <name> ENA6 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008100) \nAlternate enable for A6\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.12..12> ENA6
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB5  ---------------------------------
// SVD Line: 15884

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB5
//    <name> ENB5 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008100) \nAlternate enable for B5\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.11..11> ENB5
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA5  ---------------------------------
// SVD Line: 15902

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA5
//    <name> ENA5 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008100) \nAlternate enable for A5\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.10..10> ENA5
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB4  ---------------------------------
// SVD Line: 15920

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB4
//    <name> ENB4 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008100) \nAlternate enable for B4\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.9..9> ENB4
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA4  ---------------------------------
// SVD Line: 15938

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA4
//    <name> ENA4 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008100) \nAlternate enable for A4\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.8..8> ENA4
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB3  ---------------------------------
// SVD Line: 15956

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB3
//    <name> ENB3 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008100) \nAlternate enable for B3.\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.7..7> ENB3
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA3  ---------------------------------
// SVD Line: 15974

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA3
//    <name> ENA3 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008100) \nAlternate enable for A3\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.6..6> ENA3
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB2  ---------------------------------
// SVD Line: 15992

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB2
//    <name> ENB2 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008100) \nAlternate enable for B2\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.5..5> ENB2
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA2  ---------------------------------
// SVD Line: 16010

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA2
//    <name> ENA2 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008100) \nAlternate enable for A2\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.4..4> ENA2
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB1  ---------------------------------
// SVD Line: 16028

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB1
//    <name> ENB1 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008100) \nAlternate enable for B1\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.3..3> ENB1
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA1  ---------------------------------
// SVD Line: 16046

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA1
//    <name> ENA1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008100) \nAlternate enable for A1\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.2..2> ENA1
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENB0  ---------------------------------
// SVD Line: 16064

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB0
//    <name> ENB0 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008100) \nAlternate enable for B0\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.1..1> ENB0
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_GLOBEN_ENA0  ---------------------------------
// SVD Line: 16082

//  <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA0
//    <name> ENA0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008100) \nAlternate enable for A0\n0 : DIS = Disable CTIMER. value.\n1 : LCO = Use local enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_GLOBEN ) </loc>
//      <o.0..0> ENA0
//        <0=> 0: DIS = Disable CTIMER. value.
//        <1=> 1: LCO = Use local enable. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_GLOBEN  ---------------------------------
// SVD Line: 15802

//  <rtree> SFDITEM_REG__CTIMER_GLOBEN
//    <name> GLOBEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008100) Counter/Timer Global Enable </i>
//    <loc> ( (unsigned int)((CTIMER_GLOBEN >> 0) & 0xFFFFFFFF), ((CTIMER_GLOBEN = (CTIMER_GLOBEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB7 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA7 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB6 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA6 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB5 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA5 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB4 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA4 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB3 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA3 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB2 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA2 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB1 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA1 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENB0 </item>
//    <item> SFDITEM_FIELD__CTIMER_GLOBEN_ENA0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_OUTCFG0  -----------------------------
// SVD Line: 16102

unsigned int CTIMER_OUTCFG0 __AT (0x40008104);



// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG9  --------------------------------
// SVD Line: 16112

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG9
//    <name> CFG9 </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x40008104) \nPad output 9 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A2OUT2 = Output is A2OUT2 value.\n3 : A2OUT = Output is A2OUT. value.\n4 : A4OUT = Output is A4OUT. value.\n5 : B0OUT = Output is B0OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.30..28> CFG9
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A2OUT2 = Output is A2OUT2 value.
//        <3=> 3: A2OUT = Output is A2OUT. value.
//        <4=> 4: A4OUT = Output is A4OUT. value.
//        <5=> 5: B0OUT = Output is B0OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG8  --------------------------------
// SVD Line: 16160

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG8
//    <name> CFG8 </name>
//    <rw> 
//    <i> [Bits 27..25] RW (@ 0x40008104) \nPad output 8 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A2OUT = Output is A2OUT value.\n3 : A3OUT2 = Output is A3OUT. value.\n4 : A4OUT2 = Output is A4OUT2. value.\n5 : B6OUT = Output is B6OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.27..25> CFG8
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A2OUT = Output is A2OUT value.
//        <3=> 3: A3OUT2 = Output is A3OUT. value.
//        <4=> 4: A4OUT2 = Output is A4OUT2. value.
//        <5=> 5: B6OUT = Output is B6OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG7  --------------------------------
// SVD Line: 16208

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG7
//    <name> CFG7 </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x40008104) \nPad output 7 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B1OUT2 = Output is B1OUT2 value.\n3 : B1OUT = Output is B1OUT. value.\n4 : B5OUT = Output is B5OUT. value.\n5 : A7OUT = Output is A7OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.24..22> CFG7
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B1OUT2 = Output is B1OUT2 value.
//        <3=> 3: B1OUT = Output is B1OUT. value.
//        <4=> 4: B5OUT = Output is B5OUT. value.
//        <5=> 5: A7OUT = Output is A7OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG6  --------------------------------
// SVD Line: 16256

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG6
//    <name> CFG6 </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40008104) \nPad output 6 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B1OUT = Output is B1OUT value.\n3 : A1OUT = Output is A1OUT. value.\n4 : B5OUT2 = Output is B5OUT2. value.\n5 : B7OUT = Output is B7OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.21..19> CFG6
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B1OUT = Output is B1OUT value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: B5OUT2 = Output is B5OUT2. value.
//        <5=> 5: B7OUT = Output is B7OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG5  --------------------------------
// SVD Line: 16304

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG5
//    <name> CFG5 </name>
//    <rw> 
//    <i> [Bits 18..16] RW (@ 0x40008104) \nPad output 5 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A1OUT2 = Output is A1OUT2 value.\n3 : A1OUT = Output is A1OUT. value.\n4 : B6OUT = Output is A5OUT. value.\n5 : A7OUT = Output is A7OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.18..16> CFG5
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A1OUT2 = Output is A1OUT2 value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: B6OUT = Output is A5OUT. value.
//        <5=> 5: A7OUT = Output is A7OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG4  --------------------------------
// SVD Line: 16352

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG4
//    <name> CFG4 </name>
//    <rw> 
//    <i> [Bits 14..12] RW (@ 0x40008104) \nPad output 4 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A1OUT = Output is A1OUT value.\n3 : A2OUT2 = Output is A2OUT2. value.\n4 : A5OUT2 = Output is A5OUT2. value.\n5 : B5OUT = Output is B5OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.14..12> CFG4
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A1OUT = Output is A1OUT value.
//        <3=> 3: A2OUT2 = Output is A2OUT2. value.
//        <4=> 4: A5OUT2 = Output is A5OUT2. value.
//        <5=> 5: B5OUT = Output is B5OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG3  --------------------------------
// SVD Line: 16400

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG3
//    <name> CFG3 </name>
//    <rw> 
//    <i> [Bits 11..9] RW (@ 0x40008104) \nPad output 3 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B0OUT2 = Output is B0OUT2 value.\n3 : B0OUT = Output is B0OUT. value.\n4 : A1OUT = Output is A1OUT. value.\n5 : A6OUT = Output is A6OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.11..9> CFG3
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B0OUT2 = Output is B0OUT2 value.
//        <3=> 3: B0OUT = Output is B0OUT. value.
//        <4=> 4: A1OUT = Output is A1OUT. value.
//        <5=> 5: A6OUT = Output is A6OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG2  --------------------------------
// SVD Line: 16448

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG2
//    <name> CFG2 </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x40008104) \nPad output 2 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B0OUT = Output is B0OUT value.\n3 : B1OUT2 = Output is B1OUT2. value.\n4 : B6OUT2 = Output is B6OUT2. value.\n5 : A7OUT = Output is A7OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.8..6> CFG2
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B0OUT = Output is B0OUT value.
//        <3=> 3: B1OUT2 = Output is B1OUT2. value.
//        <4=> 4: B6OUT2 = Output is B6OUT2. value.
//        <5=> 5: A7OUT = Output is A7OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG1  --------------------------------
// SVD Line: 16496

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG1
//    <name> CFG1 </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40008104) \nPad output 1 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A0OUT2 = Output is A0OUT2 value.\n3 : A0OUT = Output is A0OUT. value.\n4 : A5OUT = Output is A5OUT. value.\n5 : B7OUT2 = Output is B7OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.5..3> CFG1
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A0OUT2 = Output is A0OUT2 value.
//        <3=> 3: A0OUT = Output is A0OUT. value.
//        <4=> 4: A5OUT = Output is A5OUT. value.
//        <5=> 5: B7OUT2 = Output is B7OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_OUTCFG0_CFG0  --------------------------------
// SVD Line: 16544

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG0
//    <name> CFG0 </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40008104) \nPad output 0 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A0OUT = Output is A0OUT value.\n3 : B2OUT2 = Output is B2OUT2. value.\n4 : A5OUT2 = Output is A5OUT2. value.\n5 : A6OUT = Output is A6OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG0 ) </loc>
//      <o.2..0> CFG0
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A0OUT = Output is A0OUT value.
//        <3=> 3: B2OUT2 = Output is B2OUT2. value.
//        <4=> 4: A5OUT2 = Output is A5OUT2. value.
//        <5=> 5: A6OUT = Output is A6OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_OUTCFG0  ---------------------------------
// SVD Line: 16102

//  <rtree> SFDITEM_REG__CTIMER_OUTCFG0
//    <name> OUTCFG0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008104) Counter/Timer Output Config 0 </i>
//    <loc> ( (unsigned int)((CTIMER_OUTCFG0 >> 0) & 0xFFFFFFFF), ((CTIMER_OUTCFG0 = (CTIMER_OUTCFG0 & ~(0x7FFF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG9 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG8 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG7 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG6 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG5 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG4 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG3 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG2 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG1 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG0_CFG0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_OUTCFG1  -----------------------------
// SVD Line: 16594

unsigned int CTIMER_OUTCFG1 __AT (0x40008108);



// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG19  --------------------------------
// SVD Line: 16604

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG19
//    <name> CFG19 </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x40008108) \nPad output 19 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B4OUT2 = Output is B4OUT2 value.\n3 : A2OUT = Output is A2OUT. value.\n4 : B4OUT = Output is B4OUT. value.\n5 : B1OUT2 = Output is B1OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.30..28> CFG19
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B4OUT2 = Output is B4OUT2 value.
//        <3=> 3: A2OUT = Output is A2OUT. value.
//        <4=> 4: B4OUT = Output is B4OUT. value.
//        <5=> 5: B1OUT2 = Output is B1OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG18  --------------------------------
// SVD Line: 16652

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG18
//    <name> CFG18 </name>
//    <rw> 
//    <i> [Bits 27..25] RW (@ 0x40008108) \nPad output 18 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B4OUT = Output is B4OUT value.\n3 : B0OUT = Output is B0OUT. value.\n4 : A0OUT = Output is A0OUT. value.\n5 : A3OUT2 = Output is A3OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.27..25> CFG18
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B4OUT = Output is B4OUT value.
//        <3=> 3: B0OUT = Output is B0OUT. value.
//        <4=> 4: A0OUT = Output is A0OUT. value.
//        <5=> 5: A3OUT2 = Output is A3OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG17  --------------------------------
// SVD Line: 16700

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG17
//    <name> CFG17 </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x40008108) \nPad output 17 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A4OUT2 = Output is A4OUT2 value.\n3 : B7OUT = Output is B7OUT. value.\n4 : A4OUT = Output is A4OUT. value.\n5 : A1OUT2 = Output is A1OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.24..22> CFG17
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A4OUT2 = Output is A4OUT2 value.
//        <3=> 3: B7OUT = Output is B7OUT. value.
//        <4=> 4: A4OUT = Output is A4OUT. value.
//        <5=> 5: A1OUT2 = Output is A1OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG16  --------------------------------
// SVD Line: 16748

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG16
//    <name> CFG16 </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40008108) \nPad output 16 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A4OUT = Output is A4OUT value.\n3 : A0OUT = Output is A0OUT. value.\n4 : A0OUT2 = Output is A0OUT2. value.\n5 : B3OUT2 = Output is B3OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.21..19> CFG16
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A4OUT = Output is A4OUT value.
//        <3=> 3: A0OUT = Output is A0OUT. value.
//        <4=> 4: A0OUT2 = Output is A0OUT2. value.
//        <5=> 5: B3OUT2 = Output is B3OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG15  --------------------------------
// SVD Line: 16796

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG15
//    <name> CFG15 </name>
//    <rw> 
//    <i> [Bits 18..16] RW (@ 0x40008108) \nPad output 15 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B3OUT2 = Output is B3OUT2 value.\n3 : B3OUT = Output is B3OUT. value.\n4 : A7OUT = Output is B1OUT. value.\n5 : A4OUT2 = Output is A4OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.18..16> CFG15
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B3OUT2 = Output is B3OUT2 value.
//        <3=> 3: B3OUT = Output is B3OUT. value.
//        <4=> 4: A7OUT = Output is B1OUT. value.
//        <5=> 5: A4OUT2 = Output is A4OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG14  --------------------------------
// SVD Line: 16844

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG14
//    <name> CFG14 </name>
//    <rw> 
//    <i> [Bits 14..12] RW (@ 0x40008108) \nPad output 14 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B3OUT = Output is B3OUT value.\n3 : B1OUT = Output is B1OUT. value.\n4 : B7OUT2 = Output is B7OUT2. value.\n5 : A7OUT = Output is A7OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.14..12> CFG14
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B3OUT = Output is B3OUT value.
//        <3=> 3: B1OUT = Output is B1OUT. value.
//        <4=> 4: B7OUT2 = Output is B7OUT2. value.
//        <5=> 5: A7OUT = Output is A7OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG13  --------------------------------
// SVD Line: 16892

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG13
//    <name> CFG13 </name>
//    <rw> 
//    <i> [Bits 11..9] RW (@ 0x40008108) \nPad output 13 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A3OUT2 = Output is A3OUT2 value.\n3 : A3OUT = Output is A3OUT. value.\n4 : A6OUT = Output is B1OUT. value.\n5 : B4OUT2 = Output is B4OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.11..9> CFG13
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A3OUT2 = Output is A3OUT2 value.
//        <3=> 3: A3OUT = Output is A3OUT. value.
//        <4=> 4: A6OUT = Output is B1OUT. value.
//        <5=> 5: B4OUT2 = Output is B4OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG12  --------------------------------
// SVD Line: 16940

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG12
//    <name> CFG12 </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x40008108) \nPad output 12 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A3OUT = Output is A3OUT value.\n3 : B1OUT = Output is B1OUT. value.\n4 : B0OUT2 = Output is B0OUT2. value.\n5 : B6OUT2 = Output is B6OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.8..6> CFG12
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A3OUT = Output is A3OUT value.
//        <3=> 3: B1OUT = Output is B1OUT. value.
//        <4=> 4: B0OUT2 = Output is B0OUT2. value.
//        <5=> 5: B6OUT2 = Output is B6OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG11  --------------------------------
// SVD Line: 16988

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG11
//    <name> CFG11 </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40008108) \nPad output 11 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B2OUT2 = Output is B2OUT2 value.\n3 : B2OUT = Output is B2OUT. value.\n4 : B4OUT = Output is B4OUT. value.\n5 : B5OUT2 = Output is B5OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.5..3> CFG11
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B2OUT2 = Output is B2OUT2 value.
//        <3=> 3: B2OUT = Output is B2OUT. value.
//        <4=> 4: B4OUT = Output is B4OUT. value.
//        <5=> 5: B5OUT2 = Output is B5OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG1_CFG10  --------------------------------
// SVD Line: 17036

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG10
//    <name> CFG10 </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40008108) \nPad output 10 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B2OUT = Output is B2OUT value.\n3 : B3OUT2 = Output is B3OUT2. value.\n4 : B4OUT2 = Output is B4OUT2. value.\n5 : A6OUT = Output is A6OUT. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG1 ) </loc>
//      <o.2..0> CFG10
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B2OUT = Output is B2OUT value.
//        <3=> 3: B3OUT2 = Output is B3OUT2. value.
//        <4=> 4: B4OUT2 = Output is B4OUT2. value.
//        <5=> 5: A6OUT = Output is A6OUT. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_OUTCFG1  ---------------------------------
// SVD Line: 16594

//  <rtree> SFDITEM_REG__CTIMER_OUTCFG1
//    <name> OUTCFG1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008108) Counter/Timer Output Config 1 </i>
//    <loc> ( (unsigned int)((CTIMER_OUTCFG1 >> 0) & 0xFFFFFFFF), ((CTIMER_OUTCFG1 = (CTIMER_OUTCFG1 & ~(0x7FFF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG19 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG18 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG17 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG16 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG15 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG14 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG13 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG12 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG11 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG1_CFG10 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_OUTCFG2  -----------------------------
// SVD Line: 17086

unsigned int CTIMER_OUTCFG2 __AT (0x4000810C);



// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG29  --------------------------------
// SVD Line: 17096

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG29
//    <name> CFG29 </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x4000810C) \nPad output 29 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B5OUT2 = Output is B5OUT2 value.\n3 : A1OUT = Output is A1OUT. value.\n4 : A7OUT = Output is A7OUT. value.\n5 : A3OUT2 = Output is A3OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.30..28> CFG29
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B5OUT2 = Output is B5OUT2 value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: A7OUT = Output is A7OUT. value.
//        <5=> 5: A3OUT2 = Output is A3OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG28  --------------------------------
// SVD Line: 17144

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG28
//    <name> CFG28 </name>
//    <rw> 
//    <i> [Bits 27..25] RW (@ 0x4000810C) \nPad output 28 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A7OUT = Output is A7OUT value.\n3 : A3OUT = Output is A3OUT. value.\n4 : A5OUT2 = Output is A5OUT2. value.\n5 : B0OUT2 = Output is B0OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.27..25> CFG28
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A7OUT = Output is A7OUT value.
//        <3=> 3: A3OUT = Output is A3OUT. value.
//        <4=> 4: A5OUT2 = Output is A5OUT2. value.
//        <5=> 5: B0OUT2 = Output is B0OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG27  --------------------------------
// SVD Line: 17192

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG27
//    <name> CFG27 </name>
//    <rw> 
//    <i> [Bits 24..22] RW (@ 0x4000810C) \nPad output 27 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B6OUT2 = Output is B6OUT2 value.\n3 : A1OUT = Output is A1OUT. value.\n4 : B6OUT = Output is B6OUT. value.\n5 : B2OUT2 = Output is B2OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.24..22> CFG27
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B6OUT2 = Output is B6OUT2 value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: B6OUT = Output is B6OUT. value.
//        <5=> 5: B2OUT2 = Output is B2OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG26  --------------------------------
// SVD Line: 17240

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG26
//    <name> CFG26 </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x4000810C) \nPad output 26 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B6OUT = Output is B6OUT value.\n3 : B2OUT = Output is B2OUT. value.\n4 : A5OUT = Output is A5OUT. value.\n5 : A1OUT2 = Output is A1OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.21..19> CFG26
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B6OUT = Output is B6OUT value.
//        <3=> 3: B2OUT = Output is B2OUT. value.
//        <4=> 4: A5OUT = Output is A5OUT. value.
//        <5=> 5: A1OUT2 = Output is A1OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG25  --------------------------------
// SVD Line: 17288

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG25
//    <name> CFG25 </name>
//    <rw> 
//    <i> [Bits 18..16] RW (@ 0x4000810C) \nPad output 25 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B4OUT2 = Output is B4OUT2 value.\n3 : B2OUT = Output is B2OUT. value.\n4 : A6OUT = Output is A6OUT. value.\n5 : A2OUT2 = Output is A2OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.18..16> CFG25
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B4OUT2 = Output is B4OUT2 value.
//        <3=> 3: B2OUT = Output is B2OUT. value.
//        <4=> 4: A6OUT = Output is A6OUT. value.
//        <5=> 5: A2OUT2 = Output is A2OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG24  --------------------------------
// SVD Line: 17336

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG24
//    <name> CFG24 </name>
//    <rw> 
//    <i> [Bits 14..12] RW (@ 0x4000810C) \nPad output 24 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A6OUT = Output is A6OUT value.\n3 : A2OUT = Output is A2OUT. value.\n4 : A1OUT = Output is A1OUT. value.\n5 : B1OUT2 = Output is B1OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.14..12> CFG24
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A6OUT = Output is A6OUT value.
//        <3=> 3: A2OUT = Output is A2OUT. value.
//        <4=> 4: A1OUT = Output is A1OUT. value.
//        <5=> 5: B1OUT2 = Output is B1OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG23  --------------------------------
// SVD Line: 17384

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG23
//    <name> CFG23 </name>
//    <rw> 
//    <i> [Bits 11..9] RW (@ 0x4000810C) \nPad output 23 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B5OUT2 = Output is B5OUT2 value.\n3 : A7OUT = Output is B1OUT. value.\n4 : A5OUT = Output is A5OUT. value.\n5 : B0OUT2 = Output is B0OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.11..9> CFG23
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B5OUT2 = Output is B5OUT2 value.
//        <3=> 3: A7OUT = Output is B1OUT. value.
//        <4=> 4: A5OUT = Output is A5OUT. value.
//        <5=> 5: B0OUT2 = Output is B0OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG22  --------------------------------
// SVD Line: 17432

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG22
//    <name> CFG22 </name>
//    <rw> 
//    <i> [Bits 8..6] RW (@ 0x4000810C) \nPad output 22 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B5OUT = Output is B5OUT value.\n3 : A6OUT = Output is B1OUT. value.\n4 : A1OUT = Output is A1OUT. value.\n5 : A2OUT2 = Output is A2OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.8..6> CFG22
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B5OUT = Output is B5OUT value.
//        <3=> 3: A6OUT = Output is B1OUT. value.
//        <4=> 4: A1OUT = Output is A1OUT. value.
//        <5=> 5: A2OUT2 = Output is A2OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG21  --------------------------------
// SVD Line: 17480

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG21
//    <name> CFG21 </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4000810C) \nPad output 21 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A5OUT2 = Output is A5OUT2 value.\n3 : A1OUT = Output is A1OUT. value.\n4 : B5OUT = Output is B5OUT. value.\n5 : A0OUT2 = Output is A0OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.5..3> CFG21
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A5OUT2 = Output is A5OUT2 value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: B5OUT = Output is B5OUT. value.
//        <5=> 5: A0OUT2 = Output is A0OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG2_CFG20  --------------------------------
// SVD Line: 17528

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG20
//    <name> CFG20 </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4000810C) \nPad output 20 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : A5OUT = Output is A5OUT value.\n3 : A1OUT = Output is A1OUT. value.\n4 : A1OUT2 = Output is A1OUT2. value.\n5 : B2OUT2 = Output is B2OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG2 ) </loc>
//      <o.2..0> CFG20
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: A5OUT = Output is A5OUT value.
//        <3=> 3: A1OUT = Output is A1OUT. value.
//        <4=> 4: A1OUT2 = Output is A1OUT2. value.
//        <5=> 5: B2OUT2 = Output is B2OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_OUTCFG2  ---------------------------------
// SVD Line: 17086

//  <rtree> SFDITEM_REG__CTIMER_OUTCFG2
//    <name> OUTCFG2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000810C) Counter/Timer Output Config 2 </i>
//    <loc> ( (unsigned int)((CTIMER_OUTCFG2 >> 0) & 0xFFFFFFFF), ((CTIMER_OUTCFG2 = (CTIMER_OUTCFG2 & ~(0x7FFF7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG29 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG28 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG27 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG26 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG25 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG24 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG23 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG22 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG21 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG2_CFG20 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_OUTCFG3  -----------------------------
// SVD Line: 17578

unsigned int CTIMER_OUTCFG3 __AT (0x40008114);



// ----------------------------  Field Item: CTIMER_OUTCFG3_CFG31  --------------------------------
// SVD Line: 17588

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG3_CFG31
//    <name> CFG31 </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40008114) \nPad output 31 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B7OUT2 = Output is B7OUT2 value.\n3 : A6OUT = Output is A6OUT. value.\n4 : B7OUT = Output is B7OUT. value.\n5 : B3OUT2 = Output is B3OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG3 ) </loc>
//      <o.5..3> CFG31
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B7OUT2 = Output is B7OUT2 value.
//        <3=> 3: A6OUT = Output is A6OUT. value.
//        <4=> 4: B7OUT = Output is B7OUT. value.
//        <5=> 5: B3OUT2 = Output is B3OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: CTIMER_OUTCFG3_CFG30  --------------------------------
// SVD Line: 17636

//  <item> SFDITEM_FIELD__CTIMER_OUTCFG3_CFG30
//    <name> CFG30 </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40008114) \nPad output 30 configuration\n0 : ZERO = Force output to 0 value.\n1 : ONE = Force output to 1. value.\n2 : B7OUT = Output is B7OUT value.\n3 : B3OUT = Output is B3OUT. value.\n4 : A4OUT2 = Output is A4OUT2. value.\n5 : A0OUT2 = Output is A0OUT2. value.\n6 : A6OUT2 = Output is A6OUT2. value.\n7 : A7OUT2 = Output is A7OUT2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_OUTCFG3 ) </loc>
//      <o.2..0> CFG30
//        <0=> 0: ZERO = Force output to 0 value.
//        <1=> 1: ONE = Force output to 1. value.
//        <2=> 2: B7OUT = Output is B7OUT value.
//        <3=> 3: B3OUT = Output is B3OUT. value.
//        <4=> 4: A4OUT2 = Output is A4OUT2. value.
//        <5=> 5: A0OUT2 = Output is A0OUT2. value.
//        <6=> 6: A6OUT2 = Output is A6OUT2. value.
//        <7=> 7: A7OUT2 = Output is A7OUT2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_OUTCFG3  ---------------------------------
// SVD Line: 17578

//  <rtree> SFDITEM_REG__CTIMER_OUTCFG3
//    <name> OUTCFG3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008114) Counter/Timer Output Config 3 </i>
//    <loc> ( (unsigned int)((CTIMER_OUTCFG3 >> 0) & 0xFFFFFFFF), ((CTIMER_OUTCFG3 = (CTIMER_OUTCFG3 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG3_CFG31 </item>
//    <item> SFDITEM_FIELD__CTIMER_OUTCFG3_CFG30 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_INCFG  ------------------------------
// SVD Line: 17686

unsigned int CTIMER_INCFG __AT (0x40008118);



// -----------------------------  Field Item: CTIMER_INCFG_CFGB7  ---------------------------------
// SVD Line: 17696

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB7
//    <name> CFGB7 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008118) \nCTIMER B7 input configuration\n0 : CT30 = Input is CT30 value.\n1 : CT31 = Input is CT31 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.15..15> CFGB7
//        <0=> 0: CT30 = Input is CT30 value.
//        <1=> 1: CT31 = Input is CT31 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA7  ---------------------------------
// SVD Line: 17714

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA7
//    <name> CFGA7 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008118) \nCTIMER A7 input configuration\n0 : CT28 = Input is CT28 value.\n1 : CT29 = Input is CT29 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.14..14> CFGA7
//        <0=> 0: CT28 = Input is CT28 value.
//        <1=> 1: CT29 = Input is CT29 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB6  ---------------------------------
// SVD Line: 17732

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB6
//    <name> CFGB6 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008118) \nCTIMER B6 input configuration\n0 : CT26 = Input is CT26 value.\n1 : CT27 = Input is CT27 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.13..13> CFGB6
//        <0=> 0: CT26 = Input is CT26 value.
//        <1=> 1: CT27 = Input is CT27 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA6  ---------------------------------
// SVD Line: 17750

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA6
//    <name> CFGA6 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008118) \nCTIMER A6 input configuration\n0 : CT24 = Input is CT24 value.\n1 : CT25 = Input is CT25 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.12..12> CFGA6
//        <0=> 0: CT24 = Input is CT24 value.
//        <1=> 1: CT25 = Input is CT25 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB5  ---------------------------------
// SVD Line: 17768

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB5
//    <name> CFGB5 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008118) \nCTIMER B5 input configuration\n0 : CT22 = Input is CT22 value.\n1 : CT23 = Input is CT23 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.11..11> CFGB5
//        <0=> 0: CT22 = Input is CT22 value.
//        <1=> 1: CT23 = Input is CT23 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA5  ---------------------------------
// SVD Line: 17786

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA5
//    <name> CFGA5 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008118) \nCTIMER A5 input configuration\n0 : CT20 = Input is CT20 value.\n1 : CT21 = Input is CT21 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.10..10> CFGA5
//        <0=> 0: CT20 = Input is CT20 value.
//        <1=> 1: CT21 = Input is CT21 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB4  ---------------------------------
// SVD Line: 17804

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB4
//    <name> CFGB4 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008118) \nCTIMER B4 input configuration\n0 : CT18 = Input is CT18 value.\n1 : CT19 = Input is CT19 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.9..9> CFGB4
//        <0=> 0: CT18 = Input is CT18 value.
//        <1=> 1: CT19 = Input is CT19 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA4  ---------------------------------
// SVD Line: 17822

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA4
//    <name> CFGA4 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008118) \nCTIMER A4 input configuration\n0 : CT16 = Input is CT16 value.\n1 : CT17 = Input is CT17 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.8..8> CFGA4
//        <0=> 0: CT16 = Input is CT16 value.
//        <1=> 1: CT17 = Input is CT17 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB3  ---------------------------------
// SVD Line: 17840

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB3
//    <name> CFGB3 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008118) \nCTIMER B3 input configuration\n0 : CT14 = Input is CT14 value.\n1 : CT15 = Input is CT15 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.7..7> CFGB3
//        <0=> 0: CT14 = Input is CT14 value.
//        <1=> 1: CT15 = Input is CT15 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA3  ---------------------------------
// SVD Line: 17858

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA3
//    <name> CFGA3 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008118) \nCTIMER A3 input configuration\n0 : CT12 = Input is CT12 value.\n1 : CT13 = Input is CT13 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.6..6> CFGA3
//        <0=> 0: CT12 = Input is CT12 value.
//        <1=> 1: CT13 = Input is CT13 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB2  ---------------------------------
// SVD Line: 17876

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB2
//    <name> CFGB2 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008118) \nCTIMER B2 input configuration\n0 : CT10 = Input is CT10 value.\n1 : CT11 = Input is CT11 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.5..5> CFGB2
//        <0=> 0: CT10 = Input is CT10 value.
//        <1=> 1: CT11 = Input is CT11 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA2  ---------------------------------
// SVD Line: 17894

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA2
//    <name> CFGA2 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008118) \nCTIMER A2 input configuration\n0 : CT8 = Input is CT8 value.\n1 : CT9 = Input is CT9 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.4..4> CFGA2
//        <0=> 0: CT8 = Input is CT8 value.
//        <1=> 1: CT9 = Input is CT9 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB1  ---------------------------------
// SVD Line: 17912

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB1
//    <name> CFGB1 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008118) \nCTIMER B1 input configuration\n0 : CT6 = Input is CT6 value.\n1 : CT7 = Input is CT7 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.3..3> CFGB1
//        <0=> 0: CT6 = Input is CT6 value.
//        <1=> 1: CT7 = Input is CT7 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA1  ---------------------------------
// SVD Line: 17930

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA1
//    <name> CFGA1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008118) \nCTIMER A1 input configuration\n0 : CT4 = Input is CT4 value.\n1 : CT5 = Input is CT5 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.2..2> CFGA1
//        <0=> 0: CT4 = Input is CT4 value.
//        <1=> 1: CT5 = Input is CT5 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGB0  ---------------------------------
// SVD Line: 17948

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB0
//    <name> CFGB0 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008118) \nCTIMER B0 input configuration\n0 : CT2 = Input is CT2 value.\n1 : CT3 = Input is CT3 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.1..1> CFGB0
//        <0=> 0: CT2 = Input is CT2 value.
//        <1=> 1: CT3 = Input is CT3 value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_INCFG_CFGA0  ---------------------------------
// SVD Line: 17966

//  <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA0
//    <name> CFGA0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008118) \nCTIMER A0 input configuration\n0 : CT0 = Input is CT0 value.\n1 : CT1 = Input is CT1 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_INCFG ) </loc>
//      <o.0..0> CFGA0
//        <0=> 0: CT0 = Input is CT0 value.
//        <1=> 1: CT1 = Input is CT1 value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_INCFG  ----------------------------------
// SVD Line: 17686

//  <rtree> SFDITEM_REG__CTIMER_INCFG
//    <name> INCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008118) Counter/Timer Input Config </i>
//    <loc> ( (unsigned int)((CTIMER_INCFG >> 0) & 0xFFFFFFFF), ((CTIMER_INCFG = (CTIMER_INCFG & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB7 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA7 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB6 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA6 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB5 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA5 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB4 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA4 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB3 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA3 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB2 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA2 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB1 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA1 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGB0 </item>
//    <item> SFDITEM_FIELD__CTIMER_INCFG_CFGA0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_STCFG  ------------------------------
// SVD Line: 17986

unsigned int CTIMER_STCFG __AT (0x40008140);



// -----------------------------  Field Item: CTIMER_STCFG_FREEZE  --------------------------------
// SVD Line: 17996

//  <item> SFDITEM_FIELD__CTIMER_STCFG_FREEZE
//    <name> FREEZE </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40008140) \nSet this bit to one to freeze the clock input to the COUNTER register. Once frozen, the value can be safely written from the MCU. Unfreeze to resume.\n0 : THAW = Let the COUNTER register run on its input clock. value.\n1 : FREEZE = Stop the COUNTER register for loading. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.31..31> FREEZE
//        <0=> 0: THAW = Let the COUNTER register run on its input clock. value.
//        <1=> 1: FREEZE = Stop the COUNTER register for loading. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_STCFG_CLEAR  ---------------------------------
// SVD Line: 18014

//  <item> SFDITEM_FIELD__CTIMER_STCFG_CLEAR
//    <name> CLEAR </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40008140) \nSet this bit to one to clear the System Timer register. If this bit is set to '1', the system timer register will stay cleared. It needs to be set to '0' for the system timer to start running.\n0 : RUN = Let the COUNTER register run on its input clock. value.\n1 : CLEAR = Stop the COUNTER register for loading. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.30..30> CLEAR
//        <0=> 0: RUN = Let the COUNTER register run on its input clock. value.
//        <1=> 1: CLEAR = Stop the COUNTER register for loading. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_H_EN  -----------------------------
// SVD Line: 18032

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_H_EN
//    <name> COMPARE_H_EN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare H disabled. value.\n1 : ENABLE = Compare H enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.15..15> COMPARE_H_EN
//        <0=> 0: DISABLE = Compare H disabled. value.
//        <1=> 1: ENABLE = Compare H enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_G_EN  -----------------------------
// SVD Line: 18050

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_G_EN
//    <name> COMPARE_G_EN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare G disabled. value.\n1 : ENABLE = Compare G enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.14..14> COMPARE_G_EN
//        <0=> 0: DISABLE = Compare G disabled. value.
//        <1=> 1: ENABLE = Compare G enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_F_EN  -----------------------------
// SVD Line: 18068

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_F_EN
//    <name> COMPARE_F_EN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare F disabled. value.\n1 : ENABLE = Compare F enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.13..13> COMPARE_F_EN
//        <0=> 0: DISABLE = Compare F disabled. value.
//        <1=> 1: ENABLE = Compare F enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_E_EN  -----------------------------
// SVD Line: 18086

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_E_EN
//    <name> COMPARE_E_EN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare E disabled. value.\n1 : ENABLE = Compare E enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.12..12> COMPARE_E_EN
//        <0=> 0: DISABLE = Compare E disabled. value.
//        <1=> 1: ENABLE = Compare E enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_D_EN  -----------------------------
// SVD Line: 18104

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_D_EN
//    <name> COMPARE_D_EN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare D disabled. value.\n1 : ENABLE = Compare D enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.11..11> COMPARE_D_EN
//        <0=> 0: DISABLE = Compare D disabled. value.
//        <1=> 1: ENABLE = Compare D enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_C_EN  -----------------------------
// SVD Line: 18122

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_C_EN
//    <name> COMPARE_C_EN </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare C disabled. value.\n1 : ENABLE = Compare C enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.10..10> COMPARE_C_EN
//        <0=> 0: DISABLE = Compare C disabled. value.
//        <1=> 1: ENABLE = Compare C enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_B_EN  -----------------------------
// SVD Line: 18140

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_B_EN
//    <name> COMPARE_B_EN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare B disabled. value.\n1 : ENABLE = Compare B enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.9..9> COMPARE_B_EN
//        <0=> 0: DISABLE = Compare B disabled. value.
//        <1=> 1: ENABLE = Compare B enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STCFG_COMPARE_A_EN  -----------------------------
// SVD Line: 18158

//  <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_A_EN
//    <name> COMPARE_A_EN </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008140) \nSelects whether compare is enabled for the corresponding SCMPR register. If compare is enabled, the interrupt status is set once the comparision is met.\n0 : DISABLE = Compare A disabled. value.\n1 : ENABLE = Compare A enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.8..8> COMPARE_A_EN
//        <0=> 0: DISABLE = Compare A disabled. value.
//        <1=> 1: ENABLE = Compare A enabled. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: CTIMER_STCFG_CLKSEL  --------------------------------
// SVD Line: 18176

//  <item> SFDITEM_FIELD__CTIMER_STCFG_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40008140) \nSelects an appropriate clock source and divider to use for the System Timer clock.\n0 : NOCLK = No clock enabled. value.\n1 : HFRC_DIV16 = 3MHz from the HFRC clock divider. value.\n2 : HFRC_DIV256 = 187.5KHz from the HFRC clock divider. value.\n3 : XTAL_DIV1 = 32768Hz from the crystal oscillator. value.\n4 : XTAL_DIV2 = 16384Hz from the crystal oscillator. value.\n5 : XTAL_DIV32 = 1024Hz from the crystal oscillator. value.\n6 : LFRC_DIV1 = Approximately 1KHz from the LFRC oscillator (uncalibrated). value.\n7 : CTIMER0A = Use CTIMER 0 section A as a prescaler for the clock source. value.\n8 : CTIMER0B = Use CTIMER 0 section B (or A and B linked together) as a prescaler for the clock source. value.\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STCFG ) </loc>
//      <o.3..0> CLKSEL
//        <0=> 0: NOCLK = No clock enabled. value.
//        <1=> 1: HFRC_DIV16 = 3MHz from the HFRC clock divider. value.
//        <2=> 2: HFRC_DIV256 = 187.5KHz from the HFRC clock divider. value.
//        <3=> 3: XTAL_DIV1 = 32768Hz from the crystal oscillator. value.
//        <4=> 4: XTAL_DIV2 = 16384Hz from the crystal oscillator. value.
//        <5=> 5: XTAL_DIV32 = 1024Hz from the crystal oscillator. value.
//        <6=> 6: LFRC_DIV1 = Approximately 1KHz from the LFRC oscillator (uncalibrated). value.
//        <7=> 7: CTIMER0A = Use CTIMER 0 section A as a prescaler for the clock source. value.
//        <8=> 8: CTIMER0B = Use CTIMER 0 section B (or A and B linked together) as a prescaler for the clock source. value.
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_STCFG  ----------------------------------
// SVD Line: 17986

//  <rtree> SFDITEM_REG__CTIMER_STCFG
//    <name> STCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008140) Configuration Register </i>
//    <loc> ( (unsigned int)((CTIMER_STCFG >> 0) & 0xFFFFFFFF), ((CTIMER_STCFG = (CTIMER_STCFG & ~(0xC000FF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC000FF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_FREEZE </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_CLEAR </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_H_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_G_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_F_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_E_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_D_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_C_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_B_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_COMPARE_A_EN </item>
//    <item> SFDITEM_FIELD__CTIMER_STCFG_CLKSEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_STTMR  ------------------------------
// SVD Line: 18231

unsigned int CTIMER_STTMR __AT (0x40008144);



// -----------------------------  Field Item: CTIMER_STTMR_STTMR  ---------------------------------
// SVD Line: 18241

//  <item> SFDITEM_FIELD__CTIMER_STTMR_STTMR
//    <name> STTMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008144) Value of the 32-bit counter as it ticks over. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_STTMR >> 0) & 0xFFFFFFFF), ((CTIMER_STTMR = (CTIMER_STTMR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_STTMR  ----------------------------------
// SVD Line: 18231

//  <rtree> SFDITEM_REG__CTIMER_STTMR
//    <name> STTMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008144) System Timer Count Register (Real Time Counter) </i>
//    <loc> ( (unsigned int)((CTIMER_STTMR >> 0) & 0xFFFFFFFF), ((CTIMER_STTMR = (CTIMER_STTMR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STTMR_STTMR </item>
//  </rtree>
//  


// ----------------------  Register Item Address: CTIMER_CAPTURECONTROL  --------------------------
// SVD Line: 18250

unsigned int CTIMER_CAPTURECONTROL __AT (0x40008148);



// -----------------------  Field Item: CTIMER_CAPTURECONTROL_CAPTURE3  ---------------------------
// SVD Line: 18260

//  <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE3
//    <name> CAPTURE3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008148) \nSelects whether capture is enabled for the specified capture register.\n0 : DISABLE = Capture function disabled. value.\n1 : ENABLE = Capture function enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CAPTURECONTROL ) </loc>
//      <o.3..3> CAPTURE3
//        <0=> 0: DISABLE = Capture function disabled. value.
//        <1=> 1: ENABLE = Capture function enabled. value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: CTIMER_CAPTURECONTROL_CAPTURE2  ---------------------------
// SVD Line: 18278

//  <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE2
//    <name> CAPTURE2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008148) \nSelects whether capture is enabled for the specified capture register.\n0 : DISABLE = Capture function disabled. value.\n1 : ENABLE = Capture function enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CAPTURECONTROL ) </loc>
//      <o.2..2> CAPTURE2
//        <0=> 0: DISABLE = Capture function disabled. value.
//        <1=> 1: ENABLE = Capture function enabled. value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: CTIMER_CAPTURECONTROL_CAPTURE1  ---------------------------
// SVD Line: 18296

//  <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE1
//    <name> CAPTURE1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008148) \nSelects whether capture is enabled for the specified capture register.\n0 : DISABLE = Capture function disabled. value.\n1 : ENABLE = Capture function enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CAPTURECONTROL ) </loc>
//      <o.1..1> CAPTURE1
//        <0=> 0: DISABLE = Capture function disabled. value.
//        <1=> 1: ENABLE = Capture function enabled. value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: CTIMER_CAPTURECONTROL_CAPTURE0  ---------------------------
// SVD Line: 18314

//  <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE0
//    <name> CAPTURE0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008148) \nSelects whether capture is enabled for the specified capture register.\n0 : DISABLE = Capture function disabled. value.\n1 : ENABLE = Capture function enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_CAPTURECONTROL ) </loc>
//      <o.0..0> CAPTURE0
//        <0=> 0: DISABLE = Capture function disabled. value.
//        <1=> 1: ENABLE = Capture function enabled. value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: CTIMER_CAPTURECONTROL  -----------------------------
// SVD Line: 18250

//  <rtree> SFDITEM_REG__CTIMER_CAPTURECONTROL
//    <name> CAPTURECONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008148) Capture Control Register </i>
//    <loc> ( (unsigned int)((CTIMER_CAPTURECONTROL >> 0) & 0xFFFFFFFF), ((CTIMER_CAPTURECONTROL = (CTIMER_CAPTURECONTROL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE3 </item>
//    <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE2 </item>
//    <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE1 </item>
//    <item> SFDITEM_FIELD__CTIMER_CAPTURECONTROL_CAPTURE0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR0  ------------------------------
// SVD Line: 18334

unsigned int CTIMER_SCMPR0 __AT (0x40008150);



// ----------------------------  Field Item: CTIMER_SCMPR0_SCMPR0  --------------------------------
// SVD Line: 18344

//  <item> SFDITEM_FIELD__CTIMER_SCMPR0_SCMPR0
//    <name> SCMPR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008150) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_A_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR0 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR0 = (CTIMER_SCMPR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR0  ---------------------------------
// SVD Line: 18334

//  <rtree> SFDITEM_REG__CTIMER_SCMPR0
//    <name> SCMPR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008150) Compare Register A </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR0 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR0 = (CTIMER_SCMPR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR0_SCMPR0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR1  ------------------------------
// SVD Line: 18353

unsigned int CTIMER_SCMPR1 __AT (0x40008154);



// ----------------------------  Field Item: CTIMER_SCMPR1_SCMPR1  --------------------------------
// SVD Line: 18363

//  <item> SFDITEM_FIELD__CTIMER_SCMPR1_SCMPR1
//    <name> SCMPR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008154) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_B_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR1 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR1 = (CTIMER_SCMPR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR1  ---------------------------------
// SVD Line: 18353

//  <rtree> SFDITEM_REG__CTIMER_SCMPR1
//    <name> SCMPR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008154) Compare Register B </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR1 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR1 = (CTIMER_SCMPR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR1_SCMPR1 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR2  ------------------------------
// SVD Line: 18372

unsigned int CTIMER_SCMPR2 __AT (0x40008158);



// ----------------------------  Field Item: CTIMER_SCMPR2_SCMPR2  --------------------------------
// SVD Line: 18382

//  <item> SFDITEM_FIELD__CTIMER_SCMPR2_SCMPR2
//    <name> SCMPR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008158) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_C_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR2 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR2 = (CTIMER_SCMPR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR2  ---------------------------------
// SVD Line: 18372

//  <rtree> SFDITEM_REG__CTIMER_SCMPR2
//    <name> SCMPR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008158) Compare Register C </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR2 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR2 = (CTIMER_SCMPR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR2_SCMPR2 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR3  ------------------------------
// SVD Line: 18391

unsigned int CTIMER_SCMPR3 __AT (0x4000815C);



// ----------------------------  Field Item: CTIMER_SCMPR3_SCMPR3  --------------------------------
// SVD Line: 18401

//  <item> SFDITEM_FIELD__CTIMER_SCMPR3_SCMPR3
//    <name> SCMPR3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000815C) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_D_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR3 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR3 = (CTIMER_SCMPR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR3  ---------------------------------
// SVD Line: 18391

//  <rtree> SFDITEM_REG__CTIMER_SCMPR3
//    <name> SCMPR3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000815C) Compare Register D </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR3 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR3 = (CTIMER_SCMPR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR3_SCMPR3 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR4  ------------------------------
// SVD Line: 18410

unsigned int CTIMER_SCMPR4 __AT (0x40008160);



// ----------------------------  Field Item: CTIMER_SCMPR4_SCMPR4  --------------------------------
// SVD Line: 18420

//  <item> SFDITEM_FIELD__CTIMER_SCMPR4_SCMPR4
//    <name> SCMPR4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008160) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_E_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR4 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR4 = (CTIMER_SCMPR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR4  ---------------------------------
// SVD Line: 18410

//  <rtree> SFDITEM_REG__CTIMER_SCMPR4
//    <name> SCMPR4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008160) Compare Register E </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR4 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR4 = (CTIMER_SCMPR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR4_SCMPR4 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR5  ------------------------------
// SVD Line: 18429

unsigned int CTIMER_SCMPR5 __AT (0x40008164);



// ----------------------------  Field Item: CTIMER_SCMPR5_SCMPR5  --------------------------------
// SVD Line: 18439

//  <item> SFDITEM_FIELD__CTIMER_SCMPR5_SCMPR5
//    <name> SCMPR5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008164) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_F_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR5 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR5 = (CTIMER_SCMPR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR5  ---------------------------------
// SVD Line: 18429

//  <rtree> SFDITEM_REG__CTIMER_SCMPR5
//    <name> SCMPR5 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008164) Compare Register F </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR5 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR5 = (CTIMER_SCMPR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR5_SCMPR5 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR6  ------------------------------
// SVD Line: 18448

unsigned int CTIMER_SCMPR6 __AT (0x40008168);



// ----------------------------  Field Item: CTIMER_SCMPR6_SCMPR6  --------------------------------
// SVD Line: 18458

//  <item> SFDITEM_FIELD__CTIMER_SCMPR6_SCMPR6
//    <name> SCMPR6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008168) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_G_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR6 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR6 = (CTIMER_SCMPR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR6  ---------------------------------
// SVD Line: 18448

//  <rtree> SFDITEM_REG__CTIMER_SCMPR6
//    <name> SCMPR6 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008168) Compare Register G </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR6 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR6 = (CTIMER_SCMPR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR6_SCMPR6 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCMPR7  ------------------------------
// SVD Line: 18467

unsigned int CTIMER_SCMPR7 __AT (0x4000816C);



// ----------------------------  Field Item: CTIMER_SCMPR7_SCMPR7  --------------------------------
// SVD Line: 18477

//  <item> SFDITEM_FIELD__CTIMER_SCMPR7_SCMPR7
//    <name> SCMPR7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000816C) Compare this value to the value in the COUNTER register according to the match criterion, as selected in the COMPARE_H_EN bit in the REG_CTIMER_STCGF register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCMPR7 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR7 = (CTIMER_SCMPR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCMPR7  ---------------------------------
// SVD Line: 18467

//  <rtree> SFDITEM_REG__CTIMER_SCMPR7
//    <name> SCMPR7 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000816C) Compare Register H </i>
//    <loc> ( (unsigned int)((CTIMER_SCMPR7 >> 0) & 0xFFFFFFFF), ((CTIMER_SCMPR7 = (CTIMER_SCMPR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCMPR7_SCMPR7 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCAPT0  ------------------------------
// SVD Line: 18486

unsigned int CTIMER_SCAPT0 __AT (0x400081E0);



// ----------------------------  Field Item: CTIMER_SCAPT0_SCAPT0  --------------------------------
// SVD Line: 18496

//  <item> SFDITEM_FIELD__CTIMER_SCAPT0_SCAPT0
//    <name> SCAPT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E0) Whenever the event is detected, the value in the COUNTER is copied into this register and the corresponding interrupt status bit is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCAPT0 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT0 = (CTIMER_SCAPT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCAPT0  ---------------------------------
// SVD Line: 18486

//  <rtree> SFDITEM_REG__CTIMER_SCAPT0
//    <name> SCAPT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E0) Capture Register A </i>
//    <loc> ( (unsigned int)((CTIMER_SCAPT0 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT0 = (CTIMER_SCAPT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCAPT0_SCAPT0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCAPT1  ------------------------------
// SVD Line: 18505

unsigned int CTIMER_SCAPT1 __AT (0x400081E4);



// ----------------------------  Field Item: CTIMER_SCAPT1_SCAPT1  --------------------------------
// SVD Line: 18515

//  <item> SFDITEM_FIELD__CTIMER_SCAPT1_SCAPT1
//    <name> SCAPT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E4) Whenever the event is detected, the value in the COUNTER is copied into this register and the corresponding interrupt status bit is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCAPT1 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT1 = (CTIMER_SCAPT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCAPT1  ---------------------------------
// SVD Line: 18505

//  <rtree> SFDITEM_REG__CTIMER_SCAPT1
//    <name> SCAPT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E4) Capture Register B </i>
//    <loc> ( (unsigned int)((CTIMER_SCAPT1 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT1 = (CTIMER_SCAPT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCAPT1_SCAPT1 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCAPT2  ------------------------------
// SVD Line: 18524

unsigned int CTIMER_SCAPT2 __AT (0x400081E8);



// ----------------------------  Field Item: CTIMER_SCAPT2_SCAPT2  --------------------------------
// SVD Line: 18534

//  <item> SFDITEM_FIELD__CTIMER_SCAPT2_SCAPT2
//    <name> SCAPT2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E8) Whenever the event is detected, the value in the COUNTER is copied into this register and the corresponding interrupt status bit is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCAPT2 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT2 = (CTIMER_SCAPT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCAPT2  ---------------------------------
// SVD Line: 18524

//  <rtree> SFDITEM_REG__CTIMER_SCAPT2
//    <name> SCAPT2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081E8) Capture Register C </i>
//    <loc> ( (unsigned int)((CTIMER_SCAPT2 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT2 = (CTIMER_SCAPT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCAPT2_SCAPT2 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_SCAPT3  ------------------------------
// SVD Line: 18543

unsigned int CTIMER_SCAPT3 __AT (0x400081EC);



// ----------------------------  Field Item: CTIMER_SCAPT3_SCAPT3  --------------------------------
// SVD Line: 18553

//  <item> SFDITEM_FIELD__CTIMER_SCAPT3_SCAPT3
//    <name> SCAPT3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081EC) Whenever the event is detected, the value in the COUNTER is copied into this register and the corresponding interrupt status bit is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SCAPT3 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT3 = (CTIMER_SCAPT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SCAPT3  ---------------------------------
// SVD Line: 18543

//  <rtree> SFDITEM_REG__CTIMER_SCAPT3
//    <name> SCAPT3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081EC) Capture Register D </i>
//    <loc> ( (unsigned int)((CTIMER_SCAPT3 >> 0) & 0xFFFFFFFF), ((CTIMER_SCAPT3 = (CTIMER_SCAPT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SCAPT3_SCAPT3 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_SNVR0  ------------------------------
// SVD Line: 18562

unsigned int CTIMER_SNVR0 __AT (0x400081F0);



// -----------------------------  Field Item: CTIMER_SNVR0_SNVR0  ---------------------------------
// SVD Line: 18572

//  <item> SFDITEM_FIELD__CTIMER_SNVR0_SNVR0
//    <name> SNVR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F0) Value of the 32-bit counter as it ticks over. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SNVR0 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR0 = (CTIMER_SNVR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SNVR0  ----------------------------------
// SVD Line: 18562

//  <rtree> SFDITEM_REG__CTIMER_SNVR0
//    <name> SNVR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F0) System Timer NVRAM_A Register </i>
//    <loc> ( (unsigned int)((CTIMER_SNVR0 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR0 = (CTIMER_SNVR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SNVR0_SNVR0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_SNVR1  ------------------------------
// SVD Line: 18581

unsigned int CTIMER_SNVR1 __AT (0x400081F4);



// -----------------------------  Field Item: CTIMER_SNVR1_SNVR1  ---------------------------------
// SVD Line: 18591

//  <item> SFDITEM_FIELD__CTIMER_SNVR1_SNVR1
//    <name> SNVR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F4) Value of the 32-bit counter as it ticks over. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SNVR1 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR1 = (CTIMER_SNVR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SNVR1  ----------------------------------
// SVD Line: 18581

//  <rtree> SFDITEM_REG__CTIMER_SNVR1
//    <name> SNVR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F4) System Timer NVRAM_B Register </i>
//    <loc> ( (unsigned int)((CTIMER_SNVR1 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR1 = (CTIMER_SNVR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SNVR1_SNVR1 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_SNVR2  ------------------------------
// SVD Line: 18600

unsigned int CTIMER_SNVR2 __AT (0x400081F8);



// -----------------------------  Field Item: CTIMER_SNVR2_SNVR2  ---------------------------------
// SVD Line: 18610

//  <item> SFDITEM_FIELD__CTIMER_SNVR2_SNVR2
//    <name> SNVR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F8) Value of the 32-bit counter as it ticks over. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SNVR2 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR2 = (CTIMER_SNVR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SNVR2  ----------------------------------
// SVD Line: 18600

//  <rtree> SFDITEM_REG__CTIMER_SNVR2
//    <name> SNVR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081F8) System Timer NVRAM_C Register </i>
//    <loc> ( (unsigned int)((CTIMER_SNVR2 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR2 = (CTIMER_SNVR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SNVR2_SNVR2 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_SNVR3  ------------------------------
// SVD Line: 18619

unsigned int CTIMER_SNVR3 __AT (0x400081FC);



// -----------------------------  Field Item: CTIMER_SNVR3_SNVR3  ---------------------------------
// SVD Line: 18629

//  <item> SFDITEM_FIELD__CTIMER_SNVR3_SNVR3
//    <name> SNVR3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081FC) Value of the 32-bit counter as it ticks over. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CTIMER_SNVR3 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR3 = (CTIMER_SNVR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_SNVR3  ----------------------------------
// SVD Line: 18619

//  <rtree> SFDITEM_REG__CTIMER_SNVR3
//    <name> SNVR3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400081FC) System Timer NVRAM_D Register </i>
//    <loc> ( (unsigned int)((CTIMER_SNVR3 >> 0) & 0xFFFFFFFF), ((CTIMER_SNVR3 = (CTIMER_SNVR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_SNVR3_SNVR3 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CTIMER_INTEN  ------------------------------
// SVD Line: 18638

unsigned int CTIMER_INTEN __AT (0x40008200);



// --------------------------  Field Item: CTIMER_INTEN_CTMRB7C1INT  ------------------------------
// SVD Line: 18648

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB7C1INT
//    <name> CTMRB7C1INT </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40008200) Counter/Timer B7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.31..31> CTMRB7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA7C1INT  ------------------------------
// SVD Line: 18655

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA7C1INT
//    <name> CTMRA7C1INT </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40008200) Counter/Timer A7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.30..30> CTMRA7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB6C1INT  ------------------------------
// SVD Line: 18662

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB6C1INT
//    <name> CTMRB6C1INT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40008200) Counter/Timer B6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.29..29> CTMRB6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA6C1INT  ------------------------------
// SVD Line: 18669

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA6C1INT
//    <name> CTMRA6C1INT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40008200) Counter/Timer A6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.28..28> CTMRA6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB5C1INT  ------------------------------
// SVD Line: 18676

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB5C1INT
//    <name> CTMRB5C1INT </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40008200) Counter/Timer B5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.27..27> CTMRB5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA5C1INT  ------------------------------
// SVD Line: 18683

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA5C1INT
//    <name> CTMRA5C1INT </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40008200) Counter/Timer A5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.26..26> CTMRA5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB4C1INT  ------------------------------
// SVD Line: 18690

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB4C1INT
//    <name> CTMRB4C1INT </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40008200) Counter/Timer B4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.25..25> CTMRB4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA4C1INT  ------------------------------
// SVD Line: 18697

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA4C1INT
//    <name> CTMRA4C1INT </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40008200) Counter/Timer A4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.24..24> CTMRA4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB3C1INT  ------------------------------
// SVD Line: 18704

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB3C1INT
//    <name> CTMRB3C1INT </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40008200) Counter/Timer B3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.23..23> CTMRB3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA3C1INT  ------------------------------
// SVD Line: 18711

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA3C1INT
//    <name> CTMRA3C1INT </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40008200) Counter/Timer A3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.22..22> CTMRA3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB2C1INT  ------------------------------
// SVD Line: 18718

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB2C1INT
//    <name> CTMRB2C1INT </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40008200) Counter/Timer B2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.21..21> CTMRB2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA2C1INT  ------------------------------
// SVD Line: 18725

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA2C1INT
//    <name> CTMRA2C1INT </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40008200) Counter/Timer A2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.20..20> CTMRA2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB1C1INT  ------------------------------
// SVD Line: 18732

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB1C1INT
//    <name> CTMRB1C1INT </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40008200) Counter/Timer B1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.19..19> CTMRB1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA1C1INT  ------------------------------
// SVD Line: 18739

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA1C1INT
//    <name> CTMRA1C1INT </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40008200) Counter/Timer A1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.18..18> CTMRA1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB0C1INT  ------------------------------
// SVD Line: 18746

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB0C1INT
//    <name> CTMRB0C1INT </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40008200) Counter/Timer B0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.17..17> CTMRB0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA0C1INT  ------------------------------
// SVD Line: 18753

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA0C1INT
//    <name> CTMRA0C1INT </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40008200) Counter/Timer A0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.16..16> CTMRA0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB7C0INT  ------------------------------
// SVD Line: 18760

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB7C0INT
//    <name> CTMRB7C0INT </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008200) Counter/Timer B7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.15..15> CTMRB7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA7C0INT  ------------------------------
// SVD Line: 18767

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA7C0INT
//    <name> CTMRA7C0INT </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008200) Counter/Timer A7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.14..14> CTMRA7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB6C0INT  ------------------------------
// SVD Line: 18774

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB6C0INT
//    <name> CTMRB6C0INT </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008200) Counter/Timer B6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.13..13> CTMRB6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA6C0INT  ------------------------------
// SVD Line: 18781

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA6C0INT
//    <name> CTMRA6C0INT </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008200) Counter/Timer A6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.12..12> CTMRA6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB5C0INT  ------------------------------
// SVD Line: 18788

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB5C0INT
//    <name> CTMRB5C0INT </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008200) Counter/Timer B5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.11..11> CTMRB5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA5C0INT  ------------------------------
// SVD Line: 18795

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA5C0INT
//    <name> CTMRA5C0INT </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008200) Counter/Timer A5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.10..10> CTMRA5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB4C0INT  ------------------------------
// SVD Line: 18802

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB4C0INT
//    <name> CTMRB4C0INT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008200) Counter/Timer B4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.9..9> CTMRB4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA4C0INT  ------------------------------
// SVD Line: 18809

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA4C0INT
//    <name> CTMRA4C0INT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008200) Counter/Timer A4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.8..8> CTMRA4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB3C0INT  ------------------------------
// SVD Line: 18816

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB3C0INT
//    <name> CTMRB3C0INT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008200) Counter/Timer B3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.7..7> CTMRB3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA3C0INT  ------------------------------
// SVD Line: 18823

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA3C0INT
//    <name> CTMRA3C0INT </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008200) Counter/Timer A3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.6..6> CTMRA3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB2C0INT  ------------------------------
// SVD Line: 18830

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB2C0INT
//    <name> CTMRB2C0INT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008200) Counter/Timer B2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.5..5> CTMRB2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA2C0INT  ------------------------------
// SVD Line: 18837

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA2C0INT
//    <name> CTMRA2C0INT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008200) Counter/Timer A2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.4..4> CTMRA2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB1C0INT  ------------------------------
// SVD Line: 18844

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB1C0INT
//    <name> CTMRB1C0INT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008200) Counter/Timer B1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.3..3> CTMRB1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA1C0INT  ------------------------------
// SVD Line: 18851

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA1C0INT
//    <name> CTMRA1C0INT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008200) Counter/Timer A1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.2..2> CTMRA1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRB0C0INT  ------------------------------
// SVD Line: 18858

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB0C0INT
//    <name> CTMRB0C0INT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008200) Counter/Timer B0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.1..1> CTMRB0C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTEN_CTMRA0C0INT  ------------------------------
// SVD Line: 18865

//  <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA0C0INT
//    <name> CTMRA0C0INT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008200) Counter/Timer A0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTEN ) </loc>
//      <o.0..0> CTMRA0C0INT
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_INTEN  ----------------------------------
// SVD Line: 18638

//  <rtree> SFDITEM_REG__CTIMER_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008200) Counter/Timer Interrupts: Enable </i>
//    <loc> ( (unsigned int)((CTIMER_INTEN >> 0) & 0xFFFFFFFF), ((CTIMER_INTEN = (CTIMER_INTEN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRB0C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTEN_CTMRA0C0INT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_INTSTAT  -----------------------------
// SVD Line: 18874

unsigned int CTIMER_INTSTAT __AT (0x40008204);



// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB7C1INT  -----------------------------
// SVD Line: 18884

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB7C1INT
//    <name> CTMRB7C1INT </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40008204) Counter/Timer B7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.31..31> CTMRB7C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA7C1INT  -----------------------------
// SVD Line: 18891

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA7C1INT
//    <name> CTMRA7C1INT </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40008204) Counter/Timer A7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.30..30> CTMRA7C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB6C1INT  -----------------------------
// SVD Line: 18898

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB6C1INT
//    <name> CTMRB6C1INT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40008204) Counter/Timer B6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.29..29> CTMRB6C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA6C1INT  -----------------------------
// SVD Line: 18905

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA6C1INT
//    <name> CTMRA6C1INT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40008204) Counter/Timer A6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.28..28> CTMRA6C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB5C1INT  -----------------------------
// SVD Line: 18912

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB5C1INT
//    <name> CTMRB5C1INT </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40008204) Counter/Timer B5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.27..27> CTMRB5C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA5C1INT  -----------------------------
// SVD Line: 18919

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA5C1INT
//    <name> CTMRA5C1INT </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40008204) Counter/Timer A5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.26..26> CTMRA5C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB4C1INT  -----------------------------
// SVD Line: 18926

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB4C1INT
//    <name> CTMRB4C1INT </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40008204) Counter/Timer B4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.25..25> CTMRB4C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA4C1INT  -----------------------------
// SVD Line: 18933

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA4C1INT
//    <name> CTMRA4C1INT </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40008204) Counter/Timer A4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.24..24> CTMRA4C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB3C1INT  -----------------------------
// SVD Line: 18940

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB3C1INT
//    <name> CTMRB3C1INT </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40008204) Counter/Timer B3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.23..23> CTMRB3C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA3C1INT  -----------------------------
// SVD Line: 18947

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA3C1INT
//    <name> CTMRA3C1INT </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40008204) Counter/Timer A3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.22..22> CTMRA3C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB2C1INT  -----------------------------
// SVD Line: 18954

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB2C1INT
//    <name> CTMRB2C1INT </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40008204) Counter/Timer B2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.21..21> CTMRB2C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA2C1INT  -----------------------------
// SVD Line: 18961

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA2C1INT
//    <name> CTMRA2C1INT </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40008204) Counter/Timer A2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.20..20> CTMRA2C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB1C1INT  -----------------------------
// SVD Line: 18968

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB1C1INT
//    <name> CTMRB1C1INT </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40008204) Counter/Timer B1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.19..19> CTMRB1C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA1C1INT  -----------------------------
// SVD Line: 18975

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA1C1INT
//    <name> CTMRA1C1INT </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40008204) Counter/Timer A1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.18..18> CTMRA1C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB0C1INT  -----------------------------
// SVD Line: 18982

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB0C1INT
//    <name> CTMRB0C1INT </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40008204) Counter/Timer B0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.17..17> CTMRB0C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA0C1INT  -----------------------------
// SVD Line: 18989

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA0C1INT
//    <name> CTMRA0C1INT </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40008204) Counter/Timer A0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.16..16> CTMRA0C1INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB7C0INT  -----------------------------
// SVD Line: 18996

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB7C0INT
//    <name> CTMRB7C0INT </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008204) Counter/Timer B7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.15..15> CTMRB7C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA7C0INT  -----------------------------
// SVD Line: 19003

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA7C0INT
//    <name> CTMRA7C0INT </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008204) Counter/Timer A7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.14..14> CTMRA7C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB6C0INT  -----------------------------
// SVD Line: 19010

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB6C0INT
//    <name> CTMRB6C0INT </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008204) Counter/Timer B6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.13..13> CTMRB6C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA6C0INT  -----------------------------
// SVD Line: 19017

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA6C0INT
//    <name> CTMRA6C0INT </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008204) Counter/Timer A6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.12..12> CTMRA6C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB5C0INT  -----------------------------
// SVD Line: 19024

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB5C0INT
//    <name> CTMRB5C0INT </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008204) Counter/Timer B5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.11..11> CTMRB5C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA5C0INT  -----------------------------
// SVD Line: 19031

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA5C0INT
//    <name> CTMRA5C0INT </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008204) Counter/Timer A5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.10..10> CTMRA5C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB4C0INT  -----------------------------
// SVD Line: 19038

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB4C0INT
//    <name> CTMRB4C0INT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008204) Counter/Timer B4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.9..9> CTMRB4C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA4C0INT  -----------------------------
// SVD Line: 19045

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA4C0INT
//    <name> CTMRA4C0INT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008204) Counter/Timer A4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.8..8> CTMRA4C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB3C0INT  -----------------------------
// SVD Line: 19052

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB3C0INT
//    <name> CTMRB3C0INT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008204) Counter/Timer B3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.7..7> CTMRB3C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA3C0INT  -----------------------------
// SVD Line: 19059

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA3C0INT
//    <name> CTMRA3C0INT </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008204) Counter/Timer A3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.6..6> CTMRA3C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB2C0INT  -----------------------------
// SVD Line: 19066

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB2C0INT
//    <name> CTMRB2C0INT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008204) Counter/Timer B2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.5..5> CTMRB2C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA2C0INT  -----------------------------
// SVD Line: 19073

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA2C0INT
//    <name> CTMRA2C0INT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008204) Counter/Timer A2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.4..4> CTMRA2C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB1C0INT  -----------------------------
// SVD Line: 19080

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB1C0INT
//    <name> CTMRB1C0INT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008204) Counter/Timer B1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.3..3> CTMRB1C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA1C0INT  -----------------------------
// SVD Line: 19087

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA1C0INT
//    <name> CTMRA1C0INT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008204) Counter/Timer A1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.2..2> CTMRA1C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRB0C0INT  -----------------------------
// SVD Line: 19094

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB0C0INT
//    <name> CTMRB0C0INT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008204) Counter/Timer B0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.1..1> CTMRB0C0INT
//    </check>
//  </item>
//  


// -------------------------  Field Item: CTIMER_INTSTAT_CTMRA0C0INT  -----------------------------
// SVD Line: 19101

//  <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA0C0INT
//    <name> CTMRA0C0INT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008204) Counter/Timer A0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSTAT ) </loc>
//      <o.0..0> CTMRA0C0INT
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_INTSTAT  ---------------------------------
// SVD Line: 18874

//  <rtree> SFDITEM_REG__CTIMER_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008204) Counter/Timer Interrupts: Status </i>
//    <loc> ( (unsigned int)((CTIMER_INTSTAT >> 0) & 0xFFFFFFFF), ((CTIMER_INTSTAT = (CTIMER_INTSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRB0C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSTAT_CTMRA0C0INT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_INTCLR  ------------------------------
// SVD Line: 19110

unsigned int CTIMER_INTCLR __AT (0x40008208);



// --------------------------  Field Item: CTIMER_INTCLR_CTMRB7C1INT  -----------------------------
// SVD Line: 19120

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB7C1INT
//    <name> CTMRB7C1INT </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40008208) Counter/Timer B7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.31..31> CTMRB7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA7C1INT  -----------------------------
// SVD Line: 19127

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA7C1INT
//    <name> CTMRA7C1INT </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40008208) Counter/Timer A7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.30..30> CTMRA7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB6C1INT  -----------------------------
// SVD Line: 19134

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB6C1INT
//    <name> CTMRB6C1INT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40008208) Counter/Timer B6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.29..29> CTMRB6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA6C1INT  -----------------------------
// SVD Line: 19141

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA6C1INT
//    <name> CTMRA6C1INT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40008208) Counter/Timer A6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.28..28> CTMRA6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB5C1INT  -----------------------------
// SVD Line: 19148

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB5C1INT
//    <name> CTMRB5C1INT </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40008208) Counter/Timer B5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.27..27> CTMRB5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA5C1INT  -----------------------------
// SVD Line: 19155

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA5C1INT
//    <name> CTMRA5C1INT </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40008208) Counter/Timer A5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.26..26> CTMRA5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB4C1INT  -----------------------------
// SVD Line: 19162

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB4C1INT
//    <name> CTMRB4C1INT </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40008208) Counter/Timer B4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.25..25> CTMRB4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA4C1INT  -----------------------------
// SVD Line: 19169

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA4C1INT
//    <name> CTMRA4C1INT </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40008208) Counter/Timer A4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.24..24> CTMRA4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB3C1INT  -----------------------------
// SVD Line: 19176

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB3C1INT
//    <name> CTMRB3C1INT </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40008208) Counter/Timer B3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.23..23> CTMRB3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA3C1INT  -----------------------------
// SVD Line: 19183

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA3C1INT
//    <name> CTMRA3C1INT </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40008208) Counter/Timer A3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.22..22> CTMRA3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB2C1INT  -----------------------------
// SVD Line: 19190

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB2C1INT
//    <name> CTMRB2C1INT </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40008208) Counter/Timer B2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.21..21> CTMRB2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA2C1INT  -----------------------------
// SVD Line: 19197

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA2C1INT
//    <name> CTMRA2C1INT </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40008208) Counter/Timer A2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.20..20> CTMRA2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB1C1INT  -----------------------------
// SVD Line: 19204

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB1C1INT
//    <name> CTMRB1C1INT </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40008208) Counter/Timer B1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.19..19> CTMRB1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA1C1INT  -----------------------------
// SVD Line: 19211

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA1C1INT
//    <name> CTMRA1C1INT </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40008208) Counter/Timer A1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.18..18> CTMRA1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB0C1INT  -----------------------------
// SVD Line: 19218

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB0C1INT
//    <name> CTMRB0C1INT </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40008208) Counter/Timer B0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.17..17> CTMRB0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA0C1INT  -----------------------------
// SVD Line: 19225

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA0C1INT
//    <name> CTMRA0C1INT </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40008208) Counter/Timer A0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.16..16> CTMRA0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB7C0INT  -----------------------------
// SVD Line: 19232

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB7C0INT
//    <name> CTMRB7C0INT </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40008208) Counter/Timer B7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.15..15> CTMRB7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA7C0INT  -----------------------------
// SVD Line: 19239

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA7C0INT
//    <name> CTMRA7C0INT </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40008208) Counter/Timer A7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.14..14> CTMRA7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB6C0INT  -----------------------------
// SVD Line: 19246

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB6C0INT
//    <name> CTMRB6C0INT </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40008208) Counter/Timer B6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.13..13> CTMRB6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA6C0INT  -----------------------------
// SVD Line: 19253

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA6C0INT
//    <name> CTMRA6C0INT </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008208) Counter/Timer A6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.12..12> CTMRA6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB5C0INT  -----------------------------
// SVD Line: 19260

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB5C0INT
//    <name> CTMRB5C0INT </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008208) Counter/Timer B5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.11..11> CTMRB5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA5C0INT  -----------------------------
// SVD Line: 19267

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA5C0INT
//    <name> CTMRA5C0INT </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008208) Counter/Timer A5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.10..10> CTMRA5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB4C0INT  -----------------------------
// SVD Line: 19274

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB4C0INT
//    <name> CTMRB4C0INT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008208) Counter/Timer B4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.9..9> CTMRB4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA4C0INT  -----------------------------
// SVD Line: 19281

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA4C0INT
//    <name> CTMRA4C0INT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008208) Counter/Timer A4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.8..8> CTMRA4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB3C0INT  -----------------------------
// SVD Line: 19288

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB3C0INT
//    <name> CTMRB3C0INT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008208) Counter/Timer B3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.7..7> CTMRB3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA3C0INT  -----------------------------
// SVD Line: 19295

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA3C0INT
//    <name> CTMRA3C0INT </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008208) Counter/Timer A3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.6..6> CTMRA3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB2C0INT  -----------------------------
// SVD Line: 19302

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB2C0INT
//    <name> CTMRB2C0INT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008208) Counter/Timer B2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.5..5> CTMRB2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA2C0INT  -----------------------------
// SVD Line: 19309

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA2C0INT
//    <name> CTMRA2C0INT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008208) Counter/Timer A2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.4..4> CTMRA2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB1C0INT  -----------------------------
// SVD Line: 19316

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB1C0INT
//    <name> CTMRB1C0INT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008208) Counter/Timer B1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.3..3> CTMRB1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA1C0INT  -----------------------------
// SVD Line: 19323

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA1C0INT
//    <name> CTMRA1C0INT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008208) Counter/Timer A1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.2..2> CTMRA1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRB0C0INT  -----------------------------
// SVD Line: 19330

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB0C0INT
//    <name> CTMRB0C0INT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008208) Counter/Timer B0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.1..1> CTMRB0C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTCLR_CTMRA0C0INT  -----------------------------
// SVD Line: 19337

//  <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA0C0INT
//    <name> CTMRA0C0INT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008208) Counter/Timer A0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTCLR ) </loc>
//      <o.0..0> CTMRA0C0INT
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_INTCLR  ---------------------------------
// SVD Line: 19110

//  <rtree> SFDITEM_REG__CTIMER_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008208) Counter/Timer Interrupts: Clear </i>
//    <loc> ( (unsigned int)((CTIMER_INTCLR >> 0) & 0xFFFFFFFF), ((CTIMER_INTCLR = (CTIMER_INTCLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRB0C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTCLR_CTMRA0C0INT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: CTIMER_INTSET  ------------------------------
// SVD Line: 19346

unsigned int CTIMER_INTSET __AT (0x4000820C);



// --------------------------  Field Item: CTIMER_INTSET_CTMRB7C1INT  -----------------------------
// SVD Line: 19356

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB7C1INT
//    <name> CTMRB7C1INT </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000820C) Counter/Timer B7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.31..31> CTMRB7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA7C1INT  -----------------------------
// SVD Line: 19363

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA7C1INT
//    <name> CTMRA7C1INT </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4000820C) Counter/Timer A7 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.30..30> CTMRA7C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB6C1INT  -----------------------------
// SVD Line: 19370

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB6C1INT
//    <name> CTMRB6C1INT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4000820C) Counter/Timer B6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.29..29> CTMRB6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA6C1INT  -----------------------------
// SVD Line: 19377

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA6C1INT
//    <name> CTMRA6C1INT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000820C) Counter/Timer A6 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.28..28> CTMRA6C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB5C1INT  -----------------------------
// SVD Line: 19384

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB5C1INT
//    <name> CTMRB5C1INT </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000820C) Counter/Timer B5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.27..27> CTMRB5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA5C1INT  -----------------------------
// SVD Line: 19391

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA5C1INT
//    <name> CTMRA5C1INT </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4000820C) Counter/Timer A5 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.26..26> CTMRA5C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB4C1INT  -----------------------------
// SVD Line: 19398

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB4C1INT
//    <name> CTMRB4C1INT </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4000820C) Counter/Timer B4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.25..25> CTMRB4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA4C1INT  -----------------------------
// SVD Line: 19405

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA4C1INT
//    <name> CTMRA4C1INT </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4000820C) Counter/Timer A4 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.24..24> CTMRA4C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB3C1INT  -----------------------------
// SVD Line: 19412

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB3C1INT
//    <name> CTMRB3C1INT </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x4000820C) Counter/Timer B3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.23..23> CTMRB3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA3C1INT  -----------------------------
// SVD Line: 19419

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA3C1INT
//    <name> CTMRA3C1INT </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x4000820C) Counter/Timer A3 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.22..22> CTMRA3C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB2C1INT  -----------------------------
// SVD Line: 19426

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB2C1INT
//    <name> CTMRB2C1INT </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x4000820C) Counter/Timer B2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.21..21> CTMRB2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA2C1INT  -----------------------------
// SVD Line: 19433

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA2C1INT
//    <name> CTMRA2C1INT </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4000820C) Counter/Timer A2 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.20..20> CTMRA2C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB1C1INT  -----------------------------
// SVD Line: 19440

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB1C1INT
//    <name> CTMRB1C1INT </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4000820C) Counter/Timer B1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.19..19> CTMRB1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA1C1INT  -----------------------------
// SVD Line: 19447

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA1C1INT
//    <name> CTMRA1C1INT </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4000820C) Counter/Timer A1 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.18..18> CTMRA1C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB0C1INT  -----------------------------
// SVD Line: 19454

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB0C1INT
//    <name> CTMRB0C1INT </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4000820C) Counter/Timer B0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.17..17> CTMRB0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA0C1INT  -----------------------------
// SVD Line: 19461

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA0C1INT
//    <name> CTMRA0C1INT </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000820C) Counter/Timer A0 interrupt based on COMPR1. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.16..16> CTMRA0C1INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB7C0INT  -----------------------------
// SVD Line: 19468

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB7C0INT
//    <name> CTMRB7C0INT </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4000820C) Counter/Timer B7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.15..15> CTMRB7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA7C0INT  -----------------------------
// SVD Line: 19475

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA7C0INT
//    <name> CTMRA7C0INT </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4000820C) Counter/Timer A7 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.14..14> CTMRA7C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB6C0INT  -----------------------------
// SVD Line: 19482

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB6C0INT
//    <name> CTMRB6C0INT </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4000820C) Counter/Timer B6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.13..13> CTMRB6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA6C0INT  -----------------------------
// SVD Line: 19489

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA6C0INT
//    <name> CTMRA6C0INT </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000820C) Counter/Timer A6 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.12..12> CTMRA6C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB5C0INT  -----------------------------
// SVD Line: 19496

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB5C0INT
//    <name> CTMRB5C0INT </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000820C) Counter/Timer B5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.11..11> CTMRB5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA5C0INT  -----------------------------
// SVD Line: 19503

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA5C0INT
//    <name> CTMRA5C0INT </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000820C) Counter/Timer A5 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.10..10> CTMRA5C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB4C0INT  -----------------------------
// SVD Line: 19510

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB4C0INT
//    <name> CTMRB4C0INT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000820C) Counter/Timer B4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.9..9> CTMRB4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA4C0INT  -----------------------------
// SVD Line: 19517

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA4C0INT
//    <name> CTMRA4C0INT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4000820C) Counter/Timer A4 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.8..8> CTMRA4C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB3C0INT  -----------------------------
// SVD Line: 19524

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB3C0INT
//    <name> CTMRB3C0INT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000820C) Counter/Timer B3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.7..7> CTMRB3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA3C0INT  -----------------------------
// SVD Line: 19531

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA3C0INT
//    <name> CTMRA3C0INT </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000820C) Counter/Timer A3 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.6..6> CTMRA3C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB2C0INT  -----------------------------
// SVD Line: 19538

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB2C0INT
//    <name> CTMRB2C0INT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000820C) Counter/Timer B2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.5..5> CTMRB2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA2C0INT  -----------------------------
// SVD Line: 19545

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA2C0INT
//    <name> CTMRA2C0INT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000820C) Counter/Timer A2 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.4..4> CTMRA2C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB1C0INT  -----------------------------
// SVD Line: 19552

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB1C0INT
//    <name> CTMRB1C0INT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000820C) Counter/Timer B1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.3..3> CTMRB1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA1C0INT  -----------------------------
// SVD Line: 19559

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA1C0INT
//    <name> CTMRA1C0INT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000820C) Counter/Timer A1 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.2..2> CTMRA1C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRB0C0INT  -----------------------------
// SVD Line: 19566

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB0C0INT
//    <name> CTMRB0C0INT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000820C) Counter/Timer B0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.1..1> CTMRB0C0INT
//    </check>
//  </item>
//  


// --------------------------  Field Item: CTIMER_INTSET_CTMRA0C0INT  -----------------------------
// SVD Line: 19573

//  <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA0C0INT
//    <name> CTMRA0C0INT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000820C) Counter/Timer A0 interrupt based on COMPR0. </i>
//    <check> 
//      <loc> ( (unsigned int) CTIMER_INTSET ) </loc>
//      <o.0..0> CTMRA0C0INT
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: CTIMER_INTSET  ---------------------------------
// SVD Line: 19346

//  <rtree> SFDITEM_REG__CTIMER_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000820C) Counter/Timer Interrupts: Set </i>
//    <loc> ( (unsigned int)((CTIMER_INTSET >> 0) & 0xFFFFFFFF), ((CTIMER_INTSET = (CTIMER_INTSET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA7C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA6C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA5C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA4C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA3C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA2C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA1C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA0C1INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA7C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA6C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA5C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA4C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA3C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA2C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA1C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRB0C0INT </item>
//    <item> SFDITEM_FIELD__CTIMER_INTSET_CTMRA0C0INT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_STMINTEN  -----------------------------
// SVD Line: 19582

unsigned int CTIMER_STMINTEN __AT (0x40008300);



// --------------------------  Field Item: CTIMER_STMINTEN_CAPTURED  ------------------------------
// SVD Line: 19592

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTURED
//    <name> CAPTURED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008300) \nCAPTURE register D has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPD_INT = Capture D interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.12..12> CAPTURED
//        <0=> 0: 
//        <1=> 1: CAPD_INT = Capture D interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_CAPTUREC  ------------------------------
// SVD Line: 19605

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREC
//    <name> CAPTUREC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008300) \nCAPTURE register C has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPC_INT = CAPTURE C interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.11..11> CAPTUREC
//        <0=> 0: 
//        <1=> 1: CAPC_INT = CAPTURE C interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_CAPTUREB  ------------------------------
// SVD Line: 19618

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREB
//    <name> CAPTUREB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008300) \nCAPTURE register B has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPB_INT = CAPTURE B interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.10..10> CAPTUREB
//        <0=> 0: 
//        <1=> 1: CAPB_INT = CAPTURE B interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_CAPTUREA  ------------------------------
// SVD Line: 19631

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREA
//    <name> CAPTUREA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008300) \nCAPTURE register A has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPA_INT = CAPTURE A interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.9..9> CAPTUREA
//        <0=> 0: 
//        <1=> 1: CAPA_INT = CAPTURE A interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_OVERFLOW  ------------------------------
// SVD Line: 19644

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_OVERFLOW
//    <name> OVERFLOW </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008300) \nCOUNTER over flowed from 0xFFFFFFFF back to 0x00000000.\n0 : Reserved - do not use\n1 : OFLOW_INT = Overflow interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.8..8> OVERFLOW
//        <0=> 0: 
//        <1=> 1: OFLOW_INT = Overflow interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREH  ------------------------------
// SVD Line: 19657

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREH
//    <name> COMPAREH </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register H.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.7..7> COMPAREH
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREG  ------------------------------
// SVD Line: 19670

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREG
//    <name> COMPAREG </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register G.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.6..6> COMPAREG
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREF  ------------------------------
// SVD Line: 19683

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREF
//    <name> COMPAREF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register F.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.5..5> COMPAREF
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREE  ------------------------------
// SVD Line: 19696

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREE
//    <name> COMPAREE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register E.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.4..4> COMPAREE
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPARED  ------------------------------
// SVD Line: 19709

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPARED
//    <name> COMPARED </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register D.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.3..3> COMPARED
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREC  ------------------------------
// SVD Line: 19722

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREC
//    <name> COMPAREC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register C.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.2..2> COMPAREC
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREB  ------------------------------
// SVD Line: 19735

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREB
//    <name> COMPAREB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register B.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.1..1> COMPAREB
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTEN_COMPAREA  ------------------------------
// SVD Line: 19748

//  <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREA
//    <name> COMPAREA </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008300) \nCOUNTER is greater than or equal to COMPARE register A.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTEN ) </loc>
//      <o.0..0> COMPAREA
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: CTIMER_STMINTEN  --------------------------------
// SVD Line: 19582

//  <rtree> SFDITEM_REG__CTIMER_STMINTEN
//    <name> STMINTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008300) STIMER Interrupt registers: Enable </i>
//    <loc> ( (unsigned int)((CTIMER_STMINTEN >> 0) & 0xFFFFFFFF), ((CTIMER_STMINTEN = (CTIMER_STMINTEN & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTURED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_CAPTUREA </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_OVERFLOW </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREH </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREG </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREF </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREE </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPARED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTEN_COMPAREA </item>
//  </rtree>
//  


// ------------------------  Register Item Address: CTIMER_STMINTSTAT  ----------------------------
// SVD Line: 19763

unsigned int CTIMER_STMINTSTAT __AT (0x40008304);



// -------------------------  Field Item: CTIMER_STMINTSTAT_CAPTURED  -----------------------------
// SVD Line: 19773

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTURED
//    <name> CAPTURED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008304) \nCAPTURE register D has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPD_INT = Capture D interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.12..12> CAPTURED
//        <0=> 0: 
//        <1=> 1: CAPD_INT = Capture D interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_CAPTUREC  -----------------------------
// SVD Line: 19786

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREC
//    <name> CAPTUREC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008304) \nCAPTURE register C has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPC_INT = CAPTURE C interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.11..11> CAPTUREC
//        <0=> 0: 
//        <1=> 1: CAPC_INT = CAPTURE C interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_CAPTUREB  -----------------------------
// SVD Line: 19799

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREB
//    <name> CAPTUREB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008304) \nCAPTURE register B has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPB_INT = CAPTURE B interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.10..10> CAPTUREB
//        <0=> 0: 
//        <1=> 1: CAPB_INT = CAPTURE B interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_CAPTUREA  -----------------------------
// SVD Line: 19812

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREA
//    <name> CAPTUREA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008304) \nCAPTURE register A has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPA_INT = CAPTURE A interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.9..9> CAPTUREA
//        <0=> 0: 
//        <1=> 1: CAPA_INT = CAPTURE A interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_OVERFLOW  -----------------------------
// SVD Line: 19825

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_OVERFLOW
//    <name> OVERFLOW </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008304) \nCOUNTER over flowed from 0xFFFFFFFF back to 0x00000000.\n0 : Reserved - do not use\n1 : OFLOW_INT = Overflow interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.8..8> OVERFLOW
//        <0=> 0: 
//        <1=> 1: OFLOW_INT = Overflow interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREH  -----------------------------
// SVD Line: 19838

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREH
//    <name> COMPAREH </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register H.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.7..7> COMPAREH
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREG  -----------------------------
// SVD Line: 19851

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREG
//    <name> COMPAREG </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register G.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.6..6> COMPAREG
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREF  -----------------------------
// SVD Line: 19864

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREF
//    <name> COMPAREF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register F.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.5..5> COMPAREF
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREE  -----------------------------
// SVD Line: 19877

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREE
//    <name> COMPAREE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register E.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.4..4> COMPAREE
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPARED  -----------------------------
// SVD Line: 19890

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPARED
//    <name> COMPARED </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register D.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.3..3> COMPARED
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREC  -----------------------------
// SVD Line: 19903

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREC
//    <name> COMPAREC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register C.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.2..2> COMPAREC
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREB  -----------------------------
// SVD Line: 19916

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREB
//    <name> COMPAREB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register B.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.1..1> COMPAREB
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: CTIMER_STMINTSTAT_COMPAREA  -----------------------------
// SVD Line: 19929

//  <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREA
//    <name> COMPAREA </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008304) \nCOUNTER is greater than or equal to COMPARE register A.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSTAT ) </loc>
//      <o.0..0> COMPAREA
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_STMINTSTAT  -------------------------------
// SVD Line: 19763

//  <rtree> SFDITEM_REG__CTIMER_STMINTSTAT
//    <name> STMINTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008304) STIMER Interrupt registers: Status </i>
//    <loc> ( (unsigned int)((CTIMER_STMINTSTAT >> 0) & 0xFFFFFFFF), ((CTIMER_STMINTSTAT = (CTIMER_STMINTSTAT & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTURED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_CAPTUREA </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_OVERFLOW </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREH </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREG </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREF </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREE </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPARED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSTAT_COMPAREA </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_STMINTCLR  ----------------------------
// SVD Line: 19944

unsigned int CTIMER_STMINTCLR __AT (0x40008308);



// --------------------------  Field Item: CTIMER_STMINTCLR_CAPTURED  -----------------------------
// SVD Line: 19954

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTURED
//    <name> CAPTURED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40008308) \nCAPTURE register D has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPD_INT = Capture D interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.12..12> CAPTURED
//        <0=> 0: 
//        <1=> 1: CAPD_INT = Capture D interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_CAPTUREC  -----------------------------
// SVD Line: 19967

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREC
//    <name> CAPTUREC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40008308) \nCAPTURE register C has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPC_INT = CAPTURE C interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.11..11> CAPTUREC
//        <0=> 0: 
//        <1=> 1: CAPC_INT = CAPTURE C interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_CAPTUREB  -----------------------------
// SVD Line: 19980

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREB
//    <name> CAPTUREB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40008308) \nCAPTURE register B has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPB_INT = CAPTURE B interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.10..10> CAPTUREB
//        <0=> 0: 
//        <1=> 1: CAPB_INT = CAPTURE B interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_CAPTUREA  -----------------------------
// SVD Line: 19993

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREA
//    <name> CAPTUREA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40008308) \nCAPTURE register A has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPA_INT = CAPTURE A interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.9..9> CAPTUREA
//        <0=> 0: 
//        <1=> 1: CAPA_INT = CAPTURE A interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_OVERFLOW  -----------------------------
// SVD Line: 20006

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_OVERFLOW
//    <name> OVERFLOW </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40008308) \nCOUNTER over flowed from 0xFFFFFFFF back to 0x00000000.\n0 : Reserved - do not use\n1 : OFLOW_INT = Overflow interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.8..8> OVERFLOW
//        <0=> 0: 
//        <1=> 1: OFLOW_INT = Overflow interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREH  -----------------------------
// SVD Line: 20019

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREH
//    <name> COMPAREH </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register H.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.7..7> COMPAREH
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREG  -----------------------------
// SVD Line: 20032

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREG
//    <name> COMPAREG </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register G.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.6..6> COMPAREG
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREF  -----------------------------
// SVD Line: 20045

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREF
//    <name> COMPAREF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register F.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.5..5> COMPAREF
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREE  -----------------------------
// SVD Line: 20058

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREE
//    <name> COMPAREE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register E.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.4..4> COMPAREE
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPARED  -----------------------------
// SVD Line: 20071

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPARED
//    <name> COMPARED </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register D.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.3..3> COMPARED
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREC  -----------------------------
// SVD Line: 20084

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREC
//    <name> COMPAREC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register C.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.2..2> COMPAREC
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREB  -----------------------------
// SVD Line: 20097

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREB
//    <name> COMPAREB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register B.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.1..1> COMPAREB
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTCLR_COMPAREA  -----------------------------
// SVD Line: 20110

//  <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREA
//    <name> COMPAREA </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40008308) \nCOUNTER is greater than or equal to COMPARE register A.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTCLR ) </loc>
//      <o.0..0> COMPAREA
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_STMINTCLR  --------------------------------
// SVD Line: 19944

//  <rtree> SFDITEM_REG__CTIMER_STMINTCLR
//    <name> STMINTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40008308) STIMER Interrupt registers: Clear </i>
//    <loc> ( (unsigned int)((CTIMER_STMINTCLR >> 0) & 0xFFFFFFFF), ((CTIMER_STMINTCLR = (CTIMER_STMINTCLR & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTURED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_CAPTUREA </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_OVERFLOW </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREH </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREG </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREF </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREE </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPARED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTCLR_COMPAREA </item>
//  </rtree>
//  


// -------------------------  Register Item Address: CTIMER_STMINTSET  ----------------------------
// SVD Line: 20125

unsigned int CTIMER_STMINTSET __AT (0x4000830C);



// --------------------------  Field Item: CTIMER_STMINTSET_CAPTURED  -----------------------------
// SVD Line: 20135

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTURED
//    <name> CAPTURED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4000830C) \nCAPTURE register D has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPD_INT = Capture D interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.12..12> CAPTURED
//        <0=> 0: 
//        <1=> 1: CAPD_INT = Capture D interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_CAPTUREC  -----------------------------
// SVD Line: 20148

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREC
//    <name> CAPTUREC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000830C) \nCAPTURE register C has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPC_INT = CAPTURE C interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.11..11> CAPTUREC
//        <0=> 0: 
//        <1=> 1: CAPC_INT = CAPTURE C interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_CAPTUREB  -----------------------------
// SVD Line: 20161

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREB
//    <name> CAPTUREB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000830C) \nCAPTURE register B has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPB_INT = CAPTURE B interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.10..10> CAPTUREB
//        <0=> 0: 
//        <1=> 1: CAPB_INT = CAPTURE B interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_CAPTUREA  -----------------------------
// SVD Line: 20174

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREA
//    <name> CAPTUREA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000830C) \nCAPTURE register A has grabbed the value in the counter\n0 : Reserved - do not use\n1 : CAPA_INT = CAPTURE A interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.9..9> CAPTUREA
//        <0=> 0: 
//        <1=> 1: CAPA_INT = CAPTURE A interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_OVERFLOW  -----------------------------
// SVD Line: 20187

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_OVERFLOW
//    <name> OVERFLOW </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4000830C) \nCOUNTER over flowed from 0xFFFFFFFF back to 0x00000000.\n0 : Reserved - do not use\n1 : OFLOW_INT = Overflow interrupt status bit was set. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.8..8> OVERFLOW
//        <0=> 0: 
//        <1=> 1: OFLOW_INT = Overflow interrupt status bit was set. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREH  -----------------------------
// SVD Line: 20200

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREH
//    <name> COMPAREH </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register H.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.7..7> COMPAREH
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREG  -----------------------------
// SVD Line: 20213

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREG
//    <name> COMPAREG </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register G.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.6..6> COMPAREG
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREF  -----------------------------
// SVD Line: 20226

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREF
//    <name> COMPAREF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register F.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.5..5> COMPAREF
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREE  -----------------------------
// SVD Line: 20239

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREE
//    <name> COMPAREE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register E.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.4..4> COMPAREE
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPARED  -----------------------------
// SVD Line: 20252

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPARED
//    <name> COMPARED </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register D.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.3..3> COMPARED
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREC  -----------------------------
// SVD Line: 20265

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREC
//    <name> COMPAREC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register C.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.2..2> COMPAREC
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREB  -----------------------------
// SVD Line: 20278

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREB
//    <name> COMPAREB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register B.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.1..1> COMPAREB
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: CTIMER_STMINTSET_COMPAREA  -----------------------------
// SVD Line: 20291

//  <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREA
//    <name> COMPAREA </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000830C) \nCOUNTER is greater than or equal to COMPARE register A.\n0 : Reserved - do not use\n1 : COMPARED = COUNTER greater than or equal to COMPARE register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) CTIMER_STMINTSET ) </loc>
//      <o.0..0> COMPAREA
//        <0=> 0: 
//        <1=> 1: COMPARED = COUNTER greater than or equal to COMPARE register. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: CTIMER_STMINTSET  --------------------------------
// SVD Line: 20125

//  <rtree> SFDITEM_REG__CTIMER_STMINTSET
//    <name> STMINTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000830C) STIMER Interrupt registers: Set </i>
//    <loc> ( (unsigned int)((CTIMER_STMINTSET >> 0) & 0xFFFFFFFF), ((CTIMER_STMINTSET = (CTIMER_STMINTSET & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTURED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_CAPTUREA </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_OVERFLOW </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREH </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREG </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREF </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREE </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPARED </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREC </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREB </item>
//    <item> SFDITEM_FIELD__CTIMER_STMINTSET_COMPAREA </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: CTIMER  ------------------------------------
// SVD Line: 6885

//  <view> CTIMER
//    <name> CTIMER </name>
//    <item> SFDITEM_REG__CTIMER_TMR0 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA0 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB0 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL0 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA0 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB0 </item>
//    <item> SFDITEM_REG__CTIMER_AUX0 </item>
//    <item> SFDITEM_REG__CTIMER_TMR1 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA1 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB1 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL1 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA1 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB1 </item>
//    <item> SFDITEM_REG__CTIMER_AUX1 </item>
//    <item> SFDITEM_REG__CTIMER_TMR2 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA2 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB2 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL2 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA2 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB2 </item>
//    <item> SFDITEM_REG__CTIMER_AUX2 </item>
//    <item> SFDITEM_REG__CTIMER_TMR3 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA3 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB3 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL3 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA3 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB3 </item>
//    <item> SFDITEM_REG__CTIMER_AUX3 </item>
//    <item> SFDITEM_REG__CTIMER_TMR4 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA4 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB4 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL4 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA4 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB4 </item>
//    <item> SFDITEM_REG__CTIMER_AUX4 </item>
//    <item> SFDITEM_REG__CTIMER_TMR5 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA5 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB5 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL5 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA5 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB5 </item>
//    <item> SFDITEM_REG__CTIMER_AUX5 </item>
//    <item> SFDITEM_REG__CTIMER_TMR6 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA6 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB6 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL6 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA6 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB6 </item>
//    <item> SFDITEM_REG__CTIMER_AUX6 </item>
//    <item> SFDITEM_REG__CTIMER_TMR7 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRA7 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRB7 </item>
//    <item> SFDITEM_REG__CTIMER_CTRL7 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXA7 </item>
//    <item> SFDITEM_REG__CTIMER_CMPRAUXB7 </item>
//    <item> SFDITEM_REG__CTIMER_AUX7 </item>
//    <item> SFDITEM_REG__CTIMER_GLOBEN </item>
//    <item> SFDITEM_REG__CTIMER_OUTCFG0 </item>
//    <item> SFDITEM_REG__CTIMER_OUTCFG1 </item>
//    <item> SFDITEM_REG__CTIMER_OUTCFG2 </item>
//    <item> SFDITEM_REG__CTIMER_OUTCFG3 </item>
//    <item> SFDITEM_REG__CTIMER_INCFG </item>
//    <item> SFDITEM_REG__CTIMER_STCFG </item>
//    <item> SFDITEM_REG__CTIMER_STTMR </item>
//    <item> SFDITEM_REG__CTIMER_CAPTURECONTROL </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR0 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR1 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR2 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR3 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR4 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR5 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR6 </item>
//    <item> SFDITEM_REG__CTIMER_SCMPR7 </item>
//    <item> SFDITEM_REG__CTIMER_SCAPT0 </item>
//    <item> SFDITEM_REG__CTIMER_SCAPT1 </item>
//    <item> SFDITEM_REG__CTIMER_SCAPT2 </item>
//    <item> SFDITEM_REG__CTIMER_SCAPT3 </item>
//    <item> SFDITEM_REG__CTIMER_SNVR0 </item>
//    <item> SFDITEM_REG__CTIMER_SNVR1 </item>
//    <item> SFDITEM_REG__CTIMER_SNVR2 </item>
//    <item> SFDITEM_REG__CTIMER_SNVR3 </item>
//    <item> SFDITEM_REG__CTIMER_INTEN </item>
//    <item> SFDITEM_REG__CTIMER_INTSTAT </item>
//    <item> SFDITEM_REG__CTIMER_INTCLR </item>
//    <item> SFDITEM_REG__CTIMER_INTSET </item>
//    <item> SFDITEM_REG__CTIMER_STMINTEN </item>
//    <item> SFDITEM_REG__CTIMER_STMINTSTAT </item>
//    <item> SFDITEM_REG__CTIMER_STMINTCLR </item>
//    <item> SFDITEM_REG__CTIMER_STMINTSET </item>
//  </view>
//  


// ---------------------------  Register Item Address: GPIO_PADREGA  ------------------------------
// SVD Line: 20328

unsigned int GPIO_PADREGA __AT (0x40010000);



// ---------------------------  Field Item: GPIO_PADREGA_PAD3PWRUP  -------------------------------
// SVD Line: 20338

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3PWRUP
//    <name> PAD3PWRUP </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40010000) \nPad 3 VDD power switch enable\n0 : DIS = Power switch disabled value.\n1 : EN = Power switch enabled (switched to VDD) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.30..30> PAD3PWRUP
//        <0=> 0: DIS = Power switch disabled value.
//        <1=> 1: EN = Power switch enabled (switched to VDD) value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD3FNCSEL  ------------------------------
// SVD Line: 20356

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3FNCSEL
//    <name> PAD3FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010000) \nPad 3 function select\n0 : UA0RTS = Configure as the UART0 RTS output value.\n1 : SLnCE = Configure as the IOSLAVE SPI nCE signal value.\n2 : NCE3 = IOM/MSPI nCE group 3 value.\n3 : GPIO3 = Configure as GPIO3 value.\n4 : Reserved - do not use\n5 : MSPI7 = MSPI data connection 7 value.\n6 : TRIG1 = Configure as the ADC Trigger 1 signal value.\n7 : I2S_WCLK = Configure as the PDM I2S Word Clock input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.29..27> PAD3FNCSEL
//        <0=> 0: UA0RTS = Configure as the UART0 RTS output value.
//        <1=> 1: SLnCE = Configure as the IOSLAVE SPI nCE signal value.
//        <2=> 2: NCE3 = IOM/MSPI nCE group 3 value.
//        <3=> 3: GPIO3 = Configure as GPIO3 value.
//        <4=> 4: 
//        <5=> 5: MSPI7 = MSPI data connection 7 value.
//        <6=> 6: TRIG1 = Configure as the ADC Trigger 1 signal value.
//        <7=> 7: I2S_WCLK = Configure as the PDM I2S Word Clock input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD3STRNG  -------------------------------
// SVD Line: 20399

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3STRNG
//    <name> PAD3STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010000) \nPad 3 drive strength.\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.26..26> PAD3STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD3INPEN  -------------------------------
// SVD Line: 20417

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3INPEN
//    <name> PAD3INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010000) \nPad 3 input enable.\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.25..25> PAD3INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD3PULL  -------------------------------
// SVD Line: 20435

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3PULL
//    <name> PAD3PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010000) \nPad 3 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.24..24> PAD3PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD2FNCSEL  ------------------------------
// SVD Line: 20453

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2FNCSEL
//    <name> PAD2FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010000) \nPad 2 function select\n0 : Reserved - do not use\n1 : SLMISO = Configure as the IOSLAVE SPI MISO signal value.\n2 : UART0RX = Configure as the UART0 RX input value.\n3 : GPIO2 = Configure as GPIO2 value.\n4 : Reserved - do not use\n5 : MSPI6 = CMSPI data connection 6 value.\n6 : Reserved - do not use\n7 : NCE2 = IOM/MSPI nCE group 2 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.21..19> PAD2FNCSEL
//        <0=> 0: 
//        <1=> 1: SLMISO = Configure as the IOSLAVE SPI MISO signal value.
//        <2=> 2: UART0RX = Configure as the UART0 RX input value.
//        <3=> 3: GPIO2 = Configure as GPIO2 value.
//        <4=> 4: 
//        <5=> 5: MSPI6 = CMSPI data connection 6 value.
//        <6=> 6: 
//        <7=> 7: NCE2 = IOM/MSPI nCE group 2 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD2STRNG  -------------------------------
// SVD Line: 20486

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2STRNG
//    <name> PAD2STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010000) \nPad 2 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.18..18> PAD2STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD2INPEN  -------------------------------
// SVD Line: 20504

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2INPEN
//    <name> PAD2INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010000) \nPad 2 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.17..17> PAD2INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD2PULL  -------------------------------
// SVD Line: 20522

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2PULL
//    <name> PAD2PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010000) \nPad 2 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.16..16> PAD2PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD1RSEL  -------------------------------
// SVD Line: 20540

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1RSEL
//    <name> PAD1RSEL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40010000) \nPad 1 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.15..14> PAD1RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD1FNCSEL  ------------------------------
// SVD Line: 20568

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1FNCSEL
//    <name> PAD1FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010000) \nPad 1 function select\n0 : SLSDAWIR3 = Configure as the IOSLAVE I2C SDA or SPI WIR3 signal value.\n1 : SLMOSI = Configure as the IOSLAVE SPI MOSI signal value.\n2 : UART0TX = Configure as the UART0 TX output signal value.\n3 : GPIO1 = Configure as GPIO1 value.\n4 : Reserved - do not use\n5 : MSPI5 = MSPI data connection 5 value.\n6 : Reserved - do not use\n7 : NCE1 = IOM/MSPI nCE group 1 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.13..11> PAD1FNCSEL
//        <0=> 0: SLSDAWIR3 = Configure as the IOSLAVE I2C SDA or SPI WIR3 signal value.
//        <1=> 1: SLMOSI = Configure as the IOSLAVE SPI MOSI signal value.
//        <2=> 2: UART0TX = Configure as the UART0 TX output signal value.
//        <3=> 3: GPIO1 = Configure as GPIO1 value.
//        <4=> 4: 
//        <5=> 5: MSPI5 = MSPI data connection 5 value.
//        <6=> 6: 
//        <7=> 7: NCE1 = IOM/MSPI nCE group 1 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD1STRNG  -------------------------------
// SVD Line: 20606

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1STRNG
//    <name> PAD1STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010000) \nPad 1 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.10..10> PAD1STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD1INPEN  -------------------------------
// SVD Line: 20624

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1INPEN
//    <name> PAD1INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010000) \nPad 1 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.9..9> PAD1INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD1PULL  -------------------------------
// SVD Line: 20642

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1PULL
//    <name> PAD1PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010000) \nPad 1 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.8..8> PAD1PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD0RSEL  -------------------------------
// SVD Line: 20660

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0RSEL
//    <name> PAD0RSEL </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40010000) \nPad 0 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.7..6> PAD0RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD0FNCSEL  ------------------------------
// SVD Line: 20688

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0FNCSEL
//    <name> PAD0FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010000) \nPad 0 function select\n0 : SLSCL = Configure as the IOSLAVE I2C SCL signal value.\n1 : SLSCK = Configure as the IOSLAVE SPI SCK signal value.\n2 : CLKOUT = Configure as the CLKOUT signal value.\n3 : GPIO0 = Configure as GPIO0 value.\n4 : Reserved - do not use\n5 : MSPI4 = MSPI data connection 4 value.\n6 : Reserved - do not use\n7 : NCE0 = IOM/MSPI nCE group 0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.5..3> PAD0FNCSEL
//        <0=> 0: SLSCL = Configure as the IOSLAVE I2C SCL signal value.
//        <1=> 1: SLSCK = Configure as the IOSLAVE SPI SCK signal value.
//        <2=> 2: CLKOUT = Configure as the CLKOUT signal value.
//        <3=> 3: GPIO0 = Configure as GPIO0 value.
//        <4=> 4: 
//        <5=> 5: MSPI4 = MSPI data connection 4 value.
//        <6=> 6: 
//        <7=> 7: NCE0 = IOM/MSPI nCE group 0 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD0STRNG  -------------------------------
// SVD Line: 20726

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0STRNG
//    <name> PAD0STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010000) \nPad 0 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.2..2> PAD0STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGA_PAD0INPEN  -------------------------------
// SVD Line: 20744

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0INPEN
//    <name> PAD0INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010000) \nPad 0 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.1..1> PAD0INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGA_PAD0PULL  -------------------------------
// SVD Line: 20762

//  <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0PULL
//    <name> PAD0PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010000) \nPad 0 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGA ) </loc>
//      <o.0..0> PAD0PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGA  ----------------------------------
// SVD Line: 20328

//  <rtree> SFDITEM_REG__GPIO_PADREGA
//    <name> PADREGA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010000) Pad Configuration Register A (Pads 0-3) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGA >> 0) & 0xFFFFFFFF), ((GPIO_PADREGA = (GPIO_PADREGA & ~(0x7F3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7F3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3PWRUP </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD3PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD2PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD1PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGA_PAD0PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGB  ------------------------------
// SVD Line: 20782

unsigned int GPIO_PADREGB __AT (0x40010004);



// ---------------------------  Field Item: GPIO_PADREGB_PAD7FNCSEL  ------------------------------
// SVD Line: 20792

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7FNCSEL
//    <name> PAD7FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010004) \nPad 7 function select\n0 : NCE7 = IOM/MSPI nCE group 7 value.\n1 : M0MOSI = Configure as the IOMSTR0 SPI MOSI signal value.\n2 : CLKOUT = Configure as the CLKOUT signal value.\n3 : GPIO7 = Configure as GPIO7 value.\n4 : TRIG0 = Configure as the ADC Trigger 0 signal value.\n5 : UART0TX = Configure as the UART0 TX output signal value.\n6 : Reserved - do not use\n7 : CT19 = CTIMER connection 19 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.29..27> PAD7FNCSEL
//        <0=> 0: NCE7 = IOM/MSPI nCE group 7 value.
//        <1=> 1: M0MOSI = Configure as the IOMSTR0 SPI MOSI signal value.
//        <2=> 2: CLKOUT = Configure as the CLKOUT signal value.
//        <3=> 3: GPIO7 = Configure as GPIO7 value.
//        <4=> 4: TRIG0 = Configure as the ADC Trigger 0 signal value.
//        <5=> 5: UART0TX = Configure as the UART0 TX output signal value.
//        <6=> 6: 
//        <7=> 7: CT19 = CTIMER connection 19 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD7STRNG  -------------------------------
// SVD Line: 20835

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7STRNG
//    <name> PAD7STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010004) \nPad 7 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.26..26> PAD7STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD7INPEN  -------------------------------
// SVD Line: 20853

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7INPEN
//    <name> PAD7INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010004) \nPad 7 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.25..25> PAD7INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD7PULL  -------------------------------
// SVD Line: 20871

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7PULL
//    <name> PAD7PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010004) \nPad 7 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.24..24> PAD7PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD6RSEL  -------------------------------
// SVD Line: 20889

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6RSEL
//    <name> PAD6RSEL </name>
//    <rw> 
//    <i> [Bits 23..22] RW (@ 0x40010004) \nPad 6 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.23..22> PAD6RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD6FNCSEL  ------------------------------
// SVD Line: 20917

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6FNCSEL
//    <name> PAD6FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010004) \nPad 6 function select\n0 : M0SDAWIR3 = Configure as the IOMSTR0 I2C SDA or SPI WIR3 signal value.\n1 : M0MISO = Configure as the IOMSTR0 SPI MISO signal value.\n2 : UA0CTS = Configure as the UART0 CTS input signal value.\n3 : GPIO6 = Configure as GPIO6 value.\n4 : Reserved - do not use\n5 : CT10 = CTIMER connection 10 value.\n6 : Reserved - do not use\n7 : I2S_DAT = Configure as the PDM I2S Data output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.21..19> PAD6FNCSEL
//        <0=> 0: M0SDAWIR3 = Configure as the IOMSTR0 I2C SDA or SPI WIR3 signal value.
//        <1=> 1: M0MISO = Configure as the IOMSTR0 SPI MISO signal value.
//        <2=> 2: UA0CTS = Configure as the UART0 CTS input signal value.
//        <3=> 3: GPIO6 = Configure as GPIO6 value.
//        <4=> 4: 
//        <5=> 5: CT10 = CTIMER connection 10 value.
//        <6=> 6: 
//        <7=> 7: I2S_DAT = Configure as the PDM I2S Data output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD6STRNG  -------------------------------
// SVD Line: 20955

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6STRNG
//    <name> PAD6STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010004) \nPad 6 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.18..18> PAD6STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD6INPEN  -------------------------------
// SVD Line: 20973

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6INPEN
//    <name> PAD6INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010004) \nPad 6 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.17..17> PAD6INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD6PULL  -------------------------------
// SVD Line: 20991

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6PULL
//    <name> PAD6PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010004) \nPad 6 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.16..16> PAD6PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD5RSEL  -------------------------------
// SVD Line: 21009

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5RSEL
//    <name> PAD5RSEL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40010004) \nPad 5 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.15..14> PAD5RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD5FNCSEL  ------------------------------
// SVD Line: 21037

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5FNCSEL
//    <name> PAD5FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010004) \nPad 5 function select\n0 : M0SCL = Configure as the IOMSTR0 I2C SCL signal value.\n1 : M0SCK = Configure as the IOMSTR0 SPI SCK signal value.\n2 : UA0RTS = Configure as the UART0 RTS signal output value.\n3 : GPIO5 = Configure as GPIO5 value.\n4 : Reserved - do not use\n5 : EXTHFA = Configure as the External HFA input clock value.\n6 : Reserved - do not use\n7 : CT8 = CTIMER connection 8 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.13..11> PAD5FNCSEL
//        <0=> 0: M0SCL = Configure as the IOMSTR0 I2C SCL signal value.
//        <1=> 1: M0SCK = Configure as the IOMSTR0 SPI SCK signal value.
//        <2=> 2: UA0RTS = Configure as the UART0 RTS signal output value.
//        <3=> 3: GPIO5 = Configure as GPIO5 value.
//        <4=> 4: 
//        <5=> 5: EXTHFA = Configure as the External HFA input clock value.
//        <6=> 6: 
//        <7=> 7: CT8 = CTIMER connection 8 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD5STRNG  -------------------------------
// SVD Line: 21075

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5STRNG
//    <name> PAD5STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010004) \nPad 5 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.10..10> PAD5STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD5INPEN  -------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5INPEN
//    <name> PAD5INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010004) \nPad 5 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.9..9> PAD5INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD5PULL  -------------------------------
// SVD Line: 21111

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5PULL
//    <name> PAD5PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010004) \nPad 5 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.8..8> PAD5PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD4FNCSEL  ------------------------------
// SVD Line: 21129

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4FNCSEL
//    <name> PAD4FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010004) \nPad 4 function select\n0 : UA0CTS = Configure as the UART0 CTS input signal value.\n1 : SLINT = Configure as the IOSLAVE interrupt out signal value.\n2 : NCE4 = IOM/SPI nCE group 4 value.\n3 : GPIO4 = Configure as GPIO4 value.\n4 : Reserved - do not use\n5 : UART0RX = Configure as the UART0 RX input value.\n6 : CT17 = CTIMER connection 17 value.\n7 : MSPI2 = MSPI data connection 2 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.5..3> PAD4FNCSEL
//        <0=> 0: UA0CTS = Configure as the UART0 CTS input signal value.
//        <1=> 1: SLINT = Configure as the IOSLAVE interrupt out signal value.
//        <2=> 2: NCE4 = IOM/SPI nCE group 4 value.
//        <3=> 3: GPIO4 = Configure as GPIO4 value.
//        <4=> 4: 
//        <5=> 5: UART0RX = Configure as the UART0 RX input value.
//        <6=> 6: CT17 = CTIMER connection 17 value.
//        <7=> 7: MSPI2 = MSPI data connection 2 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD4STRNG  -------------------------------
// SVD Line: 21172

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4STRNG
//    <name> PAD4STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010004) \nPad 4 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.2..2> PAD4STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGB_PAD4INPEN  -------------------------------
// SVD Line: 21190

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4INPEN
//    <name> PAD4INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010004) \nPad 4 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.1..1> PAD4INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGB_PAD4PULL  -------------------------------
// SVD Line: 21208

//  <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4PULL
//    <name> PAD4PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010004) \nPad 4 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGB ) </loc>
//      <o.0..0> PAD4PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGB  ----------------------------------
// SVD Line: 20782

//  <rtree> SFDITEM_REG__GPIO_PADREGB
//    <name> PADREGB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010004) Pad Configuration Register B (Pads 4-7) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGB >> 0) & 0xFFFFFFFF), ((GPIO_PADREGB = (GPIO_PADREGB & ~(0x3FFFFF3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFFF3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD7PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD6PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD5PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGB_PAD4PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGC  ------------------------------
// SVD Line: 21228

unsigned int GPIO_PADREGC __AT (0x40010008);



// --------------------------  Field Item: GPIO_PADREGC_PAD11FNCSEL  ------------------------------
// SVD Line: 21238

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11FNCSEL
//    <name> PAD11FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010008) \nPad 11 function select\n0 : ADCSE2 = Configure as the analog input for ADC single ended input 2 value.\n1 : NCE11 = IOM/MSPI nCE group 11 value.\n2 : CT31 = CTIMER connection 31 value.\n3 : GPIO11 = Configure as GPIO11 value.\n4 : SLINT = Configure as the IOSLAVE interrupt out signal value.\n5 : UA1CTS = Configure as the UART1 CTS input signal value.\n6 : UART0RX = Configure as the UART0 RX input signal value.\n7 : PDM_DATA = Configure as the PDM Data input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.29..27> PAD11FNCSEL
//        <0=> 0: ADCSE2 = Configure as the analog input for ADC single ended input 2 value.
//        <1=> 1: NCE11 = IOM/MSPI nCE group 11 value.
//        <2=> 2: CT31 = CTIMER connection 31 value.
//        <3=> 3: GPIO11 = Configure as GPIO11 value.
//        <4=> 4: SLINT = Configure as the IOSLAVE interrupt out signal value.
//        <5=> 5: UA1CTS = Configure as the UART1 CTS input signal value.
//        <6=> 6: UART0RX = Configure as the UART0 RX input signal value.
//        <7=> 7: PDM_DATA = Configure as the PDM Data input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD11STRNG  ------------------------------
// SVD Line: 21286

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11STRNG
//    <name> PAD11STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010008) \nPad 11 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.26..26> PAD11STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD11INPEN  ------------------------------
// SVD Line: 21304

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11INPEN
//    <name> PAD11INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010008) \nPad 11 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.25..25> PAD11INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD11PULL  -------------------------------
// SVD Line: 21322

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11PULL
//    <name> PAD11PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010008) \nPad 11 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.24..24> PAD11PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGC_PAD10FNCSEL  ------------------------------
// SVD Line: 21340

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10FNCSEL
//    <name> PAD10FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010008) \nPad 10 function select\n0 : Reserved - do not use\n1 : M1MOSI = Configure as the IOMSTR1 SPI MOSI signal value.\n2 : NCE10 = IOM/MSPI nCE group 10 value.\n3 : GPIO10 = Configure as GPIO10 value.\n4 : PDMCLK = PDM serial clock out value.\n5 : UA1RTS = Configure as the UART1 RTS output signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.21..19> PAD10FNCSEL
//        <0=> 0: 
//        <1=> 1: M1MOSI = Configure as the IOMSTR1 SPI MOSI signal value.
//        <2=> 2: NCE10 = IOM/MSPI nCE group 10 value.
//        <3=> 3: GPIO10 = Configure as GPIO10 value.
//        <4=> 4: PDMCLK = PDM serial clock out value.
//        <5=> 5: UA1RTS = Configure as the UART1 RTS output signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD10STRNG  ------------------------------
// SVD Line: 21373

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10STRNG
//    <name> PAD10STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010008) \nPad 10 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.18..18> PAD10STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD10INPEN  ------------------------------
// SVD Line: 21391

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10INPEN
//    <name> PAD10INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010008) \nPad 10 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.17..17> PAD10INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD10PULL  -------------------------------
// SVD Line: 21409

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10PULL
//    <name> PAD10PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010008) \nPad 10 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.16..16> PAD10PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGC_PAD9RSEL  -------------------------------
// SVD Line: 21427

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9RSEL
//    <name> PAD9RSEL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40010008) \nPad 9 pullup resistor selection\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.15..14> PAD9RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD9FNCSEL  ------------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9FNCSEL
//    <name> PAD9FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010008) \nPad 9 function select\n0 : M1SDAWIR3 = Configure as the IOMSTR1 I2C SDA or SPI WIR3 signal value.\n1 : M1MISO = Configure as the IOMSTR1 SPI MISO signal value.\n2 : NCE9 = IOM/MSPI nCE group 9 value.\n3 : GPIO9 = Configure as GPIO9 value.\n4 : SCCIO = SCARD data I/O connection value.\n5 : Reserved - do not use\n6 : UART1RX = Configure as UART1 RX input signal value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.13..11> PAD9FNCSEL
//        <0=> 0: M1SDAWIR3 = Configure as the IOMSTR1 I2C SDA or SPI WIR3 signal value.
//        <1=> 1: M1MISO = Configure as the IOMSTR1 SPI MISO signal value.
//        <2=> 2: NCE9 = IOM/MSPI nCE group 9 value.
//        <3=> 3: GPIO9 = Configure as GPIO9 value.
//        <4=> 4: SCCIO = SCARD data I/O connection value.
//        <5=> 5: 
//        <6=> 6: UART1RX = Configure as UART1 RX input signal value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD9STRNG  -------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9STRNG
//    <name> PAD9STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010008) \nPad 9 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.10..10> PAD9STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD9INPEN  -------------------------------
// SVD Line: 21511

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9INPEN
//    <name> PAD9INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010008) \nPad 9 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.9..9> PAD9INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGC_PAD9PULL  -------------------------------
// SVD Line: 21529

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9PULL
//    <name> PAD9PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010008) \nPad 9 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.8..8> PAD9PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGC_PAD8RSEL  -------------------------------
// SVD Line: 21547

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8RSEL
//    <name> PAD8RSEL </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40010008) \nPad 8 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.7..6> PAD8RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD8FNCSEL  ------------------------------
// SVD Line: 21575

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8FNCSEL
//    <name> PAD8FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010008) \nPad 8 function select\n0 : M1SCL = Configure as the IOMSTR1 I2C SCL signal value.\n1 : M1SCK = Configure as the IOMSTR1 SPI SCK signal value.\n2 : NCE8 = IOM/MSPI nCE group 8 value.\n3 : GPIO8 = Configure as GPIO8 value.\n4 : SCCLK = SCARD serial clock output value.\n5 : Reserved - do not use\n6 : UART1TX = Configure as the UART1 TX output signal value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.5..3> PAD8FNCSEL
//        <0=> 0: M1SCL = Configure as the IOMSTR1 I2C SCL signal value.
//        <1=> 1: M1SCK = Configure as the IOMSTR1 SPI SCK signal value.
//        <2=> 2: NCE8 = IOM/MSPI nCE group 8 value.
//        <3=> 3: GPIO8 = Configure as GPIO8 value.
//        <4=> 4: SCCLK = SCARD serial clock output value.
//        <5=> 5: 
//        <6=> 6: UART1TX = Configure as the UART1 TX output signal value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD8STRNG  -------------------------------
// SVD Line: 21613

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8STRNG
//    <name> PAD8STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010008) \nPad 8 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.2..2> PAD8STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGC_PAD8INPEN  -------------------------------
// SVD Line: 21631

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8INPEN
//    <name> PAD8INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010008) \nPad 8 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.1..1> PAD8INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_PADREGC_PAD8PULL  -------------------------------
// SVD Line: 21649

//  <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8PULL
//    <name> PAD8PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010008) \nPad 8 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGC ) </loc>
//      <o.0..0> PAD8PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGC  ----------------------------------
// SVD Line: 21228

//  <rtree> SFDITEM_REG__GPIO_PADREGC
//    <name> PADREGC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010008) Pad Configuration Register C (Pads 8-11) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGC >> 0) & 0xFFFFFFFF), ((GPIO_PADREGC = (GPIO_PADREGC & ~(0x3F3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD11PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD10PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD9PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGC_PAD8PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGD  ------------------------------
// SVD Line: 21669

unsigned int GPIO_PADREGD __AT (0x4001000C);



// --------------------------  Field Item: GPIO_PADREGD_PAD15FNCSEL  ------------------------------
// SVD Line: 21679

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15FNCSEL
//    <name> PAD15FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x4001000C) \nPad 15 function select\n0 : ADCD1N = Configure as the analog ADC differential pair 1 N input signal value.\n1 : NCE15 = IOM/MSPI nCE group 15 value.\n2 : UART1RX = Configure as the UART1 RX signal value.\n3 : GPIO15 = Configure as GPIO15 value.\n4 : PDMDATA = PDM serial data input value.\n5 : EXTXT = Configure as the external XTAL oscillator input value.\n6 : SWDIO = Configure as an alternate port for the SWDIO I/O signal value.\n7 : SWO = Configure as an SWO (Serial Wire Trace output) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.29..27> PAD15FNCSEL
//        <0=> 0: ADCD1N = Configure as the analog ADC differential pair 1 N input signal value.
//        <1=> 1: NCE15 = IOM/MSPI nCE group 15 value.
//        <2=> 2: UART1RX = Configure as the UART1 RX signal value.
//        <3=> 3: GPIO15 = Configure as GPIO15 value.
//        <4=> 4: PDMDATA = PDM serial data input value.
//        <5=> 5: EXTXT = Configure as the external XTAL oscillator input value.
//        <6=> 6: SWDIO = Configure as an alternate port for the SWDIO I/O signal value.
//        <7=> 7: SWO = Configure as an SWO (Serial Wire Trace output) value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD15STRNG  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15STRNG
//    <name> PAD15STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4001000C) \nPad 15 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.26..26> PAD15STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD15INPEN  ------------------------------
// SVD Line: 21745

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15INPEN
//    <name> PAD15INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4001000C) \nPad 15 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.25..25> PAD15INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD15PULL  -------------------------------
// SVD Line: 21763

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15PULL
//    <name> PAD15PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001000C) \nPad 15 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.24..24> PAD15PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGD_PAD14FNCSEL  ------------------------------
// SVD Line: 21781

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14FNCSEL
//    <name> PAD14FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x4001000C) \nPad 14 function select\n0 : ADCD1P = Configure as the analog ADC differential pair 1 P input signal value.\n1 : NCE14 = IOM/MSPI nCE group 14 value.\n2 : UART1TX = Configure as the UART1 TX output signal value.\n3 : GPIO14 = Configure as GPIO14 value.\n4 : PDMCLK = PDM serial clock output value.\n5 : EXTHFS = Configure as the External HFRC oscillator input select value.\n6 : SWDCK = Configure as the alternate input for the SWDCK input signal value.\n7 : 32kHzXT = Configure as the 32kHz crystal output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.21..19> PAD14FNCSEL
//        <0=> 0: ADCD1P = Configure as the analog ADC differential pair 1 P input signal value.
//        <1=> 1: NCE14 = IOM/MSPI nCE group 14 value.
//        <2=> 2: UART1TX = Configure as the UART1 TX output signal value.
//        <3=> 3: GPIO14 = Configure as GPIO14 value.
//        <4=> 4: PDMCLK = PDM serial clock output value.
//        <5=> 5: EXTHFS = Configure as the External HFRC oscillator input select value.
//        <6=> 6: SWDCK = Configure as the alternate input for the SWDCK input signal value.
//        <7=> 7: 32kHzXT = Configure as the 32kHz crystal output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD14STRNG  ------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14STRNG
//    <name> PAD14STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4001000C) \nPad 14 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.18..18> PAD14STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD14INPEN  ------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14INPEN
//    <name> PAD14INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4001000C) \nPad 14 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.17..17> PAD14INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD14PULL  -------------------------------
// SVD Line: 21865

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14PULL
//    <name> PAD14PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001000C) \nPad 14 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.16..16> PAD14PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGD_PAD13FNCSEL  ------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13FNCSEL
//    <name> PAD13FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x4001000C) \nPad 13 function select\n0 : ADCD0PSE8 = Configure as the ADC Differential pair 0 P, or Single Ended input 8 analog input signal. Determination of the D0P vs SE8 usage is done when the particular channel is selected within the ADC module value.\n1 : NCE13 = IOM/MSPI nCE group 13 value.\n2 : CT2 = CTIMER connection 2 value.\n3 : GPIO13 = Configure as GPIO13 value.\n4 : I2SBCLK = I2C interface bit clock value.\n5 : EXTHFB = Configure as the external HFRC oscillator input value.\n6 : UA0RTS = Configure as the UART0 RTS signal output value.\n7 : UART1RX = Configure as the UART1 RX input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.13..11> PAD13FNCSEL
//        <0=> 0: ADCD0PSE8 = Configure as the ADC Differential pair 0 P, or Single Ended input 8 analog input signal. Determination of the D0P vs SE8 usage is done when the particular channel is selected within the ADC module value.
//        <1=> 1: NCE13 = IOM/MSPI nCE group 13 value.
//        <2=> 2: CT2 = CTIMER connection 2 value.
//        <3=> 3: GPIO13 = Configure as GPIO13 value.
//        <4=> 4: I2SBCLK = I2C interface bit clock value.
//        <5=> 5: EXTHFB = Configure as the external HFRC oscillator input value.
//        <6=> 6: UA0RTS = Configure as the UART0 RTS signal output value.
//        <7=> 7: UART1RX = Configure as the UART1 RX input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD13STRNG  ------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13STRNG
//    <name> PAD13STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001000C) \nPad 13 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.10..10> PAD13STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD13INPEN  ------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13INPEN
//    <name> PAD13INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001000C) \nPad 13 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.9..9> PAD13INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD13PULL  -------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13PULL
//    <name> PAD13PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001000C) \nPad 13 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.8..8> PAD13PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGD_PAD12FNCSEL  ------------------------------
// SVD Line: 21985

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12FNCSEL
//    <name> PAD12FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4001000C) \nPad 12 function select\n0 : ADCD0NSE9 = Configure as the ADC Differential pair 0 N, or Single Ended input 9 analog input signal. Determination of the D0N vs SE9 usage is done when the particular channel is selected within the ADC module value.\n1 : NCE12 = IOM/MSPI nCE group 12 value.\n2 : CT0 = CTIMER connection 0 value.\n3 : GPIO12 = Configure as GPIO12 value.\n4 : SLnCE = Configure as the IOSLAVE SPI nCE signal value.\n5 : PDMCLK = PDM serial clock output value.\n6 : UA0CTS = Configure as the UART0 CTS input signal value.\n7 : UART1TX = Configure as the UART1 TX output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.5..3> PAD12FNCSEL
//        <0=> 0: ADCD0NSE9 = Configure as the ADC Differential pair 0 N, or Single Ended input 9 analog input signal. Determination of the D0N vs SE9 usage is done when the particular channel is selected within the ADC module value.
//        <1=> 1: NCE12 = IOM/MSPI nCE group 12 value.
//        <2=> 2: CT0 = CTIMER connection 0 value.
//        <3=> 3: GPIO12 = Configure as GPIO12 value.
//        <4=> 4: SLnCE = Configure as the IOSLAVE SPI nCE signal value.
//        <5=> 5: PDMCLK = PDM serial clock output value.
//        <6=> 6: UA0CTS = Configure as the UART0 CTS input signal value.
//        <7=> 7: UART1TX = Configure as the UART1 TX output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD12STRNG  ------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12STRNG
//    <name> PAD12STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001000C) \nPad 12 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.2..2> PAD12STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD12INPEN  ------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12INPEN
//    <name> PAD12INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001000C) \nPad 12 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.1..1> PAD12INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGD_PAD12PULL  -------------------------------
// SVD Line: 22069

//  <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12PULL
//    <name> PAD12PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001000C) \nPad 12 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGD ) </loc>
//      <o.0..0> PAD12PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGD  ----------------------------------
// SVD Line: 21669

//  <rtree> SFDITEM_REG__GPIO_PADREGD
//    <name> PADREGD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001000C) Pad Configuration Register D (Pads 12-15) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGD >> 0) & 0xFFFFFFFF), ((GPIO_PADREGD = (GPIO_PADREGD & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD15PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD14PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD13PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGD_PAD12PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGE  ------------------------------
// SVD Line: 22089

unsigned int GPIO_PADREGE __AT (0x40010010);



// --------------------------  Field Item: GPIO_PADREGE_PAD19FNCSEL  ------------------------------
// SVD Line: 22099

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19FNCSEL
//    <name> PAD19FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010010) \nPad 19 function select\n0 : CMPRF0 = Configure as the analog comparator reference 0 signal value.\n1 : NCE19 = IOM/MSPI nCE group 19 value.\n2 : CT6 = CTIMER conenction 6 value.\n3 : GPIO19 = Configure as GPIO19 value.\n4 : SCCLK = SCARD serial clock value.\n5 : ANATEST1 = Configure as the ANATEST1 I/O signal value.\n6 : UART1RX = Configure as the UART1 RX input signal value.\n7 : I2SBCLK = Configure as the PDM I2S bit clock input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.29..27> PAD19FNCSEL
//        <0=> 0: CMPRF0 = Configure as the analog comparator reference 0 signal value.
//        <1=> 1: NCE19 = IOM/MSPI nCE group 19 value.
//        <2=> 2: CT6 = CTIMER conenction 6 value.
//        <3=> 3: GPIO19 = Configure as GPIO19 value.
//        <4=> 4: SCCLK = SCARD serial clock value.
//        <5=> 5: ANATEST1 = Configure as the ANATEST1 I/O signal value.
//        <6=> 6: UART1RX = Configure as the UART1 RX input signal value.
//        <7=> 7: I2SBCLK = Configure as the PDM I2S bit clock input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD19STRNG  ------------------------------
// SVD Line: 22147

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19STRNG
//    <name> PAD19STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010010) \nPad 19 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.26..26> PAD19STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD19INPEN  ------------------------------
// SVD Line: 22165

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19INPEN
//    <name> PAD19INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010010) \nPad 19 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.25..25> PAD19INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD19PULL  -------------------------------
// SVD Line: 22183

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19PULL
//    <name> PAD19PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010010) \nPad 19 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.24..24> PAD19PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGE_PAD18FNCSEL  ------------------------------
// SVD Line: 22201

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18FNCSEL
//    <name> PAD18FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010010) \nPad 18 function select\n0 : CMPIN1 = Configure as the analog comparator input 1 signal value.\n1 : NCE18 = IOM/MSPI nCE group 18 value.\n2 : CT4 = CTIMER connection 4 value.\n3 : GPIO18 = Configure as GPIO18 value.\n4 : UA0RTS = Configure as UART0 RTS output signal value.\n5 : ANATEST2 = Configure as ANATEST2 I/O signal value.\n6 : UART1TX = Configure as UART1 TX output signal value.\n7 : SCCIO = SCARD data input/output connectin value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.21..19> PAD18FNCSEL
//        <0=> 0: CMPIN1 = Configure as the analog comparator input 1 signal value.
//        <1=> 1: NCE18 = IOM/MSPI nCE group 18 value.
//        <2=> 2: CT4 = CTIMER connection 4 value.
//        <3=> 3: GPIO18 = Configure as GPIO18 value.
//        <4=> 4: UA0RTS = Configure as UART0 RTS output signal value.
//        <5=> 5: ANATEST2 = Configure as ANATEST2 I/O signal value.
//        <6=> 6: UART1TX = Configure as UART1 TX output signal value.
//        <7=> 7: SCCIO = SCARD data input/output connectin value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD18STRNG  ------------------------------
// SVD Line: 22249

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18STRNG
//    <name> PAD18STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010010) \nPad 18 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.18..18> PAD18STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD18INPEN  ------------------------------
// SVD Line: 22267

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18INPEN
//    <name> PAD18INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010010) \nPad 18 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.17..17> PAD18INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD18PULL  -------------------------------
// SVD Line: 22285

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18PULL
//    <name> PAD18PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010010) \nPad 18 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.16..16> PAD18PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGE_PAD17FNCSEL  ------------------------------
// SVD Line: 22303

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17FNCSEL
//    <name> PAD17FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010010) \nPad 17 function select\n0 : CMPRF1 = Configure as the analog comparator reference signal 1 input signal value.\n1 : NCE17 = IOM/MSPI nCE group 17 value.\n2 : TRIG1 = Configure as the ADC Trigger 1 signal value.\n3 : GPIO17 = Configure as GPIO17 value.\n4 : SCCCLK = SCARD serial clock output value.\n5 : Reserved - do not use\n6 : UART0RX = Configure as UART0 RX input signal value.\n7 : UA1CTS = Configure as UART1 CTS input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.13..11> PAD17FNCSEL
//        <0=> 0: CMPRF1 = Configure as the analog comparator reference signal 1 input signal value.
//        <1=> 1: NCE17 = IOM/MSPI nCE group 17 value.
//        <2=> 2: TRIG1 = Configure as the ADC Trigger 1 signal value.
//        <3=> 3: GPIO17 = Configure as GPIO17 value.
//        <4=> 4: SCCCLK = SCARD serial clock output value.
//        <5=> 5: 
//        <6=> 6: UART0RX = Configure as UART0 RX input signal value.
//        <7=> 7: UA1CTS = Configure as UART1 CTS input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD17STRNG  ------------------------------
// SVD Line: 22346

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17STRNG
//    <name> PAD17STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010010) \nPad 17 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.10..10> PAD17STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD17INPEN  ------------------------------
// SVD Line: 22364

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17INPEN
//    <name> PAD17INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010010) \nPad 17 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.9..9> PAD17INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD17PULL  -------------------------------
// SVD Line: 22382

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17PULL
//    <name> PAD17PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010010) \nPad 17 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.8..8> PAD17PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGE_PAD16FNCSEL  ------------------------------
// SVD Line: 22400

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16FNCSEL
//    <name> PAD16FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010010) \nPad 16 function select\n0 : ADCSE0 = Configure as the analog ADC single ended port 0 input signal value.\n1 : NCE16 = IOM/MSPI nCE group 16 value.\n2 : TRIG0 = Configure as the ADC Trigger 0 signal value.\n3 : GPIO16 = Configure as GPIO16 value.\n4 : SCCRST = SCARD reset output value.\n5 : CMPIN0 = Configure as comparator input 0 signal value.\n6 : UART0TX = Configure as UART0 TX output signal value.\n7 : UA1RTS = Configure as UART1 RTS output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.5..3> PAD16FNCSEL
//        <0=> 0: ADCSE0 = Configure as the analog ADC single ended port 0 input signal value.
//        <1=> 1: NCE16 = IOM/MSPI nCE group 16 value.
//        <2=> 2: TRIG0 = Configure as the ADC Trigger 0 signal value.
//        <3=> 3: GPIO16 = Configure as GPIO16 value.
//        <4=> 4: SCCRST = SCARD reset output value.
//        <5=> 5: CMPIN0 = Configure as comparator input 0 signal value.
//        <6=> 6: UART0TX = Configure as UART0 TX output signal value.
//        <7=> 7: UA1RTS = Configure as UART1 RTS output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD16STRNG  ------------------------------
// SVD Line: 22448

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16STRNG
//    <name> PAD16STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010010) \nPad 16 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.2..2> PAD16STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD16INPEN  ------------------------------
// SVD Line: 22466

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16INPEN
//    <name> PAD16INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010010) \nPad 16 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.1..1> PAD16INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGE_PAD16PULL  -------------------------------
// SVD Line: 22484

//  <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16PULL
//    <name> PAD16PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010010) \nPad 16 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGE ) </loc>
//      <o.0..0> PAD16PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGE  ----------------------------------
// SVD Line: 22089

//  <rtree> SFDITEM_REG__GPIO_PADREGE
//    <name> PADREGE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010010) Pad Configuration Register E (Pads 16-19) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGE >> 0) & 0xFFFFFFFF), ((GPIO_PADREGE = (GPIO_PADREGE & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD19PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD18PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD17PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGE_PAD16PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGF  ------------------------------
// SVD Line: 22504

unsigned int GPIO_PADREGF __AT (0x40010014);



// --------------------------  Field Item: GPIO_PADREGF_PAD23FNCSEL  ------------------------------
// SVD Line: 22514

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23FNCSEL
//    <name> PAD23FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010014) \nPad 23 function select\n0 : UART0RX = Configure as the UART0 RX signal value.\n1 : NCE23 = IOM/MSPI nCE group 23 value.\n2 : CT14 = CTIMER connection 14 value.\n3 : GPIO23 = Configure as GPIO23 value.\n4 : I2SWCLK = I2S word clock input value.\n5 : CMPOUT = Configure as voltage comparitor output value.\n6 : MSPI3 = MSPI data connection 3 value.\n7 : EXTXT = External XTAL osacillatgor input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.29..27> PAD23FNCSEL
//        <0=> 0: UART0RX = Configure as the UART0 RX signal value.
//        <1=> 1: NCE23 = IOM/MSPI nCE group 23 value.
//        <2=> 2: CT14 = CTIMER connection 14 value.
//        <3=> 3: GPIO23 = Configure as GPIO23 value.
//        <4=> 4: I2SWCLK = I2S word clock input value.
//        <5=> 5: CMPOUT = Configure as voltage comparitor output value.
//        <6=> 6: MSPI3 = MSPI data connection 3 value.
//        <7=> 7: EXTXT = External XTAL osacillatgor input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD23STRNG  ------------------------------
// SVD Line: 22562

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23STRNG
//    <name> PAD23STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010014) \nPad 23 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.26..26> PAD23STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD23INPEN  ------------------------------
// SVD Line: 22580

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23INPEN
//    <name> PAD23INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010014) \nPad 23 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.25..25> PAD23INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD23PULL  -------------------------------
// SVD Line: 22598

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23PULL
//    <name> PAD23PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010014) \nPad 23 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.24..24> PAD23PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGF_PAD22FNCSEL  ------------------------------
// SVD Line: 22616

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22FNCSEL
//    <name> PAD22FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010014) \nPad 22 function select\n0 : UART0TX = Configure as the UART0 TX signal value.\n1 : NCE22 = IOM/MSPI nCE group 22 value.\n2 : CT12 = CTIMER connection 12 value.\n3 : GPIO22 = Configure as GPIO22 value.\n4 : PDM_CLK = Configure as the PDM CLK output value.\n5 : EXTLF = External LFRC input value.\n6 : MSPI0 = MSPI data connection 0 value.\n7 : SWO = Configure as the serial trace data output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.21..19> PAD22FNCSEL
//        <0=> 0: UART0TX = Configure as the UART0 TX signal value.
//        <1=> 1: NCE22 = IOM/MSPI nCE group 22 value.
//        <2=> 2: CT12 = CTIMER connection 12 value.
//        <3=> 3: GPIO22 = Configure as GPIO22 value.
//        <4=> 4: PDM_CLK = Configure as the PDM CLK output value.
//        <5=> 5: EXTLF = External LFRC input value.
//        <6=> 6: MSPI0 = MSPI data connection 0 value.
//        <7=> 7: SWO = Configure as the serial trace data output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD22STRNG  ------------------------------
// SVD Line: 22664

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22STRNG
//    <name> PAD22STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010014) \nPad 22 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.18..18> PAD22STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD22INPEN  ------------------------------
// SVD Line: 22682

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22INPEN
//    <name> PAD22INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010014) \nPad 22 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.17..17> PAD22INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD22PULL  -------------------------------
// SVD Line: 22700

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22PULL
//    <name> PAD22PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010014) \nPad 22 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.16..16> PAD22PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGF_PAD21FNCSEL  ------------------------------
// SVD Line: 22718

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21FNCSEL
//    <name> PAD21FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010014) \nPad 21 function select\n0 : SWDIO = Configure as the serial wire debug data signal value.\n1 : NCE21 = IOM/MSPI nCE group 21 value.\n2 : Reserved - do not use\n3 : GPIO21 = Configure as GPIO21 value.\n4 : UART0RX = Configure as UART0 RX input signal value.\n5 : UART1RX = Configure as UART1 RX input signal value.\n6 : I2SBCLK = I2S byte clock input value.\n7 : UA1CTS = Configure as UART1 CTS input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.13..11> PAD21FNCSEL
//        <0=> 0: SWDIO = Configure as the serial wire debug data signal value.
//        <1=> 1: NCE21 = IOM/MSPI nCE group 21 value.
//        <2=> 2: 
//        <3=> 3: GPIO21 = Configure as GPIO21 value.
//        <4=> 4: UART0RX = Configure as UART0 RX input signal value.
//        <5=> 5: UART1RX = Configure as UART1 RX input signal value.
//        <6=> 6: I2SBCLK = I2S byte clock input value.
//        <7=> 7: UA1CTS = Configure as UART1 CTS input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD21STRNG  ------------------------------
// SVD Line: 22761

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21STRNG
//    <name> PAD21STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010014) \nPad 21 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.10..10> PAD21STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD21INPEN  ------------------------------
// SVD Line: 22779

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21INPEN
//    <name> PAD21INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010014) \nPad 21 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.9..9> PAD21INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD21PULL  -------------------------------
// SVD Line: 22797

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21PULL
//    <name> PAD21PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010014) \nPad 21 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.8..8> PAD21PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGF_PAD20FNCSEL  ------------------------------
// SVD Line: 22815

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20FNCSEL
//    <name> PAD20FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010014) \nPad 20 function select\n0 : SWDCK = Configure as the serial wire debug clock signal value.\n1 : NCE20 = IOM/MSPI nCE group 20 value.\n2 : Reserved - do not use\n3 : GPIO20 = Configure as GPIO20 value.\n4 : UART0TX = Configure as UART0 TX output signal value.\n5 : UART1TX = Configure as UART1 TX output signal value.\n6 : I2SBCLK = I2S byte clock input value.\n7 : UA1RTS = Configure as UART1 RTS output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.5..3> PAD20FNCSEL
//        <0=> 0: SWDCK = Configure as the serial wire debug clock signal value.
//        <1=> 1: NCE20 = IOM/MSPI nCE group 20 value.
//        <2=> 2: 
//        <3=> 3: GPIO20 = Configure as GPIO20 value.
//        <4=> 4: UART0TX = Configure as UART0 TX output signal value.
//        <5=> 5: UART1TX = Configure as UART1 TX output signal value.
//        <6=> 6: I2SBCLK = I2S byte clock input value.
//        <7=> 7: UA1RTS = Configure as UART1 RTS output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD20STRNG  ------------------------------
// SVD Line: 22858

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20STRNG
//    <name> PAD20STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010014) \nPad 20 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.2..2> PAD20STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD20INPEN  ------------------------------
// SVD Line: 22876

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20INPEN
//    <name> PAD20INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010014) \nPad 20 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.1..1> PAD20INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGF_PAD20PULL  -------------------------------
// SVD Line: 22894

//  <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20PULL
//    <name> PAD20PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010014) \nPad 20 pulldown enable\n0 : DIS = Pulldown disabled value.\n1 : EN = Pulldown enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGF ) </loc>
//      <o.0..0> PAD20PULL
//        <0=> 0: DIS = Pulldown disabled value.
//        <1=> 1: EN = Pulldown enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGF  ----------------------------------
// SVD Line: 22504

//  <rtree> SFDITEM_REG__GPIO_PADREGF
//    <name> PADREGF </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010014) Pad Configuration Register F (Pads 20-23) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGF >> 0) & 0xFFFFFFFF), ((GPIO_PADREGF = (GPIO_PADREGF & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD23PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD22PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD21PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGF_PAD20PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGG  ------------------------------
// SVD Line: 22914

unsigned int GPIO_PADREGG __AT (0x40010018);



// ---------------------------  Field Item: GPIO_PADREGG_PAD27RSEL  -------------------------------
// SVD Line: 22924

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27RSEL
//    <name> PAD27RSEL </name>
//    <rw> 
//    <i> [Bits 31..30] RW (@ 0x40010018) \nPad 27 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.31..30> PAD27RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGG_PAD27FNCSEL  ------------------------------
// SVD Line: 22952

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27FNCSEL
//    <name> PAD27FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010018) \nPad 27 function select\n0 : UART0RX = Configure as UART0 RX input signal value.\n1 : NCE27 = IOM/MSPI nCE group 27 value.\n2 : CT5 = CTIMER connection 5 value.\n3 : GPIO27 = Configure as GPIO27 value.\n4 : M2SCL = Configure as I2C clock I/O signal from IOMSTR2 value.\n5 : M2SCK = Configure as SPI clock output signal from IOMSTR2 value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.29..27> PAD27FNCSEL
//        <0=> 0: UART0RX = Configure as UART0 RX input signal value.
//        <1=> 1: NCE27 = IOM/MSPI nCE group 27 value.
//        <2=> 2: CT5 = CTIMER connection 5 value.
//        <3=> 3: GPIO27 = Configure as GPIO27 value.
//        <4=> 4: M2SCL = Configure as I2C clock I/O signal from IOMSTR2 value.
//        <5=> 5: M2SCK = Configure as SPI clock output signal from IOMSTR2 value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD27STRNG  ------------------------------
// SVD Line: 22990

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27STRNG
//    <name> PAD27STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010018) \nPad 27 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.26..26> PAD27STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD27INPEN  ------------------------------
// SVD Line: 23008

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27INPEN
//    <name> PAD27INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010018) \nPad 27 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.25..25> PAD27INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD27PULL  -------------------------------
// SVD Line: 23026

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27PULL
//    <name> PAD27PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010018) \nPad 27 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.24..24> PAD27PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGG_PAD26FNCSEL  ------------------------------
// SVD Line: 23044

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26FNCSEL
//    <name> PAD26FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010018) \nPad 26 function select\n0 : EXTHF = Configure as the external HFRC oscillator input value.\n1 : NCE26 = IOM/MSPI nCE group 26 value.\n2 : CT3 = CTIMER connection 3 value.\n3 : GPIO26 = Configure as GPIO26 value.\n4 : SCCRST = SCARD reset output value.\n5 : MSPI1 = MSPI data connection 1 value.\n6 : UART0TX = Configure as UART0 TX output signal value.\n7 : UA1CTS = Configure as UART1 CTS input signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.21..19> PAD26FNCSEL
//        <0=> 0: EXTHF = Configure as the external HFRC oscillator input value.
//        <1=> 1: NCE26 = IOM/MSPI nCE group 26 value.
//        <2=> 2: CT3 = CTIMER connection 3 value.
//        <3=> 3: GPIO26 = Configure as GPIO26 value.
//        <4=> 4: SCCRST = SCARD reset output value.
//        <5=> 5: MSPI1 = MSPI data connection 1 value.
//        <6=> 6: UART0TX = Configure as UART0 TX output signal value.
//        <7=> 7: UA1CTS = Configure as UART1 CTS input signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD26STRNG  ------------------------------
// SVD Line: 23092

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26STRNG
//    <name> PAD26STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010018) \nPad 26 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.18..18> PAD26STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD26INPEN  ------------------------------
// SVD Line: 23110

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26INPEN
//    <name> PAD26INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010018) \nPad 26 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.17..17> PAD26INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD26PULL  -------------------------------
// SVD Line: 23128

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26PULL
//    <name> PAD26PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010018) \nPad 26 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.16..16> PAD26PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD25RSEL  -------------------------------
// SVD Line: 23146

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25RSEL
//    <name> PAD25RSEL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40010018) \nPad 25 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.15..14> PAD25RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGG_PAD25FNCSEL  ------------------------------
// SVD Line: 23174

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25FNCSEL
//    <name> PAD25FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010018) \nPad 25 function select\n0 : UART1RX = Configure as UART1 RX input signal value.\n1 : NCE25 = IOM/MSPI nCE group 25 value.\n2 : CT1 = CTIMER connection 1 value.\n3 : GPIO25 = Configure as GPIO25 value.\n4 : M2SDAWIR3 = Configure as the IOMSTR2 I2C SDA or SPI WIR3 signal value.\n5 : M2MISO = Configure as the IOMSTR2 SPI MISO input signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.13..11> PAD25FNCSEL
//        <0=> 0: UART1RX = Configure as UART1 RX input signal value.
//        <1=> 1: NCE25 = IOM/MSPI nCE group 25 value.
//        <2=> 2: CT1 = CTIMER connection 1 value.
//        <3=> 3: GPIO25 = Configure as GPIO25 value.
//        <4=> 4: M2SDAWIR3 = Configure as the IOMSTR2 I2C SDA or SPI WIR3 signal value.
//        <5=> 5: M2MISO = Configure as the IOMSTR2 SPI MISO input signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD25STRNG  ------------------------------
// SVD Line: 23212

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25STRNG
//    <name> PAD25STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010018) \nPad 25 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.10..10> PAD25STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD25INPEN  ------------------------------
// SVD Line: 23230

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25INPEN
//    <name> PAD25INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010018) \nPad 25 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.9..9> PAD25INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD25PULL  -------------------------------
// SVD Line: 23248

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25PULL
//    <name> PAD25PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010018) \nPad 25 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.8..8> PAD25PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGG_PAD24FNCSEL  ------------------------------
// SVD Line: 23266

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24FNCSEL
//    <name> PAD24FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010018) \nPad 24 function select\n0 : UART1TX = Configure as UART1 TX output signal value.\n1 : NCE24 = IOM/MSPI nCE group 24 value.\n2 : MSPI8 = MSPI data connection 8 value.\n3 : GPIO24 = Configure as GPIO24 value.\n4 : UA0CTS = Configure as UART0 CTS input signal value.\n5 : CT21 = CTIMER connection 21 value.\n6 : 32kHzXT = Configure as the 32kHz crystal output signal value.\n7 : SWO = Configure as the serial trace data output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.5..3> PAD24FNCSEL
//        <0=> 0: UART1TX = Configure as UART1 TX output signal value.
//        <1=> 1: NCE24 = IOM/MSPI nCE group 24 value.
//        <2=> 2: MSPI8 = MSPI data connection 8 value.
//        <3=> 3: GPIO24 = Configure as GPIO24 value.
//        <4=> 4: UA0CTS = Configure as UART0 CTS input signal value.
//        <5=> 5: CT21 = CTIMER connection 21 value.
//        <6=> 6: 32kHzXT = Configure as the 32kHz crystal output signal value.
//        <7=> 7: SWO = Configure as the serial trace data output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD24STRNG  ------------------------------
// SVD Line: 23314

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24STRNG
//    <name> PAD24STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010018) \nPad 24 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.2..2> PAD24STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD24INPEN  ------------------------------
// SVD Line: 23332

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24INPEN
//    <name> PAD24INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010018) \nPad 24 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.1..1> PAD24INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGG_PAD24PULL  -------------------------------
// SVD Line: 23350

//  <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24PULL
//    <name> PAD24PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010018) \nPad 24 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGG ) </loc>
//      <o.0..0> PAD24PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGG  ----------------------------------
// SVD Line: 22914

//  <rtree> SFDITEM_REG__GPIO_PADREGG
//    <name> PADREGG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010018) Pad Configuration Register G (Pads 24-27) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGG >> 0) & 0xFFFFFFFF), ((GPIO_PADREGG = (GPIO_PADREGG & ~(0xFF3FFF3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFF3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD27PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD26PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD25PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGG_PAD24PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGH  ------------------------------
// SVD Line: 23370

unsigned int GPIO_PADREGH __AT (0x4001001C);



// --------------------------  Field Item: GPIO_PADREGH_PAD31FNCSEL  ------------------------------
// SVD Line: 23380

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31FNCSEL
//    <name> PAD31FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x4001001C) \nPad 31 function select\n0 : ADCSE3 = Configure as the analog input for ADC single ended input 3 value.\n1 : NCE31 = IOM/MSPI nCE group 31 value.\n2 : CT13 = CTIMER connection 13 value.\n3 : GPIO31 = Configure as GPIO31 value.\n4 : UART0RX = Configure as the UART0 RX input signal value.\n5 : SCCCLK = SCARD serial clock output value.\n6 : Reserved - do not use\n7 : UA1RTS = Configure as UART1 RTS output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.29..27> PAD31FNCSEL
//        <0=> 0: ADCSE3 = Configure as the analog input for ADC single ended input 3 value.
//        <1=> 1: NCE31 = IOM/MSPI nCE group 31 value.
//        <2=> 2: CT13 = CTIMER connection 13 value.
//        <3=> 3: GPIO31 = Configure as GPIO31 value.
//        <4=> 4: UART0RX = Configure as the UART0 RX input signal value.
//        <5=> 5: SCCCLK = SCARD serial clock output value.
//        <6=> 6: 
//        <7=> 7: UA1RTS = Configure as UART1 RTS output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD31STRNG  ------------------------------
// SVD Line: 23423

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31STRNG
//    <name> PAD31STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4001001C) \nPad 31 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.26..26> PAD31STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD31INPEN  ------------------------------
// SVD Line: 23441

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31INPEN
//    <name> PAD31INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4001001C) \nPad 31 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.25..25> PAD31INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD31PULL  -------------------------------
// SVD Line: 23459

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31PULL
//    <name> PAD31PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001001C) \nPad 31 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.24..24> PAD31PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGH_PAD30FNCSEL  ------------------------------
// SVD Line: 23477

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30FNCSEL
//    <name> PAD30FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x4001001C) \nPad 30 function select\n0 : ANATEST1 = Configure as the ANATEST1 I/O signal value.\n1 : NCE30 = IOM/MSPI nCE group 30 value.\n2 : CT11 = CTIMER connection 11 value.\n3 : GPIO30 = Configure as GPIO30 value.\n4 : UART0TX = Configure as UART0 TX output signal value.\n5 : UA1RTS = Configure as UART1 RTS output signal value.\n6 : Reserved - do not use\n7 : I2S_DAT = Configure as the PDM I2S Data output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.21..19> PAD30FNCSEL
//        <0=> 0: ANATEST1 = Configure as the ANATEST1 I/O signal value.
//        <1=> 1: NCE30 = IOM/MSPI nCE group 30 value.
//        <2=> 2: CT11 = CTIMER connection 11 value.
//        <3=> 3: GPIO30 = Configure as GPIO30 value.
//        <4=> 4: UART0TX = Configure as UART0 TX output signal value.
//        <5=> 5: UA1RTS = Configure as UART1 RTS output signal value.
//        <6=> 6: 
//        <7=> 7: I2S_DAT = Configure as the PDM I2S Data output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD30STRNG  ------------------------------
// SVD Line: 23520

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30STRNG
//    <name> PAD30STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4001001C) \nPad 30 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.18..18> PAD30STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD30INPEN  ------------------------------
// SVD Line: 23538

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30INPEN
//    <name> PAD30INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4001001C) \nPad 30 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.17..17> PAD30INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD30PULL  -------------------------------
// SVD Line: 23556

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30PULL
//    <name> PAD30PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001001C) \nPad 30 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.16..16> PAD30PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGH_PAD29FNCSEL  ------------------------------
// SVD Line: 23574

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29FNCSEL
//    <name> PAD29FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x4001001C) \nPad 29 function select\n0 : ADCSE1 = Configure as the analog input for ADC single ended input 1 value.\n1 : NCE29 = IOM/MSPI nCE group 29 value.\n2 : CT9 = CTIMER connection 9 value.\n3 : GPIO29 = Configure as GPIO29 value.\n4 : UA0CTS = Configure as the UART0 CTS input signal value.\n5 : UA1CTS = Configure as the UART1 CTS input signal value.\n6 : UART0RX = Configure as the UART0 RX input signal value.\n7 : PDM_DATA = Configure as PDM DATA input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.13..11> PAD29FNCSEL
//        <0=> 0: ADCSE1 = Configure as the analog input for ADC single ended input 1 value.
//        <1=> 1: NCE29 = IOM/MSPI nCE group 29 value.
//        <2=> 2: CT9 = CTIMER connection 9 value.
//        <3=> 3: GPIO29 = Configure as GPIO29 value.
//        <4=> 4: UA0CTS = Configure as the UART0 CTS input signal value.
//        <5=> 5: UA1CTS = Configure as the UART1 CTS input signal value.
//        <6=> 6: UART0RX = Configure as the UART0 RX input signal value.
//        <7=> 7: PDM_DATA = Configure as PDM DATA input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD29STRNG  ------------------------------
// SVD Line: 23622

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29STRNG
//    <name> PAD29STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001001C) \nPad 29 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.10..10> PAD29STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD29INPEN  ------------------------------
// SVD Line: 23640

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29INPEN
//    <name> PAD29INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001001C) \nPad 29 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.9..9> PAD29INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD29PULL  -------------------------------
// SVD Line: 23658

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29PULL
//    <name> PAD29PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001001C) \nPad 29 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.8..8> PAD29PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGH_PAD28FNCSEL  ------------------------------
// SVD Line: 23676

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28FNCSEL
//    <name> PAD28FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4001001C) \nPad 28 function select\n0 : I2S_WCLK = Configure as the PDM I2S Word Clock input value.\n1 : NCE28 = IOM/MSPI nCE group 28 value.\n2 : CT7 = CTIMER connection 7 value.\n3 : GPIO28 = Configure as GPIO28 value.\n4 : Reserved - do not use\n5 : M2MOSI = Configure as the IOMSTR2 SPI MOSI output signal value.\n6 : UART0TX = Configure as the UART0 TX output signal value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.5..3> PAD28FNCSEL
//        <0=> 0: I2S_WCLK = Configure as the PDM I2S Word Clock input value.
//        <1=> 1: NCE28 = IOM/MSPI nCE group 28 value.
//        <2=> 2: CT7 = CTIMER connection 7 value.
//        <3=> 3: GPIO28 = Configure as GPIO28 value.
//        <4=> 4: 
//        <5=> 5: M2MOSI = Configure as the IOMSTR2 SPI MOSI output signal value.
//        <6=> 6: UART0TX = Configure as the UART0 TX output signal value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD28STRNG  ------------------------------
// SVD Line: 23714

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28STRNG
//    <name> PAD28STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001001C) \nPad 28 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.2..2> PAD28STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD28INPEN  ------------------------------
// SVD Line: 23732

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28INPEN
//    <name> PAD28INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001001C) \nPad 28 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.1..1> PAD28INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGH_PAD28PULL  -------------------------------
// SVD Line: 23750

//  <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28PULL
//    <name> PAD28PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001001C) \nPad 28 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGH ) </loc>
//      <o.0..0> PAD28PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGH  ----------------------------------
// SVD Line: 23370

//  <rtree> SFDITEM_REG__GPIO_PADREGH
//    <name> PADREGH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001001C) Pad Configuration Register H (Pads 28-31) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGH >> 0) & 0xFFFFFFFF), ((GPIO_PADREGH = (GPIO_PADREGH & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD31PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD30PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD29PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGH_PAD28PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGI  ------------------------------
// SVD Line: 23770

unsigned int GPIO_PADREGI __AT (0x40010020);



// --------------------------  Field Item: GPIO_PADREGI_PAD35FNCSEL  ------------------------------
// SVD Line: 23780

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35FNCSEL
//    <name> PAD35FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010020) \nPad 35 function select\n0 : ADCSE7 = Configure as the analog input for ADC single ended input 7 value.\n1 : NCE35 = IOM/MSPI nCE group 35 value.\n2 : UART1TX = Configure as the UART1 TX signal value.\n3 : GPIO35 = Configure as GPIO35 value.\n4 : I2SDAT = I2S serial data output value.\n5 : CT27 = CTIMER connection 27 value.\n6 : UA0RTS = Configure as the UART0 RTS output value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.29..27> PAD35FNCSEL
//        <0=> 0: ADCSE7 = Configure as the analog input for ADC single ended input 7 value.
//        <1=> 1: NCE35 = IOM/MSPI nCE group 35 value.
//        <2=> 2: UART1TX = Configure as the UART1 TX signal value.
//        <3=> 3: GPIO35 = Configure as GPIO35 value.
//        <4=> 4: I2SDAT = I2S serial data output value.
//        <5=> 5: CT27 = CTIMER connection 27 value.
//        <6=> 6: UA0RTS = Configure as the UART0 RTS output value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD35STRNG  ------------------------------
// SVD Line: 23823

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35STRNG
//    <name> PAD35STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010020) \nPad 35 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.26..26> PAD35STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD35INPEN  ------------------------------
// SVD Line: 23841

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35INPEN
//    <name> PAD35INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010020) \nPad 35 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.25..25> PAD35INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD35PULL  -------------------------------
// SVD Line: 23859

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35PULL
//    <name> PAD35PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010020) \nPad 35 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.24..24> PAD35PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGI_PAD34FNCSEL  ------------------------------
// SVD Line: 23877

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34FNCSEL
//    <name> PAD34FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010020) \nPad 34 function select\n0 : ADCSE6 = Configure as the analog input for ADC single ended input 6 value.\n1 : NCE34 = IOM/MSPI nCE group 34 value.\n2 : UA1RTS = Configure as the UART1 RTS output value.\n3 : GPIO34 = Configure as GPIO34 value.\n4 : CMPRF2 = Configure as the analog comparator reference 2 signal value.\n5 : UA0RTS = Configure as the UART0 RTS output value.\n6 : UART0RX = Configure as the UART0 RX input value.\n7 : PDMDATA = PDM serial data input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.21..19> PAD34FNCSEL
//        <0=> 0: ADCSE6 = Configure as the analog input for ADC single ended input 6 value.
//        <1=> 1: NCE34 = IOM/MSPI nCE group 34 value.
//        <2=> 2: UA1RTS = Configure as the UART1 RTS output value.
//        <3=> 3: GPIO34 = Configure as GPIO34 value.
//        <4=> 4: CMPRF2 = Configure as the analog comparator reference 2 signal value.
//        <5=> 5: UA0RTS = Configure as the UART0 RTS output value.
//        <6=> 6: UART0RX = Configure as the UART0 RX input value.
//        <7=> 7: PDMDATA = PDM serial data input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD34STRNG  ------------------------------
// SVD Line: 23925

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34STRNG
//    <name> PAD34STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010020) \nPad 34 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.18..18> PAD34STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD34INPEN  ------------------------------
// SVD Line: 23943

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34INPEN
//    <name> PAD34INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010020) \nPad 34 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.17..17> PAD34INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD34PULL  -------------------------------
// SVD Line: 23961

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34PULL
//    <name> PAD34PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010020) \nPad 34 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.16..16> PAD34PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGI_PAD33FNCSEL  ------------------------------
// SVD Line: 23979

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33FNCSEL
//    <name> PAD33FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010020) \nPad 33 function select\n0 : ADCSE5 = Configure as the analog ADC single ended port 5 input signal value.\n1 : NCE33 = IOM/MSPI nCE group 33 value.\n2 : 32kHzXT = Configure as the 32kHz crystal output signal value.\n3 : GPIO33 = Configure as GPIO33 value.\n4 : Reserved - do not use\n5 : UA0CTS = Configure as the UART0 CTS input value.\n6 : CT23 = CTIMER connection 23 value.\n7 : SWO = Configure as the serial trace data output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.13..11> PAD33FNCSEL
//        <0=> 0: ADCSE5 = Configure as the analog ADC single ended port 5 input signal value.
//        <1=> 1: NCE33 = IOM/MSPI nCE group 33 value.
//        <2=> 2: 32kHzXT = Configure as the 32kHz crystal output signal value.
//        <3=> 3: GPIO33 = Configure as GPIO33 value.
//        <4=> 4: 
//        <5=> 5: UA0CTS = Configure as the UART0 CTS input value.
//        <6=> 6: CT23 = CTIMER connection 23 value.
//        <7=> 7: SWO = Configure as the serial trace data output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD33STRNG  ------------------------------
// SVD Line: 24022

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33STRNG
//    <name> PAD33STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010020) \nPad 33 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.10..10> PAD33STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD33INPEN  ------------------------------
// SVD Line: 24040

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33INPEN
//    <name> PAD33INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010020) \nPad 33 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.9..9> PAD33INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD33PULL  -------------------------------
// SVD Line: 24058

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33PULL
//    <name> PAD33PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010020) \nPad 33 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.8..8> PAD33PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGI_PAD32FNCSEL  ------------------------------
// SVD Line: 24076

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32FNCSEL
//    <name> PAD32FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010020) \nPad 32 function select\n0 : ADCSE4 = Configure as the analog input for ADC single ended input 4 value.\n1 : NCE32 = IOM/MSPI nCE group 32 value.\n2 : CT15 = CTIMER connection 15 value.\n3 : GPIO32 = Configure as GPIO32 value.\n4 : SCCIO = SCARD serial data input/output value.\n5 : EXTLF = External input to the LFRC oscillator value.\n6 : Reserved - do not use\n7 : UA1CTS = Configure as the UART1 CTS input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.5..3> PAD32FNCSEL
//        <0=> 0: ADCSE4 = Configure as the analog input for ADC single ended input 4 value.
//        <1=> 1: NCE32 = IOM/MSPI nCE group 32 value.
//        <2=> 2: CT15 = CTIMER connection 15 value.
//        <3=> 3: GPIO32 = Configure as GPIO32 value.
//        <4=> 4: SCCIO = SCARD serial data input/output value.
//        <5=> 5: EXTLF = External input to the LFRC oscillator value.
//        <6=> 6: 
//        <7=> 7: UA1CTS = Configure as the UART1 CTS input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD32STRNG  ------------------------------
// SVD Line: 24119

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32STRNG
//    <name> PAD32STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010020) \nPad 32 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.2..2> PAD32STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD32INPEN  ------------------------------
// SVD Line: 24137

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32INPEN
//    <name> PAD32INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010020) \nPad 32 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.1..1> PAD32INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGI_PAD32PULL  -------------------------------
// SVD Line: 24155

//  <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32PULL
//    <name> PAD32PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010020) \nPad 32 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGI ) </loc>
//      <o.0..0> PAD32PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGI  ----------------------------------
// SVD Line: 23770

//  <rtree> SFDITEM_REG__GPIO_PADREGI
//    <name> PADREGI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010020) Pad Configuration Register I (Pads 32-25) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGI >> 0) & 0xFFFFFFFF), ((GPIO_PADREGI = (GPIO_PADREGI & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD35PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD34PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD33PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGI_PAD32PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGJ  ------------------------------
// SVD Line: 24175

unsigned int GPIO_PADREGJ __AT (0x40010024);



// ---------------------------  Field Item: GPIO_PADREGJ_PAD39RSEL  -------------------------------
// SVD Line: 24185

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39RSEL
//    <name> PAD39RSEL </name>
//    <rw> 
//    <i> [Bits 31..30] RW (@ 0x40010024) \nPad 39 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.31..30> PAD39RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGJ_PAD39FNCSEL  ------------------------------
// SVD Line: 24213

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39FNCSEL
//    <name> PAD39FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010024) \nPad 39 function select\n0 : UART0TX = Configure as the UART0 TX output signal value.\n1 : UART1TX = Configure as the UART1 TX output signal value.\n2 : CT25 = CTIMER connection 25 value.\n3 : GPIO39 = Configure as GPIO39 value.\n4 : M4SCL = Configure as the IOMSTR4 I2C SCL signal value.\n5 : M4SCK = Configure as the IOMSTR4 SPI SCK signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.29..27> PAD39FNCSEL
//        <0=> 0: UART0TX = Configure as the UART0 TX output signal value.
//        <1=> 1: UART1TX = Configure as the UART1 TX output signal value.
//        <2=> 2: CT25 = CTIMER connection 25 value.
//        <3=> 3: GPIO39 = Configure as GPIO39 value.
//        <4=> 4: M4SCL = Configure as the IOMSTR4 I2C SCL signal value.
//        <5=> 5: M4SCK = Configure as the IOMSTR4 SPI SCK signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD39STRNG  ------------------------------
// SVD Line: 24251

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39STRNG
//    <name> PAD39STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010024) \nPad 39 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.26..26> PAD39STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD39INPEN  ------------------------------
// SVD Line: 24269

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39INPEN
//    <name> PAD39INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010024) \nPad 39 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.25..25> PAD39INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD39PULL  -------------------------------
// SVD Line: 24287

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39PULL
//    <name> PAD39PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010024) \nPad 39 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.24..24> PAD39PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGJ_PAD38FNCSEL  ------------------------------
// SVD Line: 24305

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38FNCSEL
//    <name> PAD38FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010024) \nPad 38 function select\n0 : TRIG3 = Configure as the ADC Trigger 3 signal value.\n1 : NCE38 = IOM/MSPI nCE group 38 value.\n2 : UA0CTS = Configure as the UART0 CTS signal value.\n3 : GPIO38 = Configure as GPIO38 value.\n4 : Reserved - do not use\n5 : M3MOSI = Configure as the IOMSTR3 SPI MOSI output signal value.\n6 : UART1RX = Configure as the UART1 RX input signal value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.21..19> PAD38FNCSEL
//        <0=> 0: TRIG3 = Configure as the ADC Trigger 3 signal value.
//        <1=> 1: NCE38 = IOM/MSPI nCE group 38 value.
//        <2=> 2: UA0CTS = Configure as the UART0 CTS signal value.
//        <3=> 3: GPIO38 = Configure as GPIO38 value.
//        <4=> 4: 
//        <5=> 5: M3MOSI = Configure as the IOMSTR3 SPI MOSI output signal value.
//        <6=> 6: UART1RX = Configure as the UART1 RX input signal value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD38STRNG  ------------------------------
// SVD Line: 24343

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38STRNG
//    <name> PAD38STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010024) \nPad 38 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.18..18> PAD38STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD38INPEN  ------------------------------
// SVD Line: 24361

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38INPEN
//    <name> PAD38INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010024) \nPad 38 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.17..17> PAD38INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD38PULL  -------------------------------
// SVD Line: 24379

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38PULL
//    <name> PAD38PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010024) \nPad 38 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.16..16> PAD38PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD37PWRDN  ------------------------------
// SVD Line: 24397

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37PWRDN
//    <name> PAD37PWRDN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010024) \nPad 37 VSS power switch enable\n0 : DIS = Power switch disabled value.\n1 : EN = Power switch enabled (switch to GND) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.15..15> PAD37PWRDN
//        <0=> 0: DIS = Power switch disabled value.
//        <1=> 1: EN = Power switch enabled (switch to GND) value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGJ_PAD37FNCSEL  ------------------------------
// SVD Line: 24415

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37FNCSEL
//    <name> PAD37FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010024) \nPad 37 function select\n0 : TRIG2 = Configure as the ADC Trigger 2 signal value.\n1 : NCE37 = IOM/MSPI nCE group 37 value.\n2 : UA0RTS = Configure as the UART0 RTS output signal value.\n3 : GPIO37 = Configure as GPIO37 value.\n4 : SCCIO = SCARD serial data input/output value.\n5 : UART1TX = Configure as the UART1 TX output signal value.\n6 : PDMCLK = Configure as the PDM CLK output signal value.\n7 : CT29 = CTIMER connection 29 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.13..11> PAD37FNCSEL
//        <0=> 0: TRIG2 = Configure as the ADC Trigger 2 signal value.
//        <1=> 1: NCE37 = IOM/MSPI nCE group 37 value.
//        <2=> 2: UA0RTS = Configure as the UART0 RTS output signal value.
//        <3=> 3: GPIO37 = Configure as GPIO37 value.
//        <4=> 4: SCCIO = SCARD serial data input/output value.
//        <5=> 5: UART1TX = Configure as the UART1 TX output signal value.
//        <6=> 6: PDMCLK = Configure as the PDM CLK output signal value.
//        <7=> 7: CT29 = CTIMER connection 29 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD37STRNG  ------------------------------
// SVD Line: 24463

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37STRNG
//    <name> PAD37STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010024) \nPad 37 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.10..10> PAD37STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD37INPEN  ------------------------------
// SVD Line: 24481

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37INPEN
//    <name> PAD37INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010024) \nPad 37 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.9..9> PAD37INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD37PULL  -------------------------------
// SVD Line: 24499

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37PULL
//    <name> PAD37PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010024) \nPad 37 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.8..8> PAD37PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD36PWRUP  ------------------------------
// SVD Line: 24517

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36PWRUP
//    <name> PAD36PWRUP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010024) \nPad 36 VDD power switch enable\n0 : DIS = Power switch disabled value.\n1 : EN = Power switch enabled (switched to VDD) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.6..6> PAD36PWRUP
//        <0=> 0: DIS = Power switch disabled value.
//        <1=> 1: EN = Power switch enabled (switched to VDD) value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGJ_PAD36FNCSEL  ------------------------------
// SVD Line: 24535

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36FNCSEL
//    <name> PAD36FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010024) \nPad 36 function select\n0 : TRIG1 = Configure as the ADC Trigger 1 signal value.\n1 : NCE36 = IOM/MSPI nCE group 36 value.\n2 : UART1RX = Configure as the UART1 RX input signal value.\n3 : GPIO36 = Configure as GPIO36 value.\n4 : 32kHzXT = Configure as the 32kHz output clock from the crystal value.\n5 : UA1CTS = Configure as the UART1 CTS input signal value.\n6 : UA0CTS = Configure as the UART0 CTS input signal value.\n7 : PDMDATA = PDM serial data input value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.5..3> PAD36FNCSEL
//        <0=> 0: TRIG1 = Configure as the ADC Trigger 1 signal value.
//        <1=> 1: NCE36 = IOM/MSPI nCE group 36 value.
//        <2=> 2: UART1RX = Configure as the UART1 RX input signal value.
//        <3=> 3: GPIO36 = Configure as GPIO36 value.
//        <4=> 4: 32kHzXT = Configure as the 32kHz output clock from the crystal value.
//        <5=> 5: UA1CTS = Configure as the UART1 CTS input signal value.
//        <6=> 6: UA0CTS = Configure as the UART0 CTS input signal value.
//        <7=> 7: PDMDATA = PDM serial data input value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD36STRNG  ------------------------------
// SVD Line: 24583

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36STRNG
//    <name> PAD36STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010024) \nPad 36 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.2..2> PAD36STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD36INPEN  ------------------------------
// SVD Line: 24601

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36INPEN
//    <name> PAD36INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010024) \nPad 36 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.1..1> PAD36INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGJ_PAD36PULL  -------------------------------
// SVD Line: 24619

//  <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36PULL
//    <name> PAD36PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010024) \nPad 36 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGJ ) </loc>
//      <o.0..0> PAD36PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGJ  ----------------------------------
// SVD Line: 24175

//  <rtree> SFDITEM_REG__GPIO_PADREGJ
//    <name> PADREGJ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010024) Pad Configuration Register J (Pads 36-39) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGJ >> 0) & 0xFFFFFFFF), ((GPIO_PADREGJ = (GPIO_PADREGJ & ~(0xFF3FBF7FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FBF7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD39PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD38PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37PWRDN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD37PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36PWRUP </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGJ_PAD36PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGK  ------------------------------
// SVD Line: 24639

unsigned int GPIO_PADREGK __AT (0x40010028);



// ---------------------------  Field Item: GPIO_PADREGK_PAD43RSEL  -------------------------------
// SVD Line: 24649

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43RSEL
//    <name> PAD43RSEL </name>
//    <rw> 
//    <i> [Bits 31..30] RW (@ 0x40010028) \nPad 43 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.31..30> PAD43RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGK_PAD43FNCSEL  ------------------------------
// SVD Line: 24677

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43FNCSEL
//    <name> PAD43FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x40010028) \nPad 43 function select\n0 : UART1RX = Configure as the UART1 RX input signal value.\n1 : NCE43 = IOM/MSPI nCE group 43 value.\n2 : CT18 = CTIMER connection 18 value.\n3 : GPIO43 = Configure as GPIO43 value.\n4 : M3SDAWIR3 = Configure as the IOMSTR3 I2C SDA or SPI WIR3 signal value.\n5 : M3MISO = Configure as the IOMSTR3 SPI MISO signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.29..27> PAD43FNCSEL
//        <0=> 0: UART1RX = Configure as the UART1 RX input signal value.
//        <1=> 1: NCE43 = IOM/MSPI nCE group 43 value.
//        <2=> 2: CT18 = CTIMER connection 18 value.
//        <3=> 3: GPIO43 = Configure as GPIO43 value.
//        <4=> 4: M3SDAWIR3 = Configure as the IOMSTR3 I2C SDA or SPI WIR3 signal value.
//        <5=> 5: M3MISO = Configure as the IOMSTR3 SPI MISO signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD43STRNG  ------------------------------
// SVD Line: 24715

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43STRNG
//    <name> PAD43STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010028) \nPad 43 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.26..26> PAD43STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD43INPEN  ------------------------------
// SVD Line: 24733

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43INPEN
//    <name> PAD43INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010028) \nPad 43 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.25..25> PAD43INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD43PULL  -------------------------------
// SVD Line: 24751

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43PULL
//    <name> PAD43PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010028) \nPad 43 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.24..24> PAD43PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD42RSEL  -------------------------------
// SVD Line: 24769

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42RSEL
//    <name> PAD42RSEL </name>
//    <rw> 
//    <i> [Bits 23..22] RW (@ 0x40010028) \nPad 42 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.23..22> PAD42RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGK_PAD42FNCSEL  ------------------------------
// SVD Line: 24797

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42FNCSEL
//    <name> PAD42FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x40010028) \nPad 42 function select\n0 : UART1TX = Configure as the UART1 TX output signal value.\n1 : NCE42 = IOM/MSPI nCE group 42 value.\n2 : CT16 = CTIMER connection 16 value.\n3 : GPIO42 = Configure as GPIO42 value.\n4 : M3SCL = Configure as the IOMSTR3 I2C SCL clock I/O signal value.\n5 : M3SCK = Configure as the IOMSTR3 SPI SCK output value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.21..19> PAD42FNCSEL
//        <0=> 0: UART1TX = Configure as the UART1 TX output signal value.
//        <1=> 1: NCE42 = IOM/MSPI nCE group 42 value.
//        <2=> 2: CT16 = CTIMER connection 16 value.
//        <3=> 3: GPIO42 = Configure as GPIO42 value.
//        <4=> 4: M3SCL = Configure as the IOMSTR3 I2C SCL clock I/O signal value.
//        <5=> 5: M3SCK = Configure as the IOMSTR3 SPI SCK output value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD42STRNG  ------------------------------
// SVD Line: 24835

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42STRNG
//    <name> PAD42STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010028) \nPad 42 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.18..18> PAD42STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD42INPEN  ------------------------------
// SVD Line: 24853

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42INPEN
//    <name> PAD42INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010028) \nPad 42 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.17..17> PAD42INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD42PULL  -------------------------------
// SVD Line: 24871

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42PULL
//    <name> PAD42PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010028) \nPad 42 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.16..16> PAD42PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD41PWRDN  ------------------------------
// SVD Line: 24889

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41PWRDN
//    <name> PAD41PWRDN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010028) \nPad 41 power switch enable\n0 : DIS = Power switch disabled value.\n1 : EN = Power switch enabled (Switch pad to VSS) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.15..15> PAD41PWRDN
//        <0=> 0: DIS = Power switch disabled value.
//        <1=> 1: EN = Power switch enabled (Switch pad to VSS) value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGK_PAD41FNCSEL  ------------------------------
// SVD Line: 24907

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41FNCSEL
//    <name> PAD41FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010028) \nPad 41 function select\n0 : NCE41 = IOM/MSPI nCE group 41 value.\n1 : Reserved - do not use\n2 : SWO = Configure as the serial wire debug SWO signal value.\n3 : GPIO41 = Configure as GPIO41 value.\n4 : I2SWCLK = I2S word clock input value.\n5 : UA1RTS = Configure as the UART1 RTS output signal value.\n6 : UART0TX = Configure as the UART0 TX output signal value.\n7 : UA0RTS = Configure as the UART0 RTS output signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.13..11> PAD41FNCSEL
//        <0=> 0: NCE41 = IOM/MSPI nCE group 41 value.
//        <1=> 1: 
//        <2=> 2: SWO = Configure as the serial wire debug SWO signal value.
//        <3=> 3: GPIO41 = Configure as GPIO41 value.
//        <4=> 4: I2SWCLK = I2S word clock input value.
//        <5=> 5: UA1RTS = Configure as the UART1 RTS output signal value.
//        <6=> 6: UART0TX = Configure as the UART0 TX output signal value.
//        <7=> 7: UA0RTS = Configure as the UART0 RTS output signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD41STRNG  ------------------------------
// SVD Line: 24950

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41STRNG
//    <name> PAD41STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010028) \nPad 41 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.10..10> PAD41STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD41INPEN  ------------------------------
// SVD Line: 24968

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41INPEN
//    <name> PAD41INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010028) \nPad 41 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.9..9> PAD41INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD41PULL  -------------------------------
// SVD Line: 24986

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41PULL
//    <name> PAD41PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010028) \nPad 41 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.8..8> PAD41PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD40RSEL  -------------------------------
// SVD Line: 25004

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40RSEL
//    <name> PAD40RSEL </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40010028) \nPad 40 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.7..6> PAD40RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGK_PAD40FNCSEL  ------------------------------
// SVD Line: 25032

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40FNCSEL
//    <name> PAD40FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010028) \nPad 40 function select\n0 : UART0RX = Configure as the UART0 RX input signal value.\n1 : UART1RX = Configure as the UART1 RX input signal value.\n2 : TRIG0 = Configure as the ADC Trigger 0 signal value.\n3 : GPIO40 = Configure as GPIO40 value.\n4 : M4SDAWIR3 = Configure as the IOMSTR4 I2C SDA or SPI WIR3 signal value.\n5 : M4MISO = Configure as the IOMSTR4 SPI MISO input signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.5..3> PAD40FNCSEL
//        <0=> 0: UART0RX = Configure as the UART0 RX input signal value.
//        <1=> 1: UART1RX = Configure as the UART1 RX input signal value.
//        <2=> 2: TRIG0 = Configure as the ADC Trigger 0 signal value.
//        <3=> 3: GPIO40 = Configure as GPIO40 value.
//        <4=> 4: M4SDAWIR3 = Configure as the IOMSTR4 I2C SDA or SPI WIR3 signal value.
//        <5=> 5: M4MISO = Configure as the IOMSTR4 SPI MISO input signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD40STRNG  ------------------------------
// SVD Line: 25070

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40STRNG
//    <name> PAD40STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010028) \nPad 40 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.2..2> PAD40STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD40INPEN  ------------------------------
// SVD Line: 25088

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40INPEN
//    <name> PAD40INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010028) \nPad 40 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.1..1> PAD40INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGK_PAD40PULL  -------------------------------
// SVD Line: 25106

//  <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40PULL
//    <name> PAD40PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010028) \nPad 40 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGK ) </loc>
//      <o.0..0> PAD40PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGK  ----------------------------------
// SVD Line: 24639

//  <rtree> SFDITEM_REG__GPIO_PADREGK
//    <name> PADREGK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010028) Pad Configuration Register K (Pads 40-43) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGK >> 0) & 0xFFFFFFFF), ((GPIO_PADREGK = (GPIO_PADREGK & ~(0xFFFFBFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFBFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD43PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD42PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41PWRDN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD41PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGK_PAD40PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGL  ------------------------------
// SVD Line: 25126

unsigned int GPIO_PADREGL __AT (0x4001002C);



// --------------------------  Field Item: GPIO_PADREGL_PAD47FNCSEL  ------------------------------
// SVD Line: 25136

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47FNCSEL
//    <name> PAD47FNCSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x4001002C) \nPad 47 function select\n0 : 32kHzXT = Configure as the 32kHz output clock from the crystal value.\n1 : NCE47 = IOM/MSPI nCE group 47 value.\n2 : CT26 = CTIMER connection 26 value.\n3 : GPIO47 = Configure as GPIO47 value.\n4 : Reserved - do not use\n5 : M5MOSI = Configure as the IOMSTR5 SPI MOSI output signal value.\n6 : UART1RX = Configure as the UART1 RX input signal value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.29..27> PAD47FNCSEL
//        <0=> 0: 32kHzXT = Configure as the 32kHz output clock from the crystal value.
//        <1=> 1: NCE47 = IOM/MSPI nCE group 47 value.
//        <2=> 2: CT26 = CTIMER connection 26 value.
//        <3=> 3: GPIO47 = Configure as GPIO47 value.
//        <4=> 4: 
//        <5=> 5: M5MOSI = Configure as the IOMSTR5 SPI MOSI output signal value.
//        <6=> 6: UART1RX = Configure as the UART1 RX input signal value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD47STRNG  ------------------------------
// SVD Line: 25174

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47STRNG
//    <name> PAD47STRNG </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4001002C) \nPad 47 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.26..26> PAD47STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD47INPEN  ------------------------------
// SVD Line: 25192

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47INPEN
//    <name> PAD47INPEN </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4001002C) \nPad 47 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.25..25> PAD47INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD47PULL  -------------------------------
// SVD Line: 25210

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47PULL
//    <name> PAD47PULL </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001002C) \nPad 47 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.24..24> PAD47PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGL_PAD46FNCSEL  ------------------------------
// SVD Line: 25228

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46FNCSEL
//    <name> PAD46FNCSEL </name>
//    <rw> 
//    <i> [Bits 21..19] RW (@ 0x4001002C) \nPad 46 function select\n0 : 32khz_XT = Configure as the 32kHz output clock from the crystal value.\n1 : NCE46 = IOM/MSPI nCE group 46 value.\n2 : CT24 = CTIMER connection 24 value.\n3 : GPIO46 = Configure as GPIO46 value.\n4 : SCCRST = SCARD reset output value.\n5 : PDMCLK = PDM serial clock output value.\n6 : UART1TX = Configure as the UART1 TX output signal value.\n7 : SWO = Configure as the serial wire debug SWO signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.21..19> PAD46FNCSEL
//        <0=> 0: 32khz_XT = Configure as the 32kHz output clock from the crystal value.
//        <1=> 1: NCE46 = IOM/MSPI nCE group 46 value.
//        <2=> 2: CT24 = CTIMER connection 24 value.
//        <3=> 3: GPIO46 = Configure as GPIO46 value.
//        <4=> 4: SCCRST = SCARD reset output value.
//        <5=> 5: PDMCLK = PDM serial clock output value.
//        <6=> 6: UART1TX = Configure as the UART1 TX output signal value.
//        <7=> 7: SWO = Configure as the serial wire debug SWO signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD46STRNG  ------------------------------
// SVD Line: 25276

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46STRNG
//    <name> PAD46STRNG </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4001002C) \nPad 46 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.18..18> PAD46STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD46INPEN  ------------------------------
// SVD Line: 25294

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46INPEN
//    <name> PAD46INPEN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4001002C) \nPad 46 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.17..17> PAD46INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD46PULL  -------------------------------
// SVD Line: 25312

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46PULL
//    <name> PAD46PULL </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001002C) \nPad 46 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.16..16> PAD46PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGL_PAD45FNCSEL  ------------------------------
// SVD Line: 25330

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45FNCSEL
//    <name> PAD45FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x4001002C) \nPad 45 function select\n0 : UA1CTS = Configure as the UART1 CTS input signal value.\n1 : NCE45 = IOM/MSPI nCE group 45 value.\n2 : CT22 = CTIMER connection 22 value.\n3 : GPIO45 = Configure as GPIO45 value.\n4 : I2SDAT = I2S serial data output value.\n5 : PDMDATA = PDM serial data input value.\n6 : UART0RX = Configure as the SPI channel 5 nCE signal from IOMSTR5 value.\n7 : SWO = Configure as the serial wire debug SWO signal value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.13..11> PAD45FNCSEL
//        <0=> 0: UA1CTS = Configure as the UART1 CTS input signal value.
//        <1=> 1: NCE45 = IOM/MSPI nCE group 45 value.
//        <2=> 2: CT22 = CTIMER connection 22 value.
//        <3=> 3: GPIO45 = Configure as GPIO45 value.
//        <4=> 4: I2SDAT = I2S serial data output value.
//        <5=> 5: PDMDATA = PDM serial data input value.
//        <6=> 6: UART0RX = Configure as the SPI channel 5 nCE signal from IOMSTR5 value.
//        <7=> 7: SWO = Configure as the serial wire debug SWO signal value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD45STRNG  ------------------------------
// SVD Line: 25378

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45STRNG
//    <name> PAD45STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001002C) \nPad 45 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.10..10> PAD45STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD45INPEN  ------------------------------
// SVD Line: 25396

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45INPEN
//    <name> PAD45INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001002C) \nPad 45 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.9..9> PAD45INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD45PULL  -------------------------------
// SVD Line: 25414

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45PULL
//    <name> PAD45PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001002C) \nPad 45 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.8..8> PAD45PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGL_PAD44FNCSEL  ------------------------------
// SVD Line: 25432

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44FNCSEL
//    <name> PAD44FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4001002C) \nPad 44 function select\n0 : UA1RTS = Configure as the UART1 RTS output signal value.\n1 : NCE44 = IOM/MSPI nCE group 44 value.\n2 : CT20 = CTIMER connection 20 value.\n3 : GPIO44 = Configure as GPIO44 value.\n4 : Reserved - do not use\n5 : M4MOSI = Configure as the IOMSTR4 SPI MOSI signal value.\n6 : M5nCE6 = Configure as the SPI channel 6 nCE signal from IOMSTR5 value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.5..3> PAD44FNCSEL
//        <0=> 0: UA1RTS = Configure as the UART1 RTS output signal value.
//        <1=> 1: NCE44 = IOM/MSPI nCE group 44 value.
//        <2=> 2: CT20 = CTIMER connection 20 value.
//        <3=> 3: GPIO44 = Configure as GPIO44 value.
//        <4=> 4: 
//        <5=> 5: M4MOSI = Configure as the IOMSTR4 SPI MOSI signal value.
//        <6=> 6: M5nCE6 = Configure as the SPI channel 6 nCE signal from IOMSTR5 value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD44STRNG  ------------------------------
// SVD Line: 25470

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44STRNG
//    <name> PAD44STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001002C) \nPad 44 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.2..2> PAD44STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD44INPEN  ------------------------------
// SVD Line: 25488

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44INPEN
//    <name> PAD44INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001002C) \nPad 44 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.1..1> PAD44INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGL_PAD44PULL  -------------------------------
// SVD Line: 25506

//  <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44PULL
//    <name> PAD44PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001002C) \nPad 44 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGL ) </loc>
//      <o.0..0> PAD44PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGL  ----------------------------------
// SVD Line: 25126

//  <rtree> SFDITEM_REG__GPIO_PADREGL
//    <name> PADREGL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001002C) Pad Configuration Register L (Pads 44-47) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGL >> 0) & 0xFFFFFFFF), ((GPIO_PADREGL = (GPIO_PADREGL & ~(0x3F3F3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD47PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD46PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD45PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGL_PAD44PULL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADREGM  ------------------------------
// SVD Line: 25526

unsigned int GPIO_PADREGM __AT (0x40010030);



// ---------------------------  Field Item: GPIO_PADREGM_PAD49RSEL  -------------------------------
// SVD Line: 25536

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49RSEL
//    <name> PAD49RSEL </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40010030) \nPad 49 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.15..14> PAD49RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGM_PAD49FNCSEL  ------------------------------
// SVD Line: 25564

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49FNCSEL
//    <name> PAD49FNCSEL </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40010030) \nPad 49 function select\n0 : UART0RX = Configure as the UART0 RX input signal value.\n1 : NCE49 = IOM/MSPPI nCE group 49 value.\n2 : CT30 = CTIMER connection 30 value.\n3 : GPIO49 = Configure as GPIO49 value.\n4 : M5SDAWIR3 = Configure as the IOMSTR5 I2C SDA or SPI WIR3 signal value.\n5 : M5MISO = Configure as the IOMSTR5 SPI MISO input signal value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.13..11> PAD49FNCSEL
//        <0=> 0: UART0RX = Configure as the UART0 RX input signal value.
//        <1=> 1: NCE49 = IOM/MSPPI nCE group 49 value.
//        <2=> 2: CT30 = CTIMER connection 30 value.
//        <3=> 3: GPIO49 = Configure as GPIO49 value.
//        <4=> 4: M5SDAWIR3 = Configure as the IOMSTR5 I2C SDA or SPI WIR3 signal value.
//        <5=> 5: M5MISO = Configure as the IOMSTR5 SPI MISO input signal value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD49STRNG  ------------------------------
// SVD Line: 25602

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49STRNG
//    <name> PAD49STRNG </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010030) \nPad 49 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.10..10> PAD49STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD49INPEN  ------------------------------
// SVD Line: 25620

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49INPEN
//    <name> PAD49INPEN </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010030) \nPad 49 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.9..9> PAD49INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD49PULL  -------------------------------
// SVD Line: 25638

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49PULL
//    <name> PAD49PULL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010030) \nPad 49 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.8..8> PAD49PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD48RSEL  -------------------------------
// SVD Line: 25656

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48RSEL
//    <name> PAD48RSEL </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40010030) \nPad 48 pullup resistor selection.\n0 : PULL1_5K = Pullup is ~1.5 KOhms value.\n1 : PULL6K = Pullup is ~6 KOhms value.\n2 : PULL12K = Pullup is ~12 KOhms value.\n3 : PULL24K = Pullup is ~24 KOhms value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.7..6> PAD48RSEL
//        <0=> 0: PULL1_5K = Pullup is ~1.5 KOhms value.
//        <1=> 1: PULL6K = Pullup is ~6 KOhms value.
//        <2=> 2: PULL12K = Pullup is ~12 KOhms value.
//        <3=> 3: PULL24K = Pullup is ~24 KOhms value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_PADREGM_PAD48FNCSEL  ------------------------------
// SVD Line: 25684

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48FNCSEL
//    <name> PAD48FNCSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40010030) \nPad 48 function select\n0 : UART0TX = Configure as the UART0 TX output signal value.\n1 : NCE48 = IOM/MSPI nCE group 48 value.\n2 : CT28 = CTIMER conenction 28 value.\n3 : GPIO48 = Configure as GPIO48 value.\n4 : M5SCL = Configure as the IOMSTR5 I2C SCL clock I/O signal value.\n5 : M5SCK = Configure as the IOMSTR5 SPI SCK output value.\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.5..3> PAD48FNCSEL
//        <0=> 0: UART0TX = Configure as the UART0 TX output signal value.
//        <1=> 1: NCE48 = IOM/MSPI nCE group 48 value.
//        <2=> 2: CT28 = CTIMER conenction 28 value.
//        <3=> 3: GPIO48 = Configure as GPIO48 value.
//        <4=> 4: M5SCL = Configure as the IOMSTR5 I2C SCL clock I/O signal value.
//        <5=> 5: M5SCK = Configure as the IOMSTR5 SPI SCK output value.
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD48STRNG  ------------------------------
// SVD Line: 25722

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48STRNG
//    <name> PAD48STRNG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010030) \nPad 48 drive strength\n0 : LOW = Low drive strength value.\n1 : HIGH = High drive strength value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.2..2> PAD48STRNG
//        <0=> 0: LOW = Low drive strength value.
//        <1=> 1: HIGH = High drive strength value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD48INPEN  ------------------------------
// SVD Line: 25740

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48INPEN
//    <name> PAD48INPEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010030) \nPad 48 input enable\n0 : DIS = Pad input disabled value.\n1 : EN = Pad input enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.1..1> PAD48INPEN
//        <0=> 0: DIS = Pad input disabled value.
//        <1=> 1: EN = Pad input enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_PADREGM_PAD48PULL  -------------------------------
// SVD Line: 25758

//  <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48PULL
//    <name> PAD48PULL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010030) \nPad 48 pullup enable\n0 : DIS = Pullup disabled value.\n1 : EN = Pullup enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_PADREGM ) </loc>
//      <o.0..0> PAD48PULL
//        <0=> 0: DIS = Pullup disabled value.
//        <1=> 1: EN = Pullup enabled value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_PADREGM  ----------------------------------
// SVD Line: 25526

//  <rtree> SFDITEM_REG__GPIO_PADREGM
//    <name> PADREGM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010030) Pad Configuration Register M (Pads 47-48) </i>
//    <loc> ( (unsigned int)((GPIO_PADREGM >> 0) & 0xFFFFFFFF), ((GPIO_PADREGM = (GPIO_PADREGM & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD49PULL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48RSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48FNCSEL </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48STRNG </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48INPEN </item>
//    <item> SFDITEM_FIELD__GPIO_PADREGM_PAD48PULL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGA  --------------------------------
// SVD Line: 25778

unsigned int GPIO_CFGA __AT (0x40010040);



// -----------------------------  Field Item: GPIO_CFGA_GPIO7INTD  --------------------------------
// SVD Line: 25788

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7INTD
//    <name> GPIO7INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010040) \nGPIO7 interrupt direction, nCE polarity.\n0 : nCELOW = FNCSEL = 0x0 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x0 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.31..31> GPIO7INTD
//        <0=> 0: nCELOW = FNCSEL = 0x0 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x0 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO7OUTCFG  -------------------------------
// SVD Line: 25806

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7OUTCFG
//    <name> GPIO7OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x40010040) \nGPIO7 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.30..29> GPIO7OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO7INCFG  --------------------------------
// SVD Line: 25834

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7INCFG
//    <name> GPIO7INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010040) \nGPIO7 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.28..28> GPIO7INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO6INTD  --------------------------------
// SVD Line: 25852

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6INTD
//    <name> GPIO6INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010040) \nGPIO6 interrupt direction.\n0 : INTDIS = INCFG = 1 - No interrupt on GPIO transition value.\n1 : INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.27..27> GPIO6INTD
//        <0=> 0: INTDIS = INCFG = 1 - No interrupt on GPIO transition value.
//        <1=> 1: INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO6OUTCFG  -------------------------------
// SVD Line: 25870

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6OUTCFG
//    <name> GPIO6OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x40010040) \nGPIO6 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.26..25> GPIO6OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO6INCFG  --------------------------------
// SVD Line: 25898

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6INCFG
//    <name> GPIO6INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010040) \nGPIO6 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.24..24> GPIO6INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO5INTD  --------------------------------
// SVD Line: 25916

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5INTD
//    <name> GPIO5INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010040) \nGPIO5 interrupt direction.\n0 : INTDIS = INCFG = 1 - No interrupt on GPIO transition value.\n1 : INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.23..23> GPIO5INTD
//        <0=> 0: INTDIS = INCFG = 1 - No interrupt on GPIO transition value.
//        <1=> 1: INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO5OUTCFG  -------------------------------
// SVD Line: 25934

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5OUTCFG
//    <name> GPIO5OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40010040) \nGPIO5 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.22..21> GPIO5OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO5INCFG  --------------------------------
// SVD Line: 25962

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5INCFG
//    <name> GPIO5INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010040) \nGPIO5 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.20..20> GPIO5INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO4INTD  --------------------------------
// SVD Line: 25980

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4INTD
//    <name> GPIO4INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010040) \nGPIO4 interrupt direction.\n0 : nCELOW = FNCSEL = 0x2 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.19..19> GPIO4INTD
//        <0=> 0: nCELOW = FNCSEL = 0x2 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO4OUTCFG  -------------------------------
// SVD Line: 25998

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4OUTCFG
//    <name> GPIO4OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x40010040) \nGPIO4 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.18..17> GPIO4OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO4INCFG  --------------------------------
// SVD Line: 26026

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4INCFG
//    <name> GPIO4INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010040) \nGPIO4 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.16..16> GPIO4INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO3INTD  --------------------------------
// SVD Line: 26044

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3INTD
//    <name> GPIO3INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010040) \nGPIO3 interrupt direction.\n0 : nCELOW = FNCSEL = 0x2 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.15..15> GPIO3INTD
//        <0=> 0: nCELOW = FNCSEL = 0x2 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO3OUTCFG  -------------------------------
// SVD Line: 26062

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3OUTCFG
//    <name> GPIO3OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40010040) \nGPIO3 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.14..13> GPIO3OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO3INCFG  --------------------------------
// SVD Line: 26090

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3INCFG
//    <name> GPIO3INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010040) \nGPIO3 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.12..12> GPIO3INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO2INTD  --------------------------------
// SVD Line: 26108

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2INTD
//    <name> GPIO2INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010040) \nGPIO2 interrupt direction.\n0 : nCELOW = FNCSEL = 0x7 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.11..11> GPIO2INTD
//        <0=> 0: nCELOW = FNCSEL = 0x7 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO2OUTCFG  -------------------------------
// SVD Line: 26126

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2OUTCFG
//    <name> GPIO2OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40010040) \nGPIO2 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.10..9> GPIO2OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO2INCFG  --------------------------------
// SVD Line: 26154

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2INCFG
//    <name> GPIO2INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010040) \nGPIO2 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.8..8> GPIO2INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO1INTD  --------------------------------
// SVD Line: 26172

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1INTD
//    <name> GPIO1INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010040) \nGPIO1 interrupt direction.\n0 : nCELOW = FNCSEL = 0x7 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.7..7> GPIO1INTD
//        <0=> 0: nCELOW = FNCSEL = 0x7 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO1OUTCFG  -------------------------------
// SVD Line: 26190

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1OUTCFG
//    <name> GPIO1OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010040) \nGPIO1 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.6..5> GPIO1OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO1INCFG  --------------------------------
// SVD Line: 26218

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1INCFG
//    <name> GPIO1INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010040) \nGPIO1 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.4..4> GPIO1INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGA_GPIO0INTD  --------------------------------
// SVD Line: 26236

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0INTD
//    <name> GPIO0INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010040) \nGPIO0 interrupt direction.\n0 : nCELOW = FNCSEL = 0x7 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.3..3> GPIO0INTD
//        <0=> 0: nCELOW = FNCSEL = 0x7 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x7 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO0OUTCFG  -------------------------------
// SVD Line: 26254

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0OUTCFG
//    <name> GPIO0OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010040) \nGPIO0 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.2..1> GPIO0OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGA_GPIO0INCFG  --------------------------------
// SVD Line: 26282

//  <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0INCFG
//    <name> GPIO0INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010040) \nGPIO0 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGA ) </loc>
//      <o.0..0> GPIO0INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGA  -----------------------------------
// SVD Line: 25778

//  <rtree> SFDITEM_REG__GPIO_CFGA
//    <name> CFGA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010040) GPIO Configuration Register A (Pads 0-7) </i>
//    <loc> ( (unsigned int)((GPIO_CFGA >> 0) & 0xFFFFFFFF), ((GPIO_CFGA = (GPIO_CFGA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO7INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO6INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO5INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO4INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO3INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO2INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO1INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGA_GPIO0INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGB  --------------------------------
// SVD Line: 26302

unsigned int GPIO_CFGB __AT (0x40010044);



// ----------------------------  Field Item: GPIO_CFGB_GPIO15INTD  --------------------------------
// SVD Line: 26312

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15INTD
//    <name> GPIO15INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010044) \nGPIO15 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.31..31> GPIO15INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO15OUTCFG  -------------------------------
// SVD Line: 26330

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15OUTCFG
//    <name> GPIO15OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x40010044) \nGPIO15 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.30..29> GPIO15OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO15INCFG  -------------------------------
// SVD Line: 26358

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15INCFG
//    <name> GPIO15INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010044) \nGPIO15 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.28..28> GPIO15INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO14INTD  --------------------------------
// SVD Line: 26376

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14INTD
//    <name> GPIO14INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010044) \nGPIO14 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.27..27> GPIO14INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO14OUTCFG  -------------------------------
// SVD Line: 26394

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14OUTCFG
//    <name> GPIO14OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x40010044) \nGPIO14 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.26..25> GPIO14OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO14INCFG  -------------------------------
// SVD Line: 26422

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14INCFG
//    <name> GPIO14INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010044) \nGPIO14 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.24..24> GPIO14INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO13INTD  --------------------------------
// SVD Line: 26440

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13INTD
//    <name> GPIO13INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010044) \nGPIO13 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.23..23> GPIO13INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO13OUTCFG  -------------------------------
// SVD Line: 26458

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13OUTCFG
//    <name> GPIO13OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40010044) \nGPIO13 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.22..21> GPIO13OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO13INCFG  -------------------------------
// SVD Line: 26486

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13INCFG
//    <name> GPIO13INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010044) \nGPIO13 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.20..20> GPIO13INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO12INTD  --------------------------------
// SVD Line: 26504

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12INTD
//    <name> GPIO12INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010044) \nGPIO12 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.19..19> GPIO12INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO12OUTCFG  -------------------------------
// SVD Line: 26522

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12OUTCFG
//    <name> GPIO12OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x40010044) \nGPIO12 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.18..17> GPIO12OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO12INCFG  -------------------------------
// SVD Line: 26550

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12INCFG
//    <name> GPIO12INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010044) \nGPIO12 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.16..16> GPIO12INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO11INTD  --------------------------------
// SVD Line: 26568

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11INTD
//    <name> GPIO11INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010044) \nGPIO11 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.15..15> GPIO11INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO11OUTCFG  -------------------------------
// SVD Line: 26586

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11OUTCFG
//    <name> GPIO11OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40010044) \nGPIO11 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.14..13> GPIO11OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO11INCFG  -------------------------------
// SVD Line: 26614

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11INCFG
//    <name> GPIO11INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010044) \nGPIO11 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.12..12> GPIO11INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO10INTD  --------------------------------
// SVD Line: 26632

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10INTD
//    <name> GPIO10INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010044) \nGPIO10 interrupt direction.\n0 : nCELOW = FNCSEL = 0x2 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.11..11> GPIO10INTD
//        <0=> 0: nCELOW = FNCSEL = 0x2 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGB_GPIO10OUTCFG  -------------------------------
// SVD Line: 26650

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10OUTCFG
//    <name> GPIO10OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40010044) \nGPIO10 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.10..9> GPIO10OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO10INCFG  -------------------------------
// SVD Line: 26678

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10INCFG
//    <name> GPIO10INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010044) \nGPIO10 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.8..8> GPIO10INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGB_GPIO9INTD  --------------------------------
// SVD Line: 26696

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9INTD
//    <name> GPIO9INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010044) \nGPIO9 interrupt direction.\n0 : nCELOW = FNCSEL = 0x2 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.7..7> GPIO9INTD
//        <0=> 0: nCELOW = FNCSEL = 0x2 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO9OUTCFG  -------------------------------
// SVD Line: 26714

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9OUTCFG
//    <name> GPIO9OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010044) \nGPIO9 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.6..5> GPIO9OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO9INCFG  --------------------------------
// SVD Line: 26742

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9INCFG
//    <name> GPIO9INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010044) \nGPIO9 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.4..4> GPIO9INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_CFGB_GPIO8INTD  --------------------------------
// SVD Line: 26760

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8INTD
//    <name> GPIO8INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010044) \nGPIO8 interrupt direction.\n0 : nCELOW = FNCSEL = 0x2 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.3..3> GPIO8INTD
//        <0=> 0: nCELOW = FNCSEL = 0x2 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x2 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO8OUTCFG  -------------------------------
// SVD Line: 26778

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8OUTCFG
//    <name> GPIO8OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010044) \nGPIO8 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.2..1> GPIO8OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGB_GPIO8INCFG  --------------------------------
// SVD Line: 26806

//  <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8INCFG
//    <name> GPIO8INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010044) \nGPIO8 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGB ) </loc>
//      <o.0..0> GPIO8INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGB  -----------------------------------
// SVD Line: 26302

//  <rtree> SFDITEM_REG__GPIO_CFGB
//    <name> CFGB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010044) GPIO Configuration Register B (Pads 8-15) </i>
//    <loc> ( (unsigned int)((GPIO_CFGB >> 0) & 0xFFFFFFFF), ((GPIO_CFGB = (GPIO_CFGB & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO15INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO14INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO13INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO12INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO11INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO10INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO9INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGB_GPIO8INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGC  --------------------------------
// SVD Line: 26826

unsigned int GPIO_CFGC __AT (0x40010048);



// ----------------------------  Field Item: GPIO_CFGC_GPIO23INTD  --------------------------------
// SVD Line: 26836

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23INTD
//    <name> GPIO23INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010048) \nGPIO23 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.31..31> GPIO23INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO23OUTCFG  -------------------------------
// SVD Line: 26854

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23OUTCFG
//    <name> GPIO23OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x40010048) \nGPIO23 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.30..29> GPIO23OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO23INCFG  -------------------------------
// SVD Line: 26882

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23INCFG
//    <name> GPIO23INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010048) \nGPIO23 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.28..28> GPIO23INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO22INTD  --------------------------------
// SVD Line: 26900

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22INTD
//    <name> GPIO22INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010048) \nGPIO22 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.27..27> GPIO22INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO22OUTCFG  -------------------------------
// SVD Line: 26918

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22OUTCFG
//    <name> GPIO22OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x40010048) \nGPIO22 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.26..25> GPIO22OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO22INCFG  -------------------------------
// SVD Line: 26946

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22INCFG
//    <name> GPIO22INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010048) \nGPIO22 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.24..24> GPIO22INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO21INTD  --------------------------------
// SVD Line: 26964

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21INTD
//    <name> GPIO21INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010048) \nGPIO21 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.23..23> GPIO21INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO21OUTCFG  -------------------------------
// SVD Line: 26982

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21OUTCFG
//    <name> GPIO21OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40010048) \nGPIO21 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.22..21> GPIO21OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO21INCFG  -------------------------------
// SVD Line: 27010

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21INCFG
//    <name> GPIO21INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010048) \nGPIO21 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.20..20> GPIO21INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO20INTD  --------------------------------
// SVD Line: 27028

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20INTD
//    <name> GPIO20INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010048) \nGPIO20 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.19..19> GPIO20INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO20OUTCFG  -------------------------------
// SVD Line: 27046

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20OUTCFG
//    <name> GPIO20OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x40010048) \nGPIO20 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.18..17> GPIO20OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO20INCFG  -------------------------------
// SVD Line: 27074

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20INCFG
//    <name> GPIO20INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010048) \nGPIO20 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.16..16> GPIO20INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO19INTD  --------------------------------
// SVD Line: 27092

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19INTD
//    <name> GPIO19INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010048) \nGPIO19 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.15..15> GPIO19INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO19OUTCFG  -------------------------------
// SVD Line: 27110

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19OUTCFG
//    <name> GPIO19OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40010048) \nGPIO19 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.14..13> GPIO19OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO19INCFG  -------------------------------
// SVD Line: 27138

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19INCFG
//    <name> GPIO19INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010048) \nGPIO19 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.12..12> GPIO19INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO18INTD  --------------------------------
// SVD Line: 27156

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18INTD
//    <name> GPIO18INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010048) \nGPIO18 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.11..11> GPIO18INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO18OUTCFG  -------------------------------
// SVD Line: 27174

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18OUTCFG
//    <name> GPIO18OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40010048) \nGPIO18 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.10..9> GPIO18OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO18INCFG  -------------------------------
// SVD Line: 27202

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18INCFG
//    <name> GPIO18INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010048) \nGPIO18 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.8..8> GPIO18INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO17INTD  --------------------------------
// SVD Line: 27220

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17INTD
//    <name> GPIO17INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010048) \nGPIO17 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.7..7> GPIO17INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO17OUTCFG  -------------------------------
// SVD Line: 27238

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17OUTCFG
//    <name> GPIO17OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010048) \nGPIO17 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.6..5> GPIO17OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO17INCFG  -------------------------------
// SVD Line: 27266

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17INCFG
//    <name> GPIO17INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010048) \nGPIO17 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.4..4> GPIO17INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO16INTD  --------------------------------
// SVD Line: 27284

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16INTD
//    <name> GPIO16INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010048) \nGPIO16 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.3..3> GPIO16INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGC_GPIO16OUTCFG  -------------------------------
// SVD Line: 27302

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16OUTCFG
//    <name> GPIO16OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010048) \nGPIO16 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.2..1> GPIO16OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGC_GPIO16INCFG  -------------------------------
// SVD Line: 27330

//  <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16INCFG
//    <name> GPIO16INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010048) \nGPIO16 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGC ) </loc>
//      <o.0..0> GPIO16INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGC  -----------------------------------
// SVD Line: 26826

//  <rtree> SFDITEM_REG__GPIO_CFGC
//    <name> CFGC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010048) GPIO Configuration Register C (Pads 16-23) </i>
//    <loc> ( (unsigned int)((GPIO_CFGC >> 0) & 0xFFFFFFFF), ((GPIO_CFGC = (GPIO_CFGC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO23INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO22INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO21INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO20INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO19INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO18INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO17INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGC_GPIO16INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGD  --------------------------------
// SVD Line: 27350

unsigned int GPIO_CFGD __AT (0x4001004C);



// ----------------------------  Field Item: GPIO_CFGD_GPIO31INTD  --------------------------------
// SVD Line: 27360

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31INTD
//    <name> GPIO31INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4001004C) \nGPIO31 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.31..31> GPIO31INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO31OUTCFG  -------------------------------
// SVD Line: 27378

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31OUTCFG
//    <name> GPIO31OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x4001004C) \nGPIO31 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.30..29> GPIO31OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO31INCFG  -------------------------------
// SVD Line: 27406

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31INCFG
//    <name> GPIO31INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4001004C) \nGPIO31 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.28..28> GPIO31INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO30INTD  --------------------------------
// SVD Line: 27424

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30INTD
//    <name> GPIO30INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4001004C) \nGPIO30 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.27..27> GPIO30INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO30OUTCFG  -------------------------------
// SVD Line: 27442

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30OUTCFG
//    <name> GPIO30OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x4001004C) \nGPIO30 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.26..25> GPIO30OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO30INCFG  -------------------------------
// SVD Line: 27470

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30INCFG
//    <name> GPIO30INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001004C) \nGPIO30 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.24..24> GPIO30INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO29INTD  --------------------------------
// SVD Line: 27488

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29INTD
//    <name> GPIO29INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x4001004C) \nGPIO29 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.23..23> GPIO29INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO29OUTCFG  -------------------------------
// SVD Line: 27506

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29OUTCFG
//    <name> GPIO29OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x4001004C) \nGPIO29 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.22..21> GPIO29OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO29INCFG  -------------------------------
// SVD Line: 27534

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29INCFG
//    <name> GPIO29INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4001004C) \nGPIO29 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.20..20> GPIO29INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO28INTD  --------------------------------
// SVD Line: 27552

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28INTD
//    <name> GPIO28INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4001004C) \nGPIO28 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.19..19> GPIO28INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO28OUTCFG  -------------------------------
// SVD Line: 27570

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28OUTCFG
//    <name> GPIO28OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x4001004C) \nGPIO28 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.18..17> GPIO28OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO28INCFG  -------------------------------
// SVD Line: 27598

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28INCFG
//    <name> GPIO28INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001004C) \nGPIO28 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.16..16> GPIO28INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO27INTD  --------------------------------
// SVD Line: 27616

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27INTD
//    <name> GPIO27INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4001004C) \nGPIO27 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.15..15> GPIO27INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO27OUTCFG  -------------------------------
// SVD Line: 27634

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27OUTCFG
//    <name> GPIO27OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x4001004C) \nGPIO27 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.14..13> GPIO27OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO27INCFG  -------------------------------
// SVD Line: 27662

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27INCFG
//    <name> GPIO27INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001004C) \nGPIO27 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.12..12> GPIO27INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO26INTD  --------------------------------
// SVD Line: 27680

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26INTD
//    <name> GPIO26INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001004C) \nGPIO26 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.11..11> GPIO26INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO26OUTCFG  -------------------------------
// SVD Line: 27698

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26OUTCFG
//    <name> GPIO26OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x4001004C) \nGPIO26 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.10..9> GPIO26OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO26INCFG  -------------------------------
// SVD Line: 27726

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26INCFG
//    <name> GPIO26INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001004C) \nGPIO26 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.8..8> GPIO26INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO25INTD  --------------------------------
// SVD Line: 27744

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25INTD
//    <name> GPIO25INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001004C) \nGPIO25 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.7..7> GPIO25INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO25OUTCFG  -------------------------------
// SVD Line: 27762

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25OUTCFG
//    <name> GPIO25OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x4001004C) \nGPIO25 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.6..5> GPIO25OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO25INCFG  -------------------------------
// SVD Line: 27790

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25INCFG
//    <name> GPIO25INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001004C) \nGPIO25 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.4..4> GPIO25INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO24INTD  --------------------------------
// SVD Line: 27808

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24INTD
//    <name> GPIO24INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001004C) \nGPIO24 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.3..3> GPIO24INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGD_GPIO24OUTCFG  -------------------------------
// SVD Line: 27826

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24OUTCFG
//    <name> GPIO24OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x4001004C) \nGPIO24 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.2..1> GPIO24OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGD_GPIO24INCFG  -------------------------------
// SVD Line: 27854

//  <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24INCFG
//    <name> GPIO24INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001004C) \nGPIO24 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGD ) </loc>
//      <o.0..0> GPIO24INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGD  -----------------------------------
// SVD Line: 27350

//  <rtree> SFDITEM_REG__GPIO_CFGD
//    <name> CFGD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001004C) GPIO Configuration Register D (Pads 24-31) </i>
//    <loc> ( (unsigned int)((GPIO_CFGD >> 0) & 0xFFFFFFFF), ((GPIO_CFGD = (GPIO_CFGD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO31INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO30INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO29INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO28INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO27INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO26INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO25INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGD_GPIO24INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGE  --------------------------------
// SVD Line: 27874

unsigned int GPIO_CFGE __AT (0x40010050);



// ----------------------------  Field Item: GPIO_CFGE_GPIO39INTD  --------------------------------
// SVD Line: 27884

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39INTD
//    <name> GPIO39INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010050) \nGPIO39 interrupt direction.\n0 : INTDIS = INCFG = 1 - No interrupt on GPIO transition value.\n1 : INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.31..31> GPIO39INTD
//        <0=> 0: INTDIS = INCFG = 1 - No interrupt on GPIO transition value.
//        <1=> 1: INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO39OUTCFG  -------------------------------
// SVD Line: 27902

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39OUTCFG
//    <name> GPIO39OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x40010050) \nGPIO39 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.30..29> GPIO39OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO39INCFG  -------------------------------
// SVD Line: 27930

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39INCFG
//    <name> GPIO39INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010050) \nGPIO39 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.28..28> GPIO39INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO38INTD  --------------------------------
// SVD Line: 27948

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38INTD
//    <name> GPIO38INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010050) \nGPIO38 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.27..27> GPIO38INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO38OUTCFG  -------------------------------
// SVD Line: 27966

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38OUTCFG
//    <name> GPIO38OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x40010050) \nGPIO38 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.26..25> GPIO38OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO38INCFG  -------------------------------
// SVD Line: 27994

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38INCFG
//    <name> GPIO38INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010050) \nGPIO38 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.24..24> GPIO38INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO37INTD  --------------------------------
// SVD Line: 28012

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37INTD
//    <name> GPIO37INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010050) \nGPIO37 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.23..23> GPIO37INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO37OUTCFG  -------------------------------
// SVD Line: 28030

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37OUTCFG
//    <name> GPIO37OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40010050) \nGPIO37 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.22..21> GPIO37OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO37INCFG  -------------------------------
// SVD Line: 28058

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37INCFG
//    <name> GPIO37INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010050) \nGPIO37 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.20..20> GPIO37INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO36INTD  --------------------------------
// SVD Line: 28076

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36INTD
//    <name> GPIO36INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010050) \nGPIO36 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.19..19> GPIO36INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO36OUTCFG  -------------------------------
// SVD Line: 28094

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36OUTCFG
//    <name> GPIO36OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x40010050) \nGPIO36 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.18..17> GPIO36OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO36INCFG  -------------------------------
// SVD Line: 28122

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36INCFG
//    <name> GPIO36INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010050) \nGPIO36 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.16..16> GPIO36INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO35INTD  --------------------------------
// SVD Line: 28140

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35INTD
//    <name> GPIO35INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010050) \nGPIO35 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.15..15> GPIO35INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO35OUTCFG  -------------------------------
// SVD Line: 28158

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35OUTCFG
//    <name> GPIO35OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40010050) \nGPIO35 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.14..13> GPIO35OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO35INCFG  -------------------------------
// SVD Line: 28186

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35INCFG
//    <name> GPIO35INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010050) \nGPIO35 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.12..12> GPIO35INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO34INTD  --------------------------------
// SVD Line: 28204

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34INTD
//    <name> GPIO34INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010050) \nGPIO34 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.11..11> GPIO34INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO34OUTCFG  -------------------------------
// SVD Line: 28222

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34OUTCFG
//    <name> GPIO34OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40010050) \nGPIO34 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.10..9> GPIO34OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO34INCFG  -------------------------------
// SVD Line: 28250

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34INCFG
//    <name> GPIO34INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010050) \nGPIO34 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.8..8> GPIO34INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO33INTD  --------------------------------
// SVD Line: 28268

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33INTD
//    <name> GPIO33INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010050) \nGPIO33 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.7..7> GPIO33INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO33OUTCFG  -------------------------------
// SVD Line: 28286

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33OUTCFG
//    <name> GPIO33OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010050) \nGPIO33 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.6..5> GPIO33OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO33INCFG  -------------------------------
// SVD Line: 28314

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33INCFG
//    <name> GPIO33INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010050) \nGPIO33 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.4..4> GPIO33INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO32INTD  --------------------------------
// SVD Line: 28332

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32INTD
//    <name> GPIO32INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010050) \nGPIO32 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.3..3> GPIO32INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGE_GPIO32OUTCFG  -------------------------------
// SVD Line: 28350

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32OUTCFG
//    <name> GPIO32OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010050) \nGPIO32 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.2..1> GPIO32OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGE_GPIO32INCFG  -------------------------------
// SVD Line: 28378

//  <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32INCFG
//    <name> GPIO32INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010050) \nGPIO32 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGE ) </loc>
//      <o.0..0> GPIO32INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGE  -----------------------------------
// SVD Line: 27874

//  <rtree> SFDITEM_REG__GPIO_CFGE
//    <name> CFGE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010050) GPIO Configuration Register E (Pads 32-39) </i>
//    <loc> ( (unsigned int)((GPIO_CFGE >> 0) & 0xFFFFFFFF), ((GPIO_CFGE = (GPIO_CFGE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO39INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO38INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO37INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO36INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO35INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO34INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO33INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGE_GPIO32INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGF  --------------------------------
// SVD Line: 28398

unsigned int GPIO_CFGF __AT (0x40010054);



// ----------------------------  Field Item: GPIO_CFGF_GPIO47INTD  --------------------------------
// SVD Line: 28408

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47INTD
//    <name> GPIO47INTD </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010054) \nGPIO47 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.31..31> GPIO47INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO47OUTCFG  -------------------------------
// SVD Line: 28426

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47OUTCFG
//    <name> GPIO47OUTCFG </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x40010054) \nGPIO47 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.30..29> GPIO47OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO47INCFG  -------------------------------
// SVD Line: 28454

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47INCFG
//    <name> GPIO47INCFG </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010054) \nGPIO47 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.28..28> GPIO47INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO46INTD  --------------------------------
// SVD Line: 28472

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46INTD
//    <name> GPIO46INTD </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010054) \nGPIO46 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.27..27> GPIO46INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO46OUTCFG  -------------------------------
// SVD Line: 28490

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46OUTCFG
//    <name> GPIO46OUTCFG </name>
//    <rw> 
//    <i> [Bits 26..25] RW (@ 0x40010054) \nGPIO46 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.26..25> GPIO46OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO46INCFG  -------------------------------
// SVD Line: 28518

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46INCFG
//    <name> GPIO46INCFG </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010054) \nGPIO46 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.24..24> GPIO46INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO45INTD  --------------------------------
// SVD Line: 28536

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45INTD
//    <name> GPIO45INTD </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010054) \nGPIO45 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.23..23> GPIO45INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO45OUTCFG  -------------------------------
// SVD Line: 28554

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45OUTCFG
//    <name> GPIO45OUTCFG </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40010054) \nGPIO45 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.22..21> GPIO45OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO45INCFG  -------------------------------
// SVD Line: 28582

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45INCFG
//    <name> GPIO45INCFG </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010054) \nGPIO45 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.20..20> GPIO45INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO44INTD  --------------------------------
// SVD Line: 28600

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44INTD
//    <name> GPIO44INTD </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010054) \nGPIO44 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.19..19> GPIO44INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO44OUTCFG  -------------------------------
// SVD Line: 28618

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44OUTCFG
//    <name> GPIO44OUTCFG </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x40010054) \nGPIO44 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.18..17> GPIO44OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO44INCFG  -------------------------------
// SVD Line: 28646

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44INCFG
//    <name> GPIO44INCFG </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010054) \nGPIO44 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.16..16> GPIO44INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO43INTD  --------------------------------
// SVD Line: 28664

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43INTD
//    <name> GPIO43INTD </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010054) \nGPIO43 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.15..15> GPIO43INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO43OUTCFG  -------------------------------
// SVD Line: 28682

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43OUTCFG
//    <name> GPIO43OUTCFG </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40010054) \nGPIO43 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.14..13> GPIO43OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO43INCFG  -------------------------------
// SVD Line: 28710

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43INCFG
//    <name> GPIO43INCFG </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010054) \nGPIO43 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.12..12> GPIO43INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO42INTD  --------------------------------
// SVD Line: 28728

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42INTD
//    <name> GPIO42INTD </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010054) \nGPIO42 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.11..11> GPIO42INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO42OUTCFG  -------------------------------
// SVD Line: 28746

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42OUTCFG
//    <name> GPIO42OUTCFG </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40010054) \nGPIO42 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.10..9> GPIO42OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO42INCFG  -------------------------------
// SVD Line: 28774

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42INCFG
//    <name> GPIO42INCFG </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010054) \nGPIO42 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.8..8> GPIO42INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO41INTD  --------------------------------
// SVD Line: 28792

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41INTD
//    <name> GPIO41INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010054) \nGPIO41 interrupt direction.\n0 : nCELOW = FNCSEL = 0x0 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x0 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.7..7> GPIO41INTD
//        <0=> 0: nCELOW = FNCSEL = 0x0 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x0 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO41OUTCFG  -------------------------------
// SVD Line: 28810

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41OUTCFG
//    <name> GPIO41OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010054) \nGPIO41 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.6..5> GPIO41OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO41INCFG  -------------------------------
// SVD Line: 28838

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41INCFG
//    <name> GPIO41INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010054) \nGPIO41 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.4..4> GPIO41INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO40INTD  --------------------------------
// SVD Line: 28856

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40INTD
//    <name> GPIO40INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010054) \nGPIO40 interrupt direction.\n0 : INTDIS = INCFG = 1 - No interrupt on GPIO transition value.\n1 : INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.3..3> GPIO40INTD
//        <0=> 0: INTDIS = INCFG = 1 - No interrupt on GPIO transition value.
//        <1=> 1: INTBOTH = INCFG = 1 - Interrupt on either low to high or high to low GPIO transition value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGF_GPIO40OUTCFG  -------------------------------
// SVD Line: 28874

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40OUTCFG
//    <name> GPIO40OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010054) \nGPIO40 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.2..1> GPIO40OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGF_GPIO40INCFG  -------------------------------
// SVD Line: 28902

//  <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40INCFG
//    <name> GPIO40INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010054) \nGPIO40 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGF ) </loc>
//      <o.0..0> GPIO40INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGF  -----------------------------------
// SVD Line: 28398

//  <rtree> SFDITEM_REG__GPIO_CFGF
//    <name> CFGF </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010054) GPIO Configuration Register F (Pads 40 -47) </i>
//    <loc> ( (unsigned int)((GPIO_CFGF >> 0) & 0xFFFFFFFF), ((GPIO_CFGF = (GPIO_CFGF & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO47INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO46INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO45INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO44INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO43INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO42INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO41INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGF_GPIO40INCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_CFGG  --------------------------------
// SVD Line: 28922

unsigned int GPIO_CFGG __AT (0x40010058);



// ----------------------------  Field Item: GPIO_CFGG_GPIO49INTD  --------------------------------
// SVD Line: 28932

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49INTD
//    <name> GPIO49INTD </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010058) \nGPIO49 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.7..7> GPIO49INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGG_GPIO49OUTCFG  -------------------------------
// SVD Line: 28950

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49OUTCFG
//    <name> GPIO49OUTCFG </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40010058) \nGPIO49 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.6..5> GPIO49OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGG_GPIO49INCFG  -------------------------------
// SVD Line: 28978

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49INCFG
//    <name> GPIO49INCFG </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010058) \nGPIO49 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.4..4> GPIO49INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGG_GPIO48INTD  --------------------------------
// SVD Line: 28996

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48INTD
//    <name> GPIO48INTD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010058) \nGPIO48 interrupt direction.\n0 : nCELOW = FNCSEL = 0x1 - nCE polarity active low value.\n1 : nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.3..3> GPIO48INTD
//        <0=> 0: nCELOW = FNCSEL = 0x1 - nCE polarity active low value.
//        <1=> 1: nCEHIGH = FNCSEL = 0x1 - nCE polarity active high value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_CFGG_GPIO48OUTCFG  -------------------------------
// SVD Line: 29014

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48OUTCFG
//    <name> GPIO48OUTCFG </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40010058) \nGPIO48 output configuration.\n0 : DIS = FNCSEL = 0x3 - Output disabled value.\n1 : PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.\n2 : OD = FNCSEL = 0x3 - Output is open drain value.\n3 : TS = FNCSEL = 0x3 - Output is tri-state value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.2..1> GPIO48OUTCFG
//        <0=> 0: DIS = FNCSEL = 0x3 - Output disabled value.
//        <1=> 1: PUSHPULL = FNCSEL = 0x3 - Output is push-pull value.
//        <2=> 2: OD = FNCSEL = 0x3 - Output is open drain value.
//        <3=> 3: TS = FNCSEL = 0x3 - Output is tri-state value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: GPIO_CFGG_GPIO48INCFG  -------------------------------
// SVD Line: 29042

//  <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48INCFG
//    <name> GPIO48INCFG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010058) \nGPIO48 input enable.\n0 : READ = Read the GPIO pin data value.\n1 : RDZERO = INTD = 0 - Readback will always be zero value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CFGG ) </loc>
//      <o.0..0> GPIO48INCFG
//        <0=> 0: READ = Read the GPIO pin data value.
//        <1=> 1: RDZERO = INTD = 0 - Readback will always be zero value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_CFGG  -----------------------------------
// SVD Line: 28922

//  <rtree> SFDITEM_REG__GPIO_CFGG
//    <name> CFGG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010058) GPIO Configuration Register G (Pads 48-49) </i>
//    <loc> ( (unsigned int)((GPIO_CFGG >> 0) & 0xFFFFFFFF), ((GPIO_CFGG = (GPIO_CFGG & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO49INCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48INTD </item>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48OUTCFG </item>
//    <item> SFDITEM_FIELD__GPIO_CFGG_GPIO48INCFG </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_PADKEY  -------------------------------
// SVD Line: 29062

unsigned int GPIO_PADKEY __AT (0x40010060);



// -----------------------------  Field Item: GPIO_PADKEY_PADKEY  ---------------------------------
// SVD Line: 29072

//  <item> SFDITEM_FIELD__GPIO_PADKEY_PADKEY
//    <name> PADKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010060) Key register value. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_PADKEY >> 0) & 0xFFFFFFFF), ((GPIO_PADKEY = (GPIO_PADKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: GPIO_PADKEY  ----------------------------------
// SVD Line: 29062

//  <rtree> SFDITEM_REG__GPIO_PADKEY
//    <name> PADKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010060) Key Register for all pad configuration registers </i>
//    <loc> ( (unsigned int)((GPIO_PADKEY >> 0) & 0xFFFFFFFF), ((GPIO_PADKEY = (GPIO_PADKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_PADKEY_PADKEY </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_RDA  --------------------------------
// SVD Line: 29087

unsigned int GPIO_RDA __AT (0x40010080);



// --------------------------------  Field Item: GPIO_RDA_RDA  ------------------------------------
// SVD Line: 29097

//  <item> SFDITEM_FIELD__GPIO_RDA_RDA
//    <name> RDA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010080) GPIO31-0 read data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_RDA >> 0) & 0xFFFFFFFF), ((GPIO_RDA = (GPIO_RDA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_RDA  ------------------------------------
// SVD Line: 29087

//  <rtree> SFDITEM_REG__GPIO_RDA
//    <name> RDA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010080) GPIO Input Register A </i>
//    <loc> ( (unsigned int)((GPIO_RDA >> 0) & 0xFFFFFFFF), ((GPIO_RDA = (GPIO_RDA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_RDA_RDA </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_RDB  --------------------------------
// SVD Line: 29106

unsigned int GPIO_RDB __AT (0x40010084);



// --------------------------------  Field Item: GPIO_RDB_RDB  ------------------------------------
// SVD Line: 29116

//  <item> SFDITEM_FIELD__GPIO_RDB_RDB
//    <name> RDB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x40010084) GPIO49-32 read data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_RDB >> 0) & 0x3FFFF), ((GPIO_RDB = (GPIO_RDB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_RDB  ------------------------------------
// SVD Line: 29106

//  <rtree> SFDITEM_REG__GPIO_RDB
//    <name> RDB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010084) GPIO Input Register B </i>
//    <loc> ( (unsigned int)((GPIO_RDB >> 0) & 0xFFFFFFFF), ((GPIO_RDB = (GPIO_RDB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_RDB_RDB </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_WTA  --------------------------------
// SVD Line: 29125

unsigned int GPIO_WTA __AT (0x40010088);



// --------------------------------  Field Item: GPIO_WTA_WTA  ------------------------------------
// SVD Line: 29135

//  <item> SFDITEM_FIELD__GPIO_WTA_WTA
//    <name> WTA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010088) GPIO31-0 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTA >> 0) & 0xFFFFFFFF), ((GPIO_WTA = (GPIO_WTA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTA  ------------------------------------
// SVD Line: 29125

//  <rtree> SFDITEM_REG__GPIO_WTA
//    <name> WTA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010088) GPIO Output Register A </i>
//    <loc> ( (unsigned int)((GPIO_WTA >> 0) & 0xFFFFFFFF), ((GPIO_WTA = (GPIO_WTA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTA_WTA </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_WTB  --------------------------------
// SVD Line: 29144

unsigned int GPIO_WTB __AT (0x4001008C);



// --------------------------------  Field Item: GPIO_WTB_WTB  ------------------------------------
// SVD Line: 29154

//  <item> SFDITEM_FIELD__GPIO_WTB_WTB
//    <name> WTB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x4001008C) GPIO49-32 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTB >> 0) & 0x3FFFF), ((GPIO_WTB = (GPIO_WTB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTB  ------------------------------------
// SVD Line: 29144

//  <rtree> SFDITEM_REG__GPIO_WTB
//    <name> WTB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001008C) GPIO Output Register B </i>
//    <loc> ( (unsigned int)((GPIO_WTB >> 0) & 0xFFFFFFFF), ((GPIO_WTB = (GPIO_WTB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTB_WTB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_WTSA  --------------------------------
// SVD Line: 29163

unsigned int GPIO_WTSA __AT (0x40010090);



// -------------------------------  Field Item: GPIO_WTSA_WTSA  -----------------------------------
// SVD Line: 29173

//  <item> SFDITEM_FIELD__GPIO_WTSA_WTSA
//    <name> WTSA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010090) Set the GPIO31-0 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTSA >> 0) & 0xFFFFFFFF), ((GPIO_WTSA = (GPIO_WTSA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTSA  -----------------------------------
// SVD Line: 29163

//  <rtree> SFDITEM_REG__GPIO_WTSA
//    <name> WTSA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010090) GPIO Output Register A Set </i>
//    <loc> ( (unsigned int)((GPIO_WTSA >> 0) & 0xFFFFFFFF), ((GPIO_WTSA = (GPIO_WTSA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTSA_WTSA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_WTSB  --------------------------------
// SVD Line: 29182

unsigned int GPIO_WTSB __AT (0x40010094);



// -------------------------------  Field Item: GPIO_WTSB_WTSB  -----------------------------------
// SVD Line: 29192

//  <item> SFDITEM_FIELD__GPIO_WTSB_WTSB
//    <name> WTSB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x40010094) Set the GPIO49-32 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTSB >> 0) & 0x3FFFF), ((GPIO_WTSB = (GPIO_WTSB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTSB  -----------------------------------
// SVD Line: 29182

//  <rtree> SFDITEM_REG__GPIO_WTSB
//    <name> WTSB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010094) GPIO Output Register B Set </i>
//    <loc> ( (unsigned int)((GPIO_WTSB >> 0) & 0xFFFFFFFF), ((GPIO_WTSB = (GPIO_WTSB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTSB_WTSB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_WTCA  --------------------------------
// SVD Line: 29201

unsigned int GPIO_WTCA __AT (0x40010098);



// -------------------------------  Field Item: GPIO_WTCA_WTCA  -----------------------------------
// SVD Line: 29211

//  <item> SFDITEM_FIELD__GPIO_WTCA_WTCA
//    <name> WTCA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010098) Clear the GPIO31-0 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTCA >> 0) & 0xFFFFFFFF), ((GPIO_WTCA = (GPIO_WTCA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTCA  -----------------------------------
// SVD Line: 29201

//  <rtree> SFDITEM_REG__GPIO_WTCA
//    <name> WTCA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010098) GPIO Output Register A Clear </i>
//    <loc> ( (unsigned int)((GPIO_WTCA >> 0) & 0xFFFFFFFF), ((GPIO_WTCA = (GPIO_WTCA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTCA_WTCA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_WTCB  --------------------------------
// SVD Line: 29220

unsigned int GPIO_WTCB __AT (0x4001009C);



// -------------------------------  Field Item: GPIO_WTCB_WTCB  -----------------------------------
// SVD Line: 29230

//  <item> SFDITEM_FIELD__GPIO_WTCB_WTCB
//    <name> WTCB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x4001009C) Clear the GPIO49-32 write data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_WTCB >> 0) & 0x3FFFF), ((GPIO_WTCB = (GPIO_WTCB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_WTCB  -----------------------------------
// SVD Line: 29220

//  <rtree> SFDITEM_REG__GPIO_WTCB
//    <name> WTCB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001009C) GPIO Output Register B Clear </i>
//    <loc> ( (unsigned int)((GPIO_WTCB >> 0) & 0xFFFFFFFF), ((GPIO_WTCB = (GPIO_WTCB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_WTCB_WTCB </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_ENA  --------------------------------
// SVD Line: 29239

unsigned int GPIO_ENA __AT (0x400100A0);



// --------------------------------  Field Item: GPIO_ENA_ENA  ------------------------------------
// SVD Line: 29249

//  <item> SFDITEM_FIELD__GPIO_ENA_ENA
//    <name> ENA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100A0) GPIO31-0 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENA >> 0) & 0xFFFFFFFF), ((GPIO_ENA = (GPIO_ENA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENA  ------------------------------------
// SVD Line: 29239

//  <rtree> SFDITEM_REG__GPIO_ENA
//    <name> ENA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100A0) GPIO Enable Register A </i>
//    <loc> ( (unsigned int)((GPIO_ENA >> 0) & 0xFFFFFFFF), ((GPIO_ENA = (GPIO_ENA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENA_ENA </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: GPIO_ENB  --------------------------------
// SVD Line: 29258

unsigned int GPIO_ENB __AT (0x400100A4);



// --------------------------------  Field Item: GPIO_ENB_ENB  ------------------------------------
// SVD Line: 29268

//  <item> SFDITEM_FIELD__GPIO_ENB_ENB
//    <name> ENB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x400100A4) GPIO49-32 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENB >> 0) & 0x3FFFF), ((GPIO_ENB = (GPIO_ENB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENB  ------------------------------------
// SVD Line: 29258

//  <rtree> SFDITEM_REG__GPIO_ENB
//    <name> ENB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100A4) GPIO Enable Register B </i>
//    <loc> ( (unsigned int)((GPIO_ENB >> 0) & 0xFFFFFFFF), ((GPIO_ENB = (GPIO_ENB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENB_ENB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_ENSA  --------------------------------
// SVD Line: 29277

unsigned int GPIO_ENSA __AT (0x400100A8);



// -------------------------------  Field Item: GPIO_ENSA_ENSA  -----------------------------------
// SVD Line: 29287

//  <item> SFDITEM_FIELD__GPIO_ENSA_ENSA
//    <name> ENSA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100A8) Set the GPIO31-0 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENSA >> 0) & 0xFFFFFFFF), ((GPIO_ENSA = (GPIO_ENSA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENSA  -----------------------------------
// SVD Line: 29277

//  <rtree> SFDITEM_REG__GPIO_ENSA
//    <name> ENSA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100A8) GPIO Enable Register A Set </i>
//    <loc> ( (unsigned int)((GPIO_ENSA >> 0) & 0xFFFFFFFF), ((GPIO_ENSA = (GPIO_ENSA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENSA_ENSA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_ENSB  --------------------------------
// SVD Line: 29296

unsigned int GPIO_ENSB __AT (0x400100AC);



// -------------------------------  Field Item: GPIO_ENSB_ENSB  -----------------------------------
// SVD Line: 29306

//  <item> SFDITEM_FIELD__GPIO_ENSB_ENSB
//    <name> ENSB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x400100AC) Set the GPIO49-32 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENSB >> 0) & 0x3FFFF), ((GPIO_ENSB = (GPIO_ENSB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENSB  -----------------------------------
// SVD Line: 29296

//  <rtree> SFDITEM_REG__GPIO_ENSB
//    <name> ENSB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100AC) GPIO Enable Register B Set </i>
//    <loc> ( (unsigned int)((GPIO_ENSB >> 0) & 0xFFFFFFFF), ((GPIO_ENSB = (GPIO_ENSB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENSB_ENSB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_ENCA  --------------------------------
// SVD Line: 29315

unsigned int GPIO_ENCA __AT (0x400100B4);



// -------------------------------  Field Item: GPIO_ENCA_ENCA  -----------------------------------
// SVD Line: 29325

//  <item> SFDITEM_FIELD__GPIO_ENCA_ENCA
//    <name> ENCA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100B4) Clear the GPIO31-0 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENCA >> 0) & 0xFFFFFFFF), ((GPIO_ENCA = (GPIO_ENCA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENCA  -----------------------------------
// SVD Line: 29315

//  <rtree> SFDITEM_REG__GPIO_ENCA
//    <name> ENCA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100B4) GPIO Enable Register A Clear </i>
//    <loc> ( (unsigned int)((GPIO_ENCA >> 0) & 0xFFFFFFFF), ((GPIO_ENCA = (GPIO_ENCA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENCA_ENCA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_ENCB  --------------------------------
// SVD Line: 29334

unsigned int GPIO_ENCB __AT (0x400100B8);



// -------------------------------  Field Item: GPIO_ENCB_ENCB  -----------------------------------
// SVD Line: 29344

//  <item> SFDITEM_FIELD__GPIO_ENCB_ENCB
//    <name> ENCB </name>
//    <rw> 
//    <i> [Bits 17..0] RW (@ 0x400100B8) Clear the GPIO49-32 output enables </i>
//    <edit> 
//      <loc> ( (unsigned int)((GPIO_ENCB >> 0) & 0x3FFFF), ((GPIO_ENCB = (GPIO_ENCB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_ENCB  -----------------------------------
// SVD Line: 29334

//  <rtree> SFDITEM_REG__GPIO_ENCB
//    <name> ENCB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100B8) GPIO Enable Register B Clear </i>
//    <loc> ( (unsigned int)((GPIO_ENCB >> 0) & 0xFFFFFFFF), ((GPIO_ENCB = (GPIO_ENCB & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ENCB_ENCB </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_STMRCAP  ------------------------------
// SVD Line: 29353

unsigned int GPIO_STMRCAP __AT (0x400100BC);



// -----------------------------  Field Item: GPIO_STMRCAP_STPOL3  --------------------------------
// SVD Line: 29363

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL3
//    <name> STPOL3 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400100BC) \nSTIMER Capture 3 Polarity.\n0 : CAPLH = Capture on low to high GPIO transition value.\n1 : CAPHL = Capture on high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_STMRCAP ) </loc>
//      <o.30..30> STPOL3
//        <0=> 0: CAPLH = Capture on low to high GPIO transition value.
//        <1=> 1: CAPHL = Capture on high to low GPIO transition value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STSEL3  --------------------------------
// SVD Line: 29381

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL3
//    <name> STSEL3 </name>
//    <rw> 
//    <i> [Bits 29..24] RW (@ 0x400100BC) STIMER Capture 3 Select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_STMRCAP >> 24) & 0x3F), ((GPIO_STMRCAP = (GPIO_STMRCAP & ~(0x3FUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STPOL2  --------------------------------
// SVD Line: 29388

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL2
//    <name> STPOL2 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x400100BC) \nSTIMER Capture 2 Polarity.\n0 : CAPLH = Capture on low to high GPIO transition value.\n1 : CAPHL = Capture on high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_STMRCAP ) </loc>
//      <o.22..22> STPOL2
//        <0=> 0: CAPLH = Capture on low to high GPIO transition value.
//        <1=> 1: CAPHL = Capture on high to low GPIO transition value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STSEL2  --------------------------------
// SVD Line: 29406

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL2
//    <name> STSEL2 </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x400100BC) STIMER Capture 2 Select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_STMRCAP >> 16) & 0x3F), ((GPIO_STMRCAP = (GPIO_STMRCAP & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STPOL1  --------------------------------
// SVD Line: 29413

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL1
//    <name> STPOL1 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x400100BC) \nSTIMER Capture 1 Polarity.\n0 : CAPLH = Capture on low to high GPIO transition value.\n1 : CAPHL = Capture on high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_STMRCAP ) </loc>
//      <o.14..14> STPOL1
//        <0=> 0: CAPLH = Capture on low to high GPIO transition value.
//        <1=> 1: CAPHL = Capture on high to low GPIO transition value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STSEL1  --------------------------------
// SVD Line: 29431

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL1
//    <name> STSEL1 </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x400100BC) STIMER Capture 1 Select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_STMRCAP >> 8) & 0x3F), ((GPIO_STMRCAP = (GPIO_STMRCAP & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STPOL0  --------------------------------
// SVD Line: 29438

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL0
//    <name> STPOL0 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x400100BC) \nSTIMER Capture 0 Polarity.\n0 : CAPLH = Capture on low to high GPIO transition value.\n1 : CAPHL = Capture on high to low GPIO transition value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_STMRCAP ) </loc>
//      <o.6..6> STPOL0
//        <0=> 0: CAPLH = Capture on low to high GPIO transition value.
//        <1=> 1: CAPHL = Capture on high to low GPIO transition value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: GPIO_STMRCAP_STSEL0  --------------------------------
// SVD Line: 29456

//  <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL0
//    <name> STSEL0 </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100BC) STIMER Capture 0 Select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_STMRCAP >> 0) & 0x3F), ((GPIO_STMRCAP = (GPIO_STMRCAP & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_STMRCAP  ----------------------------------
// SVD Line: 29353

//  <rtree> SFDITEM_REG__GPIO_STMRCAP
//    <name> STMRCAP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100BC) STIMER Capture Control </i>
//    <loc> ( (unsigned int)((GPIO_STMRCAP >> 0) & 0xFFFFFFFF), ((GPIO_STMRCAP = (GPIO_STMRCAP & ~(0x7F7F7F7FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7F7F7F7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL3 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL3 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL2 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL2 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL1 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL1 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STPOL0 </item>
//    <item> SFDITEM_FIELD__GPIO_STMRCAP_STSEL0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM0IRQ  ------------------------------
// SVD Line: 29465

unsigned int GPIO_IOM0IRQ __AT (0x400100C0);



// ----------------------------  Field Item: GPIO_IOM0IRQ_IOM0IRQ  --------------------------------
// SVD Line: 29475

//  <item> SFDITEM_FIELD__GPIO_IOM0IRQ_IOM0IRQ
//    <name> IOM0IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100C0) IOMSTR0 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM0IRQ >> 0) & 0x3F), ((GPIO_IOM0IRQ = (GPIO_IOM0IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM0IRQ  ----------------------------------
// SVD Line: 29465

//  <rtree> SFDITEM_REG__GPIO_IOM0IRQ
//    <name> IOM0IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100C0) IOM0 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM0IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM0IRQ = (GPIO_IOM0IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM0IRQ_IOM0IRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM1IRQ  ------------------------------
// SVD Line: 29484

unsigned int GPIO_IOM1IRQ __AT (0x400100C4);



// ----------------------------  Field Item: GPIO_IOM1IRQ_IOM1IRQ  --------------------------------
// SVD Line: 29494

//  <item> SFDITEM_FIELD__GPIO_IOM1IRQ_IOM1IRQ
//    <name> IOM1IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100C4) IOMSTR1 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM1IRQ >> 0) & 0x3F), ((GPIO_IOM1IRQ = (GPIO_IOM1IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM1IRQ  ----------------------------------
// SVD Line: 29484

//  <rtree> SFDITEM_REG__GPIO_IOM1IRQ
//    <name> IOM1IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100C4) IOM1 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM1IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM1IRQ = (GPIO_IOM1IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM1IRQ_IOM1IRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM2IRQ  ------------------------------
// SVD Line: 29503

unsigned int GPIO_IOM2IRQ __AT (0x400100C8);



// ----------------------------  Field Item: GPIO_IOM2IRQ_IOM2IRQ  --------------------------------
// SVD Line: 29513

//  <item> SFDITEM_FIELD__GPIO_IOM2IRQ_IOM2IRQ
//    <name> IOM2IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100C8) IOMSTR2 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM2IRQ >> 0) & 0x3F), ((GPIO_IOM2IRQ = (GPIO_IOM2IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM2IRQ  ----------------------------------
// SVD Line: 29503

//  <rtree> SFDITEM_REG__GPIO_IOM2IRQ
//    <name> IOM2IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100C8) IOM2 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM2IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM2IRQ = (GPIO_IOM2IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM2IRQ_IOM2IRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM3IRQ  ------------------------------
// SVD Line: 29522

unsigned int GPIO_IOM3IRQ __AT (0x400100CC);



// ----------------------------  Field Item: GPIO_IOM3IRQ_IOM3IRQ  --------------------------------
// SVD Line: 29532

//  <item> SFDITEM_FIELD__GPIO_IOM3IRQ_IOM3IRQ
//    <name> IOM3IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100CC) IOMSTR3 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM3IRQ >> 0) & 0x3F), ((GPIO_IOM3IRQ = (GPIO_IOM3IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM3IRQ  ----------------------------------
// SVD Line: 29522

//  <rtree> SFDITEM_REG__GPIO_IOM3IRQ
//    <name> IOM3IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100CC) IOM3 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM3IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM3IRQ = (GPIO_IOM3IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM3IRQ_IOM3IRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM4IRQ  ------------------------------
// SVD Line: 29541

unsigned int GPIO_IOM4IRQ __AT (0x400100D0);



// ----------------------------  Field Item: GPIO_IOM4IRQ_IOM4IRQ  --------------------------------
// SVD Line: 29551

//  <item> SFDITEM_FIELD__GPIO_IOM4IRQ_IOM4IRQ
//    <name> IOM4IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100D0) IOMSTR4 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM4IRQ >> 0) & 0x3F), ((GPIO_IOM4IRQ = (GPIO_IOM4IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM4IRQ  ----------------------------------
// SVD Line: 29541

//  <rtree> SFDITEM_REG__GPIO_IOM4IRQ
//    <name> IOM4IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100D0) IOM4 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM4IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM4IRQ = (GPIO_IOM4IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM4IRQ_IOM4IRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_IOM5IRQ  ------------------------------
// SVD Line: 29560

unsigned int GPIO_IOM5IRQ __AT (0x400100D4);



// ----------------------------  Field Item: GPIO_IOM5IRQ_IOM5IRQ  --------------------------------
// SVD Line: 29570

//  <item> SFDITEM_FIELD__GPIO_IOM5IRQ_IOM5IRQ
//    <name> IOM5IRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100D4) IOMSTR5 IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_IOM5IRQ >> 0) & 0x3F), ((GPIO_IOM5IRQ = (GPIO_IOM5IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_IOM5IRQ  ----------------------------------
// SVD Line: 29560

//  <rtree> SFDITEM_REG__GPIO_IOM5IRQ
//    <name> IOM5IRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100D4) IOM5 Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_IOM5IRQ >> 0) & 0xFFFFFFFF), ((GPIO_IOM5IRQ = (GPIO_IOM5IRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_IOM5IRQ_IOM5IRQ </item>
//  </rtree>
//  


// --------------------------  Register Item Address: GPIO_BLEIFIRQ  ------------------------------
// SVD Line: 29579

unsigned int GPIO_BLEIFIRQ __AT (0x400100D8);



// ---------------------------  Field Item: GPIO_BLEIFIRQ_BLEIFIRQ  -------------------------------
// SVD Line: 29589

//  <item> SFDITEM_FIELD__GPIO_BLEIFIRQ_BLEIFIRQ
//    <name> BLEIFIRQ </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x400100D8) BLEIF IRQ pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_BLEIFIRQ >> 0) & 0x3F), ((GPIO_BLEIFIRQ = (GPIO_BLEIFIRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_BLEIFIRQ  ---------------------------------
// SVD Line: 29579

//  <rtree> SFDITEM_REG__GPIO_BLEIFIRQ
//    <name> BLEIFIRQ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100D8) BLEIF Flow Control IRQ Select </i>
//    <loc> ( (unsigned int)((GPIO_BLEIFIRQ >> 0) & 0xFFFFFFFF), ((GPIO_BLEIFIRQ = (GPIO_BLEIFIRQ & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_BLEIFIRQ_BLEIFIRQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_GPIOOBS  ------------------------------
// SVD Line: 29598

unsigned int GPIO_GPIOOBS __AT (0x400100DC);



// ----------------------------  Field Item: GPIO_GPIOOBS_OBS_DATA  -------------------------------
// SVD Line: 29608

//  <item> SFDITEM_FIELD__GPIO_GPIOOBS_OBS_DATA
//    <name> OBS_DATA </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400100DC) Sample of the data output on the GPIO observation port. May have async sampling issues, as the data is not synronized to the read operation. Intended for debug purposes only </i>
//    <edit> 
//      <loc> ( (unsigned short)((GPIO_GPIOOBS >> 0) & 0xFFFF), ((GPIO_GPIOOBS = (GPIO_GPIOOBS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_GPIOOBS  ----------------------------------
// SVD Line: 29598

//  <rtree> SFDITEM_REG__GPIO_GPIOOBS
//    <name> GPIOOBS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100DC) GPIO Observation Mode Sample register </i>
//    <loc> ( (unsigned int)((GPIO_GPIOOBS >> 0) & 0xFFFFFFFF), ((GPIO_GPIOOBS = (GPIO_GPIOOBS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GPIOOBS_OBS_DATA </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGA  -----------------------------
// SVD Line: 29617

unsigned int GPIO_ALTPADCFGA __AT (0x400100E0);



// ---------------------------  Field Item: GPIO_ALTPADCFGA_PAD3_SR  ------------------------------
// SVD Line: 29627

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD3_SR
//    <name> PAD3_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100E0) \nPad 3 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.28..28> PAD3_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGA_PAD3_DS1  ------------------------------
// SVD Line: 29640

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD3_DS1
//    <name> PAD3_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100E0) Pad 3 high order drive strength selection. Used in conjunction with PAD3STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.24..24> PAD3_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGA_PAD2_SR  ------------------------------
// SVD Line: 29647

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD2_SR
//    <name> PAD2_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100E0) \nPad 2 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.20..20> PAD2_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGA_PAD2_DS1  ------------------------------
// SVD Line: 29660

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD2_DS1
//    <name> PAD2_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100E0) Pad 2 high order drive strength selection. Used in conjunction with PAD2STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.16..16> PAD2_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGA_PAD1_SR  ------------------------------
// SVD Line: 29667

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD1_SR
//    <name> PAD1_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100E0) \nPad 1 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.12..12> PAD1_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGA_PAD1_DS1  ------------------------------
// SVD Line: 29680

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD1_DS1
//    <name> PAD1_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100E0) Pad 1 high order drive strength selection. Used in conjunction with PAD1STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.8..8> PAD1_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGA_PAD0_SR  ------------------------------
// SVD Line: 29687

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD0_SR
//    <name> PAD0_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100E0) \nPad 0 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.4..4> PAD0_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGA_PAD0_DS1  ------------------------------
// SVD Line: 29700

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD0_DS1
//    <name> PAD0_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100E0) Pad 0 high order drive strength selection. Used in conjunction with PAD0STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGA ) </loc>
//      <o.0..0> PAD0_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGA  --------------------------------
// SVD Line: 29617

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGA
//    <name> ALTPADCFGA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100E0) Alternate Pad Configuration reg0 (Pads 3,2,1,0) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGA >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGA = (GPIO_ALTPADCFGA & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD3_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD3_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD2_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD2_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD1_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD1_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD0_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGA_PAD0_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGB  -----------------------------
// SVD Line: 29709

unsigned int GPIO_ALTPADCFGB __AT (0x400100E4);



// ---------------------------  Field Item: GPIO_ALTPADCFGB_PAD7_SR  ------------------------------
// SVD Line: 29719

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD7_SR
//    <name> PAD7_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100E4) \nPad 7 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.28..28> PAD7_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGB_PAD7_DS1  ------------------------------
// SVD Line: 29732

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD7_DS1
//    <name> PAD7_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100E4) Pad 7 high order drive strength selection. Used in conjunction with PAD7STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.24..24> PAD7_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGB_PAD6_SR  ------------------------------
// SVD Line: 29739

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD6_SR
//    <name> PAD6_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100E4) \nPad 6 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.20..20> PAD6_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGB_PAD6_DS1  ------------------------------
// SVD Line: 29752

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD6_DS1
//    <name> PAD6_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100E4) Pad 6 high order drive strength selection. Used in conjunction with PAD6STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.16..16> PAD6_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGB_PAD5_SR  ------------------------------
// SVD Line: 29759

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD5_SR
//    <name> PAD5_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100E4) \nPad 5 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.12..12> PAD5_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGB_PAD5_DS1  ------------------------------
// SVD Line: 29772

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD5_DS1
//    <name> PAD5_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100E4) Pad 5 high order drive strength selection. Used in conjunction with PAD5STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.8..8> PAD5_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGB_PAD4_SR  ------------------------------
// SVD Line: 29779

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD4_SR
//    <name> PAD4_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100E4) \nPad 4 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.4..4> PAD4_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGB_PAD4_DS1  ------------------------------
// SVD Line: 29792

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD4_DS1
//    <name> PAD4_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100E4) Pad 4 high order drive strength selection. Used in conjunction with PAD4STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGB ) </loc>
//      <o.0..0> PAD4_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGB  --------------------------------
// SVD Line: 29709

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGB
//    <name> ALTPADCFGB </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100E4) Alternate Pad Configuration reg1 (Pads 7,6,5,4) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGB >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGB = (GPIO_ALTPADCFGB & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD7_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD7_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD6_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD6_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD5_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD5_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD4_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGB_PAD4_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGC  -----------------------------
// SVD Line: 29801

unsigned int GPIO_ALTPADCFGC __AT (0x400100E8);



// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD11_SR  ------------------------------
// SVD Line: 29811

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD11_SR
//    <name> PAD11_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100E8) \nPad 11 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.28..28> PAD11_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD11_DS1  -----------------------------
// SVD Line: 29824

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD11_DS1
//    <name> PAD11_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100E8) Pad 11 high order drive strength selection. Used in conjunction with PAD11STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.24..24> PAD11_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD10_SR  ------------------------------
// SVD Line: 29831

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD10_SR
//    <name> PAD10_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100E8) \nPad 10 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.20..20> PAD10_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD10_DS1  -----------------------------
// SVD Line: 29844

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD10_DS1
//    <name> PAD10_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100E8) Pad 10 high order drive strength selection. Used in conjunction with PAD10STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.16..16> PAD10_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGC_PAD9_SR  ------------------------------
// SVD Line: 29851

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD9_SR
//    <name> PAD9_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100E8) \nPad 9 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.12..12> PAD9_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD9_DS1  ------------------------------
// SVD Line: 29864

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD9_DS1
//    <name> PAD9_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100E8) Pad 9 high order drive strength selection. Used in conjunction with PAD9STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.8..8> PAD9_DS1
//    </check>
//  </item>
//  


// ---------------------------  Field Item: GPIO_ALTPADCFGC_PAD8_SR  ------------------------------
// SVD Line: 29871

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD8_SR
//    <name> PAD8_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100E8) \nPad 8 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.4..4> PAD8_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGC_PAD8_DS1  ------------------------------
// SVD Line: 29884

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD8_DS1
//    <name> PAD8_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100E8) Pad 8 high order drive strength selection. Used in conjunction with PAD8STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGC ) </loc>
//      <o.0..0> PAD8_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGC  --------------------------------
// SVD Line: 29801

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGC
//    <name> ALTPADCFGC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100E8) Alternate Pad Configuration reg2 (Pads 11,10,9,8) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGC >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGC = (GPIO_ALTPADCFGC & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD11_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD11_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD10_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD10_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD9_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD9_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD8_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGC_PAD8_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGD  -----------------------------
// SVD Line: 29893

unsigned int GPIO_ALTPADCFGD __AT (0x400100EC);



// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD15_SR  ------------------------------
// SVD Line: 29903

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD15_SR
//    <name> PAD15_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100EC) \nPad 15 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.28..28> PAD15_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD15_DS1  -----------------------------
// SVD Line: 29916

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD15_DS1
//    <name> PAD15_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100EC) Pad 15 high order drive strength selection. Used in conjunction with PAD15STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.24..24> PAD15_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD14_SR  ------------------------------
// SVD Line: 29923

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD14_SR
//    <name> PAD14_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100EC) \nPad 14 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.20..20> PAD14_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD14_DS1  -----------------------------
// SVD Line: 29936

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD14_DS1
//    <name> PAD14_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100EC) Pad 14 high order drive strength selection. Used in conjunction with PAD14STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.16..16> PAD14_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD13_SR  ------------------------------
// SVD Line: 29943

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD13_SR
//    <name> PAD13_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100EC) \nPad 13 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.12..12> PAD13_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD13_DS1  -----------------------------
// SVD Line: 29956

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD13_DS1
//    <name> PAD13_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100EC) Pad 13 high order drive strength selection. Used in conjunction with PAD13STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.8..8> PAD13_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD12_SR  ------------------------------
// SVD Line: 29963

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD12_SR
//    <name> PAD12_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100EC) \nPad 12 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.4..4> PAD12_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGD_PAD12_DS1  -----------------------------
// SVD Line: 29976

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD12_DS1
//    <name> PAD12_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100EC) Pad 12 high order drive strength selection. Used in conjunction with PAD12STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGD ) </loc>
//      <o.0..0> PAD12_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGD  --------------------------------
// SVD Line: 29893

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGD
//    <name> ALTPADCFGD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100EC) Alternate Pad Configuration reg3 (Pads 15,14,13,12) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGD >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGD = (GPIO_ALTPADCFGD & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD15_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD15_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD14_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD14_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD13_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD13_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD12_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGD_PAD12_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGE  -----------------------------
// SVD Line: 29985

unsigned int GPIO_ALTPADCFGE __AT (0x400100F0);



// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD19_SR  ------------------------------
// SVD Line: 29995

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD19_SR
//    <name> PAD19_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100F0) \nPad 19 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.28..28> PAD19_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD19_DS1  -----------------------------
// SVD Line: 30008

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD19_DS1
//    <name> PAD19_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100F0) Pad 19 high order drive strength selection. Used in conjunction with PAD19STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.24..24> PAD19_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD18_SR  ------------------------------
// SVD Line: 30015

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD18_SR
//    <name> PAD18_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100F0) \nPad 18 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.20..20> PAD18_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD18_DS1  -----------------------------
// SVD Line: 30028

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD18_DS1
//    <name> PAD18_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100F0) Pad 18 high order drive strength selection. Used in conjunction with PAD18STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.16..16> PAD18_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD17_SR  ------------------------------
// SVD Line: 30035

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD17_SR
//    <name> PAD17_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100F0) \nPad 17 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.12..12> PAD17_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD17_DS1  -----------------------------
// SVD Line: 30048

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD17_DS1
//    <name> PAD17_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100F0) Pad 17 high order drive strength selection. Used in conjunction with PAD17STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.8..8> PAD17_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD16_SR  ------------------------------
// SVD Line: 30055

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD16_SR
//    <name> PAD16_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100F0) \nPad 16 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.4..4> PAD16_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGE_PAD16_DS1  -----------------------------
// SVD Line: 30068

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD16_DS1
//    <name> PAD16_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100F0) Pad 16 high order drive strength selection. Used in conjunction with PAD16STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGE ) </loc>
//      <o.0..0> PAD16_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGE  --------------------------------
// SVD Line: 29985

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGE
//    <name> ALTPADCFGE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100F0) Alternate Pad Configuration reg4 (Pads 19,18,17,16) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGE >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGE = (GPIO_ALTPADCFGE & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD19_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD19_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD18_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD18_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD17_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD17_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD16_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGE_PAD16_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGF  -----------------------------
// SVD Line: 30077

unsigned int GPIO_ALTPADCFGF __AT (0x400100F4);



// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD23_SR  ------------------------------
// SVD Line: 30087

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD23_SR
//    <name> PAD23_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100F4) \nPad 23 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.28..28> PAD23_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD23_DS1  -----------------------------
// SVD Line: 30100

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD23_DS1
//    <name> PAD23_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100F4) Pad 23 high order drive strength selection. Used in conjunction with PAD23STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.24..24> PAD23_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD22_SR  ------------------------------
// SVD Line: 30107

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD22_SR
//    <name> PAD22_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100F4) \nPad 22 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.20..20> PAD22_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD22_DS1  -----------------------------
// SVD Line: 30120

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD22_DS1
//    <name> PAD22_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100F4) Pad 22 high order drive strength selection. Used in conjunction with PAD22STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.16..16> PAD22_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD21_SR  ------------------------------
// SVD Line: 30127

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD21_SR
//    <name> PAD21_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100F4) \nPad 21 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.12..12> PAD21_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD21_DS1  -----------------------------
// SVD Line: 30140

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD21_DS1
//    <name> PAD21_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100F4) Pad 21 high order drive strength selection. Used in conjunction with PAD21STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.8..8> PAD21_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD20_SR  ------------------------------
// SVD Line: 30147

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD20_SR
//    <name> PAD20_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100F4) \nPad 20 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.4..4> PAD20_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGF_PAD20_DS1  -----------------------------
// SVD Line: 30160

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD20_DS1
//    <name> PAD20_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100F4) Pad 20 high order drive strength selection. Used in conjunction with PAD20STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGF ) </loc>
//      <o.0..0> PAD20_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGF  --------------------------------
// SVD Line: 30077

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGF
//    <name> ALTPADCFGF </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100F4) Alternate Pad Configuration reg5 (Pads 23,22,21,20) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGF >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGF = (GPIO_ALTPADCFGF & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD23_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD23_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD22_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD22_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD21_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD21_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD20_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGF_PAD20_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGG  -----------------------------
// SVD Line: 30169

unsigned int GPIO_ALTPADCFGG __AT (0x400100F8);



// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD27_SR  ------------------------------
// SVD Line: 30179

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD27_SR
//    <name> PAD27_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100F8) \nPad 27 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.28..28> PAD27_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD27_DS1  -----------------------------
// SVD Line: 30192

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD27_DS1
//    <name> PAD27_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100F8) Pad 27 high order drive strength selection. Used in conjunction with PAD27STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.24..24> PAD27_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD26_SR  ------------------------------
// SVD Line: 30199

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD26_SR
//    <name> PAD26_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100F8) \nPad 26 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.20..20> PAD26_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD26_DS1  -----------------------------
// SVD Line: 30212

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD26_DS1
//    <name> PAD26_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100F8) Pad 26 high order drive strength selection. Used in conjunction with PAD26STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.16..16> PAD26_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD25_SR  ------------------------------
// SVD Line: 30219

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD25_SR
//    <name> PAD25_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100F8) \nPad 25 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.12..12> PAD25_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD25_DS1  -----------------------------
// SVD Line: 30232

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD25_DS1
//    <name> PAD25_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100F8) Pad 25 high order drive strength selection. Used in conjunction with PAD25STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.8..8> PAD25_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD24_SR  ------------------------------
// SVD Line: 30239

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD24_SR
//    <name> PAD24_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100F8) \nPad 24 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.4..4> PAD24_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGG_PAD24_DS1  -----------------------------
// SVD Line: 30252

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD24_DS1
//    <name> PAD24_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100F8) Pad 24 high order drive strength selection. Used in conjunction with PAD24STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGG ) </loc>
//      <o.0..0> PAD24_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGG  --------------------------------
// SVD Line: 30169

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGG
//    <name> ALTPADCFGG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100F8) Alternate Pad Configuration reg6 (Pads 27,26,25,24) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGG >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGG = (GPIO_ALTPADCFGG & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD27_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD27_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD26_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD26_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD25_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD25_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD24_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGG_PAD24_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGH  -----------------------------
// SVD Line: 30261

unsigned int GPIO_ALTPADCFGH __AT (0x400100FC);



// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD31_SR  ------------------------------
// SVD Line: 30271

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD31_SR
//    <name> PAD31_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400100FC) \nPad 31 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.28..28> PAD31_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD31_DS1  -----------------------------
// SVD Line: 30284

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD31_DS1
//    <name> PAD31_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x400100FC) Pad 31 high order drive strength selection. Used in conjunction with PAD31STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.24..24> PAD31_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD30_SR  ------------------------------
// SVD Line: 30291

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD30_SR
//    <name> PAD30_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400100FC) \nPad 30 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.20..20> PAD30_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD30_DS1  -----------------------------
// SVD Line: 30304

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD30_DS1
//    <name> PAD30_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400100FC) Pad 30 high order drive strength selection. Used in conjunction with PAD30STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.16..16> PAD30_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD29_SR  ------------------------------
// SVD Line: 30311

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD29_SR
//    <name> PAD29_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x400100FC) \nPad 29 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.12..12> PAD29_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD29_DS1  -----------------------------
// SVD Line: 30324

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD29_DS1
//    <name> PAD29_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400100FC) Pad 29 high order drive strength selection. Used in conjunction with PAD29STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.8..8> PAD29_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD28_SR  ------------------------------
// SVD Line: 30331

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD28_SR
//    <name> PAD28_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400100FC) \nPad 28 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.4..4> PAD28_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGH_PAD28_DS1  -----------------------------
// SVD Line: 30344

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD28_DS1
//    <name> PAD28_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400100FC) Pad 28 high order drive strength selection. Used in conjunction with PAD28STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGH ) </loc>
//      <o.0..0> PAD28_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGH  --------------------------------
// SVD Line: 30261

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGH
//    <name> ALTPADCFGH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400100FC) Alternate Pad Configuration reg7 (Pads 31,30,29,28) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGH >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGH = (GPIO_ALTPADCFGH & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD31_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD31_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD30_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD30_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD29_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD29_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD28_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGH_PAD28_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGI  -----------------------------
// SVD Line: 30353

unsigned int GPIO_ALTPADCFGI __AT (0x40010100);



// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD35_SR  ------------------------------
// SVD Line: 30363

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD35_SR
//    <name> PAD35_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010100) \nPad 35 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.28..28> PAD35_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD35_DS1  -----------------------------
// SVD Line: 30376

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD35_DS1
//    <name> PAD35_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010100) Pad 35 high order drive strength selection. Used in conjunction with PAD35STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.24..24> PAD35_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD34_SR  ------------------------------
// SVD Line: 30383

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD34_SR
//    <name> PAD34_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010100) \nPad 34 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.20..20> PAD34_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD34_DS1  -----------------------------
// SVD Line: 30396

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD34_DS1
//    <name> PAD34_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010100) Pad 34 high order drive strength selection. Used in conjunction with PAD34STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.16..16> PAD34_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD33_SR  ------------------------------
// SVD Line: 30403

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD33_SR
//    <name> PAD33_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010100) \nPad 33 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.12..12> PAD33_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD33_DS1  -----------------------------
// SVD Line: 30416

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD33_DS1
//    <name> PAD33_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010100) Pad 33 high order drive strength selection. Used in conjunction with PAD33STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.8..8> PAD33_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD32_SR  ------------------------------
// SVD Line: 30423

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD32_SR
//    <name> PAD32_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010100) \nPad 32 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.4..4> PAD32_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGI_PAD32_DS1  -----------------------------
// SVD Line: 30436

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD32_DS1
//    <name> PAD32_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010100) Pad 32 high order drive strength selection. Used in conjunction with PAD32STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGI ) </loc>
//      <o.0..0> PAD32_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGI  --------------------------------
// SVD Line: 30353

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGI
//    <name> ALTPADCFGI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010100) Alternate Pad Configuration reg8 (Pads 35,34,33,32) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGI >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGI = (GPIO_ALTPADCFGI & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD35_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD35_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD34_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD34_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD33_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD33_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD32_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGI_PAD32_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGJ  -----------------------------
// SVD Line: 30445

unsigned int GPIO_ALTPADCFGJ __AT (0x40010104);



// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD39_SR  ------------------------------
// SVD Line: 30455

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD39_SR
//    <name> PAD39_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010104) \nPad 39 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.28..28> PAD39_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD39_DS1  -----------------------------
// SVD Line: 30468

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD39_DS1
//    <name> PAD39_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010104) Pad 39 high order drive strength selection. Used in conjunction with PAD39STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.24..24> PAD39_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD38_SR  ------------------------------
// SVD Line: 30475

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD38_SR
//    <name> PAD38_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010104) \nPad 38 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.20..20> PAD38_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD38_DS1  -----------------------------
// SVD Line: 30488

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD38_DS1
//    <name> PAD38_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010104) Pad 38 high order drive strength selection. Used in conjunction with PAD38STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.16..16> PAD38_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD37_SR  ------------------------------
// SVD Line: 30495

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD37_SR
//    <name> PAD37_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010104) \nPad 37 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.12..12> PAD37_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD37_DS1  -----------------------------
// SVD Line: 30508

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD37_DS1
//    <name> PAD37_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010104) Pad 37 high order drive strength selection. Used in conjunction with PAD37STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.8..8> PAD37_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD36_SR  ------------------------------
// SVD Line: 30515

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD36_SR
//    <name> PAD36_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010104) \nPad 36 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.4..4> PAD36_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGJ_PAD36_DS1  -----------------------------
// SVD Line: 30528

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD36_DS1
//    <name> PAD36_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010104) Pad 36 high order drive strength selection. Used in conjunction with PAD36STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGJ ) </loc>
//      <o.0..0> PAD36_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGJ  --------------------------------
// SVD Line: 30445

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGJ
//    <name> ALTPADCFGJ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010104) Alternate Pad Configuration reg9 (Pads 39,38,37,36) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGJ >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGJ = (GPIO_ALTPADCFGJ & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD39_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD39_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD38_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD38_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD37_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD37_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD36_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGJ_PAD36_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGK  -----------------------------
// SVD Line: 30537

unsigned int GPIO_ALTPADCFGK __AT (0x40010108);



// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD43_SR  ------------------------------
// SVD Line: 30547

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD43_SR
//    <name> PAD43_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010108) \nPad 43 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.28..28> PAD43_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD43_DS1  -----------------------------
// SVD Line: 30560

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD43_DS1
//    <name> PAD43_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010108) Pad 43 high order drive strength selection. Used in conjunction with PAD43STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.24..24> PAD43_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD42_SR  ------------------------------
// SVD Line: 30567

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD42_SR
//    <name> PAD42_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010108) \nPad 42 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.20..20> PAD42_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD42_DS1  -----------------------------
// SVD Line: 30580

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD42_DS1
//    <name> PAD42_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010108) Pad 42 high order drive strength selection. Used in conjunction with PAD42STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.16..16> PAD42_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD41_SR  ------------------------------
// SVD Line: 30587

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD41_SR
//    <name> PAD41_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010108) \nPad 41 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.12..12> PAD41_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD41_DS1  -----------------------------
// SVD Line: 30600

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD41_DS1
//    <name> PAD41_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010108) Pad 41 high order drive strength selection. Used in conjunction with PAD41STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.8..8> PAD41_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD40_SR  ------------------------------
// SVD Line: 30607

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD40_SR
//    <name> PAD40_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010108) \nPad 40 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.4..4> PAD40_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGK_PAD40_DS1  -----------------------------
// SVD Line: 30620

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD40_DS1
//    <name> PAD40_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010108) Pad 40 high order drive strength selection. Used in conjunction with PAD40STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGK ) </loc>
//      <o.0..0> PAD40_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGK  --------------------------------
// SVD Line: 30537

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGK
//    <name> ALTPADCFGK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010108) Alternate Pad Configuration reg10 (Pads 43,42,41,40) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGK >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGK = (GPIO_ALTPADCFGK & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD43_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD43_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD42_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD42_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD41_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD41_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD40_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGK_PAD40_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGL  -----------------------------
// SVD Line: 30629

unsigned int GPIO_ALTPADCFGL __AT (0x4001010C);



// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD47_SR  ------------------------------
// SVD Line: 30639

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD47_SR
//    <name> PAD47_SR </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4001010C) \nPad 47 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.28..28> PAD47_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD47_DS1  -----------------------------
// SVD Line: 30652

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD47_DS1
//    <name> PAD47_DS1 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001010C) Pad 47 high order drive strength selection. Used in conjunction with PAD47STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.24..24> PAD47_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD46_SR  ------------------------------
// SVD Line: 30659

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD46_SR
//    <name> PAD46_SR </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4001010C) \nPad 46 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.20..20> PAD46_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD46_DS1  -----------------------------
// SVD Line: 30672

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD46_DS1
//    <name> PAD46_DS1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001010C) Pad 46 high order drive strength selection. Used in conjunction with PAD46STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.16..16> PAD46_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD45_SR  ------------------------------
// SVD Line: 30679

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD45_SR
//    <name> PAD45_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001010C) \nPad 45 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.12..12> PAD45_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD45_DS1  -----------------------------
// SVD Line: 30692

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD45_DS1
//    <name> PAD45_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001010C) Pad 45 high order drive strength selection. Used in conjunction with PAD45STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.8..8> PAD45_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD44_SR  ------------------------------
// SVD Line: 30699

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD44_SR
//    <name> PAD44_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001010C) \nPad 44 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.4..4> PAD44_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGL_PAD44_DS1  -----------------------------
// SVD Line: 30712

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD44_DS1
//    <name> PAD44_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001010C) Pad 44 high order drive strength selection. Used in conjunction with PAD44STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGL ) </loc>
//      <o.0..0> PAD44_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGL  --------------------------------
// SVD Line: 30629

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGL
//    <name> ALTPADCFGL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001010C) Alternate Pad Configuration reg11 (Pads 47,46,45,44) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGL >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGL = (GPIO_ALTPADCFGL & ~(0x11111111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11111111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD47_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD47_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD46_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD46_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD45_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD45_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD44_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGL_PAD44_DS1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: GPIO_ALTPADCFGM  -----------------------------
// SVD Line: 30721

unsigned int GPIO_ALTPADCFGM __AT (0x40010110);



// --------------------------  Field Item: GPIO_ALTPADCFGM_PAD49_SR  ------------------------------
// SVD Line: 30731

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD49_SR
//    <name> PAD49_SR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010110) \nPad 49 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGM ) </loc>
//      <o.12..12> PAD49_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGM_PAD49_DS1  -----------------------------
// SVD Line: 30744

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD49_DS1
//    <name> PAD49_DS1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010110) Pad 49 high order drive strength selection. Used in conjunction with PAD49STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGM ) </loc>
//      <o.8..8> PAD49_DS1
//    </check>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGM_PAD48_SR  ------------------------------
// SVD Line: 30751

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD48_SR
//    <name> PAD48_SR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010110) \nPad 48 slew rate selection.\n0 : Reserved - do not use\n1 : SR_EN = Enables Slew rate control on pad value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGM ) </loc>
//      <o.4..4> PAD48_SR
//        <0=> 0: 
//        <1=> 1: SR_EN = Enables Slew rate control on pad value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_ALTPADCFGM_PAD48_DS1  -----------------------------
// SVD Line: 30764

//  <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD48_DS1
//    <name> PAD48_DS1 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010110) Pad 48 high order drive strength selection. Used in conjunction with PAD48STRNG field to set the pad drive strength. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_ALTPADCFGM ) </loc>
//      <o.0..0> PAD48_DS1
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: GPIO_ALTPADCFGM  --------------------------------
// SVD Line: 30721

//  <rtree> SFDITEM_REG__GPIO_ALTPADCFGM
//    <name> ALTPADCFGM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010110) Alternate Pad Configuration reg12 (Pads 49,48) </i>
//    <loc> ( (unsigned int)((GPIO_ALTPADCFGM >> 0) & 0xFFFFFFFF), ((GPIO_ALTPADCFGM = (GPIO_ALTPADCFGM & ~(0x1111UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1111) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD49_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD49_DS1 </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD48_SR </item>
//    <item> SFDITEM_FIELD__GPIO_ALTPADCFGM_PAD48_DS1 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_SCDET  -------------------------------
// SVD Line: 30773

unsigned int GPIO_SCDET __AT (0x40010114);



// ------------------------------  Field Item: GPIO_SCDET_SCDET  ----------------------------------
// SVD Line: 30783

//  <item> SFDITEM_FIELD__GPIO_SCDET_SCDET
//    <name> SCDET </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40010114) SCARD card detect pad select. </i>
//    <edit> 
//      <loc> ( (unsigned char)((GPIO_SCDET >> 0) & 0x3F), ((GPIO_SCDET = (GPIO_SCDET & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: GPIO_SCDET  -----------------------------------
// SVD Line: 30773

//  <rtree> SFDITEM_REG__GPIO_SCDET
//    <name> SCDET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010114) SCARD Card Detect select </i>
//    <loc> ( (unsigned int)((GPIO_SCDET >> 0) & 0xFFFFFFFF), ((GPIO_SCDET = (GPIO_SCDET & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_SCDET_SCDET </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_CTENCFG  ------------------------------
// SVD Line: 30792

unsigned int GPIO_CTENCFG __AT (0x40010118);



// ------------------------------  Field Item: GPIO_CTENCFG_EN31  ---------------------------------
// SVD Line: 30802

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN31
//    <name> EN31 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010118) \nCT31 Enable\n0 : EN = Enable CT31 for output value.\n1 : DIS = Disable CT31 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.31..31> EN31
//        <0=> 0: EN = Enable CT31 for output value.
//        <1=> 1: DIS = Disable CT31 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN30  ---------------------------------
// SVD Line: 30820

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN30
//    <name> EN30 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40010118) \nCT30 Enable\n0 : EN = Enable CT30 for output value.\n1 : DIS = Disable CT30 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.30..30> EN30
//        <0=> 0: EN = Enable CT30 for output value.
//        <1=> 1: DIS = Disable CT30 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN29  ---------------------------------
// SVD Line: 30838

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN29
//    <name> EN29 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40010118) \nCT29 Enable\n0 : EN = Enable CT29 for output value.\n1 : DIS = Disable CT29 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.29..29> EN29
//        <0=> 0: EN = Enable CT29 for output value.
//        <1=> 1: DIS = Disable CT29 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN28  ---------------------------------
// SVD Line: 30856

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN28
//    <name> EN28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010118) \nCT28 Enable\n0 : EN = Enable CT28 for output value.\n1 : DIS = Disable CT28 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.28..28> EN28
//        <0=> 0: EN = Enable CT28 for output value.
//        <1=> 1: DIS = Disable CT28 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN27  ---------------------------------
// SVD Line: 30874

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN27
//    <name> EN27 </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010118) \nCT27 Enable\n0 : EN = Enable CT27 for output value.\n1 : DIS = Disable CT27 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.27..27> EN27
//        <0=> 0: EN = Enable CT27 for output value.
//        <1=> 1: DIS = Disable CT27 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN26  ---------------------------------
// SVD Line: 30892

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN26
//    <name> EN26 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010118) \nCT26 Enable\n0 : EN = Enable CT26 for output value.\n1 : DIS = Disable CT26 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.26..26> EN26
//        <0=> 0: EN = Enable CT26 for output value.
//        <1=> 1: DIS = Disable CT26 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN25  ---------------------------------
// SVD Line: 30910

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN25
//    <name> EN25 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010118) \nCT25 Enable\n0 : EN = Enable CT25 for output value.\n1 : DIS = Disable CT25 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.25..25> EN25
//        <0=> 0: EN = Enable CT25 for output value.
//        <1=> 1: DIS = Disable CT25 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN24  ---------------------------------
// SVD Line: 30928

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN24
//    <name> EN24 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010118) \nCT24 Enable\n0 : EN = Enable CT24 for output value.\n1 : DIS = Disable CT24 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.24..24> EN24
//        <0=> 0: EN = Enable CT24 for output value.
//        <1=> 1: DIS = Disable CT24 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN23  ---------------------------------
// SVD Line: 30946

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN23
//    <name> EN23 </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010118) \nCT23 Enable\n0 : EN = Enable CT23 for output value.\n1 : DIS = Disable CT23 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.23..23> EN23
//        <0=> 0: EN = Enable CT23 for output value.
//        <1=> 1: DIS = Disable CT23 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN22  ---------------------------------
// SVD Line: 30964

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN22
//    <name> EN22 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40010118) \nCT22 Enable\n0 : EN = Enable CT22 for output value.\n1 : DIS = Disable CT22 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.22..22> EN22
//        <0=> 0: EN = Enable CT22 for output value.
//        <1=> 1: DIS = Disable CT22 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN21  ---------------------------------
// SVD Line: 30982

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN21
//    <name> EN21 </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40010118) \nCT21 Enable\n0 : EN = Enable CT21 for output value.\n1 : DIS = Disable CT21 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.21..21> EN21
//        <0=> 0: EN = Enable CT21 for output value.
//        <1=> 1: DIS = Disable CT21 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN20  ---------------------------------
// SVD Line: 31000

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN20
//    <name> EN20 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010118) \nCT20 Enable\n0 : EN = Enable CT20 for output value.\n1 : DIS = Disable CT20 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.20..20> EN20
//        <0=> 0: EN = Enable CT20 for output value.
//        <1=> 1: DIS = Disable CT20 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN19  ---------------------------------
// SVD Line: 31018

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN19
//    <name> EN19 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010118) \nCT19 Enable\n0 : EN = Enable CT19 for output value.\n1 : DIS = Disable CT19 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.19..19> EN19
//        <0=> 0: EN = Enable CT19 for output value.
//        <1=> 1: DIS = Disable CT19 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN18  ---------------------------------
// SVD Line: 31036

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN18
//    <name> EN18 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010118) \nCT18 Enable\n0 : EN = Enable CT18 for output value.\n1 : DIS = Disable CT18 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.18..18> EN18
//        <0=> 0: EN = Enable CT18 for output value.
//        <1=> 1: DIS = Disable CT18 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN17  ---------------------------------
// SVD Line: 31054

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN17
//    <name> EN17 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010118) \nCT17 Enable\n0 : EN = Enable CT17 for output value.\n1 : DIS = Disable CT17 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.17..17> EN17
//        <0=> 0: EN = Enable CT17 for output value.
//        <1=> 1: DIS = Disable CT17 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN16  ---------------------------------
// SVD Line: 31072

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN16
//    <name> EN16 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010118) \nCT16 Enable\n0 : EN = Enable CT16 for output value.\n1 : DIS = Disable CT16 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.16..16> EN16
//        <0=> 0: EN = Enable CT16 for output value.
//        <1=> 1: DIS = Disable CT16 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN15  ---------------------------------
// SVD Line: 31090

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN15
//    <name> EN15 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010118) \nCT15 Enable\n0 : EN = Enable CT15 for output value.\n1 : DIS = Disable CT15 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.15..15> EN15
//        <0=> 0: EN = Enable CT15 for output value.
//        <1=> 1: DIS = Disable CT15 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN14  ---------------------------------
// SVD Line: 31108

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN14
//    <name> EN14 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010118) \nCT14 Enable\n0 : EN = Enable CT14 for output value.\n1 : DIS = Disable CT14 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.14..14> EN14
//        <0=> 0: EN = Enable CT14 for output value.
//        <1=> 1: DIS = Disable CT14 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN13  ---------------------------------
// SVD Line: 31126

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN13
//    <name> EN13 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010118) \nCT13 Enable\n0 : EN = Enable CT13 for output value.\n1 : DIS = Disable CT13 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.13..13> EN13
//        <0=> 0: EN = Enable CT13 for output value.
//        <1=> 1: DIS = Disable CT13 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN12  ---------------------------------
// SVD Line: 31144

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN12
//    <name> EN12 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010118) \nCT12 Enable\n0 : EN = Enable CT12 for output value.\n1 : DIS = Disable CT12 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.12..12> EN12
//        <0=> 0: EN = Enable CT12 for output value.
//        <1=> 1: DIS = Disable CT12 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN11  ---------------------------------
// SVD Line: 31162

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN11
//    <name> EN11 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010118) \nCT11 Enable\n0 : EN = Enable CT11 for output value.\n1 : DIS = Disable CT11 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.11..11> EN11
//        <0=> 0: EN = Enable CT11 for output value.
//        <1=> 1: DIS = Disable CT11 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN10  ---------------------------------
// SVD Line: 31180

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN10
//    <name> EN10 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010118) \nCT10 Enable\n0 : EN = Enable CT10 for output value.\n1 : DIS = Disable CT10 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.10..10> EN10
//        <0=> 0: EN = Enable CT10 for output value.
//        <1=> 1: DIS = Disable CT10 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN9  ----------------------------------
// SVD Line: 31198

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN9
//    <name> EN9 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010118) \nCT9 Enable\n0 : DIS = Disable CT9 for output value.\n1 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.9..9> EN9
//        <0=> 0: DIS = Disable CT9 for output value.
//        <1=> 1: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN8  ----------------------------------
// SVD Line: 31211

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN8
//    <name> EN8 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010118) \nCT8 Enable\n0 : EN = Enable CT8 for output value.\n1 : DIS = Disable CT8 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.8..8> EN8
//        <0=> 0: EN = Enable CT8 for output value.
//        <1=> 1: DIS = Disable CT8 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN7  ----------------------------------
// SVD Line: 31229

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN7
//    <name> EN7 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010118) \nCT7 Enable\n0 : EN = Enable CT7 for output value.\n1 : DIS = Disable CT7 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.7..7> EN7
//        <0=> 0: EN = Enable CT7 for output value.
//        <1=> 1: DIS = Disable CT7 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN6  ----------------------------------
// SVD Line: 31247

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN6
//    <name> EN6 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010118) \nCT6 Enable\n0 : EN = Enable CT6 for output value.\n1 : DIS = Disable CT6 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.6..6> EN6
//        <0=> 0: EN = Enable CT6 for output value.
//        <1=> 1: DIS = Disable CT6 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN5  ----------------------------------
// SVD Line: 31265

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN5
//    <name> EN5 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010118) \nCT5 Enable\n0 : EN = Enable CT5 for output value.\n1 : DIS = Disable CT5 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.5..5> EN5
//        <0=> 0: EN = Enable CT5 for output value.
//        <1=> 1: DIS = Disable CT5 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN4  ----------------------------------
// SVD Line: 31283

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN4
//    <name> EN4 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010118) \nCT4 Enable\n0 : EN = Enable CT4 for output value.\n1 : DIS = Disable CT4 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.4..4> EN4
//        <0=> 0: EN = Enable CT4 for output value.
//        <1=> 1: DIS = Disable CT4 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN3  ----------------------------------
// SVD Line: 31301

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN3
//    <name> EN3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010118) \nCT3 Enable\n0 : EN = Enable CT3 for output value.\n1 : DIS = Disable CT3 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.3..3> EN3
//        <0=> 0: EN = Enable CT3 for output value.
//        <1=> 1: DIS = Disable CT3 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN2  ----------------------------------
// SVD Line: 31319

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN2
//    <name> EN2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010118) \nCT2 Enable\n0 : EN = Enable CT2 for output value.\n1 : DIS = Disable CT2 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.2..2> EN2
//        <0=> 0: EN = Enable CT2 for output value.
//        <1=> 1: DIS = Disable CT2 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN1  ----------------------------------
// SVD Line: 31337

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN1
//    <name> EN1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010118) \nCT1 Enable\n0 : EN = Enable CT1 for output value.\n1 : DIS = Disable CT1 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.1..1> EN1
//        <0=> 0: EN = Enable CT1 for output value.
//        <1=> 1: DIS = Disable CT1 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: GPIO_CTENCFG_EN0  ----------------------------------
// SVD Line: 31355

//  <item> SFDITEM_FIELD__GPIO_CTENCFG_EN0
//    <name> EN0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010118) \nCT0 Enable\n0 : EN = Enable CT0 for output value.\n1 : DIS = Disable CT0 for output value. </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_CTENCFG ) </loc>
//      <o.0..0> EN0
//        <0=> 0: EN = Enable CT0 for output value.
//        <1=> 1: DIS = Disable CT0 for output value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_CTENCFG  ----------------------------------
// SVD Line: 30792

//  <rtree> SFDITEM_REG__GPIO_CTENCFG
//    <name> CTENCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010118) Counter/Timer Enable Config </i>
//    <loc> ( (unsigned int)((GPIO_CTENCFG >> 0) & 0xFFFFFFFF), ((GPIO_CTENCFG = (GPIO_CTENCFG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN31 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN30 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN29 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN28 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN27 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN26 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN25 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN24 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN23 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN22 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN21 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN20 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN19 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN18 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN17 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN16 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN15 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN14 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN13 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN12 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN11 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN10 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN9 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN8 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN7 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN6 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN5 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN4 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN3 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN2 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN1 </item>
//    <item> SFDITEM_FIELD__GPIO_CTENCFG_EN0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT0EN  -------------------------------
// SVD Line: 31375

unsigned int GPIO_INT0EN __AT (0x40010200);



// -----------------------------  Field Item: GPIO_INT0EN_GPIO31  ---------------------------------
// SVD Line: 31385

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO31
//    <name> GPIO31 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010200) GPIO31 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.31..31> GPIO31
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO30  ---------------------------------
// SVD Line: 31392

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO30
//    <name> GPIO30 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40010200) GPIO30 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.30..30> GPIO30
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO29  ---------------------------------
// SVD Line: 31399

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO29
//    <name> GPIO29 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40010200) GPIO29 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.29..29> GPIO29
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO28  ---------------------------------
// SVD Line: 31406

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO28
//    <name> GPIO28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010200) GPIO28 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.28..28> GPIO28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO27  ---------------------------------
// SVD Line: 31413

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO27
//    <name> GPIO27 </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010200) GPIO27 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.27..27> GPIO27
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO26  ---------------------------------
// SVD Line: 31420

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO26
//    <name> GPIO26 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010200) GPIO26 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.26..26> GPIO26
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO25  ---------------------------------
// SVD Line: 31427

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO25
//    <name> GPIO25 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010200) GPIO25 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.25..25> GPIO25
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO24  ---------------------------------
// SVD Line: 31434

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO24
//    <name> GPIO24 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010200) GPIO24 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.24..24> GPIO24
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO23  ---------------------------------
// SVD Line: 31441

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO23
//    <name> GPIO23 </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010200) GPIO23 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.23..23> GPIO23
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO22  ---------------------------------
// SVD Line: 31448

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO22
//    <name> GPIO22 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40010200) GPIO22 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.22..22> GPIO22
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO21  ---------------------------------
// SVD Line: 31455

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO21
//    <name> GPIO21 </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40010200) GPIO21 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.21..21> GPIO21
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO20  ---------------------------------
// SVD Line: 31462

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO20
//    <name> GPIO20 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010200) GPIO20 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.20..20> GPIO20
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO19  ---------------------------------
// SVD Line: 31469

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO19
//    <name> GPIO19 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010200) GPIO19 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.19..19> GPIO19
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO18  ---------------------------------
// SVD Line: 31476

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO18
//    <name> GPIO18 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010200) GPIO18interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.18..18> GPIO18
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO17  ---------------------------------
// SVD Line: 31483

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO17
//    <name> GPIO17 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010200) GPIO17 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.17..17> GPIO17
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO16  ---------------------------------
// SVD Line: 31490

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO16
//    <name> GPIO16 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010200) GPIO16 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.16..16> GPIO16
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO15  ---------------------------------
// SVD Line: 31497

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO15
//    <name> GPIO15 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010200) GPIO15 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.15..15> GPIO15
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO14  ---------------------------------
// SVD Line: 31504

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO14
//    <name> GPIO14 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010200) GPIO14 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.14..14> GPIO14
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO13  ---------------------------------
// SVD Line: 31511

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO13
//    <name> GPIO13 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010200) GPIO13 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.13..13> GPIO13
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO12  ---------------------------------
// SVD Line: 31518

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO12
//    <name> GPIO12 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010200) GPIO12 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.12..12> GPIO12
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO11  ---------------------------------
// SVD Line: 31525

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO11
//    <name> GPIO11 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010200) GPIO11 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.11..11> GPIO11
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0EN_GPIO10  ---------------------------------
// SVD Line: 31532

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO10
//    <name> GPIO10 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010200) GPIO10 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.10..10> GPIO10
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO9  ---------------------------------
// SVD Line: 31539

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO9
//    <name> GPIO9 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010200) GPIO9 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.9..9> GPIO9
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO8  ---------------------------------
// SVD Line: 31546

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO8
//    <name> GPIO8 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010200) GPIO8 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.8..8> GPIO8
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO7  ---------------------------------
// SVD Line: 31553

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO7
//    <name> GPIO7 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010200) GPIO7 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.7..7> GPIO7
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO6  ---------------------------------
// SVD Line: 31560

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO6
//    <name> GPIO6 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010200) GPIO6 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.6..6> GPIO6
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO5  ---------------------------------
// SVD Line: 31567

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO5
//    <name> GPIO5 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010200) GPIO5 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.5..5> GPIO5
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO4  ---------------------------------
// SVD Line: 31574

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO4
//    <name> GPIO4 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010200) GPIO4 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.4..4> GPIO4
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO3  ---------------------------------
// SVD Line: 31581

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO3
//    <name> GPIO3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010200) GPIO3 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.3..3> GPIO3
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO2  ---------------------------------
// SVD Line: 31588

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO2
//    <name> GPIO2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010200) GPIO2 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.2..2> GPIO2
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO1  ---------------------------------
// SVD Line: 31595

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO1
//    <name> GPIO1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010200) GPIO1 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.1..1> GPIO1
//    </check>
//  </item>
//  


// ------------------------------  Field Item: GPIO_INT0EN_GPIO0  ---------------------------------
// SVD Line: 31602

//  <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO0
//    <name> GPIO0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010200) GPIO0 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0EN ) </loc>
//      <o.0..0> GPIO0
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: GPIO_INT0EN  ----------------------------------
// SVD Line: 31375

//  <rtree> SFDITEM_REG__GPIO_INT0EN
//    <name> INT0EN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010200) GPIO Interrupt Registers 31-0: Enable </i>
//    <loc> ( (unsigned int)((GPIO_INT0EN >> 0) & 0xFFFFFFFF), ((GPIO_INT0EN = (GPIO_INT0EN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO31 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO30 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO29 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO28 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO27 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO26 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO25 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO24 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO23 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO22 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO21 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO20 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO19 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO18 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO17 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO16 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO15 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO14 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO13 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO12 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO11 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO10 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO9 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO8 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO7 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO6 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO5 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO4 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO3 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO2 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO1 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0EN_GPIO0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: GPIO_INT0STAT  ------------------------------
// SVD Line: 31611

unsigned int GPIO_INT0STAT __AT (0x40010204);



// ----------------------------  Field Item: GPIO_INT0STAT_GPIO31  --------------------------------
// SVD Line: 31621

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO31
//    <name> GPIO31 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010204) GPIO31 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.31..31> GPIO31
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO30  --------------------------------
// SVD Line: 31628

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO30
//    <name> GPIO30 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40010204) GPIO30 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.30..30> GPIO30
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO29  --------------------------------
// SVD Line: 31635

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO29
//    <name> GPIO29 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40010204) GPIO29 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.29..29> GPIO29
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO28  --------------------------------
// SVD Line: 31642

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO28
//    <name> GPIO28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010204) GPIO28 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.28..28> GPIO28
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO27  --------------------------------
// SVD Line: 31649

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO27
//    <name> GPIO27 </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010204) GPIO27 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.27..27> GPIO27
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO26  --------------------------------
// SVD Line: 31656

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO26
//    <name> GPIO26 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010204) GPIO26 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.26..26> GPIO26
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO25  --------------------------------
// SVD Line: 31663

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO25
//    <name> GPIO25 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010204) GPIO25 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.25..25> GPIO25
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO24  --------------------------------
// SVD Line: 31670

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO24
//    <name> GPIO24 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010204) GPIO24 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.24..24> GPIO24
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO23  --------------------------------
// SVD Line: 31677

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO23
//    <name> GPIO23 </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010204) GPIO23 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.23..23> GPIO23
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO22  --------------------------------
// SVD Line: 31684

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO22
//    <name> GPIO22 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40010204) GPIO22 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.22..22> GPIO22
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO21  --------------------------------
// SVD Line: 31691

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO21
//    <name> GPIO21 </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40010204) GPIO21 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.21..21> GPIO21
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO20  --------------------------------
// SVD Line: 31698

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO20
//    <name> GPIO20 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010204) GPIO20 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.20..20> GPIO20
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO19  --------------------------------
// SVD Line: 31705

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO19
//    <name> GPIO19 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010204) GPIO19 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.19..19> GPIO19
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO18  --------------------------------
// SVD Line: 31712

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO18
//    <name> GPIO18 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010204) GPIO18interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.18..18> GPIO18
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO17  --------------------------------
// SVD Line: 31719

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO17
//    <name> GPIO17 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010204) GPIO17 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.17..17> GPIO17
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO16  --------------------------------
// SVD Line: 31726

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO16
//    <name> GPIO16 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010204) GPIO16 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.16..16> GPIO16
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO15  --------------------------------
// SVD Line: 31733

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO15
//    <name> GPIO15 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010204) GPIO15 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.15..15> GPIO15
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO14  --------------------------------
// SVD Line: 31740

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO14
//    <name> GPIO14 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010204) GPIO14 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.14..14> GPIO14
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO13  --------------------------------
// SVD Line: 31747

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO13
//    <name> GPIO13 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010204) GPIO13 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.13..13> GPIO13
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO12  --------------------------------
// SVD Line: 31754

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO12
//    <name> GPIO12 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010204) GPIO12 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.12..12> GPIO12
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO11  --------------------------------
// SVD Line: 31761

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO11
//    <name> GPIO11 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010204) GPIO11 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.11..11> GPIO11
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT0STAT_GPIO10  --------------------------------
// SVD Line: 31768

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO10
//    <name> GPIO10 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010204) GPIO10 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.10..10> GPIO10
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO9  --------------------------------
// SVD Line: 31775

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO9
//    <name> GPIO9 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010204) GPIO9 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.9..9> GPIO9
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO8  --------------------------------
// SVD Line: 31782

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO8
//    <name> GPIO8 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010204) GPIO8 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.8..8> GPIO8
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO7  --------------------------------
// SVD Line: 31789

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO7
//    <name> GPIO7 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010204) GPIO7 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.7..7> GPIO7
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO6  --------------------------------
// SVD Line: 31796

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO6
//    <name> GPIO6 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010204) GPIO6 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.6..6> GPIO6
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO5  --------------------------------
// SVD Line: 31803

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO5
//    <name> GPIO5 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010204) GPIO5 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.5..5> GPIO5
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO4  --------------------------------
// SVD Line: 31810

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO4
//    <name> GPIO4 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010204) GPIO4 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.4..4> GPIO4
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO3  --------------------------------
// SVD Line: 31817

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO3
//    <name> GPIO3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010204) GPIO3 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.3..3> GPIO3
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO2  --------------------------------
// SVD Line: 31824

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO2
//    <name> GPIO2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010204) GPIO2 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.2..2> GPIO2
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO1  --------------------------------
// SVD Line: 31831

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO1
//    <name> GPIO1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010204) GPIO1 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.1..1> GPIO1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0STAT_GPIO0  --------------------------------
// SVD Line: 31838

//  <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO0
//    <name> GPIO0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010204) GPIO0 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0STAT ) </loc>
//      <o.0..0> GPIO0
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT0STAT  ---------------------------------
// SVD Line: 31611

//  <rtree> SFDITEM_REG__GPIO_INT0STAT
//    <name> INT0STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010204) GPIO Interrupt Registers 31-0: Status </i>
//    <loc> ( (unsigned int)((GPIO_INT0STAT >> 0) & 0xFFFFFFFF), ((GPIO_INT0STAT = (GPIO_INT0STAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO31 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO30 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO29 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO28 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO27 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO26 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO25 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO24 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO23 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO22 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO21 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO20 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO19 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO18 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO17 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO16 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO15 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO14 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO13 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO12 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO11 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO10 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO9 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO8 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO7 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO6 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO5 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO4 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO3 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO2 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO1 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0STAT_GPIO0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT0CLR  ------------------------------
// SVD Line: 31847

unsigned int GPIO_INT0CLR __AT (0x40010208);



// -----------------------------  Field Item: GPIO_INT0CLR_GPIO31  --------------------------------
// SVD Line: 31857

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO31
//    <name> GPIO31 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40010208) GPIO31 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.31..31> GPIO31
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO30  --------------------------------
// SVD Line: 31864

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO30
//    <name> GPIO30 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40010208) GPIO30 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.30..30> GPIO30
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO29  --------------------------------
// SVD Line: 31871

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO29
//    <name> GPIO29 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40010208) GPIO29 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.29..29> GPIO29
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO28  --------------------------------
// SVD Line: 31878

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO28
//    <name> GPIO28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40010208) GPIO28 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.28..28> GPIO28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO27  --------------------------------
// SVD Line: 31885

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO27
//    <name> GPIO27 </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40010208) GPIO27 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.27..27> GPIO27
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO26  --------------------------------
// SVD Line: 31892

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO26
//    <name> GPIO26 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40010208) GPIO26 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.26..26> GPIO26
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO25  --------------------------------
// SVD Line: 31899

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO25
//    <name> GPIO25 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40010208) GPIO25 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.25..25> GPIO25
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO24  --------------------------------
// SVD Line: 31906

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO24
//    <name> GPIO24 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40010208) GPIO24 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.24..24> GPIO24
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO23  --------------------------------
// SVD Line: 31913

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO23
//    <name> GPIO23 </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40010208) GPIO23 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.23..23> GPIO23
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO22  --------------------------------
// SVD Line: 31920

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO22
//    <name> GPIO22 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40010208) GPIO22 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.22..22> GPIO22
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO21  --------------------------------
// SVD Line: 31927

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO21
//    <name> GPIO21 </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40010208) GPIO21 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.21..21> GPIO21
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO20  --------------------------------
// SVD Line: 31934

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO20
//    <name> GPIO20 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40010208) GPIO20 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.20..20> GPIO20
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO19  --------------------------------
// SVD Line: 31941

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO19
//    <name> GPIO19 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40010208) GPIO19 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.19..19> GPIO19
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO18  --------------------------------
// SVD Line: 31948

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO18
//    <name> GPIO18 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40010208) GPIO18interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.18..18> GPIO18
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO17  --------------------------------
// SVD Line: 31955

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO17
//    <name> GPIO17 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010208) GPIO17 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.17..17> GPIO17
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO16  --------------------------------
// SVD Line: 31962

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO16
//    <name> GPIO16 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010208) GPIO16 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.16..16> GPIO16
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO15  --------------------------------
// SVD Line: 31969

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO15
//    <name> GPIO15 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010208) GPIO15 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.15..15> GPIO15
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO14  --------------------------------
// SVD Line: 31976

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO14
//    <name> GPIO14 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010208) GPIO14 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.14..14> GPIO14
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO13  --------------------------------
// SVD Line: 31983

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO13
//    <name> GPIO13 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010208) GPIO13 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.13..13> GPIO13
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO12  --------------------------------
// SVD Line: 31990

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO12
//    <name> GPIO12 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010208) GPIO12 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.12..12> GPIO12
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO11  --------------------------------
// SVD Line: 31997

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO11
//    <name> GPIO11 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010208) GPIO11 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.11..11> GPIO11
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO10  --------------------------------
// SVD Line: 32004

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO10
//    <name> GPIO10 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010208) GPIO10 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.10..10> GPIO10
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO9  ---------------------------------
// SVD Line: 32011

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO9
//    <name> GPIO9 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010208) GPIO9 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.9..9> GPIO9
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO8  ---------------------------------
// SVD Line: 32018

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO8
//    <name> GPIO8 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010208) GPIO8 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.8..8> GPIO8
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO7  ---------------------------------
// SVD Line: 32025

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO7
//    <name> GPIO7 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010208) GPIO7 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.7..7> GPIO7
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO6  ---------------------------------
// SVD Line: 32032

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO6
//    <name> GPIO6 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010208) GPIO6 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.6..6> GPIO6
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO5  ---------------------------------
// SVD Line: 32039

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO5
//    <name> GPIO5 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010208) GPIO5 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.5..5> GPIO5
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO4  ---------------------------------
// SVD Line: 32046

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO4
//    <name> GPIO4 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010208) GPIO4 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.4..4> GPIO4
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO3  ---------------------------------
// SVD Line: 32053

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO3
//    <name> GPIO3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010208) GPIO3 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.3..3> GPIO3
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO2  ---------------------------------
// SVD Line: 32060

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO2
//    <name> GPIO2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010208) GPIO2 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.2..2> GPIO2
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO1  ---------------------------------
// SVD Line: 32067

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO1
//    <name> GPIO1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010208) GPIO1 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.1..1> GPIO1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0CLR_GPIO0  ---------------------------------
// SVD Line: 32074

//  <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO0
//    <name> GPIO0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010208) GPIO0 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0CLR ) </loc>
//      <o.0..0> GPIO0
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT0CLR  ----------------------------------
// SVD Line: 31847

//  <rtree> SFDITEM_REG__GPIO_INT0CLR
//    <name> INT0CLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010208) GPIO Interrupt Registers 31-0: Clear </i>
//    <loc> ( (unsigned int)((GPIO_INT0CLR >> 0) & 0xFFFFFFFF), ((GPIO_INT0CLR = (GPIO_INT0CLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO31 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO30 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO29 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO28 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO27 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO26 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO25 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO24 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO23 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO22 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO21 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO20 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO19 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO18 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO17 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO16 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO15 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO14 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO13 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO12 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO11 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO10 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO9 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO8 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO7 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO6 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO5 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO4 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO3 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO2 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO1 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0CLR_GPIO0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT0SET  ------------------------------
// SVD Line: 32083

unsigned int GPIO_INT0SET __AT (0x4001020C);



// -----------------------------  Field Item: GPIO_INT0SET_GPIO31  --------------------------------
// SVD Line: 32093

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO31
//    <name> GPIO31 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4001020C) GPIO31 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.31..31> GPIO31
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO30  --------------------------------
// SVD Line: 32100

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO30
//    <name> GPIO30 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4001020C) GPIO30 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.30..30> GPIO30
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO29  --------------------------------
// SVD Line: 32107

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO29
//    <name> GPIO29 </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4001020C) GPIO29 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.29..29> GPIO29
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO28  --------------------------------
// SVD Line: 32114

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO28
//    <name> GPIO28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4001020C) GPIO28 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.28..28> GPIO28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO27  --------------------------------
// SVD Line: 32121

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO27
//    <name> GPIO27 </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4001020C) GPIO27 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.27..27> GPIO27
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO26  --------------------------------
// SVD Line: 32128

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO26
//    <name> GPIO26 </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4001020C) GPIO26 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.26..26> GPIO26
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO25  --------------------------------
// SVD Line: 32135

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO25
//    <name> GPIO25 </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4001020C) GPIO25 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.25..25> GPIO25
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO24  --------------------------------
// SVD Line: 32142

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO24
//    <name> GPIO24 </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4001020C) GPIO24 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.24..24> GPIO24
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO23  --------------------------------
// SVD Line: 32149

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO23
//    <name> GPIO23 </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x4001020C) GPIO23 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.23..23> GPIO23
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO22  --------------------------------
// SVD Line: 32156

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO22
//    <name> GPIO22 </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x4001020C) GPIO22 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.22..22> GPIO22
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO21  --------------------------------
// SVD Line: 32163

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO21
//    <name> GPIO21 </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x4001020C) GPIO21 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.21..21> GPIO21
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO20  --------------------------------
// SVD Line: 32170

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO20
//    <name> GPIO20 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4001020C) GPIO20 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.20..20> GPIO20
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO19  --------------------------------
// SVD Line: 32177

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO19
//    <name> GPIO19 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4001020C) GPIO19 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.19..19> GPIO19
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO18  --------------------------------
// SVD Line: 32184

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO18
//    <name> GPIO18 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4001020C) GPIO18interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.18..18> GPIO18
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO17  --------------------------------
// SVD Line: 32191

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO17
//    <name> GPIO17 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4001020C) GPIO17 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.17..17> GPIO17
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO16  --------------------------------
// SVD Line: 32198

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO16
//    <name> GPIO16 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001020C) GPIO16 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.16..16> GPIO16
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO15  --------------------------------
// SVD Line: 32205

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO15
//    <name> GPIO15 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4001020C) GPIO15 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.15..15> GPIO15
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO14  --------------------------------
// SVD Line: 32212

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO14
//    <name> GPIO14 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4001020C) GPIO14 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.14..14> GPIO14
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO13  --------------------------------
// SVD Line: 32219

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO13
//    <name> GPIO13 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4001020C) GPIO13 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.13..13> GPIO13
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO12  --------------------------------
// SVD Line: 32226

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO12
//    <name> GPIO12 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001020C) GPIO12 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.12..12> GPIO12
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO11  --------------------------------
// SVD Line: 32233

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO11
//    <name> GPIO11 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001020C) GPIO11 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.11..11> GPIO11
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO10  --------------------------------
// SVD Line: 32240

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO10
//    <name> GPIO10 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001020C) GPIO10 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.10..10> GPIO10
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO9  ---------------------------------
// SVD Line: 32247

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO9
//    <name> GPIO9 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001020C) GPIO9 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.9..9> GPIO9
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO8  ---------------------------------
// SVD Line: 32254

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO8
//    <name> GPIO8 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001020C) GPIO8 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.8..8> GPIO8
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO7  ---------------------------------
// SVD Line: 32261

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO7
//    <name> GPIO7 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001020C) GPIO7 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.7..7> GPIO7
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO6  ---------------------------------
// SVD Line: 32268

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO6
//    <name> GPIO6 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001020C) GPIO6 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.6..6> GPIO6
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO5  ---------------------------------
// SVD Line: 32275

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO5
//    <name> GPIO5 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001020C) GPIO5 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.5..5> GPIO5
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO4  ---------------------------------
// SVD Line: 32282

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO4
//    <name> GPIO4 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001020C) GPIO4 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.4..4> GPIO4
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO3  ---------------------------------
// SVD Line: 32289

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO3
//    <name> GPIO3 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001020C) GPIO3 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.3..3> GPIO3
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO2  ---------------------------------
// SVD Line: 32296

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO2
//    <name> GPIO2 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001020C) GPIO2 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.2..2> GPIO2
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO1  ---------------------------------
// SVD Line: 32303

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO1
//    <name> GPIO1 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001020C) GPIO1 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.1..1> GPIO1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT0SET_GPIO0  ---------------------------------
// SVD Line: 32310

//  <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO0
//    <name> GPIO0 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001020C) GPIO0 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT0SET ) </loc>
//      <o.0..0> GPIO0
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT0SET  ----------------------------------
// SVD Line: 32083

//  <rtree> SFDITEM_REG__GPIO_INT0SET
//    <name> INT0SET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001020C) GPIO Interrupt Registers 31-0: Set </i>
//    <loc> ( (unsigned int)((GPIO_INT0SET >> 0) & 0xFFFFFFFF), ((GPIO_INT0SET = (GPIO_INT0SET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO31 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO30 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO29 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO28 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO27 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO26 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO25 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO24 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO23 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO22 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO21 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO20 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO19 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO18 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO17 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO16 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO15 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO14 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO13 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO12 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO11 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO10 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO9 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO8 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO7 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO6 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO5 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO4 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO3 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO2 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO1 </item>
//    <item> SFDITEM_FIELD__GPIO_INT0SET_GPIO0 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT1EN  -------------------------------
// SVD Line: 32319

unsigned int GPIO_INT1EN __AT (0x40010210);



// -----------------------------  Field Item: GPIO_INT1EN_GPIO49  ---------------------------------
// SVD Line: 32329

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO49
//    <name> GPIO49 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010210) GPIO49 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.17..17> GPIO49
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO48  ---------------------------------
// SVD Line: 32336

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO48
//    <name> GPIO48 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010210) GPIO48 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.16..16> GPIO48
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO47  ---------------------------------
// SVD Line: 32343

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO47
//    <name> GPIO47 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010210) GPIO47 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.15..15> GPIO47
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO46  ---------------------------------
// SVD Line: 32350

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO46
//    <name> GPIO46 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010210) GPIO46 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.14..14> GPIO46
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO45  ---------------------------------
// SVD Line: 32357

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO45
//    <name> GPIO45 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010210) GPIO45 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.13..13> GPIO45
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO44  ---------------------------------
// SVD Line: 32364

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO44
//    <name> GPIO44 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010210) GPIO44 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.12..12> GPIO44
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO43  ---------------------------------
// SVD Line: 32371

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO43
//    <name> GPIO43 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010210) GPIO43 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.11..11> GPIO43
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO42  ---------------------------------
// SVD Line: 32378

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO42
//    <name> GPIO42 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010210) GPIO42 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.10..10> GPIO42
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO41  ---------------------------------
// SVD Line: 32385

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO41
//    <name> GPIO41 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010210) GPIO41 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.9..9> GPIO41
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO40  ---------------------------------
// SVD Line: 32392

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO40
//    <name> GPIO40 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010210) GPIO40 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.8..8> GPIO40
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO39  ---------------------------------
// SVD Line: 32399

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO39
//    <name> GPIO39 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010210) GPIO39 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.7..7> GPIO39
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO38  ---------------------------------
// SVD Line: 32406

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO38
//    <name> GPIO38 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010210) GPIO38 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.6..6> GPIO38
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO37  ---------------------------------
// SVD Line: 32413

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO37
//    <name> GPIO37 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010210) GPIO37 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.5..5> GPIO37
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO36  ---------------------------------
// SVD Line: 32420

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO36
//    <name> GPIO36 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010210) GPIO36 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.4..4> GPIO36
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO35  ---------------------------------
// SVD Line: 32427

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO35
//    <name> GPIO35 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010210) GPIO35 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.3..3> GPIO35
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO34  ---------------------------------
// SVD Line: 32434

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO34
//    <name> GPIO34 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010210) GPIO34 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.2..2> GPIO34
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO33  ---------------------------------
// SVD Line: 32441

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO33
//    <name> GPIO33 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010210) GPIO33 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.1..1> GPIO33
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1EN_GPIO32  ---------------------------------
// SVD Line: 32448

//  <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO32
//    <name> GPIO32 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010210) GPIO32 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1EN ) </loc>
//      <o.0..0> GPIO32
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: GPIO_INT1EN  ----------------------------------
// SVD Line: 32319

//  <rtree> SFDITEM_REG__GPIO_INT1EN
//    <name> INT1EN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010210) GPIO Interrupt Registers 49-32: Enable </i>
//    <loc> ( (unsigned int)((GPIO_INT1EN >> 0) & 0xFFFFFFFF), ((GPIO_INT1EN = (GPIO_INT1EN & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO49 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO48 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO47 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO46 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO45 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO44 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO43 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO42 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO41 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO40 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO39 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO38 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO37 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO36 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO35 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO34 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO33 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1EN_GPIO32 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: GPIO_INT1STAT  ------------------------------
// SVD Line: 32457

unsigned int GPIO_INT1STAT __AT (0x40010214);



// ----------------------------  Field Item: GPIO_INT1STAT_GPIO49  --------------------------------
// SVD Line: 32467

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO49
//    <name> GPIO49 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010214) GPIO49 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.17..17> GPIO49
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO48  --------------------------------
// SVD Line: 32474

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO48
//    <name> GPIO48 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010214) GPIO48 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.16..16> GPIO48
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO47  --------------------------------
// SVD Line: 32481

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO47
//    <name> GPIO47 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010214) GPIO47 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.15..15> GPIO47
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO46  --------------------------------
// SVD Line: 32488

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO46
//    <name> GPIO46 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010214) GPIO46 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.14..14> GPIO46
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO45  --------------------------------
// SVD Line: 32495

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO45
//    <name> GPIO45 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010214) GPIO45 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.13..13> GPIO45
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO44  --------------------------------
// SVD Line: 32502

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO44
//    <name> GPIO44 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010214) GPIO44 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.12..12> GPIO44
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO43  --------------------------------
// SVD Line: 32509

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO43
//    <name> GPIO43 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010214) GPIO43 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.11..11> GPIO43
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO42  --------------------------------
// SVD Line: 32516

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO42
//    <name> GPIO42 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010214) GPIO42 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.10..10> GPIO42
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO41  --------------------------------
// SVD Line: 32523

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO41
//    <name> GPIO41 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010214) GPIO41 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.9..9> GPIO41
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO40  --------------------------------
// SVD Line: 32530

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO40
//    <name> GPIO40 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010214) GPIO40 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.8..8> GPIO40
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO39  --------------------------------
// SVD Line: 32537

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO39
//    <name> GPIO39 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010214) GPIO39 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.7..7> GPIO39
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO38  --------------------------------
// SVD Line: 32544

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO38
//    <name> GPIO38 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010214) GPIO38 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.6..6> GPIO38
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO37  --------------------------------
// SVD Line: 32551

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO37
//    <name> GPIO37 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010214) GPIO37 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.5..5> GPIO37
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO36  --------------------------------
// SVD Line: 32558

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO36
//    <name> GPIO36 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010214) GPIO36 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.4..4> GPIO36
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO35  --------------------------------
// SVD Line: 32565

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO35
//    <name> GPIO35 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010214) GPIO35 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.3..3> GPIO35
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO34  --------------------------------
// SVD Line: 32572

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO34
//    <name> GPIO34 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010214) GPIO34 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.2..2> GPIO34
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO33  --------------------------------
// SVD Line: 32579

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO33
//    <name> GPIO33 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010214) GPIO33 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.1..1> GPIO33
//    </check>
//  </item>
//  


// ----------------------------  Field Item: GPIO_INT1STAT_GPIO32  --------------------------------
// SVD Line: 32586

//  <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO32
//    <name> GPIO32 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010214) GPIO32 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1STAT ) </loc>
//      <o.0..0> GPIO32
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT1STAT  ---------------------------------
// SVD Line: 32457

//  <rtree> SFDITEM_REG__GPIO_INT1STAT
//    <name> INT1STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010214) GPIO Interrupt Registers 49-32: Status </i>
//    <loc> ( (unsigned int)((GPIO_INT1STAT >> 0) & 0xFFFFFFFF), ((GPIO_INT1STAT = (GPIO_INT1STAT & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO49 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO48 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO47 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO46 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO45 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO44 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO43 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO42 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO41 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO40 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO39 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO38 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO37 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO36 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO35 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO34 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO33 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1STAT_GPIO32 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT1CLR  ------------------------------
// SVD Line: 32595

unsigned int GPIO_INT1CLR __AT (0x40010218);



// -----------------------------  Field Item: GPIO_INT1CLR_GPIO49  --------------------------------
// SVD Line: 32605

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO49
//    <name> GPIO49 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40010218) GPIO49 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.17..17> GPIO49
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO48  --------------------------------
// SVD Line: 32612

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO48
//    <name> GPIO48 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40010218) GPIO48 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.16..16> GPIO48
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO47  --------------------------------
// SVD Line: 32619

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO47
//    <name> GPIO47 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40010218) GPIO47 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.15..15> GPIO47
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO46  --------------------------------
// SVD Line: 32626

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO46
//    <name> GPIO46 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40010218) GPIO46 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.14..14> GPIO46
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO45  --------------------------------
// SVD Line: 32633

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO45
//    <name> GPIO45 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40010218) GPIO45 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.13..13> GPIO45
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO44  --------------------------------
// SVD Line: 32640

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO44
//    <name> GPIO44 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40010218) GPIO44 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.12..12> GPIO44
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO43  --------------------------------
// SVD Line: 32647

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO43
//    <name> GPIO43 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40010218) GPIO43 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.11..11> GPIO43
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO42  --------------------------------
// SVD Line: 32654

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO42
//    <name> GPIO42 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40010218) GPIO42 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.10..10> GPIO42
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO41  --------------------------------
// SVD Line: 32661

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO41
//    <name> GPIO41 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40010218) GPIO41 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.9..9> GPIO41
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO40  --------------------------------
// SVD Line: 32668

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO40
//    <name> GPIO40 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40010218) GPIO40 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.8..8> GPIO40
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO39  --------------------------------
// SVD Line: 32675

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO39
//    <name> GPIO39 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40010218) GPIO39 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.7..7> GPIO39
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO38  --------------------------------
// SVD Line: 32682

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO38
//    <name> GPIO38 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40010218) GPIO38 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.6..6> GPIO38
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO37  --------------------------------
// SVD Line: 32689

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO37
//    <name> GPIO37 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40010218) GPIO37 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.5..5> GPIO37
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO36  --------------------------------
// SVD Line: 32696

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO36
//    <name> GPIO36 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40010218) GPIO36 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.4..4> GPIO36
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO35  --------------------------------
// SVD Line: 32703

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO35
//    <name> GPIO35 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40010218) GPIO35 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.3..3> GPIO35
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO34  --------------------------------
// SVD Line: 32710

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO34
//    <name> GPIO34 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40010218) GPIO34 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.2..2> GPIO34
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO33  --------------------------------
// SVD Line: 32717

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO33
//    <name> GPIO33 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40010218) GPIO33 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.1..1> GPIO33
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1CLR_GPIO32  --------------------------------
// SVD Line: 32724

//  <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO32
//    <name> GPIO32 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40010218) GPIO32 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1CLR ) </loc>
//      <o.0..0> GPIO32
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT1CLR  ----------------------------------
// SVD Line: 32595

//  <rtree> SFDITEM_REG__GPIO_INT1CLR
//    <name> INT1CLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40010218) GPIO Interrupt Registers 49-32: Clear </i>
//    <loc> ( (unsigned int)((GPIO_INT1CLR >> 0) & 0xFFFFFFFF), ((GPIO_INT1CLR = (GPIO_INT1CLR & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO49 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO48 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO47 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO46 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO45 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO44 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO43 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO42 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO41 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO40 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO39 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO38 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO37 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO36 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO35 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO34 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO33 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1CLR_GPIO32 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_INT1SET  ------------------------------
// SVD Line: 32733

unsigned int GPIO_INT1SET __AT (0x4001021C);



// -----------------------------  Field Item: GPIO_INT1SET_GPIO49  --------------------------------
// SVD Line: 32743

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO49
//    <name> GPIO49 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4001021C) GPIO49 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.17..17> GPIO49
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO48  --------------------------------
// SVD Line: 32750

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO48
//    <name> GPIO48 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4001021C) GPIO48 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.16..16> GPIO48
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO47  --------------------------------
// SVD Line: 32757

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO47
//    <name> GPIO47 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4001021C) GPIO47 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.15..15> GPIO47
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO46  --------------------------------
// SVD Line: 32764

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO46
//    <name> GPIO46 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4001021C) GPIO46 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.14..14> GPIO46
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO45  --------------------------------
// SVD Line: 32771

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO45
//    <name> GPIO45 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4001021C) GPIO45 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.13..13> GPIO45
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO44  --------------------------------
// SVD Line: 32778

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO44
//    <name> GPIO44 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001021C) GPIO44 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.12..12> GPIO44
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO43  --------------------------------
// SVD Line: 32785

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO43
//    <name> GPIO43 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001021C) GPIO43 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.11..11> GPIO43
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO42  --------------------------------
// SVD Line: 32792

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO42
//    <name> GPIO42 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001021C) GPIO42 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.10..10> GPIO42
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO41  --------------------------------
// SVD Line: 32799

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO41
//    <name> GPIO41 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001021C) GPIO41 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.9..9> GPIO41
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO40  --------------------------------
// SVD Line: 32806

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO40
//    <name> GPIO40 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001021C) GPIO40 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.8..8> GPIO40
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO39  --------------------------------
// SVD Line: 32813

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO39
//    <name> GPIO39 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001021C) GPIO39 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.7..7> GPIO39
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO38  --------------------------------
// SVD Line: 32820

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO38
//    <name> GPIO38 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001021C) GPIO38 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.6..6> GPIO38
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO37  --------------------------------
// SVD Line: 32827

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO37
//    <name> GPIO37 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001021C) GPIO37 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.5..5> GPIO37
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO36  --------------------------------
// SVD Line: 32834

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO36
//    <name> GPIO36 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001021C) GPIO36 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.4..4> GPIO36
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO35  --------------------------------
// SVD Line: 32841

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO35
//    <name> GPIO35 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001021C) GPIO35 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.3..3> GPIO35
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO34  --------------------------------
// SVD Line: 32848

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO34
//    <name> GPIO34 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001021C) GPIO34 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.2..2> GPIO34
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO33  --------------------------------
// SVD Line: 32855

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO33
//    <name> GPIO33 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001021C) GPIO33 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.1..1> GPIO33
//    </check>
//  </item>
//  


// -----------------------------  Field Item: GPIO_INT1SET_GPIO32  --------------------------------
// SVD Line: 32862

//  <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO32
//    <name> GPIO32 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001021C) GPIO32 interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) GPIO_INT1SET ) </loc>
//      <o.0..0> GPIO32
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_INT1SET  ----------------------------------
// SVD Line: 32733

//  <rtree> SFDITEM_REG__GPIO_INT1SET
//    <name> INT1SET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001021C) GPIO Interrupt Registers 49-32: Set </i>
//    <loc> ( (unsigned int)((GPIO_INT1SET >> 0) & 0xFFFFFFFF), ((GPIO_INT1SET = (GPIO_INT1SET & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO49 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO48 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO47 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO46 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO45 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO44 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO43 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO42 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO41 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO40 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO39 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO38 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO37 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO36 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO35 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO34 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO33 </item>
//    <item> SFDITEM_FIELD__GPIO_INT1SET_GPIO32 </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: GPIO  -------------------------------------
// SVD Line: 20309

//  <view> GPIO
//    <name> GPIO </name>
//    <item> SFDITEM_REG__GPIO_PADREGA </item>
//    <item> SFDITEM_REG__GPIO_PADREGB </item>
//    <item> SFDITEM_REG__GPIO_PADREGC </item>
//    <item> SFDITEM_REG__GPIO_PADREGD </item>
//    <item> SFDITEM_REG__GPIO_PADREGE </item>
//    <item> SFDITEM_REG__GPIO_PADREGF </item>
//    <item> SFDITEM_REG__GPIO_PADREGG </item>
//    <item> SFDITEM_REG__GPIO_PADREGH </item>
//    <item> SFDITEM_REG__GPIO_PADREGI </item>
//    <item> SFDITEM_REG__GPIO_PADREGJ </item>
//    <item> SFDITEM_REG__GPIO_PADREGK </item>
//    <item> SFDITEM_REG__GPIO_PADREGL </item>
//    <item> SFDITEM_REG__GPIO_PADREGM </item>
//    <item> SFDITEM_REG__GPIO_CFGA </item>
//    <item> SFDITEM_REG__GPIO_CFGB </item>
//    <item> SFDITEM_REG__GPIO_CFGC </item>
//    <item> SFDITEM_REG__GPIO_CFGD </item>
//    <item> SFDITEM_REG__GPIO_CFGE </item>
//    <item> SFDITEM_REG__GPIO_CFGF </item>
//    <item> SFDITEM_REG__GPIO_CFGG </item>
//    <item> SFDITEM_REG__GPIO_PADKEY </item>
//    <item> SFDITEM_REG__GPIO_RDA </item>
//    <item> SFDITEM_REG__GPIO_RDB </item>
//    <item> SFDITEM_REG__GPIO_WTA </item>
//    <item> SFDITEM_REG__GPIO_WTB </item>
//    <item> SFDITEM_REG__GPIO_WTSA </item>
//    <item> SFDITEM_REG__GPIO_WTSB </item>
//    <item> SFDITEM_REG__GPIO_WTCA </item>
//    <item> SFDITEM_REG__GPIO_WTCB </item>
//    <item> SFDITEM_REG__GPIO_ENA </item>
//    <item> SFDITEM_REG__GPIO_ENB </item>
//    <item> SFDITEM_REG__GPIO_ENSA </item>
//    <item> SFDITEM_REG__GPIO_ENSB </item>
//    <item> SFDITEM_REG__GPIO_ENCA </item>
//    <item> SFDITEM_REG__GPIO_ENCB </item>
//    <item> SFDITEM_REG__GPIO_STMRCAP </item>
//    <item> SFDITEM_REG__GPIO_IOM0IRQ </item>
//    <item> SFDITEM_REG__GPIO_IOM1IRQ </item>
//    <item> SFDITEM_REG__GPIO_IOM2IRQ </item>
//    <item> SFDITEM_REG__GPIO_IOM3IRQ </item>
//    <item> SFDITEM_REG__GPIO_IOM4IRQ </item>
//    <item> SFDITEM_REG__GPIO_IOM5IRQ </item>
//    <item> SFDITEM_REG__GPIO_BLEIFIRQ </item>
//    <item> SFDITEM_REG__GPIO_GPIOOBS </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGA </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGB </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGC </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGD </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGE </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGF </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGG </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGH </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGI </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGJ </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGK </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGL </item>
//    <item> SFDITEM_REG__GPIO_ALTPADCFGM </item>
//    <item> SFDITEM_REG__GPIO_SCDET </item>
//    <item> SFDITEM_REG__GPIO_CTENCFG </item>
//    <item> SFDITEM_REG__GPIO_INT0EN </item>
//    <item> SFDITEM_REG__GPIO_INT0STAT </item>
//    <item> SFDITEM_REG__GPIO_INT0CLR </item>
//    <item> SFDITEM_REG__GPIO_INT0SET </item>
//    <item> SFDITEM_REG__GPIO_INT1EN </item>
//    <item> SFDITEM_REG__GPIO_INT1STAT </item>
//    <item> SFDITEM_REG__GPIO_INT1CLR </item>
//    <item> SFDITEM_REG__GPIO_INT1SET </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM0_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM0_FIFO __AT (0x50004000);



// -------------------------------  Field Item: IOM0_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM0_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_FIFO >> 0) & 0xFFFFFFFF), ((IOM0_FIFO = (IOM0_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM0_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM0_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM0_FIFO >> 0) & 0xFFFFFFFF), ((IOM0_FIFO = (IOM0_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM0_FIFOPTR __AT (0x50004100);



// ----------------------------  Field Item: IOM0_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50004100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOPTR >> 24) & 0xFF), ((IOM0_FIFOPTR = (IOM0_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50004100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOPTR >> 16) & 0xFF), ((IOM0_FIFOPTR = (IOM0_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50004100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOPTR >> 8) & 0xFF), ((IOM0_FIFOPTR = (IOM0_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50004100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOPTR >> 0) & 0xFF), ((IOM0_FIFOPTR = (IOM0_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM0_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM0_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM0_FIFOPTR = (IOM0_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM0_FIFOTHR __AT (0x50004104);



// ----------------------------  Field Item: IOM0_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM0_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50004104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOTHR >> 8) & 0x3F), ((IOM0_FIFOTHR = (IOM0_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM0_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50004104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOTHR >> 0) & 0x3F), ((IOM0_FIFOTHR = (IOM0_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM0_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM0_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM0_FIFOTHR = (IOM0_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM0_FIFOPOP __AT (0x50004108);



// ----------------------------  Field Item: IOM0_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM0_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM0_FIFOPOP = (IOM0_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM0_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM0_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM0_FIFOPOP = (IOM0_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM0_FIFOPUSH __AT (0x5000410C);



// ----------------------------  Field Item: IOM0_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM0_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000410C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM0_FIFOPUSH = (IOM0_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM0_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000410C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM0_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM0_FIFOPUSH = (IOM0_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM0_FIFOCTRL __AT (0x50004110);



// ---------------------------  Field Item: IOM0_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM0_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM0_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM0_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM0_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM0_FIFOCTRL = (IOM0_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM0_FIFOLOC __AT (0x50004114);



// ----------------------------  Field Item: IOM0_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM0_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50004114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOLOC >> 8) & 0xF), ((IOM0_FIFOLOC = (IOM0_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM0_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50004114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_FIFOLOC >> 0) & 0xF), ((IOM0_FIFOLOC = (IOM0_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM0_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM0_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM0_FIFOLOC = (IOM0_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM0_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM0_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM0_INTEN __AT (0x50004200);



// ------------------------------  Field Item: IOM0_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM0_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50004200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM0_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50004200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM0_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50004200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM0_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50004200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM0_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50004200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM0_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50004200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM0_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50004200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM0_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50004200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM0_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50004200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM0_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50004200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM0_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50004200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM0_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50004200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM0_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM0_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM0_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM0_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM0_INTEN >> 0) & 0xFFFFFFFF), ((IOM0_INTEN = (IOM0_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM0_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM0_INTSTAT __AT (0x50004204);



// -----------------------------  Field Item: IOM0_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50004204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50004204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50004204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50004204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50004204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50004204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50004204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50004204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50004204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50004204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50004204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50004204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM0_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM0_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM0_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM0_INTSTAT = (IOM0_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM0_INTCLR __AT (0x50004208);



// ------------------------------  Field Item: IOM0_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM0_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50004208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM0_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50004208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM0_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50004208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM0_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50004208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM0_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50004208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM0_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50004208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM0_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50004208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM0_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50004208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM0_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50004208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM0_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50004208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM0_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50004208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM0_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50004208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM0_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM0_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM0_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM0_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM0_INTCLR >> 0) & 0xFFFFFFFF), ((IOM0_INTCLR = (IOM0_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM0_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM0_INTSET __AT (0x5000420C);



// ------------------------------  Field Item: IOM0_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM0_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000420C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM0_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000420C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM0_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000420C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM0_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000420C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM0_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000420C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM0_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000420C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM0_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000420C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM0_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000420C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM0_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000420C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM0_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000420C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM0_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000420C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM0_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000420C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM0_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000420C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM0_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM0_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000420C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM0_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000420C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM0_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000420C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM0_INTSET >> 0) & 0xFFFFFFFF), ((IOM0_INTSET = (IOM0_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM0_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM0_CLKCFG __AT (0x50004210);



// -----------------------------  Field Item: IOM0_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50004210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CLKCFG >> 24) & 0xFF), ((IOM0_CLKCFG = (IOM0_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM0_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50004210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CLKCFG >> 16) & 0xFF), ((IOM0_CLKCFG = (IOM0_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM0_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50004210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50004210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50004210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM0_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM0_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM0_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM0_CLKCFG = (IOM0_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM0_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM0_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM0_SUBMODCTRL __AT (0x50004214);



// --------------------------  Field Item: IOM0_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50004214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM0_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50004214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM0_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50004214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM0_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM0_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM0_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM0_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM0_SUBMODCTRL = (IOM0_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM0_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM0_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM0_CMD __AT (0x50004218);



// ------------------------------  Field Item: IOM0_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM0_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50004218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CMD >> 24) & 0xFF), ((IOM0_CMD = (IOM0_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM0_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM0_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50004218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CMD >> 20) & 0x3), ((IOM0_CMD = (IOM0_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM0_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM0_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50004218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_CMD >> 8) & 0xFFF), ((IOM0_CMD = (IOM0_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM0_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM0_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50004218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM0_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50004218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CMD >> 5) & 0x3), ((IOM0_CMD = (IOM0_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM0_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM0_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50004218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM0_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM0_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM0_CMD >> 0) & 0xFFFFFFFF), ((IOM0_CMD = (IOM0_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM0_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM0_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM0_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM0_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM0_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM0_CMDRPT __AT (0x5000421C);



// -----------------------------  Field Item: IOM0_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM0_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000421C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CMDRPT >> 0) & 0x1F), ((IOM0_CMDRPT = (IOM0_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM0_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000421C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM0_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM0_CMDRPT = (IOM0_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM0_OFFSETHI __AT (0x50004220);



// ---------------------------  Field Item: IOM0_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM0_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50004220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_OFFSETHI >> 0) & 0xFFFF), ((IOM0_OFFSETHI = (IOM0_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM0_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM0_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM0_OFFSETHI = (IOM0_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM0_CMDSTAT __AT (0x50004224);



// -----------------------------  Field Item: IOM0_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM0_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50004224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_CMDSTAT >> 8) & 0xFFF), ((IOM0_CMDSTAT = (IOM0_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM0_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50004224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM0_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50004224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CMDSTAT >> 0) & 0x1F), ((IOM0_CMDSTAT = (IOM0_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM0_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004224) Command status </i>
//    <loc> ( (unsigned int)((IOM0_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM0_CMDSTAT = (IOM0_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM0_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM0_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM0_DMATRIGEN __AT (0x50004240);



// ----------------------------  Field Item: IOM0_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM0_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM0_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM0_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM0_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM0_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM0_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM0_DMATRIGEN = (IOM0_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM0_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM0_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM0_DMATRIGSTAT __AT (0x50004244);



// --------------------------  Field Item: IOM0_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM0_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM0_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM0_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM0_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM0_DMATRIGSTAT = (IOM0_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM0_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM0_DMACFG __AT (0x50004280);



// -----------------------------  Field Item: IOM0_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM0_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50004280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM0_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50004280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM0_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM0_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM0_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM0_DMACFG >> 0) & 0xFFFFFFFF), ((IOM0_DMACFG = (IOM0_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM0_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM0_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM0_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM0_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM0_DMATOTCOUNT __AT (0x50004288);



// --------------------------  Field Item: IOM0_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM0_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50004288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_DMATOTCOUNT >> 0) & 0xFFF), ((IOM0_DMATOTCOUNT = (IOM0_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM0_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM0_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM0_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM0_DMATOTCOUNT = (IOM0_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM0_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM0_DMATARGADDR __AT (0x5000428C);



// -------------------------  Field Item: IOM0_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM0_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000428C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM0_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM0_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000428C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_DMATARGADDR >> 0) & 0xFFFFF), ((IOM0_DMATARGADDR = (IOM0_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM0_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM0_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000428C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM0_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM0_DMATARGADDR = (IOM0_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM0_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM0_DMASTAT __AT (0x50004290);



// -----------------------------  Field Item: IOM0_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM0_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM0_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM0_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM0_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM0_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM0_DMASTAT = (IOM0_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM0_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM0_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM0_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM0_CQCFG __AT (0x50004294);



// ------------------------------  Field Item: IOM0_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM0_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM0_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM0_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM0_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM0_CQCFG >> 0) & 0xFFFFFFFF), ((IOM0_CQCFG = (IOM0_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM0_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM0_CQADDR __AT (0x50004298);



// ----------------------------  Field Item: IOM0_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM0_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50004298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM0_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50004298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_CQADDR >> 2) & 0x3FFFF), ((IOM0_CQADDR = (IOM0_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM0_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM0_CQADDR >> 0) & 0xFFFFFFFF), ((IOM0_CQADDR = (IOM0_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM0_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM0_CQSTAT __AT (0x5000429C);



// ------------------------------  Field Item: IOM0_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM0_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000429C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM0_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000429C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM0_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000429C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM0_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000429C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM0_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM0_CQSTAT = (IOM0_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM0_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM0_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM0_CQFLAGS __AT (0x500042A0);



// ---------------------------  Field Item: IOM0_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM0_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500042A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_CQFLAGS >> 16) & 0xFFFF), ((IOM0_CQFLAGS = (IOM0_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM0_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500042A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_CQFLAGS >> 0) & 0xFFFF), ((IOM0_CQFLAGS = (IOM0_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM0_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM0_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM0_CQFLAGS = (IOM0_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM0_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM0_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM0_CQSETCLEAR __AT (0x500042A4);



// ---------------------------  Field Item: IOM0_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500042A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CQSETCLEAR >> 16) & 0xFF), ((IOM0_CQSETCLEAR = (IOM0_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM0_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500042A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CQSETCLEAR >> 8) & 0xFF), ((IOM0_CQSETCLEAR = (IOM0_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM0_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500042A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CQSETCLEAR >> 0) & 0xFF), ((IOM0_CQSETCLEAR = (IOM0_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM0_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM0_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM0_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM0_CQSETCLEAR = (IOM0_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM0_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM0_CQPAUSEEN __AT (0x500042A8);



// ----------------------------  Field Item: IOM0_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM0_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500042A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_CQPAUSEEN >> 0) & 0xFFFF), ((IOM0_CQPAUSEEN = (IOM0_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM0_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM0_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM0_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM0_CQPAUSEEN = (IOM0_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM0_CQCURIDX __AT (0x500042AC);



// ---------------------------  Field Item: IOM0_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM0_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500042AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CQCURIDX >> 0) & 0xFF), ((IOM0_CQCURIDX = (IOM0_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM0_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM0_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM0_CQCURIDX = (IOM0_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM0_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM0_CQENDIDX __AT (0x500042B0);



// ---------------------------  Field Item: IOM0_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM0_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500042B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_CQENDIDX >> 0) & 0xFF), ((IOM0_CQENDIDX = (IOM0_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM0_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM0_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM0_CQENDIDX = (IOM0_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM0_STATUS __AT (0x500042B4);



// -----------------------------  Field Item: IOM0_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM0_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500042B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM0_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500042B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM0_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM0_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500042B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM0_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500042B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM0_STATUS >> 0) & 0xFFFFFFFF), ((IOM0_STATUS = (IOM0_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM0_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM0_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM0_MSPICFG __AT (0x50004300);



// ----------------------------  Field Item: IOM0_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50004300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50004300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MSPICFG >> 27) & 0x7), ((IOM0_MSPICFG = (IOM0_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50004300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MSPICFG >> 24) & 0x7), ((IOM0_MSPICFG = (IOM0_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50004300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50004300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50004300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50004300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50004300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50004300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50004300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM0_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM0_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM0_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM0_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM0_MSPICFG = (IOM0_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM0_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM0_MI2CCFG __AT (0x50004400);



// -----------------------------  Field Item: IOM0_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50004400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50004400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MI2CCFG >> 16) & 0xFF), ((IOM0_MI2CCFG = (IOM0_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50004400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MI2CCFG >> 12) & 0xF), ((IOM0_MI2CCFG = (IOM0_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50004400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MI2CCFG >> 8) & 0xF), ((IOM0_MI2CCFG = (IOM0_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50004400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50004400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM0_MI2CCFG >> 4) & 0x3), ((IOM0_MI2CCFG = (IOM0_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM0_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM0_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM0_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM0_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM0_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM0_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM0_MI2CCFG = (IOM0_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM0_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM0_DEVCFG __AT (0x50004404);



// -----------------------------  Field Item: IOM0_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM0_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50004404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM0_DEVCFG >> 0) & 0x3FF), ((IOM0_DEVCFG = (IOM0_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM0_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM0_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM0_DEVCFG = (IOM0_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM0_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM0_IOMDBG __AT (0x50004410);



// -----------------------------  Field Item: IOM0_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM0_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50004410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM0_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM0_IOMDBG = (IOM0_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM0_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM0_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50004410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM0_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM0_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50004410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM0_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM0_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50004410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM0_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM0_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM0_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50004410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM0_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM0_IOMDBG = (IOM0_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM0_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM0_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM0_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM0_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM0  -------------------------------------
// SVD Line: 32874

//  <view> IOM0
//    <name> IOM0 </name>
//    <item> SFDITEM_REG__IOM0_FIFO </item>
//    <item> SFDITEM_REG__IOM0_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM0_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM0_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM0_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM0_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM0_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM0_INTEN </item>
//    <item> SFDITEM_REG__IOM0_INTSTAT </item>
//    <item> SFDITEM_REG__IOM0_INTCLR </item>
//    <item> SFDITEM_REG__IOM0_INTSET </item>
//    <item> SFDITEM_REG__IOM0_CLKCFG </item>
//    <item> SFDITEM_REG__IOM0_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM0_CMD </item>
//    <item> SFDITEM_REG__IOM0_CMDRPT </item>
//    <item> SFDITEM_REG__IOM0_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM0_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM0_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM0_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM0_DMACFG </item>
//    <item> SFDITEM_REG__IOM0_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM0_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM0_DMASTAT </item>
//    <item> SFDITEM_REG__IOM0_CQCFG </item>
//    <item> SFDITEM_REG__IOM0_CQADDR </item>
//    <item> SFDITEM_REG__IOM0_CQSTAT </item>
//    <item> SFDITEM_REG__IOM0_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM0_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM0_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM0_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM0_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM0_STATUS </item>
//    <item> SFDITEM_REG__IOM0_MSPICFG </item>
//    <item> SFDITEM_REG__IOM0_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM0_DEVCFG </item>
//    <item> SFDITEM_REG__IOM0_IOMDBG </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM1_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM1_FIFO __AT (0x50005000);



// -------------------------------  Field Item: IOM1_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM1_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_FIFO >> 0) & 0xFFFFFFFF), ((IOM1_FIFO = (IOM1_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM1_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM1_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM1_FIFO >> 0) & 0xFFFFFFFF), ((IOM1_FIFO = (IOM1_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM1_FIFOPTR __AT (0x50005100);



// ----------------------------  Field Item: IOM1_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50005100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOPTR >> 24) & 0xFF), ((IOM1_FIFOPTR = (IOM1_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50005100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOPTR >> 16) & 0xFF), ((IOM1_FIFOPTR = (IOM1_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50005100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOPTR >> 8) & 0xFF), ((IOM1_FIFOPTR = (IOM1_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50005100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOPTR >> 0) & 0xFF), ((IOM1_FIFOPTR = (IOM1_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM1_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM1_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM1_FIFOPTR = (IOM1_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM1_FIFOTHR __AT (0x50005104);



// ----------------------------  Field Item: IOM1_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM1_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50005104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOTHR >> 8) & 0x3F), ((IOM1_FIFOTHR = (IOM1_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM1_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50005104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOTHR >> 0) & 0x3F), ((IOM1_FIFOTHR = (IOM1_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM1_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM1_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM1_FIFOTHR = (IOM1_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM1_FIFOPOP __AT (0x50005108);



// ----------------------------  Field Item: IOM1_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM1_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM1_FIFOPOP = (IOM1_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM1_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM1_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM1_FIFOPOP = (IOM1_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM1_FIFOPUSH __AT (0x5000510C);



// ----------------------------  Field Item: IOM1_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM1_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000510C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM1_FIFOPUSH = (IOM1_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM1_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000510C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM1_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM1_FIFOPUSH = (IOM1_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM1_FIFOCTRL __AT (0x50005110);



// ---------------------------  Field Item: IOM1_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM1_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM1_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM1_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM1_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM1_FIFOCTRL = (IOM1_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM1_FIFOLOC __AT (0x50005114);



// ----------------------------  Field Item: IOM1_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM1_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50005114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOLOC >> 8) & 0xF), ((IOM1_FIFOLOC = (IOM1_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM1_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50005114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_FIFOLOC >> 0) & 0xF), ((IOM1_FIFOLOC = (IOM1_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM1_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM1_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM1_FIFOLOC = (IOM1_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM1_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM1_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM1_INTEN __AT (0x50005200);



// ------------------------------  Field Item: IOM1_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM1_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50005200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM1_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50005200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM1_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50005200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM1_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50005200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM1_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50005200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM1_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50005200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM1_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50005200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM1_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50005200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM1_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50005200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM1_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50005200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM1_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50005200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM1_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50005200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM1_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM1_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM1_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM1_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM1_INTEN >> 0) & 0xFFFFFFFF), ((IOM1_INTEN = (IOM1_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM1_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM1_INTSTAT __AT (0x50005204);



// -----------------------------  Field Item: IOM1_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50005204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50005204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50005204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50005204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50005204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50005204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50005204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50005204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50005204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50005204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50005204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50005204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM1_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM1_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM1_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM1_INTSTAT = (IOM1_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM1_INTCLR __AT (0x50005208);



// ------------------------------  Field Item: IOM1_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM1_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50005208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM1_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50005208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM1_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50005208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM1_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50005208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM1_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50005208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM1_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50005208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM1_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50005208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM1_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50005208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM1_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50005208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM1_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50005208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM1_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50005208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM1_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50005208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM1_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM1_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM1_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM1_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM1_INTCLR >> 0) & 0xFFFFFFFF), ((IOM1_INTCLR = (IOM1_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM1_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM1_INTSET __AT (0x5000520C);



// ------------------------------  Field Item: IOM1_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM1_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000520C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM1_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000520C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM1_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000520C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM1_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000520C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM1_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000520C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM1_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000520C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM1_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000520C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM1_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000520C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM1_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000520C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM1_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000520C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM1_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000520C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM1_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000520C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM1_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000520C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM1_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM1_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000520C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM1_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000520C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM1_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000520C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM1_INTSET >> 0) & 0xFFFFFFFF), ((IOM1_INTSET = (IOM1_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM1_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM1_CLKCFG __AT (0x50005210);



// -----------------------------  Field Item: IOM1_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50005210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CLKCFG >> 24) & 0xFF), ((IOM1_CLKCFG = (IOM1_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM1_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50005210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CLKCFG >> 16) & 0xFF), ((IOM1_CLKCFG = (IOM1_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM1_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50005210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50005210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50005210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM1_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM1_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM1_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM1_CLKCFG = (IOM1_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM1_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM1_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM1_SUBMODCTRL __AT (0x50005214);



// --------------------------  Field Item: IOM1_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50005214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM1_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50005214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM1_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50005214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM1_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM1_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM1_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM1_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM1_SUBMODCTRL = (IOM1_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM1_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM1_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM1_CMD __AT (0x50005218);



// ------------------------------  Field Item: IOM1_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM1_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50005218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CMD >> 24) & 0xFF), ((IOM1_CMD = (IOM1_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM1_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM1_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50005218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CMD >> 20) & 0x3), ((IOM1_CMD = (IOM1_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM1_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM1_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50005218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_CMD >> 8) & 0xFFF), ((IOM1_CMD = (IOM1_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM1_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM1_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50005218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM1_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50005218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CMD >> 5) & 0x3), ((IOM1_CMD = (IOM1_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM1_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM1_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50005218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM1_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM1_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM1_CMD >> 0) & 0xFFFFFFFF), ((IOM1_CMD = (IOM1_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM1_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM1_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM1_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM1_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM1_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM1_CMDRPT __AT (0x5000521C);



// -----------------------------  Field Item: IOM1_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM1_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000521C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CMDRPT >> 0) & 0x1F), ((IOM1_CMDRPT = (IOM1_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM1_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000521C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM1_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM1_CMDRPT = (IOM1_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM1_OFFSETHI __AT (0x50005220);



// ---------------------------  Field Item: IOM1_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM1_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50005220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_OFFSETHI >> 0) & 0xFFFF), ((IOM1_OFFSETHI = (IOM1_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM1_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM1_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM1_OFFSETHI = (IOM1_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM1_CMDSTAT __AT (0x50005224);



// -----------------------------  Field Item: IOM1_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM1_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50005224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_CMDSTAT >> 8) & 0xFFF), ((IOM1_CMDSTAT = (IOM1_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM1_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50005224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM1_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50005224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CMDSTAT >> 0) & 0x1F), ((IOM1_CMDSTAT = (IOM1_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM1_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005224) Command status </i>
//    <loc> ( (unsigned int)((IOM1_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM1_CMDSTAT = (IOM1_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM1_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM1_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM1_DMATRIGEN __AT (0x50005240);



// ----------------------------  Field Item: IOM1_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM1_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM1_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM1_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM1_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM1_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM1_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM1_DMATRIGEN = (IOM1_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM1_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM1_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM1_DMATRIGSTAT __AT (0x50005244);



// --------------------------  Field Item: IOM1_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM1_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM1_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM1_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM1_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM1_DMATRIGSTAT = (IOM1_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM1_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM1_DMACFG __AT (0x50005280);



// -----------------------------  Field Item: IOM1_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM1_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50005280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM1_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50005280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM1_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM1_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM1_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM1_DMACFG >> 0) & 0xFFFFFFFF), ((IOM1_DMACFG = (IOM1_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM1_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM1_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM1_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM1_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM1_DMATOTCOUNT __AT (0x50005288);



// --------------------------  Field Item: IOM1_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM1_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50005288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_DMATOTCOUNT >> 0) & 0xFFF), ((IOM1_DMATOTCOUNT = (IOM1_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM1_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM1_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM1_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM1_DMATOTCOUNT = (IOM1_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM1_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM1_DMATARGADDR __AT (0x5000528C);



// -------------------------  Field Item: IOM1_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM1_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000528C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM1_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM1_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000528C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_DMATARGADDR >> 0) & 0xFFFFF), ((IOM1_DMATARGADDR = (IOM1_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM1_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM1_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000528C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM1_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM1_DMATARGADDR = (IOM1_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM1_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM1_DMASTAT __AT (0x50005290);



// -----------------------------  Field Item: IOM1_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM1_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM1_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM1_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM1_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM1_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM1_DMASTAT = (IOM1_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM1_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM1_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM1_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM1_CQCFG __AT (0x50005294);



// ------------------------------  Field Item: IOM1_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM1_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM1_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM1_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM1_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM1_CQCFG >> 0) & 0xFFFFFFFF), ((IOM1_CQCFG = (IOM1_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM1_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM1_CQADDR __AT (0x50005298);



// ----------------------------  Field Item: IOM1_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM1_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50005298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM1_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50005298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_CQADDR >> 2) & 0x3FFFF), ((IOM1_CQADDR = (IOM1_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM1_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM1_CQADDR >> 0) & 0xFFFFFFFF), ((IOM1_CQADDR = (IOM1_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM1_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM1_CQSTAT __AT (0x5000529C);



// ------------------------------  Field Item: IOM1_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM1_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000529C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM1_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000529C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM1_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000529C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM1_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000529C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM1_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM1_CQSTAT = (IOM1_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM1_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM1_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM1_CQFLAGS __AT (0x500052A0);



// ---------------------------  Field Item: IOM1_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM1_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500052A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_CQFLAGS >> 16) & 0xFFFF), ((IOM1_CQFLAGS = (IOM1_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM1_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500052A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_CQFLAGS >> 0) & 0xFFFF), ((IOM1_CQFLAGS = (IOM1_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM1_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM1_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM1_CQFLAGS = (IOM1_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM1_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM1_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM1_CQSETCLEAR __AT (0x500052A4);



// ---------------------------  Field Item: IOM1_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500052A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CQSETCLEAR >> 16) & 0xFF), ((IOM1_CQSETCLEAR = (IOM1_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM1_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500052A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CQSETCLEAR >> 8) & 0xFF), ((IOM1_CQSETCLEAR = (IOM1_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM1_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500052A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CQSETCLEAR >> 0) & 0xFF), ((IOM1_CQSETCLEAR = (IOM1_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM1_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM1_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM1_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM1_CQSETCLEAR = (IOM1_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM1_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM1_CQPAUSEEN __AT (0x500052A8);



// ----------------------------  Field Item: IOM1_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM1_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500052A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_CQPAUSEEN >> 0) & 0xFFFF), ((IOM1_CQPAUSEEN = (IOM1_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM1_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM1_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM1_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM1_CQPAUSEEN = (IOM1_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM1_CQCURIDX __AT (0x500052AC);



// ---------------------------  Field Item: IOM1_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM1_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500052AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CQCURIDX >> 0) & 0xFF), ((IOM1_CQCURIDX = (IOM1_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM1_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM1_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM1_CQCURIDX = (IOM1_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM1_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM1_CQENDIDX __AT (0x500052B0);



// ---------------------------  Field Item: IOM1_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM1_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500052B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_CQENDIDX >> 0) & 0xFF), ((IOM1_CQENDIDX = (IOM1_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM1_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM1_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM1_CQENDIDX = (IOM1_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM1_STATUS __AT (0x500052B4);



// -----------------------------  Field Item: IOM1_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM1_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500052B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM1_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500052B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM1_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM1_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500052B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM1_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500052B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM1_STATUS >> 0) & 0xFFFFFFFF), ((IOM1_STATUS = (IOM1_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM1_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM1_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM1_MSPICFG __AT (0x50005300);



// ----------------------------  Field Item: IOM1_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50005300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50005300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MSPICFG >> 27) & 0x7), ((IOM1_MSPICFG = (IOM1_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50005300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MSPICFG >> 24) & 0x7), ((IOM1_MSPICFG = (IOM1_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50005300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50005300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50005300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50005300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50005300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50005300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50005300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM1_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM1_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM1_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM1_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM1_MSPICFG = (IOM1_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM1_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM1_MI2CCFG __AT (0x50005400);



// -----------------------------  Field Item: IOM1_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50005400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50005400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MI2CCFG >> 16) & 0xFF), ((IOM1_MI2CCFG = (IOM1_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50005400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MI2CCFG >> 12) & 0xF), ((IOM1_MI2CCFG = (IOM1_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50005400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MI2CCFG >> 8) & 0xF), ((IOM1_MI2CCFG = (IOM1_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50005400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50005400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM1_MI2CCFG >> 4) & 0x3), ((IOM1_MI2CCFG = (IOM1_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM1_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM1_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM1_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM1_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM1_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM1_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM1_MI2CCFG = (IOM1_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM1_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM1_DEVCFG __AT (0x50005404);



// -----------------------------  Field Item: IOM1_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM1_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50005404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM1_DEVCFG >> 0) & 0x3FF), ((IOM1_DEVCFG = (IOM1_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM1_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM1_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM1_DEVCFG = (IOM1_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM1_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM1_IOMDBG __AT (0x50005410);



// -----------------------------  Field Item: IOM1_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM1_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50005410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM1_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM1_IOMDBG = (IOM1_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM1_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM1_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50005410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM1_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM1_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50005410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM1_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM1_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50005410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM1_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM1_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM1_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50005410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM1_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM1_IOMDBG = (IOM1_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM1_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM1_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM1_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM1_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM1  -------------------------------------
// SVD Line: 34881

//  <view> IOM1
//    <name> IOM1 </name>
//    <item> SFDITEM_REG__IOM1_FIFO </item>
//    <item> SFDITEM_REG__IOM1_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM1_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM1_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM1_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM1_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM1_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM1_INTEN </item>
//    <item> SFDITEM_REG__IOM1_INTSTAT </item>
//    <item> SFDITEM_REG__IOM1_INTCLR </item>
//    <item> SFDITEM_REG__IOM1_INTSET </item>
//    <item> SFDITEM_REG__IOM1_CLKCFG </item>
//    <item> SFDITEM_REG__IOM1_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM1_CMD </item>
//    <item> SFDITEM_REG__IOM1_CMDRPT </item>
//    <item> SFDITEM_REG__IOM1_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM1_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM1_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM1_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM1_DMACFG </item>
//    <item> SFDITEM_REG__IOM1_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM1_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM1_DMASTAT </item>
//    <item> SFDITEM_REG__IOM1_CQCFG </item>
//    <item> SFDITEM_REG__IOM1_CQADDR </item>
//    <item> SFDITEM_REG__IOM1_CQSTAT </item>
//    <item> SFDITEM_REG__IOM1_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM1_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM1_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM1_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM1_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM1_STATUS </item>
//    <item> SFDITEM_REG__IOM1_MSPICFG </item>
//    <item> SFDITEM_REG__IOM1_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM1_DEVCFG </item>
//    <item> SFDITEM_REG__IOM1_IOMDBG </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM2_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM2_FIFO __AT (0x50006000);



// -------------------------------  Field Item: IOM2_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM2_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_FIFO >> 0) & 0xFFFFFFFF), ((IOM2_FIFO = (IOM2_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM2_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM2_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM2_FIFO >> 0) & 0xFFFFFFFF), ((IOM2_FIFO = (IOM2_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM2_FIFOPTR __AT (0x50006100);



// ----------------------------  Field Item: IOM2_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50006100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOPTR >> 24) & 0xFF), ((IOM2_FIFOPTR = (IOM2_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50006100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOPTR >> 16) & 0xFF), ((IOM2_FIFOPTR = (IOM2_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50006100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOPTR >> 8) & 0xFF), ((IOM2_FIFOPTR = (IOM2_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50006100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOPTR >> 0) & 0xFF), ((IOM2_FIFOPTR = (IOM2_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM2_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM2_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM2_FIFOPTR = (IOM2_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM2_FIFOTHR __AT (0x50006104);



// ----------------------------  Field Item: IOM2_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM2_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50006104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOTHR >> 8) & 0x3F), ((IOM2_FIFOTHR = (IOM2_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM2_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50006104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOTHR >> 0) & 0x3F), ((IOM2_FIFOTHR = (IOM2_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM2_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM2_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM2_FIFOTHR = (IOM2_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM2_FIFOPOP __AT (0x50006108);



// ----------------------------  Field Item: IOM2_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM2_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM2_FIFOPOP = (IOM2_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM2_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM2_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM2_FIFOPOP = (IOM2_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM2_FIFOPUSH __AT (0x5000610C);



// ----------------------------  Field Item: IOM2_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM2_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000610C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM2_FIFOPUSH = (IOM2_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM2_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000610C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM2_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM2_FIFOPUSH = (IOM2_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM2_FIFOCTRL __AT (0x50006110);



// ---------------------------  Field Item: IOM2_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM2_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM2_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM2_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM2_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM2_FIFOCTRL = (IOM2_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM2_FIFOLOC __AT (0x50006114);



// ----------------------------  Field Item: IOM2_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM2_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50006114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOLOC >> 8) & 0xF), ((IOM2_FIFOLOC = (IOM2_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM2_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50006114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_FIFOLOC >> 0) & 0xF), ((IOM2_FIFOLOC = (IOM2_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM2_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM2_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM2_FIFOLOC = (IOM2_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM2_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM2_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM2_INTEN __AT (0x50006200);



// ------------------------------  Field Item: IOM2_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM2_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50006200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM2_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50006200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM2_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50006200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM2_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50006200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM2_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50006200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM2_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50006200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM2_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50006200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM2_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50006200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM2_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50006200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM2_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50006200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM2_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50006200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM2_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50006200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM2_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM2_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM2_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM2_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM2_INTEN >> 0) & 0xFFFFFFFF), ((IOM2_INTEN = (IOM2_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM2_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM2_INTSTAT __AT (0x50006204);



// -----------------------------  Field Item: IOM2_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50006204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50006204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50006204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50006204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50006204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50006204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50006204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50006204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50006204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50006204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50006204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50006204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM2_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM2_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM2_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM2_INTSTAT = (IOM2_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM2_INTCLR __AT (0x50006208);



// ------------------------------  Field Item: IOM2_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM2_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50006208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM2_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50006208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM2_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50006208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM2_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50006208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM2_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50006208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM2_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50006208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM2_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50006208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM2_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50006208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM2_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50006208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM2_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50006208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM2_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50006208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM2_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50006208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM2_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM2_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM2_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM2_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM2_INTCLR >> 0) & 0xFFFFFFFF), ((IOM2_INTCLR = (IOM2_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM2_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM2_INTSET __AT (0x5000620C);



// ------------------------------  Field Item: IOM2_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM2_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000620C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM2_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000620C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM2_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000620C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM2_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000620C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM2_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000620C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM2_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000620C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM2_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000620C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM2_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000620C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM2_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000620C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM2_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000620C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM2_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000620C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM2_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000620C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM2_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000620C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM2_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM2_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000620C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM2_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000620C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM2_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000620C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM2_INTSET >> 0) & 0xFFFFFFFF), ((IOM2_INTSET = (IOM2_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM2_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM2_CLKCFG __AT (0x50006210);



// -----------------------------  Field Item: IOM2_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50006210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CLKCFG >> 24) & 0xFF), ((IOM2_CLKCFG = (IOM2_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM2_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50006210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CLKCFG >> 16) & 0xFF), ((IOM2_CLKCFG = (IOM2_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM2_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50006210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50006210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50006210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM2_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM2_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM2_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM2_CLKCFG = (IOM2_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM2_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM2_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM2_SUBMODCTRL __AT (0x50006214);



// --------------------------  Field Item: IOM2_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50006214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM2_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50006214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM2_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50006214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM2_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM2_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM2_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM2_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM2_SUBMODCTRL = (IOM2_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM2_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM2_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM2_CMD __AT (0x50006218);



// ------------------------------  Field Item: IOM2_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM2_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50006218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CMD >> 24) & 0xFF), ((IOM2_CMD = (IOM2_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM2_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM2_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50006218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CMD >> 20) & 0x3), ((IOM2_CMD = (IOM2_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM2_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM2_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50006218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_CMD >> 8) & 0xFFF), ((IOM2_CMD = (IOM2_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM2_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM2_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50006218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM2_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50006218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CMD >> 5) & 0x3), ((IOM2_CMD = (IOM2_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM2_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM2_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50006218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM2_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM2_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM2_CMD >> 0) & 0xFFFFFFFF), ((IOM2_CMD = (IOM2_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM2_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM2_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM2_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM2_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM2_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM2_CMDRPT __AT (0x5000621C);



// -----------------------------  Field Item: IOM2_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM2_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000621C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CMDRPT >> 0) & 0x1F), ((IOM2_CMDRPT = (IOM2_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM2_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000621C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM2_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM2_CMDRPT = (IOM2_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM2_OFFSETHI __AT (0x50006220);



// ---------------------------  Field Item: IOM2_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM2_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50006220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_OFFSETHI >> 0) & 0xFFFF), ((IOM2_OFFSETHI = (IOM2_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM2_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM2_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM2_OFFSETHI = (IOM2_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM2_CMDSTAT __AT (0x50006224);



// -----------------------------  Field Item: IOM2_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM2_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50006224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_CMDSTAT >> 8) & 0xFFF), ((IOM2_CMDSTAT = (IOM2_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM2_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50006224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM2_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50006224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CMDSTAT >> 0) & 0x1F), ((IOM2_CMDSTAT = (IOM2_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM2_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006224) Command status </i>
//    <loc> ( (unsigned int)((IOM2_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM2_CMDSTAT = (IOM2_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM2_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM2_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM2_DMATRIGEN __AT (0x50006240);



// ----------------------------  Field Item: IOM2_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM2_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM2_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM2_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM2_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM2_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM2_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM2_DMATRIGEN = (IOM2_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM2_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM2_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM2_DMATRIGSTAT __AT (0x50006244);



// --------------------------  Field Item: IOM2_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM2_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM2_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM2_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM2_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM2_DMATRIGSTAT = (IOM2_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM2_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM2_DMACFG __AT (0x50006280);



// -----------------------------  Field Item: IOM2_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM2_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50006280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM2_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50006280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM2_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM2_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM2_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM2_DMACFG >> 0) & 0xFFFFFFFF), ((IOM2_DMACFG = (IOM2_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM2_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM2_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM2_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM2_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM2_DMATOTCOUNT __AT (0x50006288);



// --------------------------  Field Item: IOM2_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM2_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50006288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_DMATOTCOUNT >> 0) & 0xFFF), ((IOM2_DMATOTCOUNT = (IOM2_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM2_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM2_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM2_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM2_DMATOTCOUNT = (IOM2_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM2_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM2_DMATARGADDR __AT (0x5000628C);



// -------------------------  Field Item: IOM2_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM2_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000628C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM2_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM2_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000628C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_DMATARGADDR >> 0) & 0xFFFFF), ((IOM2_DMATARGADDR = (IOM2_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM2_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM2_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000628C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM2_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM2_DMATARGADDR = (IOM2_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM2_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM2_DMASTAT __AT (0x50006290);



// -----------------------------  Field Item: IOM2_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM2_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM2_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM2_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM2_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM2_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM2_DMASTAT = (IOM2_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM2_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM2_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM2_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM2_CQCFG __AT (0x50006294);



// ------------------------------  Field Item: IOM2_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM2_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM2_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM2_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM2_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM2_CQCFG >> 0) & 0xFFFFFFFF), ((IOM2_CQCFG = (IOM2_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM2_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM2_CQADDR __AT (0x50006298);



// ----------------------------  Field Item: IOM2_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM2_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50006298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM2_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50006298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_CQADDR >> 2) & 0x3FFFF), ((IOM2_CQADDR = (IOM2_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM2_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM2_CQADDR >> 0) & 0xFFFFFFFF), ((IOM2_CQADDR = (IOM2_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM2_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM2_CQSTAT __AT (0x5000629C);



// ------------------------------  Field Item: IOM2_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM2_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000629C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM2_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000629C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM2_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000629C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM2_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000629C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM2_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM2_CQSTAT = (IOM2_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM2_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM2_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM2_CQFLAGS __AT (0x500062A0);



// ---------------------------  Field Item: IOM2_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM2_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500062A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_CQFLAGS >> 16) & 0xFFFF), ((IOM2_CQFLAGS = (IOM2_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM2_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500062A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_CQFLAGS >> 0) & 0xFFFF), ((IOM2_CQFLAGS = (IOM2_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM2_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM2_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM2_CQFLAGS = (IOM2_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM2_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM2_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM2_CQSETCLEAR __AT (0x500062A4);



// ---------------------------  Field Item: IOM2_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500062A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CQSETCLEAR >> 16) & 0xFF), ((IOM2_CQSETCLEAR = (IOM2_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM2_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500062A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CQSETCLEAR >> 8) & 0xFF), ((IOM2_CQSETCLEAR = (IOM2_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM2_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500062A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CQSETCLEAR >> 0) & 0xFF), ((IOM2_CQSETCLEAR = (IOM2_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM2_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM2_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM2_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM2_CQSETCLEAR = (IOM2_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM2_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM2_CQPAUSEEN __AT (0x500062A8);



// ----------------------------  Field Item: IOM2_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM2_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500062A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_CQPAUSEEN >> 0) & 0xFFFF), ((IOM2_CQPAUSEEN = (IOM2_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM2_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM2_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM2_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM2_CQPAUSEEN = (IOM2_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM2_CQCURIDX __AT (0x500062AC);



// ---------------------------  Field Item: IOM2_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM2_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500062AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CQCURIDX >> 0) & 0xFF), ((IOM2_CQCURIDX = (IOM2_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM2_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM2_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM2_CQCURIDX = (IOM2_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM2_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM2_CQENDIDX __AT (0x500062B0);



// ---------------------------  Field Item: IOM2_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM2_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500062B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_CQENDIDX >> 0) & 0xFF), ((IOM2_CQENDIDX = (IOM2_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM2_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM2_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM2_CQENDIDX = (IOM2_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM2_STATUS __AT (0x500062B4);



// -----------------------------  Field Item: IOM2_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM2_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500062B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM2_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500062B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM2_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM2_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500062B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM2_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500062B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM2_STATUS >> 0) & 0xFFFFFFFF), ((IOM2_STATUS = (IOM2_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM2_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM2_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM2_MSPICFG __AT (0x50006300);



// ----------------------------  Field Item: IOM2_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50006300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50006300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MSPICFG >> 27) & 0x7), ((IOM2_MSPICFG = (IOM2_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50006300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MSPICFG >> 24) & 0x7), ((IOM2_MSPICFG = (IOM2_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50006300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50006300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50006300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50006300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50006300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50006300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50006300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM2_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM2_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM2_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM2_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM2_MSPICFG = (IOM2_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM2_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM2_MI2CCFG __AT (0x50006400);



// -----------------------------  Field Item: IOM2_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50006400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50006400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MI2CCFG >> 16) & 0xFF), ((IOM2_MI2CCFG = (IOM2_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50006400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MI2CCFG >> 12) & 0xF), ((IOM2_MI2CCFG = (IOM2_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50006400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MI2CCFG >> 8) & 0xF), ((IOM2_MI2CCFG = (IOM2_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50006400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50006400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM2_MI2CCFG >> 4) & 0x3), ((IOM2_MI2CCFG = (IOM2_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM2_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM2_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM2_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM2_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM2_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM2_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM2_MI2CCFG = (IOM2_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM2_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM2_DEVCFG __AT (0x50006404);



// -----------------------------  Field Item: IOM2_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM2_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50006404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM2_DEVCFG >> 0) & 0x3FF), ((IOM2_DEVCFG = (IOM2_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM2_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM2_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM2_DEVCFG = (IOM2_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM2_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM2_IOMDBG __AT (0x50006410);



// -----------------------------  Field Item: IOM2_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM2_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50006410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM2_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM2_IOMDBG = (IOM2_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM2_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM2_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50006410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM2_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM2_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50006410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM2_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM2_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50006410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM2_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM2_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM2_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50006410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM2_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM2_IOMDBG = (IOM2_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM2_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM2_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM2_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM2_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM2  -------------------------------------
// SVD Line: 34888

//  <view> IOM2
//    <name> IOM2 </name>
//    <item> SFDITEM_REG__IOM2_FIFO </item>
//    <item> SFDITEM_REG__IOM2_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM2_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM2_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM2_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM2_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM2_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM2_INTEN </item>
//    <item> SFDITEM_REG__IOM2_INTSTAT </item>
//    <item> SFDITEM_REG__IOM2_INTCLR </item>
//    <item> SFDITEM_REG__IOM2_INTSET </item>
//    <item> SFDITEM_REG__IOM2_CLKCFG </item>
//    <item> SFDITEM_REG__IOM2_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM2_CMD </item>
//    <item> SFDITEM_REG__IOM2_CMDRPT </item>
//    <item> SFDITEM_REG__IOM2_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM2_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM2_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM2_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM2_DMACFG </item>
//    <item> SFDITEM_REG__IOM2_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM2_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM2_DMASTAT </item>
//    <item> SFDITEM_REG__IOM2_CQCFG </item>
//    <item> SFDITEM_REG__IOM2_CQADDR </item>
//    <item> SFDITEM_REG__IOM2_CQSTAT </item>
//    <item> SFDITEM_REG__IOM2_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM2_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM2_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM2_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM2_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM2_STATUS </item>
//    <item> SFDITEM_REG__IOM2_MSPICFG </item>
//    <item> SFDITEM_REG__IOM2_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM2_DEVCFG </item>
//    <item> SFDITEM_REG__IOM2_IOMDBG </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM3_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM3_FIFO __AT (0x50007000);



// -------------------------------  Field Item: IOM3_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM3_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_FIFO >> 0) & 0xFFFFFFFF), ((IOM3_FIFO = (IOM3_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM3_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM3_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM3_FIFO >> 0) & 0xFFFFFFFF), ((IOM3_FIFO = (IOM3_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM3_FIFOPTR __AT (0x50007100);



// ----------------------------  Field Item: IOM3_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50007100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOPTR >> 24) & 0xFF), ((IOM3_FIFOPTR = (IOM3_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50007100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOPTR >> 16) & 0xFF), ((IOM3_FIFOPTR = (IOM3_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50007100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOPTR >> 8) & 0xFF), ((IOM3_FIFOPTR = (IOM3_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50007100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOPTR >> 0) & 0xFF), ((IOM3_FIFOPTR = (IOM3_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM3_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM3_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM3_FIFOPTR = (IOM3_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM3_FIFOTHR __AT (0x50007104);



// ----------------------------  Field Item: IOM3_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM3_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50007104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOTHR >> 8) & 0x3F), ((IOM3_FIFOTHR = (IOM3_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM3_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50007104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOTHR >> 0) & 0x3F), ((IOM3_FIFOTHR = (IOM3_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM3_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM3_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM3_FIFOTHR = (IOM3_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM3_FIFOPOP __AT (0x50007108);



// ----------------------------  Field Item: IOM3_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM3_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM3_FIFOPOP = (IOM3_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM3_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM3_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM3_FIFOPOP = (IOM3_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM3_FIFOPUSH __AT (0x5000710C);



// ----------------------------  Field Item: IOM3_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM3_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000710C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM3_FIFOPUSH = (IOM3_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM3_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000710C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM3_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM3_FIFOPUSH = (IOM3_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM3_FIFOCTRL __AT (0x50007110);



// ---------------------------  Field Item: IOM3_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM3_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM3_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM3_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM3_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM3_FIFOCTRL = (IOM3_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM3_FIFOLOC __AT (0x50007114);



// ----------------------------  Field Item: IOM3_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM3_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50007114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOLOC >> 8) & 0xF), ((IOM3_FIFOLOC = (IOM3_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM3_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50007114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_FIFOLOC >> 0) & 0xF), ((IOM3_FIFOLOC = (IOM3_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM3_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM3_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM3_FIFOLOC = (IOM3_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM3_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM3_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM3_INTEN __AT (0x50007200);



// ------------------------------  Field Item: IOM3_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM3_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50007200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM3_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50007200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM3_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50007200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM3_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50007200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM3_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50007200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM3_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50007200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM3_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50007200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM3_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50007200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM3_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50007200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM3_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50007200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM3_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50007200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM3_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50007200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM3_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM3_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM3_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM3_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM3_INTEN >> 0) & 0xFFFFFFFF), ((IOM3_INTEN = (IOM3_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM3_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM3_INTSTAT __AT (0x50007204);



// -----------------------------  Field Item: IOM3_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50007204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50007204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50007204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50007204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50007204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50007204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50007204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50007204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50007204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50007204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50007204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50007204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM3_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM3_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM3_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM3_INTSTAT = (IOM3_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM3_INTCLR __AT (0x50007208);



// ------------------------------  Field Item: IOM3_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM3_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50007208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM3_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50007208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM3_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50007208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM3_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50007208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM3_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50007208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM3_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50007208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM3_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50007208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM3_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50007208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM3_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50007208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM3_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50007208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM3_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50007208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM3_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50007208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM3_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM3_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM3_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM3_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM3_INTCLR >> 0) & 0xFFFFFFFF), ((IOM3_INTCLR = (IOM3_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM3_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM3_INTSET __AT (0x5000720C);



// ------------------------------  Field Item: IOM3_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM3_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000720C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM3_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000720C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM3_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000720C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM3_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000720C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM3_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000720C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM3_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000720C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM3_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000720C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM3_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000720C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM3_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000720C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM3_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000720C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM3_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000720C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM3_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000720C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM3_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000720C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM3_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM3_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000720C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM3_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000720C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM3_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000720C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM3_INTSET >> 0) & 0xFFFFFFFF), ((IOM3_INTSET = (IOM3_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM3_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM3_CLKCFG __AT (0x50007210);



// -----------------------------  Field Item: IOM3_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50007210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CLKCFG >> 24) & 0xFF), ((IOM3_CLKCFG = (IOM3_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM3_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50007210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CLKCFG >> 16) & 0xFF), ((IOM3_CLKCFG = (IOM3_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM3_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50007210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50007210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50007210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM3_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM3_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM3_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM3_CLKCFG = (IOM3_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM3_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM3_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM3_SUBMODCTRL __AT (0x50007214);



// --------------------------  Field Item: IOM3_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50007214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM3_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50007214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM3_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50007214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM3_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM3_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM3_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM3_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM3_SUBMODCTRL = (IOM3_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM3_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM3_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM3_CMD __AT (0x50007218);



// ------------------------------  Field Item: IOM3_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM3_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50007218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CMD >> 24) & 0xFF), ((IOM3_CMD = (IOM3_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM3_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM3_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50007218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CMD >> 20) & 0x3), ((IOM3_CMD = (IOM3_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM3_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM3_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50007218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_CMD >> 8) & 0xFFF), ((IOM3_CMD = (IOM3_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM3_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM3_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50007218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM3_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50007218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CMD >> 5) & 0x3), ((IOM3_CMD = (IOM3_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM3_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM3_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50007218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM3_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM3_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM3_CMD >> 0) & 0xFFFFFFFF), ((IOM3_CMD = (IOM3_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM3_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM3_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM3_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM3_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM3_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM3_CMDRPT __AT (0x5000721C);



// -----------------------------  Field Item: IOM3_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM3_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000721C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CMDRPT >> 0) & 0x1F), ((IOM3_CMDRPT = (IOM3_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM3_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000721C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM3_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM3_CMDRPT = (IOM3_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM3_OFFSETHI __AT (0x50007220);



// ---------------------------  Field Item: IOM3_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM3_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50007220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_OFFSETHI >> 0) & 0xFFFF), ((IOM3_OFFSETHI = (IOM3_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM3_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM3_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM3_OFFSETHI = (IOM3_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM3_CMDSTAT __AT (0x50007224);



// -----------------------------  Field Item: IOM3_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM3_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50007224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_CMDSTAT >> 8) & 0xFFF), ((IOM3_CMDSTAT = (IOM3_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM3_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50007224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM3_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50007224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CMDSTAT >> 0) & 0x1F), ((IOM3_CMDSTAT = (IOM3_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM3_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007224) Command status </i>
//    <loc> ( (unsigned int)((IOM3_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM3_CMDSTAT = (IOM3_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM3_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM3_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM3_DMATRIGEN __AT (0x50007240);



// ----------------------------  Field Item: IOM3_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM3_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM3_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM3_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM3_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM3_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM3_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM3_DMATRIGEN = (IOM3_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM3_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM3_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM3_DMATRIGSTAT __AT (0x50007244);



// --------------------------  Field Item: IOM3_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM3_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM3_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM3_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM3_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM3_DMATRIGSTAT = (IOM3_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM3_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM3_DMACFG __AT (0x50007280);



// -----------------------------  Field Item: IOM3_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM3_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50007280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM3_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50007280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM3_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM3_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM3_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM3_DMACFG >> 0) & 0xFFFFFFFF), ((IOM3_DMACFG = (IOM3_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM3_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM3_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM3_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM3_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM3_DMATOTCOUNT __AT (0x50007288);



// --------------------------  Field Item: IOM3_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM3_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50007288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_DMATOTCOUNT >> 0) & 0xFFF), ((IOM3_DMATOTCOUNT = (IOM3_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM3_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM3_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM3_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM3_DMATOTCOUNT = (IOM3_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM3_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM3_DMATARGADDR __AT (0x5000728C);



// -------------------------  Field Item: IOM3_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM3_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000728C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM3_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM3_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000728C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_DMATARGADDR >> 0) & 0xFFFFF), ((IOM3_DMATARGADDR = (IOM3_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM3_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM3_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000728C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM3_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM3_DMATARGADDR = (IOM3_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM3_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM3_DMASTAT __AT (0x50007290);



// -----------------------------  Field Item: IOM3_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM3_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM3_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM3_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM3_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM3_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM3_DMASTAT = (IOM3_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM3_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM3_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM3_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM3_CQCFG __AT (0x50007294);



// ------------------------------  Field Item: IOM3_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM3_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM3_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM3_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM3_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM3_CQCFG >> 0) & 0xFFFFFFFF), ((IOM3_CQCFG = (IOM3_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM3_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM3_CQADDR __AT (0x50007298);



// ----------------------------  Field Item: IOM3_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM3_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50007298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM3_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50007298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_CQADDR >> 2) & 0x3FFFF), ((IOM3_CQADDR = (IOM3_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM3_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM3_CQADDR >> 0) & 0xFFFFFFFF), ((IOM3_CQADDR = (IOM3_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM3_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM3_CQSTAT __AT (0x5000729C);



// ------------------------------  Field Item: IOM3_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM3_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000729C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM3_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000729C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM3_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000729C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM3_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000729C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM3_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM3_CQSTAT = (IOM3_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM3_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM3_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM3_CQFLAGS __AT (0x500072A0);



// ---------------------------  Field Item: IOM3_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM3_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500072A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_CQFLAGS >> 16) & 0xFFFF), ((IOM3_CQFLAGS = (IOM3_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM3_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500072A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_CQFLAGS >> 0) & 0xFFFF), ((IOM3_CQFLAGS = (IOM3_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM3_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM3_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM3_CQFLAGS = (IOM3_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM3_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM3_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM3_CQSETCLEAR __AT (0x500072A4);



// ---------------------------  Field Item: IOM3_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500072A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CQSETCLEAR >> 16) & 0xFF), ((IOM3_CQSETCLEAR = (IOM3_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM3_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500072A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CQSETCLEAR >> 8) & 0xFF), ((IOM3_CQSETCLEAR = (IOM3_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM3_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500072A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CQSETCLEAR >> 0) & 0xFF), ((IOM3_CQSETCLEAR = (IOM3_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM3_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM3_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM3_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM3_CQSETCLEAR = (IOM3_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM3_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM3_CQPAUSEEN __AT (0x500072A8);



// ----------------------------  Field Item: IOM3_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM3_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500072A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_CQPAUSEEN >> 0) & 0xFFFF), ((IOM3_CQPAUSEEN = (IOM3_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM3_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM3_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM3_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM3_CQPAUSEEN = (IOM3_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM3_CQCURIDX __AT (0x500072AC);



// ---------------------------  Field Item: IOM3_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM3_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500072AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CQCURIDX >> 0) & 0xFF), ((IOM3_CQCURIDX = (IOM3_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM3_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM3_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM3_CQCURIDX = (IOM3_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM3_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM3_CQENDIDX __AT (0x500072B0);



// ---------------------------  Field Item: IOM3_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM3_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500072B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_CQENDIDX >> 0) & 0xFF), ((IOM3_CQENDIDX = (IOM3_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM3_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM3_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM3_CQENDIDX = (IOM3_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM3_STATUS __AT (0x500072B4);



// -----------------------------  Field Item: IOM3_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM3_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500072B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM3_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500072B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM3_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM3_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500072B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM3_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500072B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM3_STATUS >> 0) & 0xFFFFFFFF), ((IOM3_STATUS = (IOM3_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM3_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM3_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM3_MSPICFG __AT (0x50007300);



// ----------------------------  Field Item: IOM3_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50007300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50007300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MSPICFG >> 27) & 0x7), ((IOM3_MSPICFG = (IOM3_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50007300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MSPICFG >> 24) & 0x7), ((IOM3_MSPICFG = (IOM3_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50007300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50007300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50007300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50007300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50007300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50007300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50007300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM3_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM3_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM3_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM3_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM3_MSPICFG = (IOM3_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM3_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM3_MI2CCFG __AT (0x50007400);



// -----------------------------  Field Item: IOM3_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50007400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50007400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MI2CCFG >> 16) & 0xFF), ((IOM3_MI2CCFG = (IOM3_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50007400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MI2CCFG >> 12) & 0xF), ((IOM3_MI2CCFG = (IOM3_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50007400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MI2CCFG >> 8) & 0xF), ((IOM3_MI2CCFG = (IOM3_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50007400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50007400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM3_MI2CCFG >> 4) & 0x3), ((IOM3_MI2CCFG = (IOM3_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM3_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM3_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM3_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM3_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM3_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM3_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM3_MI2CCFG = (IOM3_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM3_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM3_DEVCFG __AT (0x50007404);



// -----------------------------  Field Item: IOM3_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM3_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50007404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM3_DEVCFG >> 0) & 0x3FF), ((IOM3_DEVCFG = (IOM3_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM3_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM3_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM3_DEVCFG = (IOM3_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM3_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM3_IOMDBG __AT (0x50007410);



// -----------------------------  Field Item: IOM3_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM3_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50007410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM3_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM3_IOMDBG = (IOM3_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM3_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM3_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50007410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM3_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM3_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50007410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM3_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM3_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50007410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM3_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM3_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM3_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50007410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM3_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM3_IOMDBG = (IOM3_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM3_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM3_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM3_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM3_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM3  -------------------------------------
// SVD Line: 34895

//  <view> IOM3
//    <name> IOM3 </name>
//    <item> SFDITEM_REG__IOM3_FIFO </item>
//    <item> SFDITEM_REG__IOM3_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM3_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM3_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM3_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM3_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM3_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM3_INTEN </item>
//    <item> SFDITEM_REG__IOM3_INTSTAT </item>
//    <item> SFDITEM_REG__IOM3_INTCLR </item>
//    <item> SFDITEM_REG__IOM3_INTSET </item>
//    <item> SFDITEM_REG__IOM3_CLKCFG </item>
//    <item> SFDITEM_REG__IOM3_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM3_CMD </item>
//    <item> SFDITEM_REG__IOM3_CMDRPT </item>
//    <item> SFDITEM_REG__IOM3_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM3_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM3_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM3_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM3_DMACFG </item>
//    <item> SFDITEM_REG__IOM3_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM3_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM3_DMASTAT </item>
//    <item> SFDITEM_REG__IOM3_CQCFG </item>
//    <item> SFDITEM_REG__IOM3_CQADDR </item>
//    <item> SFDITEM_REG__IOM3_CQSTAT </item>
//    <item> SFDITEM_REG__IOM3_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM3_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM3_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM3_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM3_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM3_STATUS </item>
//    <item> SFDITEM_REG__IOM3_MSPICFG </item>
//    <item> SFDITEM_REG__IOM3_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM3_DEVCFG </item>
//    <item> SFDITEM_REG__IOM3_IOMDBG </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM4_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM4_FIFO __AT (0x50008000);



// -------------------------------  Field Item: IOM4_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM4_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_FIFO >> 0) & 0xFFFFFFFF), ((IOM4_FIFO = (IOM4_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM4_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM4_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM4_FIFO >> 0) & 0xFFFFFFFF), ((IOM4_FIFO = (IOM4_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM4_FIFOPTR __AT (0x50008100);



// ----------------------------  Field Item: IOM4_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50008100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOPTR >> 24) & 0xFF), ((IOM4_FIFOPTR = (IOM4_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50008100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOPTR >> 16) & 0xFF), ((IOM4_FIFOPTR = (IOM4_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50008100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOPTR >> 8) & 0xFF), ((IOM4_FIFOPTR = (IOM4_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50008100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOPTR >> 0) & 0xFF), ((IOM4_FIFOPTR = (IOM4_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM4_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM4_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM4_FIFOPTR = (IOM4_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM4_FIFOTHR __AT (0x50008104);



// ----------------------------  Field Item: IOM4_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM4_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50008104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOTHR >> 8) & 0x3F), ((IOM4_FIFOTHR = (IOM4_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM4_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50008104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOTHR >> 0) & 0x3F), ((IOM4_FIFOTHR = (IOM4_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM4_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM4_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM4_FIFOTHR = (IOM4_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM4_FIFOPOP __AT (0x50008108);



// ----------------------------  Field Item: IOM4_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM4_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM4_FIFOPOP = (IOM4_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM4_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM4_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM4_FIFOPOP = (IOM4_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM4_FIFOPUSH __AT (0x5000810C);



// ----------------------------  Field Item: IOM4_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM4_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000810C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM4_FIFOPUSH = (IOM4_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM4_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000810C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM4_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM4_FIFOPUSH = (IOM4_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM4_FIFOCTRL __AT (0x50008110);



// ---------------------------  Field Item: IOM4_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM4_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM4_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM4_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM4_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM4_FIFOCTRL = (IOM4_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM4_FIFOLOC __AT (0x50008114);



// ----------------------------  Field Item: IOM4_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM4_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50008114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOLOC >> 8) & 0xF), ((IOM4_FIFOLOC = (IOM4_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM4_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50008114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_FIFOLOC >> 0) & 0xF), ((IOM4_FIFOLOC = (IOM4_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM4_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM4_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM4_FIFOLOC = (IOM4_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM4_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM4_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM4_INTEN __AT (0x50008200);



// ------------------------------  Field Item: IOM4_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM4_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50008200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM4_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50008200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM4_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50008200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM4_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50008200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM4_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50008200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM4_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50008200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM4_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50008200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM4_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50008200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM4_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50008200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM4_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50008200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM4_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50008200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM4_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50008200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM4_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM4_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM4_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM4_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM4_INTEN >> 0) & 0xFFFFFFFF), ((IOM4_INTEN = (IOM4_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM4_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM4_INTSTAT __AT (0x50008204);



// -----------------------------  Field Item: IOM4_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50008204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50008204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50008204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50008204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50008204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50008204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50008204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50008204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50008204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50008204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50008204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50008204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM4_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM4_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM4_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM4_INTSTAT = (IOM4_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM4_INTCLR __AT (0x50008208);



// ------------------------------  Field Item: IOM4_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM4_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50008208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM4_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50008208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM4_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50008208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM4_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50008208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM4_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50008208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM4_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50008208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM4_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50008208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM4_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50008208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM4_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50008208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM4_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50008208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM4_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50008208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM4_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50008208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM4_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM4_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM4_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM4_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM4_INTCLR >> 0) & 0xFFFFFFFF), ((IOM4_INTCLR = (IOM4_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM4_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM4_INTSET __AT (0x5000820C);



// ------------------------------  Field Item: IOM4_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM4_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000820C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM4_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000820C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM4_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000820C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM4_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000820C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM4_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000820C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM4_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000820C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM4_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000820C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM4_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000820C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM4_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000820C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM4_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000820C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM4_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000820C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM4_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000820C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM4_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000820C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM4_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM4_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000820C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM4_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000820C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM4_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000820C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM4_INTSET >> 0) & 0xFFFFFFFF), ((IOM4_INTSET = (IOM4_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM4_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM4_CLKCFG __AT (0x50008210);



// -----------------------------  Field Item: IOM4_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50008210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CLKCFG >> 24) & 0xFF), ((IOM4_CLKCFG = (IOM4_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM4_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50008210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CLKCFG >> 16) & 0xFF), ((IOM4_CLKCFG = (IOM4_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM4_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50008210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50008210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50008210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM4_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM4_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM4_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM4_CLKCFG = (IOM4_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM4_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM4_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM4_SUBMODCTRL __AT (0x50008214);



// --------------------------  Field Item: IOM4_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50008214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM4_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50008214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM4_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50008214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM4_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM4_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM4_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM4_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM4_SUBMODCTRL = (IOM4_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM4_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM4_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM4_CMD __AT (0x50008218);



// ------------------------------  Field Item: IOM4_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM4_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50008218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CMD >> 24) & 0xFF), ((IOM4_CMD = (IOM4_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM4_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM4_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50008218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CMD >> 20) & 0x3), ((IOM4_CMD = (IOM4_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM4_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM4_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50008218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_CMD >> 8) & 0xFFF), ((IOM4_CMD = (IOM4_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM4_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM4_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50008218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM4_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50008218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CMD >> 5) & 0x3), ((IOM4_CMD = (IOM4_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM4_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM4_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50008218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM4_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM4_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM4_CMD >> 0) & 0xFFFFFFFF), ((IOM4_CMD = (IOM4_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM4_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM4_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM4_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM4_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM4_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM4_CMDRPT __AT (0x5000821C);



// -----------------------------  Field Item: IOM4_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM4_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000821C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CMDRPT >> 0) & 0x1F), ((IOM4_CMDRPT = (IOM4_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM4_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000821C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM4_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM4_CMDRPT = (IOM4_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM4_OFFSETHI __AT (0x50008220);



// ---------------------------  Field Item: IOM4_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM4_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50008220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_OFFSETHI >> 0) & 0xFFFF), ((IOM4_OFFSETHI = (IOM4_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM4_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM4_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM4_OFFSETHI = (IOM4_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM4_CMDSTAT __AT (0x50008224);



// -----------------------------  Field Item: IOM4_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM4_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50008224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_CMDSTAT >> 8) & 0xFFF), ((IOM4_CMDSTAT = (IOM4_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM4_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50008224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM4_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50008224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CMDSTAT >> 0) & 0x1F), ((IOM4_CMDSTAT = (IOM4_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM4_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008224) Command status </i>
//    <loc> ( (unsigned int)((IOM4_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM4_CMDSTAT = (IOM4_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM4_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM4_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM4_DMATRIGEN __AT (0x50008240);



// ----------------------------  Field Item: IOM4_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM4_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM4_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM4_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM4_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM4_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM4_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM4_DMATRIGEN = (IOM4_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM4_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM4_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM4_DMATRIGSTAT __AT (0x50008244);



// --------------------------  Field Item: IOM4_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM4_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM4_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM4_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM4_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM4_DMATRIGSTAT = (IOM4_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM4_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM4_DMACFG __AT (0x50008280);



// -----------------------------  Field Item: IOM4_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM4_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50008280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM4_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50008280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM4_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM4_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM4_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM4_DMACFG >> 0) & 0xFFFFFFFF), ((IOM4_DMACFG = (IOM4_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM4_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM4_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM4_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM4_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM4_DMATOTCOUNT __AT (0x50008288);



// --------------------------  Field Item: IOM4_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM4_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50008288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_DMATOTCOUNT >> 0) & 0xFFF), ((IOM4_DMATOTCOUNT = (IOM4_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM4_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM4_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM4_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM4_DMATOTCOUNT = (IOM4_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM4_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM4_DMATARGADDR __AT (0x5000828C);



// -------------------------  Field Item: IOM4_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM4_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000828C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM4_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM4_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000828C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_DMATARGADDR >> 0) & 0xFFFFF), ((IOM4_DMATARGADDR = (IOM4_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM4_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM4_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000828C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM4_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM4_DMATARGADDR = (IOM4_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM4_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM4_DMASTAT __AT (0x50008290);



// -----------------------------  Field Item: IOM4_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM4_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM4_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM4_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM4_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM4_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM4_DMASTAT = (IOM4_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM4_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM4_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM4_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM4_CQCFG __AT (0x50008294);



// ------------------------------  Field Item: IOM4_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM4_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM4_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM4_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM4_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM4_CQCFG >> 0) & 0xFFFFFFFF), ((IOM4_CQCFG = (IOM4_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM4_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM4_CQADDR __AT (0x50008298);



// ----------------------------  Field Item: IOM4_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM4_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50008298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM4_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50008298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_CQADDR >> 2) & 0x3FFFF), ((IOM4_CQADDR = (IOM4_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM4_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM4_CQADDR >> 0) & 0xFFFFFFFF), ((IOM4_CQADDR = (IOM4_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM4_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM4_CQSTAT __AT (0x5000829C);



// ------------------------------  Field Item: IOM4_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM4_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000829C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM4_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000829C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM4_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000829C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM4_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000829C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM4_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM4_CQSTAT = (IOM4_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM4_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM4_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM4_CQFLAGS __AT (0x500082A0);



// ---------------------------  Field Item: IOM4_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM4_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500082A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_CQFLAGS >> 16) & 0xFFFF), ((IOM4_CQFLAGS = (IOM4_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM4_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500082A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_CQFLAGS >> 0) & 0xFFFF), ((IOM4_CQFLAGS = (IOM4_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM4_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM4_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM4_CQFLAGS = (IOM4_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM4_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM4_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM4_CQSETCLEAR __AT (0x500082A4);



// ---------------------------  Field Item: IOM4_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500082A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CQSETCLEAR >> 16) & 0xFF), ((IOM4_CQSETCLEAR = (IOM4_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM4_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500082A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CQSETCLEAR >> 8) & 0xFF), ((IOM4_CQSETCLEAR = (IOM4_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM4_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500082A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CQSETCLEAR >> 0) & 0xFF), ((IOM4_CQSETCLEAR = (IOM4_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM4_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM4_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM4_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM4_CQSETCLEAR = (IOM4_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM4_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM4_CQPAUSEEN __AT (0x500082A8);



// ----------------------------  Field Item: IOM4_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM4_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500082A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_CQPAUSEEN >> 0) & 0xFFFF), ((IOM4_CQPAUSEEN = (IOM4_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM4_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM4_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM4_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM4_CQPAUSEEN = (IOM4_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM4_CQCURIDX __AT (0x500082AC);



// ---------------------------  Field Item: IOM4_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM4_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500082AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CQCURIDX >> 0) & 0xFF), ((IOM4_CQCURIDX = (IOM4_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM4_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM4_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM4_CQCURIDX = (IOM4_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM4_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM4_CQENDIDX __AT (0x500082B0);



// ---------------------------  Field Item: IOM4_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM4_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500082B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_CQENDIDX >> 0) & 0xFF), ((IOM4_CQENDIDX = (IOM4_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM4_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM4_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM4_CQENDIDX = (IOM4_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM4_STATUS __AT (0x500082B4);



// -----------------------------  Field Item: IOM4_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM4_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500082B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM4_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500082B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM4_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM4_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500082B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM4_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500082B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM4_STATUS >> 0) & 0xFFFFFFFF), ((IOM4_STATUS = (IOM4_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM4_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM4_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM4_MSPICFG __AT (0x50008300);



// ----------------------------  Field Item: IOM4_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50008300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50008300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MSPICFG >> 27) & 0x7), ((IOM4_MSPICFG = (IOM4_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50008300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MSPICFG >> 24) & 0x7), ((IOM4_MSPICFG = (IOM4_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50008300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50008300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50008300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50008300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50008300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50008300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50008300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM4_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM4_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM4_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM4_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM4_MSPICFG = (IOM4_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM4_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM4_MI2CCFG __AT (0x50008400);



// -----------------------------  Field Item: IOM4_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50008400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50008400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MI2CCFG >> 16) & 0xFF), ((IOM4_MI2CCFG = (IOM4_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50008400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MI2CCFG >> 12) & 0xF), ((IOM4_MI2CCFG = (IOM4_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50008400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MI2CCFG >> 8) & 0xF), ((IOM4_MI2CCFG = (IOM4_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50008400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50008400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM4_MI2CCFG >> 4) & 0x3), ((IOM4_MI2CCFG = (IOM4_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM4_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM4_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM4_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM4_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM4_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM4_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM4_MI2CCFG = (IOM4_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM4_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM4_DEVCFG __AT (0x50008404);



// -----------------------------  Field Item: IOM4_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM4_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50008404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM4_DEVCFG >> 0) & 0x3FF), ((IOM4_DEVCFG = (IOM4_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM4_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM4_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM4_DEVCFG = (IOM4_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM4_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM4_IOMDBG __AT (0x50008410);



// -----------------------------  Field Item: IOM4_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM4_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50008410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM4_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM4_IOMDBG = (IOM4_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM4_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM4_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50008410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM4_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM4_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50008410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM4_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM4_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50008410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM4_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM4_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM4_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50008410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM4_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM4_IOMDBG = (IOM4_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM4_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM4_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM4_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM4_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM4  -------------------------------------
// SVD Line: 34902

//  <view> IOM4
//    <name> IOM4 </name>
//    <item> SFDITEM_REG__IOM4_FIFO </item>
//    <item> SFDITEM_REG__IOM4_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM4_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM4_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM4_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM4_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM4_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM4_INTEN </item>
//    <item> SFDITEM_REG__IOM4_INTSTAT </item>
//    <item> SFDITEM_REG__IOM4_INTCLR </item>
//    <item> SFDITEM_REG__IOM4_INTSET </item>
//    <item> SFDITEM_REG__IOM4_CLKCFG </item>
//    <item> SFDITEM_REG__IOM4_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM4_CMD </item>
//    <item> SFDITEM_REG__IOM4_CMDRPT </item>
//    <item> SFDITEM_REG__IOM4_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM4_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM4_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM4_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM4_DMACFG </item>
//    <item> SFDITEM_REG__IOM4_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM4_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM4_DMASTAT </item>
//    <item> SFDITEM_REG__IOM4_CQCFG </item>
//    <item> SFDITEM_REG__IOM4_CQADDR </item>
//    <item> SFDITEM_REG__IOM4_CQSTAT </item>
//    <item> SFDITEM_REG__IOM4_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM4_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM4_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM4_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM4_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM4_STATUS </item>
//    <item> SFDITEM_REG__IOM4_MSPICFG </item>
//    <item> SFDITEM_REG__IOM4_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM4_DEVCFG </item>
//    <item> SFDITEM_REG__IOM4_IOMDBG </item>
//  </view>
//  


// ----------------------------  Register Item Address: IOM5_FIFO  --------------------------------
// SVD Line: 32893

unsigned int IOM5_FIFO __AT (0x50009000);



// -------------------------------  Field Item: IOM5_FIFO_FIFO  -----------------------------------
// SVD Line: 32903

//  <item> SFDITEM_FIELD__IOM5_FIFO_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009000) FIFO direct access. Only locations 0 - 3F will return valid information. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_FIFO >> 0) & 0xFFFFFFFF), ((IOM5_FIFO = (IOM5_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: IOM5_FIFO  -----------------------------------
// SVD Line: 32893

//  <rtree> SFDITEM_REG__IOM5_FIFO
//    <name> FIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009000) FIFO Access Port </i>
//    <loc> ( (unsigned int)((IOM5_FIFO >> 0) & 0xFFFFFFFF), ((IOM5_FIFO = (IOM5_FIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFO_FIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_FIFOPTR  ------------------------------
// SVD Line: 32912

unsigned int IOM5_FIFOPTR __AT (0x50009100);



// ----------------------------  Field Item: IOM5_FIFOPTR_FIFO1REM  -------------------------------
// SVD Line: 32922

//  <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO1REM
//    <name> FIFO1REM </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50009100) The number of remaining data bytes slots currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOPTR >> 24) & 0xFF), ((IOM5_FIFOPTR = (IOM5_FIFOPTR & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_FIFOPTR_FIFO1SIZ  -------------------------------
// SVD Line: 32929

//  <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO1SIZ
//    <name> FIFO1SIZ </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50009100) The number of valid data bytes currently in FIFO 1 (written by interface, read by MCU) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOPTR >> 16) & 0xFF), ((IOM5_FIFOPTR = (IOM5_FIFOPTR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_FIFOPTR_FIFO0REM  -------------------------------
// SVD Line: 32936

//  <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO0REM
//    <name> FIFO0REM </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50009100) The number of remaining data bytes slots currently in FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOPTR >> 8) & 0xFF), ((IOM5_FIFOPTR = (IOM5_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_FIFOPTR_FIFO0SIZ  -------------------------------
// SVD Line: 32943

//  <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO0SIZ
//    <name> FIFO0SIZ </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50009100) The number of valid data bytes currently in the FIFO 0 (written by MCU, read by interface) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOPTR >> 0) & 0xFF), ((IOM5_FIFOPTR = (IOM5_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOPTR  ----------------------------------
// SVD Line: 32912

//  <rtree> SFDITEM_REG__IOM5_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009100) FIFO size and remaining slots open values </i>
//    <loc> ( (unsigned int)((IOM5_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOM5_FIFOPTR = (IOM5_FIFOPTR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO1REM </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO1SIZ </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO0REM </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOPTR_FIFO0SIZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_FIFOTHR  ------------------------------
// SVD Line: 32952

unsigned int IOM5_FIFOTHR __AT (0x50009104);



// ----------------------------  Field Item: IOM5_FIFOTHR_FIFOWTHR  -------------------------------
// SVD Line: 32962

//  <item> SFDITEM_FIELD__IOM5_FIFOTHR_FIFOWTHR
//    <name> FIFOWTHR </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50009104) FIFO write threshold in bytes. A value of 0 will disable the write FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the write fifo contains FIFOWTHR free bytes, as indicated by the FIFO0REM field. This is intended to signal when a transfer of FIFOWTHR bytes can be done from the host to the IOM write fifo to support large IOM write operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOTHR >> 8) & 0x3F), ((IOM5_FIFOTHR = (IOM5_FIFOTHR & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_FIFOTHR_FIFORTHR  -------------------------------
// SVD Line: 32969

//  <item> SFDITEM_FIELD__IOM5_FIFOTHR_FIFORTHR
//    <name> FIFORTHR </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50009104) FIFO read threshold in bytes. A value of 0 will disable the read FIFO level from activating the threshold interrupt. If this field is non-zero, it will trigger a threshold interrupt when the read fifo contains FIFORTHR valid bytes of data, as indicated by the FIFO1SIZ field. This is intended to signal when a data transfer of FIFORTHR bytes can be done from the IOM module to the host via the read fifo to support large IOM read operations. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOTHR >> 0) & 0x3F), ((IOM5_FIFOTHR = (IOM5_FIFOTHR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOTHR  ----------------------------------
// SVD Line: 32952

//  <rtree> SFDITEM_REG__IOM5_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009104) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOM5_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOM5_FIFOTHR = (IOM5_FIFOTHR & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOTHR_FIFOWTHR </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOTHR_FIFORTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_FIFOPOP  ------------------------------
// SVD Line: 32978

unsigned int IOM5_FIFOPOP __AT (0x50009108);



// ----------------------------  Field Item: IOM5_FIFOPOP_FIFODOUT  -------------------------------
// SVD Line: 32988

//  <item> SFDITEM_FIELD__IOM5_FIFOPOP_FIFODOUT
//    <name> FIFODOUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009108) This register will return the read data indicated by the current read pointer on reads. If the POPWR control bit in the FIFOCTRL register is reset (0), the fifo read pointer will be advanced by one word as a result of the read. If the POPWR bit is set (1), the fifo read pointer will only be advanced after a write operation to this register. The write data is ignored for this register. If less than a even word multiple is available, and the command is completed, the module will return the word containing these bytes and undetermined data in the unused fields of the word. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM5_FIFOPOP = (IOM5_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOPOP  ----------------------------------
// SVD Line: 32978

//  <rtree> SFDITEM_REG__IOM5_FIFOPOP
//    <name> FIFOPOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009108) FIFO POP register </i>
//    <loc> ( (unsigned int)((IOM5_FIFOPOP >> 0) & 0xFFFFFFFF), ((IOM5_FIFOPOP = (IOM5_FIFOPOP & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOPOP_FIFODOUT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_FIFOPUSH  ------------------------------
// SVD Line: 32999

unsigned int IOM5_FIFOPUSH __AT (0x5000910C);



// ----------------------------  Field Item: IOM5_FIFOPUSH_FIFODIN  -------------------------------
// SVD Line: 33009

//  <item> SFDITEM_FIELD__IOM5_FIFOPUSH_FIFODIN
//    <name> FIFODIN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000910C) This register is used to write the FIFORAM in FIFO mode and will cause a push event to occur to the next open slot within the FIFORAM. Writing to this register will cause the write point to increment by 1 word(4 bytes). </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM5_FIFOPUSH = (IOM5_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOPUSH  ---------------------------------
// SVD Line: 32999

//  <rtree> SFDITEM_REG__IOM5_FIFOPUSH
//    <name> FIFOPUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000910C) FIFO PUSH register </i>
//    <loc> ( (unsigned int)((IOM5_FIFOPUSH >> 0) & 0xFFFFFFFF), ((IOM5_FIFOPUSH = (IOM5_FIFOPUSH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOPUSH_FIFODIN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_FIFOCTRL  ------------------------------
// SVD Line: 33018

unsigned int IOM5_FIFOCTRL __AT (0x50009110);



// ---------------------------  Field Item: IOM5_FIFOCTRL_FIFORSTN  -------------------------------
// SVD Line: 33028

//  <item> SFDITEM_FIELD__IOM5_FIFOCTRL_FIFORSTN
//    <name> FIFORSTN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009110) Active low manual reset of the fifo. Write to 0 to reset fifo, and then write to 1 to remove the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_FIFOCTRL ) </loc>
//      <o.1..1> FIFORSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_FIFOCTRL_POPWR  --------------------------------
// SVD Line: 33035

//  <item> SFDITEM_FIELD__IOM5_FIFOCTRL_POPWR
//    <name> POPWR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009110) Selects the mode in which 'pop' events are done for the fifo read operations. A value of '1' will prevent a pop event on a read operation, and will require a write to the FIFOPOP register to create a pop event. A value of '0' in this register will allow a pop event to occur on the read of the FIFOPOP register, and may cause inadvertant fifo pops when used in a debugging mode. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_FIFOCTRL ) </loc>
//      <o.0..0> POPWR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOCTRL  ---------------------------------
// SVD Line: 33018

//  <rtree> SFDITEM_REG__IOM5_FIFOCTRL
//    <name> FIFOCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009110) FIFO Control Register </i>
//    <loc> ( (unsigned int)((IOM5_FIFOCTRL >> 0) & 0xFFFFFFFF), ((IOM5_FIFOCTRL = (IOM5_FIFOCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOCTRL_FIFORSTN </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOCTRL_POPWR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_FIFOLOC  ------------------------------
// SVD Line: 33045

unsigned int IOM5_FIFOLOC __AT (0x50009114);



// ----------------------------  Field Item: IOM5_FIFOLOC_FIFORPTR  -------------------------------
// SVD Line: 33055

//  <item> SFDITEM_FIELD__IOM5_FIFOLOC_FIFORPTR
//    <name> FIFORPTR </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50009114) Current FIFO read pointer. Used to index into the incoming FIFO (FIFO1), which is used to store read data returned from external devices during a read operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOLOC >> 8) & 0xF), ((IOM5_FIFOLOC = (IOM5_FIFOLOC & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_FIFOLOC_FIFOWPTR  -------------------------------
// SVD Line: 33062

//  <item> SFDITEM_FIELD__IOM5_FIFOLOC_FIFOWPTR
//    <name> FIFOWPTR </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50009114) Current FIFO write pointer. Value is the index into the outgoing FIFO (FIFO0), which is used during write operations to external devices. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_FIFOLOC >> 0) & 0xF), ((IOM5_FIFOLOC = (IOM5_FIFOLOC & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_FIFOLOC  ----------------------------------
// SVD Line: 33045

//  <rtree> SFDITEM_REG__IOM5_FIFOLOC
//    <name> FIFOLOC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009114) FIFO Pointers </i>
//    <loc> ( (unsigned int)((IOM5_FIFOLOC >> 0) & 0xFFFFFFFF), ((IOM5_FIFOLOC = (IOM5_FIFOLOC & ~(0xF0FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_FIFOLOC_FIFORPTR </item>
//    <item> SFDITEM_FIELD__IOM5_FIFOLOC_FIFOWPTR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM5_INTEN  -------------------------------
// SVD Line: 33071

unsigned int IOM5_INTEN __AT (0x50009200);



// ------------------------------  Field Item: IOM5_INTEN_CQERR  ----------------------------------
// SVD Line: 33081

//  <item> SFDITEM_FIELD__IOM5_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50009200) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTEN_CQUPD  ----------------------------------
// SVD Line: 33088

//  <item> SFDITEM_FIELD__IOM5_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50009200) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTEN_CQPAUSED  --------------------------------
// SVD Line: 33095

//  <item> SFDITEM_FIELD__IOM5_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50009200) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_DERR  ----------------------------------
// SVD Line: 33102

//  <item> SFDITEM_FIELD__IOM5_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50009200) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_DCMP  ----------------------------------
// SVD Line: 33109

//  <item> SFDITEM_FIELD__IOM5_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50009200) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_ARB  -----------------------------------
// SVD Line: 33116

//  <item> SFDITEM_FIELD__IOM5_INTEN_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50009200) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_STOP  ----------------------------------
// SVD Line: 33123

//  <item> SFDITEM_FIELD__IOM5_INTEN_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50009200) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTEN_START  ----------------------------------
// SVD Line: 33130

//  <item> SFDITEM_FIELD__IOM5_INTEN_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50009200) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_ICMD  ----------------------------------
// SVD Line: 33137

//  <item> SFDITEM_FIELD__IOM5_INTEN_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50009200) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_IACC  ----------------------------------
// SVD Line: 33144

//  <item> SFDITEM_FIELD__IOM5_INTEN_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50009200) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_NAK  -----------------------------------
// SVD Line: 33151

//  <item> SFDITEM_FIELD__IOM5_INTEN_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50009200) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTEN_FOVFL  ----------------------------------
// SVD Line: 33158

//  <item> SFDITEM_FIELD__IOM5_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50009200) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTEN_FUNDFL  ---------------------------------
// SVD Line: 33165

//  <item> SFDITEM_FIELD__IOM5_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009200) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTEN_THR  -----------------------------------
// SVD Line: 33172

//  <item> SFDITEM_FIELD__IOM5_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009200) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTEN_CMDCMP  ---------------------------------
// SVD Line: 33180

//  <item> SFDITEM_FIELD__IOM5_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009200) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_INTEN  -----------------------------------
// SVD Line: 33071

//  <rtree> SFDITEM_REG__IOM5_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOM5_INTEN >> 0) & 0xFFFFFFFF), ((IOM5_INTEN = (IOM5_INTEN & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_ARB </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_STOP </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_START </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_ICMD </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_IACC </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_NAK </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_THR </item>
//    <item> SFDITEM_FIELD__IOM5_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_INTSTAT  ------------------------------
// SVD Line: 33189

unsigned int IOM5_INTSTAT __AT (0x50009204);



// -----------------------------  Field Item: IOM5_INTSTAT_CQERR  ---------------------------------
// SVD Line: 33199

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50009204) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 33206

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50009204) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 33213

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50009204) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_DERR  ---------------------------------
// SVD Line: 33220

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50009204) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_DCMP  ---------------------------------
// SVD Line: 33227

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50009204) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_ARB  ----------------------------------
// SVD Line: 33234

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50009204) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_STOP  ---------------------------------
// SVD Line: 33241

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50009204) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSTAT_START  ---------------------------------
// SVD Line: 33248

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50009204) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_ICMD  ---------------------------------
// SVD Line: 33255

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50009204) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_IACC  ---------------------------------
// SVD Line: 33262

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50009204) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_NAK  ----------------------------------
// SVD Line: 33269

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50009204) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSTAT_FOVFL  ---------------------------------
// SVD Line: 33276

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50009204) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSTAT_FUNDFL  --------------------------------
// SVD Line: 33283

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009204) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSTAT_THR  ----------------------------------
// SVD Line: 33290

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009204) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 33298

//  <item> SFDITEM_FIELD__IOM5_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009204) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_INTSTAT  ----------------------------------
// SVD Line: 33189

//  <rtree> SFDITEM_REG__IOM5_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOM5_INTSTAT >> 0) & 0xFFFFFFFF), ((IOM5_INTSTAT = (IOM5_INTSTAT & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_ARB </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_STOP </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_START </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_ICMD </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_IACC </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_NAK </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_THR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_INTCLR  -------------------------------
// SVD Line: 33307

unsigned int IOM5_INTCLR __AT (0x50009208);



// ------------------------------  Field Item: IOM5_INTCLR_CQERR  ---------------------------------
// SVD Line: 33317

//  <item> SFDITEM_FIELD__IOM5_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x50009208) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_CQUPD  ---------------------------------
// SVD Line: 33324

//  <item> SFDITEM_FIELD__IOM5_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x50009208) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 33331

//  <item> SFDITEM_FIELD__IOM5_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50009208) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_DERR  ----------------------------------
// SVD Line: 33338

//  <item> SFDITEM_FIELD__IOM5_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50009208) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_DCMP  ----------------------------------
// SVD Line: 33345

//  <item> SFDITEM_FIELD__IOM5_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50009208) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTCLR_ARB  ----------------------------------
// SVD Line: 33352

//  <item> SFDITEM_FIELD__IOM5_INTCLR_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50009208) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_STOP  ----------------------------------
// SVD Line: 33359

//  <item> SFDITEM_FIELD__IOM5_INTCLR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50009208) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_START  ---------------------------------
// SVD Line: 33366

//  <item> SFDITEM_FIELD__IOM5_INTCLR_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50009208) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_ICMD  ----------------------------------
// SVD Line: 33373

//  <item> SFDITEM_FIELD__IOM5_INTCLR_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50009208) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_IACC  ----------------------------------
// SVD Line: 33380

//  <item> SFDITEM_FIELD__IOM5_INTCLR_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50009208) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTCLR_NAK  ----------------------------------
// SVD Line: 33387

//  <item> SFDITEM_FIELD__IOM5_INTCLR_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50009208) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTCLR_FOVFL  ---------------------------------
// SVD Line: 33394

//  <item> SFDITEM_FIELD__IOM5_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50009208) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTCLR_FUNDFL  ---------------------------------
// SVD Line: 33401

//  <item> SFDITEM_FIELD__IOM5_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009208) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTCLR_THR  ----------------------------------
// SVD Line: 33408

//  <item> SFDITEM_FIELD__IOM5_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009208) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 33416

//  <item> SFDITEM_FIELD__IOM5_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009208) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_INTCLR  ----------------------------------
// SVD Line: 33307

//  <rtree> SFDITEM_REG__IOM5_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOM5_INTCLR >> 0) & 0xFFFFFFFF), ((IOM5_INTCLR = (IOM5_INTCLR & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_ARB </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_STOP </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_START </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_ICMD </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_IACC </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_NAK </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_THR </item>
//    <item> SFDITEM_FIELD__IOM5_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_INTSET  -------------------------------
// SVD Line: 33425

unsigned int IOM5_INTSET __AT (0x5000920C);



// ------------------------------  Field Item: IOM5_INTSET_CQERR  ---------------------------------
// SVD Line: 33435

//  <item> SFDITEM_FIELD__IOM5_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x5000920C) Error during command queue operations </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.14..14> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_CQUPD  ---------------------------------
// SVD Line: 33442

//  <item> SFDITEM_FIELD__IOM5_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x5000920C) CQ write operation performed a register write with the register address bit 0 set to 1. The low address bits in the CQ address fields are unused and bit 0 can be used to trigger an interrupt to indicate when this register write is performed by the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.13..13> CQUPD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_INTSET_CQPAUSED  --------------------------------
// SVD Line: 33449

//  <item> SFDITEM_FIELD__IOM5_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5000920C) Command queue is paused due to an active event enabled in the PAUSEEN register. The interrupt is posted when the event is enabled within the PAUSEEN register, the mask is active in the CQIRQMASK field and the event occurs. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.12..12> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_DERR  ----------------------------------
// SVD Line: 33456

//  <item> SFDITEM_FIELD__IOM5_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5000920C) DMA Error encountered during the processing of the DMA command. The DMA error could occur when the memory access specified in the DMA operation is not available or incorrectly specified. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.11..11> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_DCMP  ----------------------------------
// SVD Line: 33463

//  <item> SFDITEM_FIELD__IOM5_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5000920C) DMA Complete. Processing of the DMA operation has completed and the DMA submodule is returned into the idle state </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.10..10> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTSET_ARB  ----------------------------------
// SVD Line: 33470

//  <item> SFDITEM_FIELD__IOM5_INTSET_ARB
//    <name> ARB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000920C) Arbitration loss interrupt. Asserted when arbitration is enabled and has been lost to another master on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.9..9> ARB
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_STOP  ----------------------------------
// SVD Line: 33477

//  <item> SFDITEM_FIELD__IOM5_INTSET_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000920C) STOP command interrupt. Asserted when another master on the bus has signaled a STOP command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.8..8> STOP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_START  ---------------------------------
// SVD Line: 33484

//  <item> SFDITEM_FIELD__IOM5_INTSET_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000920C) START command interrupt. Asserted when another master on the bus has signaled a START command. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.7..7> START
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_ICMD  ----------------------------------
// SVD Line: 33491

//  <item> SFDITEM_FIELD__IOM5_INTSET_ICMD
//    <name> ICMD </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000920C) illegal command interrupt. Asserted when a command is written when an active command is in progress. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.6..6> ICMD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_IACC  ----------------------------------
// SVD Line: 33498

//  <item> SFDITEM_FIELD__IOM5_INTSET_IACC
//    <name> IACC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000920C) illegal FIFO access interrupt. Asserted when there is a overflow or underflow event </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.5..5> IACC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTSET_NAK  ----------------------------------
// SVD Line: 33505

//  <item> SFDITEM_FIELD__IOM5_INTSET_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000920C) I2C NAK interrupt. Asserted when an unexpected NAK has been received on the I2C bus. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.4..4> NAK
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_INTSET_FOVFL  ---------------------------------
// SVD Line: 33512

//  <item> SFDITEM_FIELD__IOM5_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000920C) Write FIFO Overflow interrupt. This occurs when software tries to write to a full fifo. The current operation does not stop. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.3..3> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSET_FUNDFL  ---------------------------------
// SVD Line: 33519

//  <item> SFDITEM_FIELD__IOM5_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000920C) Read FIFO Underflow interrupt. This occurs when software tries to pop from an empty fifo. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: IOM5_INTSET_THR  ----------------------------------
// SVD Line: 33526

//  <item> SFDITEM_FIELD__IOM5_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000920C) FIFO Threshold interrupt. For write operations, asserted when the number of free bytes in the write FIFO equals or exceeds the WTHR field. For read operations, asserted when the number of valid bytes in the read FIFO equals of exceeds the value set in the RTHR field. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.1..1> THR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_INTSET_CMDCMP  ---------------------------------
// SVD Line: 33534

//  <item> SFDITEM_FIELD__IOM5_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000920C) Command Complete interrupt. Asserted when the current operation has completed. For repeated commands, this will only be asserted when the final repeated command is completed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_INTSET  ----------------------------------
// SVD Line: 33425

//  <rtree> SFDITEM_REG__IOM5_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000920C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOM5_INTSET >> 0) & 0xFFFFFFFF), ((IOM5_INTSET = (IOM5_INTSET & ~(0x7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_ARB </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_STOP </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_START </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_ICMD </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_IACC </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_NAK </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_THR </item>
//    <item> SFDITEM_FIELD__IOM5_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CLKCFG  -------------------------------
// SVD Line: 33543

unsigned int IOM5_CLKCFG __AT (0x50009210);



// -----------------------------  Field Item: IOM5_CLKCFG_TOTPER  ---------------------------------
// SVD Line: 33553

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_TOTPER
//    <name> TOTPER </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50009210) Clock total clock count minus 1. This provides the total period of the divided clock -1 when the DIVEN is active. The source clock is selected by FSEL. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CLKCFG >> 24) & 0xFF), ((IOM5_CLKCFG = (IOM5_CLKCFG & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM5_CLKCFG_LOWPER  ---------------------------------
// SVD Line: 33561

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_LOWPER
//    <name> LOWPER </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50009210) Clock low clock count minus 1. This provides the number of clocks the divided clock will be low when the DIVEN = 1. Only applicable when DIVEN = 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CLKCFG >> 16) & 0xFF), ((IOM5_CLKCFG = (IOM5_CLKCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: IOM5_CLKCFG_DIVEN  ---------------------------------
// SVD Line: 33569

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_DIVEN
//    <name> DIVEN </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50009210) \nEnable clock division by TOTPER and LOWPER\n0 : DIS = Disable TOTPER division. value.\n1 : EN = Enable TOTPER division. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CLKCFG ) </loc>
//      <o.12..12> DIVEN
//        <0=> 0: DIS = Disable TOTPER division. value.
//        <1=> 1: EN = Enable TOTPER division. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_CLKCFG_DIV3  ----------------------------------
// SVD Line: 33587

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_DIV3
//    <name> DIV3 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50009210) \nEnable divide by 3 of the source IOCLK. Division by 3 is done before the DIVEN programmable divider, and if enabled will provide the divided by 3 clock as the source to the programmable divider.\n0 : DIS = Select divide by 1. value.\n1 : EN = Select divide by 3. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CLKCFG ) </loc>
//      <o.11..11> DIV3
//        <0=> 0: DIS = Select divide by 1. value.
//        <1=> 1: EN = Select divide by 3. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_CLKCFG_FSEL  ----------------------------------
// SVD Line: 33606

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_FSEL
//    <name> FSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x50009210) \nSelect the input clock frequency.\n0 : MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.\n1 : HFRC = Selects the HFRC as the input clock. value.\n2 : HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.\n3 : HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.\n4 : HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.\n5 : HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.\n6 : HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.\n7 : HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CLKCFG ) </loc>
//      <o.10..8> FSEL
//        <0=> 0: MIN_PWR = Selects the minimum power clock. This setting should be used whenever the IOM is not active. value.
//        <1=> 1: HFRC = Selects the HFRC as the input clock. value.
//        <2=> 2: HFRC_DIV2 = Selects the HFRC / 2 as the input clock. value.
//        <3=> 3: HFRC_DIV4 = Selects the HFRC / 4 as the input clock. value.
//        <4=> 4: HFRC_DIV8 = Selects the HFRC / 8 as the input clock. value.
//        <5=> 5: HFRC_DIV16 = Selects the HFRC / 16 as the input clock. value.
//        <6=> 6: HFRC_DIV32 = Selects the HFRC / 32 as the input clock. value.
//        <7=> 7: HFRC_DIV64 = Selects the HFRC / 64 as the input clock. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_CLKCFG_IOCLKEN  --------------------------------
// SVD Line: 33654

//  <item> SFDITEM_FIELD__IOM5_CLKCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009210) Enable for the interface clock. Must be enabled prior to executing any IO operations. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CLKCFG ) </loc>
//      <o.0..0> IOCLKEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_CLKCFG  ----------------------------------
// SVD Line: 33543

//  <rtree> SFDITEM_REG__IOM5_CLKCFG
//    <name> CLKCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009210) I/O Clock Configuration </i>
//    <loc> ( (unsigned int)((IOM5_CLKCFG >> 0) & 0xFFFFFFFF), ((IOM5_CLKCFG = (IOM5_CLKCFG & ~(0xFFFF1F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF1F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_TOTPER </item>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_LOWPER </item>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_DIVEN </item>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_DIV3 </item>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_FSEL </item>
//    <item> SFDITEM_FIELD__IOM5_CLKCFG_IOCLKEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM5_SUBMODCTRL  -----------------------------
// SVD Line: 33663

unsigned int IOM5_SUBMODCTRL __AT (0x50009214);



// --------------------------  Field Item: IOM5_SUBMODCTRL_SMOD1TYPE  -----------------------------
// SVD Line: 33673

//  <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD1TYPE
//    <name> SMOD1TYPE </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50009214) \nSubmodule 0 module type. This is the I2C Master interface\n0 : MSPI = SPI Master submodule value.\n1 : I2C_MASTER = MI2C submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_SUBMODCTRL ) </loc>
//      <o.7..5> SMOD1TYPE
//        <0=> 0: MSPI = SPI Master submodule value.
//        <1=> 1: I2C_MASTER = MI2C submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM5_SUBMODCTRL_SMOD1EN  ------------------------------
// SVD Line: 33706

//  <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD1EN
//    <name> SMOD1EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50009214) Submodule 1 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_SUBMODCTRL ) </loc>
//      <o.4..4> SMOD1EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM5_SUBMODCTRL_SMOD0TYPE  -----------------------------
// SVD Line: 33713

//  <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD0TYPE
//    <name> SMOD0TYPE </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x50009214) \nSubmodule 0 module type. This is the SPI Master interface.\n0 : SPI_MASTER = MSPI submodule value.\n1 : I2C_MASTER = I2C Master submodule value.\n2 : SSPI = SPI Slave submodule value.\n3 : SI2C = I2C Slave submodule value.\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : NA = NOT INSTALLED value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_SUBMODCTRL ) </loc>
//      <o.3..1> SMOD0TYPE
//        <0=> 0: SPI_MASTER = MSPI submodule value.
//        <1=> 1: I2C_MASTER = I2C Master submodule value.
//        <2=> 2: SSPI = SPI Slave submodule value.
//        <3=> 3: SI2C = I2C Slave submodule value.
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: NA = NOT INSTALLED value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: IOM5_SUBMODCTRL_SMOD0EN  ------------------------------
// SVD Line: 33746

//  <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD0EN
//    <name> SMOD0EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009214) Submodule 0 enable (1) or disable (0) </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_SUBMODCTRL ) </loc>
//      <o.0..0> SMOD0EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM5_SUBMODCTRL  --------------------------------
// SVD Line: 33663

//  <rtree> SFDITEM_REG__IOM5_SUBMODCTRL
//    <name> SUBMODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009214) Submodule control </i>
//    <loc> ( (unsigned int)((IOM5_SUBMODCTRL >> 0) & 0xFFFFFFFF), ((IOM5_SUBMODCTRL = (IOM5_SUBMODCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD1TYPE </item>
//    <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD1EN </item>
//    <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD0TYPE </item>
//    <item> SFDITEM_FIELD__IOM5_SUBMODCTRL_SMOD0EN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: IOM5_CMD  --------------------------------
// SVD Line: 33755

unsigned int IOM5_CMD __AT (0x50009218);



// ------------------------------  Field Item: IOM5_CMD_OFFSETLO  ---------------------------------
// SVD Line: 33765

//  <item> SFDITEM_FIELD__IOM5_CMD_OFFSETLO
//    <name> OFFSETLO </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50009218) This register holds the low order byte of offset to be used in the transaction. The number of offset bytes to use is set with bits 1:0 of the command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CMD >> 24) & 0xFF), ((IOM5_CMD = (IOM5_CMD & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM5_CMD_CMDSEL  ----------------------------------
// SVD Line: 33772

//  <item> SFDITEM_FIELD__IOM5_CMD_CMDSEL
//    <name> CMDSEL </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x50009218) Command Specific selection information. Not used in Master I2C. Used as CEn select for Master SPI transactions </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CMD >> 20) & 0x3), ((IOM5_CMD = (IOM5_CMD & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: IOM5_CMD_TSIZE  -----------------------------------
// SVD Line: 33779

//  <item> SFDITEM_FIELD__IOM5_CMD_TSIZE
//    <name> TSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50009218) Defines the transaction size in bytes. The offset transfer is not included in this size. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_CMD >> 8) & 0xFFF), ((IOM5_CMD = (IOM5_CMD & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM5_CMD_CONT  -----------------------------------
// SVD Line: 33786

//  <item> SFDITEM_FIELD__IOM5_CMD_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50009218) Contine to hold the bus after the current transaction if set to a 1 with a new command issued. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CMD ) </loc>
//      <o.7..7> CONT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_CMD_OFFSETCNT  ---------------------------------
// SVD Line: 33793

//  <item> SFDITEM_FIELD__IOM5_CMD_OFFSETCNT
//    <name> OFFSETCNT </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x50009218) Number of offset bytes to use for the command - 0, 1, 2, 3 are valid selections. The second (byte 1) and third byte (byte 2) are read from the OFFSETHI register, and the low order byte is pulled from this register in the OFFSETLO field. Offset bytes are transmitted highest byte first. EG if offsetcnt == 3, OFFSETHI[15:8] will be transmitted first, then OFFSETHI[7:0] then OFFSETLO. If offsetcnt == 2, OFFSETHI[7:0] will be transmitted, then OFFSETLO. If offsetcnt == 1, only OFFSETLO will be transmitted. Offset bytes are always transmitted MSB first, regardless of the value of the LSB control bit within the module configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CMD >> 5) & 0x3), ((IOM5_CMD = (IOM5_CMD & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: IOM5_CMD_CMD  ------------------------------------
// SVD Line: 33804

//  <item> SFDITEM_FIELD__IOM5_CMD_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50009218) \nCommand for submodule.\n0 : Reserved - do not use\n1 : WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.\n2 : READ = Read command using count of offset bytes specified in the OFFSETCNT field value.\n3 : TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.\n4 : TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CMD ) </loc>
//      <o.4..0> CMD
//        <0=> 0: 
//        <1=> 1: WRITE = Write command using count of offset bytes specified in the OFFSETCNT field value.
//        <2=> 2: READ = Read command using count of offset bytes specified in the OFFSETCNT field value.
//        <3=> 3: TMW = SPI only. Test mode to do constant write operations. Useful for debug and power measurements. Will continually send data in OFFSET field value.
//        <4=> 4: TMR = SPI Only. Test mode to do constant read operations. Useful for debug and power measurements. Will continually read data from external input value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: IOM5_CMD  ------------------------------------
// SVD Line: 33755

//  <rtree> SFDITEM_REG__IOM5_CMD
//    <name> CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009218) Command and offset Register </i>
//    <loc> ( (unsigned int)((IOM5_CMD >> 0) & 0xFFFFFFFF), ((IOM5_CMD = (IOM5_CMD & ~(0xFF3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CMD_OFFSETLO </item>
//    <item> SFDITEM_FIELD__IOM5_CMD_CMDSEL </item>
//    <item> SFDITEM_FIELD__IOM5_CMD_TSIZE </item>
//    <item> SFDITEM_FIELD__IOM5_CMD_CONT </item>
//    <item> SFDITEM_FIELD__IOM5_CMD_OFFSETCNT </item>
//    <item> SFDITEM_FIELD__IOM5_CMD_CMD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CMDRPT  -------------------------------
// SVD Line: 33834

unsigned int IOM5_CMDRPT __AT (0x5000921C);



// -----------------------------  Field Item: IOM5_CMDRPT_CMDRPT  ---------------------------------
// SVD Line: 33844

//  <item> SFDITEM_FIELD__IOM5_CMDRPT_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000921C) Count of number of times to repeat the next command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CMDRPT >> 0) & 0x1F), ((IOM5_CMDRPT = (IOM5_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_CMDRPT  ----------------------------------
// SVD Line: 33834

//  <rtree> SFDITEM_REG__IOM5_CMDRPT
//    <name> CMDRPT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000921C) Command Repeat Register </i>
//    <loc> ( (unsigned int)((IOM5_CMDRPT >> 0) & 0xFFFFFFFF), ((IOM5_CMDRPT = (IOM5_CMDRPT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CMDRPT_CMDRPT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_OFFSETHI  ------------------------------
// SVD Line: 33853

unsigned int IOM5_OFFSETHI __AT (0x50009220);



// ---------------------------  Field Item: IOM5_OFFSETHI_OFFSETHI  -------------------------------
// SVD Line: 33863

//  <item> SFDITEM_FIELD__IOM5_OFFSETHI_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50009220) Holds the high order 2 bytes of the 3 byte addressing/offset field to use with IO commands. The number of offset bytes to use is specified in the command register </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_OFFSETHI >> 0) & 0xFFFF), ((IOM5_OFFSETHI = (IOM5_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_OFFSETHI  ---------------------------------
// SVD Line: 33853

//  <rtree> SFDITEM_REG__IOM5_OFFSETHI
//    <name> OFFSETHI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009220) High order 2 bytes of 3 byte offset for IO transaction </i>
//    <loc> ( (unsigned int)((IOM5_OFFSETHI >> 0) & 0xFFFFFFFF), ((IOM5_OFFSETHI = (IOM5_OFFSETHI & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_OFFSETHI_OFFSETHI </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CMDSTAT  ------------------------------
// SVD Line: 33872

unsigned int IOM5_CMDSTAT __AT (0x50009224);



// -----------------------------  Field Item: IOM5_CMDSTAT_CTSIZE  --------------------------------
// SVD Line: 33882

//  <item> SFDITEM_FIELD__IOM5_CMDSTAT_CTSIZE
//    <name> CTSIZE </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50009224) The current number of bytes still to be transferred with this command. This field will count down to zero. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_CMDSTAT >> 8) & 0xFFF), ((IOM5_CMDSTAT = (IOM5_CMDSTAT & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_CMDSTAT_CMDSTAT  --------------------------------
// SVD Line: 33889

//  <item> SFDITEM_FIELD__IOM5_CMDSTAT_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 7..5] RW (@ 0x50009224) \nThe current status of the command execution.\n0 : Reserved - do not use\n1 : ERR = Error encountered with command value.\n2 : ACTIVE = Actively processing command value.\n3 : Reserved - do not use\n4 : IDLE = Idle state, no active command, no error value.\n5 : Reserved - do not use\n6 : WAIT = Command in progress, but waiting on data from host value.\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CMDSTAT ) </loc>
//      <o.7..5> CMDSTAT
//        <0=> 0: 
//        <1=> 1: ERR = Error encountered with command value.
//        <2=> 2: ACTIVE = Actively processing command value.
//        <3=> 3: 
//        <4=> 4: IDLE = Idle state, no active command, no error value.
//        <5=> 5: 
//        <6=> 6: WAIT = Command in progress, but waiting on data from host value.
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_CMDSTAT_CCMD  ---------------------------------
// SVD Line: 33917

//  <item> SFDITEM_FIELD__IOM5_CMDSTAT_CCMD
//    <name> CCMD </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50009224) current command that is being executed </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CMDSTAT >> 0) & 0x1F), ((IOM5_CMDSTAT = (IOM5_CMDSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_CMDSTAT  ----------------------------------
// SVD Line: 33872

//  <rtree> SFDITEM_REG__IOM5_CMDSTAT
//    <name> CMDSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009224) Command status </i>
//    <loc> ( (unsigned int)((IOM5_CMDSTAT >> 0) & 0xFFFFFFFF), ((IOM5_CMDSTAT = (IOM5_CMDSTAT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CMDSTAT_CTSIZE </item>
//    <item> SFDITEM_FIELD__IOM5_CMDSTAT_CMDSTAT </item>
//    <item> SFDITEM_FIELD__IOM5_CMDSTAT_CCMD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_DMATRIGEN  -----------------------------
// SVD Line: 33926

unsigned int IOM5_DMATRIGEN __AT (0x50009240);



// ----------------------------  Field Item: IOM5_DMATRIGEN_DTHREN  -------------------------------
// SVD Line: 33936

//  <item> SFDITEM_FIELD__IOM5_DMATRIGEN_DTHREN
//    <name> DTHREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009240) Trigger DMA upon THR level reached. For M2P DMA operations (IOM writes), the trigger will assert when the write FIFO has (WTHR/4) number of words free in the write FIFO, and will transfer (WTHR/4) number of words or, if the number of words left to transfer is less than the WTHR value, will transfer the remaining byte count. For P2M DMA operations, the trigger will assert when the read FIFO has (RTHR/4) words available in the read FIFO, and will transfer (RTHR/4) words to SRAM. This trigger will NOT assert when the transaction completes and there are less than RTHR bytes left in the fifo, since the RTHR has not been reached. In this case, the CMDCMP trigger must also be enabled to transfer the remaining read FIFO data to SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATRIGEN ) </loc>
//      <o.1..1> DTHREN
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM5_DMATRIGEN_DCMDCMPEN  ------------------------------
// SVD Line: 33946

//  <item> SFDITEM_FIELD__IOM5_DMATRIGEN_DCMDCMPEN
//    <name> DCMDCMPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009240) Trigger DMA upon command complete. Enables the trigger of the DMA when a command is completed. When this event is triggered, the number of words transferred will be the lesser of the remaining TOTCOUNT bytes, or </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATRIGEN ) </loc>
//      <o.0..0> DCMDCMPEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOM5_DMATRIGEN  ---------------------------------
// SVD Line: 33926

//  <rtree> SFDITEM_REG__IOM5_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((IOM5_DMATRIGEN >> 0) & 0xFFFFFFFF), ((IOM5_DMATRIGEN = (IOM5_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMATRIGEN_DTHREN </item>
//    <item> SFDITEM_FIELD__IOM5_DMATRIGEN_DCMDCMPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM5_DMATRIGSTAT  ----------------------------
// SVD Line: 33955

unsigned int IOM5_DMATRIGSTAT __AT (0x50009244);



// --------------------------  Field Item: IOM5_DMATRIGSTAT_DTOTCMP  ------------------------------
// SVD Line: 33965

//  <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DTOTCMP
//    <name> DTOTCMP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009244) DMA triggered when DCMDCMP = 0, and the amount of data in the FIFO was enough to complete the DMA operation (greater than or equal to current TOTCOUNT) when the command completed. This trigger is default active when the DCMDCMP trigger is disabled and there is enough data in the FIFO to complete the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATRIGSTAT ) </loc>
//      <o.2..2> DTOTCMP
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_DMATRIGSTAT_DTHR  -------------------------------
// SVD Line: 33973

//  <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009244) Triggered DMA from THR event. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM5_DMATRIGSTAT_DCMDCMP  ------------------------------
// SVD Line: 33980

//  <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DCMDCMP
//    <name> DCMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009244) Triggered DMA from Command complete event. Bit is read only and can be cleared by disabling the DCMDCMP trigger enable or by disabling DMA. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATRIGSTAT ) </loc>
//      <o.0..0> DCMDCMP
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: IOM5_DMATRIGSTAT  --------------------------------
// SVD Line: 33955

//  <rtree> SFDITEM_REG__IOM5_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((IOM5_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((IOM5_DMATRIGSTAT = (IOM5_DMATRIGSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DTOTCMP </item>
//    <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DTHR </item>
//    <item> SFDITEM_FIELD__IOM5_DMATRIGSTAT_DCMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_DMACFG  -------------------------------
// SVD Line: 33989

unsigned int IOM5_DMACFG __AT (0x50009280);



// -----------------------------  Field Item: IOM5_DMACFG_DPWROFF  --------------------------------
// SVD Line: 33999

//  <item> SFDITEM_FIELD__IOM5_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50009280) \nPower off module after DMA is complete. If this bit is active, the module will request to power off the supply it is attached to. If there are other units still requiring power from the same domain, power down will not be performed.\n0 : DIS = Power off disabled value.\n1 : EN = Power off enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_DMACFG ) </loc>
//      <o.9..9> DPWROFF
//        <0=> 0: DIS = Power off disabled value.
//        <1=> 1: EN = Power off enabled value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 34017

//  <item> SFDITEM_FIELD__IOM5_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50009280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_DMACFG_DMADIR  ---------------------------------
// SVD Line: 34035

//  <item> SFDITEM_FIELD__IOM5_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.\n1 : M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_DMACFG ) </loc>
//      <o.1..1> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. To be set when doing IOM read operations, ie reading data from external devices. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. To be set when doing IOM write operations, ie writing data to external devices. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_DMACFG_DMAEN  ---------------------------------
// SVD Line: 34053

//  <item> SFDITEM_FIELD__IOM5_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009280) \nDMA Enable. Setting this bit to EN will start the DMA operation. This should be the last DMA related register set prior to issuing the command\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_DMACFG  ----------------------------------
// SVD Line: 33989

//  <rtree> SFDITEM_REG__IOM5_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((IOM5_DMACFG >> 0) & 0xFFFFFFFF), ((IOM5_DMACFG = (IOM5_DMACFG & ~(0x303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__IOM5_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__IOM5_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__IOM5_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM5_DMATOTCOUNT  ----------------------------
// SVD Line: 34073

unsigned int IOM5_DMATOTCOUNT __AT (0x50009288);



// --------------------------  Field Item: IOM5_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 34083

//  <item> SFDITEM_FIELD__IOM5_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x50009288) Triggered DMA from Command complete event occured. Bit is read only and can be cleared by disabling the DTHR trigger enable or by disabling DMA. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_DMATOTCOUNT >> 0) & 0xFFF), ((IOM5_DMATOTCOUNT = (IOM5_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM5_DMATOTCOUNT  --------------------------------
// SVD Line: 34073

//  <rtree> SFDITEM_REG__IOM5_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((IOM5_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((IOM5_DMATOTCOUNT = (IOM5_DMATOTCOUNT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM5_DMATARGADDR  ----------------------------
// SVD Line: 34092

unsigned int IOM5_DMATARGADDR __AT (0x5000928C);



// -------------------------  Field Item: IOM5_DMATARGADDR_TARGADDR28  ----------------------------
// SVD Line: 34102

//  <item> SFDITEM_FIELD__IOM5_DMATARGADDR_TARGADDR28
//    <name> TARGADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x5000928C) Bit 28 of the target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. Setting to '1' will select the SRAM. Setting to '0' will select the flash </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMATARGADDR ) </loc>
//      <o.28..28> TARGADDR28
//    </check>
//  </item>
//  


// --------------------------  Field Item: IOM5_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 34110

//  <item> SFDITEM_FIELD__IOM5_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5000928C) Bits [19:0] of the target byte address for source of DMA (either read or write). The address can be any byte alignment, and does not have to be word aligned. In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_DMATARGADDR >> 0) & 0xFFFFF), ((IOM5_DMATARGADDR = (IOM5_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOM5_DMATARGADDR  --------------------------------
// SVD Line: 34092

//  <rtree> SFDITEM_REG__IOM5_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000928C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((IOM5_DMATARGADDR >> 0) & 0xFFFFFFFF), ((IOM5_DMATARGADDR = (IOM5_DMATARGADDR & ~(0x100FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMATARGADDR_TARGADDR28 </item>
//    <item> SFDITEM_FIELD__IOM5_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_DMASTAT  ------------------------------
// SVD Line: 34119

unsigned int IOM5_DMASTAT __AT (0x50009290);



// -----------------------------  Field Item: IOM5_DMASTAT_DMAERR  --------------------------------
// SVD Line: 34129

//  <item> SFDITEM_FIELD__IOM5_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009290) DMA Error. This active high bit signals an error was encountered during the DMA operation. The bit can be cleared by writing to 0. Once set, this bit will remain set until cleared by software. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_DMASTAT_DMACPL  --------------------------------
// SVD Line: 34136

//  <item> SFDITEM_FIELD__IOM5_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009290) DMA Transfer Complete. This signals the end of the DMA operation. This bit can be cleared by writing to 0, and will also be cleared when a new DMA is started. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_DMASTAT_DMATIP  --------------------------------
// SVD Line: 34143

//  <item> SFDITEM_FIELD__IOM5_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009290) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. This bit is read only. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_DMASTAT  ----------------------------------
// SVD Line: 34119

//  <rtree> SFDITEM_REG__IOM5_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009290) DMA Status Register </i>
//    <loc> ( (unsigned int)((IOM5_DMASTAT >> 0) & 0xFFFFFFFF), ((IOM5_DMASTAT = (IOM5_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__IOM5_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__IOM5_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: IOM5_CQCFG  -------------------------------
// SVD Line: 34153

unsigned int IOM5_CQCFG __AT (0x50009294);



// ------------------------------  Field Item: IOM5_CQCFG_CQPRI  ----------------------------------
// SVD Line: 34163

//  <item> SFDITEM_FIELD__IOM5_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009294) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM5_CQCFG_CQEN  ----------------------------------
// SVD Line: 34181

//  <item> SFDITEM_FIELD__IOM5_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009294) \nCommand queue enable. When set, will enable the processing of the command queue and fetches of address/data pairs will proceed from the word address within the CQADDR register. Can be disabled using a CQ executed write to this bit as well.\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_CQCFG  -----------------------------------
// SVD Line: 34153

//  <rtree> SFDITEM_REG__IOM5_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009294) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((IOM5_CQCFG >> 0) & 0xFFFFFFFF), ((IOM5_CQCFG = (IOM5_CQCFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__IOM5_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CQADDR  -------------------------------
// SVD Line: 34202

unsigned int IOM5_CQADDR __AT (0x50009298);



// ----------------------------  Field Item: IOM5_CQADDR_CQADDR28  --------------------------------
// SVD Line: 34212

//  <item> SFDITEM_FIELD__IOM5_CQADDR_CQADDR28
//    <name> CQADDR28 </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x50009298) Bit 28 of target byte address for source of CQ (read only). Used to denote Flash (0) or SRAM (1) access </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CQADDR ) </loc>
//      <o.28..28> CQADDR28
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_CQADDR_CQADDR  ---------------------------------
// SVD Line: 34219

//  <item> SFDITEM_FIELD__IOM5_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x50009298) Bits 19:2 of target byte address for source of CQ (read only). The buffer must be aligned on a word boundary </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_CQADDR >> 2) & 0x3FFFF), ((IOM5_CQADDR = (IOM5_CQADDR & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_CQADDR  ----------------------------------
// SVD Line: 34202

//  <rtree> SFDITEM_REG__IOM5_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009298) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((IOM5_CQADDR >> 0) & 0xFFFFFFFF), ((IOM5_CQADDR = (IOM5_CQADDR & ~(0x100FFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x100FFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQADDR_CQADDR28 </item>
//    <item> SFDITEM_FIELD__IOM5_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CQSTAT  -------------------------------
// SVD Line: 34228

unsigned int IOM5_CQSTAT __AT (0x5000929C);



// ------------------------------  Field Item: IOM5_CQSTAT_CQERR  ---------------------------------
// SVD Line: 34238

//  <item> SFDITEM_FIELD__IOM5_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000929C) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 34245

//  <item> SFDITEM_FIELD__IOM5_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000929C) Command queue operation is currently paused. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CQSTAT ) </loc>
//      <o.1..1> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 34252

//  <item> SFDITEM_FIELD__IOM5_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000929C) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_CQSTAT  ----------------------------------
// SVD Line: 34228

//  <rtree> SFDITEM_REG__IOM5_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000929C) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((IOM5_CQSTAT >> 0) & 0xFFFFFFFF), ((IOM5_CQSTAT = (IOM5_CQSTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__IOM5_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__IOM5_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_CQFLAGS  ------------------------------
// SVD Line: 34261

unsigned int IOM5_CQFLAGS __AT (0x500092A0);



// ---------------------------  Field Item: IOM5_CQFLAGS_CQIRQMASK  -------------------------------
// SVD Line: 34271

//  <item> SFDITEM_FIELD__IOM5_CQFLAGS_CQIRQMASK
//    <name> CQIRQMASK </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x500092A0) Mask the bits used to generate the command queue interrupt. A '1' in the bit position will enable the pause event to trigger the interrupt, if the CQWT_int interrupt is enabled. Bits definitions are the same as CQPAUSE </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_CQFLAGS >> 16) & 0xFFFF), ((IOM5_CQFLAGS = (IOM5_CQFLAGS & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 34278

//  <item> SFDITEM_FIELD__IOM5_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500092A0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_CQFLAGS >> 0) & 0xFFFF), ((IOM5_CQFLAGS = (IOM5_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_CQFLAGS  ----------------------------------
// SVD Line: 34261

//  <rtree> SFDITEM_REG__IOM5_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092A0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((IOM5_CQFLAGS >> 0) & 0xFFFFFFFF), ((IOM5_CQFLAGS = (IOM5_CQFLAGS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQFLAGS_CQIRQMASK </item>
//    <item> SFDITEM_FIELD__IOM5_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOM5_CQSETCLEAR  -----------------------------
// SVD Line: 34287

unsigned int IOM5_CQSETCLEAR __AT (0x500092A4);



// ---------------------------  Field Item: IOM5_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 34297

//  <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500092A4) Clear CQFlag status bits. Will clear to 0 any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CQSETCLEAR >> 16) & 0xFF), ((IOM5_CQSETCLEAR = (IOM5_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM5_CQSETCLEAR_CQFTGL  -------------------------------
// SVD Line: 34304

//  <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFTGL
//    <name> CQFTGL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500092A4) Toggle the indicated bit. Will toggle the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CQSETCLEAR >> 8) & 0xFF), ((IOM5_CQSETCLEAR = (IOM5_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOM5_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 34311

//  <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500092A4) Set CQFlag status bits. Will set to 1 the value of any SWFLAG with a '1' in the corresponding bit position of this field </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CQSETCLEAR >> 0) & 0xFF), ((IOM5_CQSETCLEAR = (IOM5_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM5_CQSETCLEAR  --------------------------------
// SVD Line: 34287

//  <rtree> SFDITEM_REG__IOM5_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092A4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((IOM5_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((IOM5_CQSETCLEAR = (IOM5_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFTGL </item>
//    <item> SFDITEM_FIELD__IOM5_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_CQPAUSEEN  -----------------------------
// SVD Line: 34320

unsigned int IOM5_CQPAUSEEN __AT (0x500092A8);



// ----------------------------  Field Item: IOM5_CQPAUSEEN_CQPEN  --------------------------------
// SVD Line: 34330

//  <item> SFDITEM_FIELD__IOM5_CQPAUSEEN_CQPEN
//    <name> CQPEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500092A8) Enables the specified event to pause command processing when active </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_CQPAUSEEN >> 0) & 0xFFFF), ((IOM5_CQPAUSEEN = (IOM5_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOM5_CQPAUSEEN  ---------------------------------
// SVD Line: 34320

//  <rtree> SFDITEM_REG__IOM5_CQPAUSEEN
//    <name> CQPAUSEEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092A8) Command Queue Pause Enable Register </i>
//    <loc> ( (unsigned int)((IOM5_CQPAUSEEN >> 0) & 0xFFFFFFFF), ((IOM5_CQPAUSEEN = (IOM5_CQPAUSEEN & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQPAUSEEN_CQPEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_CQCURIDX  ------------------------------
// SVD Line: 34420

unsigned int IOM5_CQCURIDX __AT (0x500092AC);



// ---------------------------  Field Item: IOM5_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 34430

//  <item> SFDITEM_FIELD__IOM5_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500092AC) Holds 8 bits of data that will be compared with the CQENDIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CQCURIDX >> 0) & 0xFF), ((IOM5_CQCURIDX = (IOM5_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_CQCURIDX  ---------------------------------
// SVD Line: 34420

//  <rtree> SFDITEM_REG__IOM5_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092AC) IOM Command Queue current index value . Compared to the CQENDIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM5_CQCURIDX >> 0) & 0xFFFFFFFF), ((IOM5_CQCURIDX = (IOM5_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOM5_CQENDIDX  ------------------------------
// SVD Line: 34439

unsigned int IOM5_CQENDIDX __AT (0x500092B0);



// ---------------------------  Field Item: IOM5_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 34449

//  <item> SFDITEM_FIELD__IOM5_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500092B0) Holds 8 bits of data that will be compared with the CQCURIX register field. If the values match, the IDXEQ pause event will be activated, which will cause the pausing of command quue operation if the IDXEQ bit is enabled in CQPAUSEEN. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_CQENDIDX >> 0) & 0xFF), ((IOM5_CQENDIDX = (IOM5_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_CQENDIDX  ---------------------------------
// SVD Line: 34439

//  <rtree> SFDITEM_REG__IOM5_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092B0) IOM Command Queue current index value . Compared to the CQCURIDX reg contents to generate the IDXEQ Pause event for command queue </i>
//    <loc> ( (unsigned int)((IOM5_CQENDIDX >> 0) & 0xFFFFFFFF), ((IOM5_CQENDIDX = (IOM5_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_STATUS  -------------------------------
// SVD Line: 34458

unsigned int IOM5_STATUS __AT (0x500092B4);



// -----------------------------  Field Item: IOM5_STATUS_IDLEST  ---------------------------------
// SVD Line: 34468

//  <item> SFDITEM_FIELD__IOM5_STATUS_IDLEST
//    <name> IDLEST </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500092B4) \nindicates if the active I/O state machine is IDLE. Note - The state machine could be in idle state due to holdoffs from data availability, or as the command gets propagated into the logic from the registers.\n0 : Reserved - do not use\n1 : IDLE = The I/O state machine is in the idle state. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_STATUS ) </loc>
//      <o.2..2> IDLEST
//        <0=> 0: 
//        <1=> 1: IDLE = The I/O state machine is in the idle state. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_STATUS_CMDACT  ---------------------------------
// SVD Line: 34481

//  <item> SFDITEM_FIELD__IOM5_STATUS_CMDACT
//    <name> CMDACT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500092B4) \nIndicates if the active I/O Command is currently processing a transaction, or command is complete, but the FIFO pointers are still syncronizing internally. This bit will go high at the start of the transaction, and will go low when the command is complete, and the data and pointers within the FIFO have been syncronized.\n0 : Reserved - do not use\n1 : ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_STATUS ) </loc>
//      <o.1..1> CMDACT
//        <0=> 0: 
//        <1=> 1: ACTIVE = An I/O command is active. Indicates the active module has an active command and is processing this. De-asserted when the command is completed. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOM5_STATUS_ERR  ----------------------------------
// SVD Line: 34495

//  <item> SFDITEM_FIELD__IOM5_STATUS_ERR
//    <name> ERR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500092B4) \nBit has been deprecated. Please refer to the other error indicators. This will always return 0.\n0 : Reserved - do not use\n1 : ERROR = Bit has been deprecated and will always return 0. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_STATUS ) </loc>
//      <o.0..0> ERR
//        <0=> 0: 
//        <1=> 1: ERROR = Bit has been deprecated and will always return 0. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_STATUS  ----------------------------------
// SVD Line: 34458

//  <rtree> SFDITEM_REG__IOM5_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500092B4) IOM Module Status Register </i>
//    <loc> ( (unsigned int)((IOM5_STATUS >> 0) & 0xFFFFFFFF), ((IOM5_STATUS = (IOM5_STATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_STATUS_IDLEST </item>
//    <item> SFDITEM_FIELD__IOM5_STATUS_CMDACT </item>
//    <item> SFDITEM_FIELD__IOM5_STATUS_ERR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_MSPICFG  ------------------------------
// SVD Line: 34510

unsigned int IOM5_MSPICFG __AT (0x50009300);



// ----------------------------  Field Item: IOM5_MSPICFG_MSPIRST  --------------------------------
// SVD Line: 34520

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_MSPIRST
//    <name> MSPIRST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50009300) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.30..30> MSPIRST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_DOUTDLY  --------------------------------
// SVD Line: 34527

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_DOUTDLY
//    <name> DOUTDLY </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50009300) Delay tap to use for the output signal (MOSI). This give more hold time on the output data </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MSPICFG >> 27) & 0x7), ((IOM5_MSPICFG = (IOM5_MSPICFG & ~(0x7UL << 27 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 27 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MSPICFG_DINDLY  --------------------------------
// SVD Line: 34534

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_DINDLY
//    <name> DINDLY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x50009300) Delay tap to use for the input signal (MISO). This gives more hold time on the input data. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MSPICFG >> 24) & 0x7), ((IOM5_MSPICFG = (IOM5_MSPICFG & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MSPICFG_SPILSB  --------------------------------
// SVD Line: 34541

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_SPILSB
//    <name> SPILSB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x50009300) \nSelects data transfer as MSB first (0) or LSB first (1) for the data portion of the SPI transaction. The offset bytes are always transmitted MSB first.\n0 : MSB = Send and receive MSB bit first value.\n1 : LSB = Send and receive LSB bit first value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.23..23> SPILSB
//        <0=> 0: MSB = Send and receive MSB bit first value.
//        <1=> 1: LSB = Send and receive LSB bit first value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_RDFCPOL  --------------------------------
// SVD Line: 34559

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_RDFCPOL
//    <name> RDFCPOL </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x50009300) \nselects the read flow control signal polarity.\n0 : HIGH = Flow control signal high creates flow control. value.\n1 : LOW = Flow control signal low creates flow control. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.22..22> RDFCPOL
//        <0=> 0: HIGH = Flow control signal high creates flow control. value.
//        <1=> 1: LOW = Flow control signal low creates flow control. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_WTFCPOL  --------------------------------
// SVD Line: 34577

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFCPOL
//    <name> WTFCPOL </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50009300) \nselects the write flow control signal polarity. The transfers are halted when the selected flow control signal is OPPOSITE polarity of bit. (For example: WTFCPOL = 0 will allow a IRQ=1 to pause transfers).\n0 : HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.\n1 : LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.21..21> WTFCPOL
//        <0=> 0: HIGH = Flow control signal high(1) creates flow control and byte transfers will stop until the flow control signal goes low. value.
//        <1=> 1: LOW = Flow control signal low(0) creates flow control and byte transfers will stop until the flow control signal goes high(1). value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_WTFCIRQ  --------------------------------
// SVD Line: 34595

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFCIRQ
//    <name> WTFCIRQ </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50009300) \nselects the write mode flow control signal.\n0 : MISO = MISO is used as the write mode flow control signal. value.\n1 : IRQ = IRQ is used as the write mode flow control signal. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.20..20> WTFCIRQ
//        <0=> 0: MISO = MISO is used as the write mode flow control signal. value.
//        <1=> 1: IRQ = IRQ is used as the write mode flow control signal. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_MOSIINV  --------------------------------
// SVD Line: 34613

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_MOSIINV
//    <name> MOSIINV </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50009300) \ninverts MOSI when flow control is enabled.\n0 : NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.\n1 : INVERT = MOSI is set to 1 in read mode and 0 in write mode. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.18..18> MOSIINV
//        <0=> 0: NORMAL = MOSI is set to 0 in read mode and 1 in write mode. value.
//        <1=> 1: INVERT = MOSI is set to 1 in read mode and 0 in write mode. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_MSPICFG_RDFC  ---------------------------------
// SVD Line: 34631

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_RDFC
//    <name> RDFC </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50009300) \nenables read mode flow control.\n0 : DIS = Read mode flow control disabled. value.\n1 : EN = Read mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.17..17> RDFC
//        <0=> 0: DIS = Read mode flow control disabled. value.
//        <1=> 1: EN = Read mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_MSPICFG_WTFC  ---------------------------------
// SVD Line: 34649

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFC
//    <name> WTFC </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50009300) \nenables write mode flow control.\n0 : DIS = Write mode flow control disabled. value.\n1 : EN = Write mode flow control enabled. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.16..16> WTFC
//        <0=> 0: DIS = Write mode flow control disabled. value.
//        <1=> 1: EN = Write mode flow control enabled. value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MSPICFG_FULLDUP  --------------------------------
// SVD Line: 34667

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_FULLDUP
//    <name> FULLDUP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009300) Enables full duplex mode for Master SPI write operations. Data will be captured simultaneously into the read fifo </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.2..2> FULLDUP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_MSPICFG_SPHA  ---------------------------------
// SVD Line: 34674

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_SPHA
//    <name> SPHA </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009300) \nselects SPI phase.\n0 : SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.\n1 : SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.1..1> SPHA
//        <0=> 0: SAMPLE_LEADING_EDGE = Sample on the leading (first) clock edge. value.
//        <1=> 1: SAMPLE_TRAILING_EDGE = Sample on the trailing (second) clock edge. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOM5_MSPICFG_SPOL  ---------------------------------
// SVD Line: 34692

//  <item> SFDITEM_FIELD__IOM5_MSPICFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009300) \nselects SPI polarity.\n0 : CLK_BASE_0 = The base value of the clock is 0. value.\n1 : CLK_BASE_1 = The base value of the clock is 1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MSPICFG ) </loc>
//      <o.0..0> SPOL
//        <0=> 0: CLK_BASE_0 = The base value of the clock is 0. value.
//        <1=> 1: CLK_BASE_1 = The base value of the clock is 1. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_MSPICFG  ----------------------------------
// SVD Line: 34510

//  <rtree> SFDITEM_REG__IOM5_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009300) SPI module master configuration </i>
//    <loc> ( (unsigned int)((IOM5_MSPICFG >> 0) & 0xFFFFFFFF), ((IOM5_MSPICFG = (IOM5_MSPICFG & ~(0x7FF70007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF70007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_MSPIRST </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_DOUTDLY </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_DINDLY </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_SPILSB </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_RDFCPOL </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFCPOL </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFCIRQ </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_MOSIINV </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_RDFC </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_WTFC </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_FULLDUP </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_SPHA </item>
//    <item> SFDITEM_FIELD__IOM5_MSPICFG_SPOL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_MI2CCFG  ------------------------------
// SVD Line: 34712

unsigned int IOM5_MI2CCFG __AT (0x50009400);



// -----------------------------  Field Item: IOM5_MI2CCFG_STRDIS  --------------------------------
// SVD Line: 34722

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_STRDIS
//    <name> STRDIS </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x50009400) Disable detection of clock stretch events smaller than 1 cycle </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_MI2CCFG ) </loc>
//      <o.24..24> STRDIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MI2CCFG_SMPCNT  --------------------------------
// SVD Line: 34729

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_SMPCNT
//    <name> SMPCNT </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x50009400) Number of Base clk cycles to wait before sampling the SCL clock to determine if a clock stretch event has occured </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MI2CCFG >> 16) & 0xFF), ((IOM5_MI2CCFG = (IOM5_MI2CCFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MI2CCFG_SDAENDLY  -------------------------------
// SVD Line: 34736

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_SDAENDLY
//    <name> SDAENDLY </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x50009400) Number of IOCLK cycles to delay the SDA output en (all transitions affected). Used to delay data relative to clock </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MI2CCFG >> 12) & 0xF), ((IOM5_MI2CCFG = (IOM5_MI2CCFG & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MI2CCFG_SCLENDLY  -------------------------------
// SVD Line: 34743

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_SCLENDLY
//    <name> SCLENDLY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x50009400) Number of IOCLK cycles to delay the rising edge of the SCL output en (clock will go low on this edge). Used to allow clock shaping. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MI2CCFG >> 8) & 0xF), ((IOM5_MI2CCFG = (IOM5_MI2CCFG & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_MI2CCFG_MI2CRST  --------------------------------
// SVD Line: 34750

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_MI2CRST
//    <name> MI2CRST </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50009400) Not used. To reset the module, toggle the SMOD_EN for the module </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_MI2CCFG ) </loc>
//      <o.6..6> MI2CRST
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MI2CCFG_SDADLY  --------------------------------
// SVD Line: 34757

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_SDADLY
//    <name> SDADLY </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50009400) Delay to enable on the SDA output. Values are 0x0-0x3. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOM5_MI2CCFG >> 4) & 0x3), ((IOM5_MI2CCFG = (IOM5_MI2CCFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MI2CCFG_ARBEN  ---------------------------------
// SVD Line: 34764

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_ARBEN
//    <name> ARBEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009400) \nEnables multi-master arbitration for the I2C master. If the bus is known to have only a single master, this function can be disabled to save clock cycles on I2C transactions\n0 : ARBDIS = Disable multi-master bus arbitration support for this i2c master value.\n1 : ARBEN = Enable multi-master bus arbitration support for this i2c master value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MI2CCFG ) </loc>
//      <o.2..2> ARBEN
//        <0=> 0: ARBDIS = Disable multi-master bus arbitration support for this i2c master value.
//        <1=> 1: ARBEN = Enable multi-master bus arbitration support for this i2c master value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MI2CCFG_I2CLSB  --------------------------------
// SVD Line: 34782

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_I2CLSB
//    <name> I2CLSB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009400) \nDirection of data transmit and receive, MSB(0) or LSB(1) first. Default per I2C specification is MSB first. This applies to both read and write data, and read data will be bit\n0 : MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.\n1 : LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MI2CCFG ) </loc>
//      <o.1..1> I2CLSB
//        <0=> 0: MSBFIRST = Byte data is transmitted MSB first onto the bus/read from the bus value.
//        <1=> 1: LSBFIRST = Byte data is transmitted LSB first onto the bus/read from the bus value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOM5_MI2CCFG_ADDRSZ  --------------------------------
// SVD Line: 34800

//  <item> SFDITEM_FIELD__IOM5_MI2CCFG_ADDRSZ
//    <name> ADDRSZ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009400) \nSets the I2C master device address size to either 7b (0) or 10b (1).\n0 : ADDRSZ7 = Use 7b addressing for I2C master transactions value.\n1 : ADDRSZ10 = Use 10b addressing for I2C master transactions value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOM5_MI2CCFG ) </loc>
//      <o.0..0> ADDRSZ
//        <0=> 0: ADDRSZ7 = Use 7b addressing for I2C master transactions value.
//        <1=> 1: ADDRSZ10 = Use 10b addressing for I2C master transactions value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: IOM5_MI2CCFG  ----------------------------------
// SVD Line: 34712

//  <rtree> SFDITEM_REG__IOM5_MI2CCFG
//    <name> MI2CCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009400) I2C Master configuration </i>
//    <loc> ( (unsigned int)((IOM5_MI2CCFG >> 0) & 0xFFFFFFFF), ((IOM5_MI2CCFG = (IOM5_MI2CCFG & ~(0x1FFFF77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_STRDIS </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_SMPCNT </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_SDAENDLY </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_SCLENDLY </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_MI2CRST </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_SDADLY </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_ARBEN </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_I2CLSB </item>
//    <item> SFDITEM_FIELD__IOM5_MI2CCFG_ADDRSZ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_DEVCFG  -------------------------------
// SVD Line: 34820

unsigned int IOM5_DEVCFG __AT (0x50009404);



// -----------------------------  Field Item: IOM5_DEVCFG_DEVADDR  --------------------------------
// SVD Line: 34830

//  <item> SFDITEM_FIELD__IOM5_DEVCFG_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50009404) I2C address of the device that the Master will use to target for read/write operations. This can be either a 7b or 10b address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOM5_DEVCFG >> 0) & 0x3FF), ((IOM5_DEVCFG = (IOM5_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_DEVCFG  ----------------------------------
// SVD Line: 34820

//  <rtree> SFDITEM_REG__IOM5_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009404) I2C Device Configuration register </i>
//    <loc> ( (unsigned int)((IOM5_DEVCFG >> 0) & 0xFFFFFFFF), ((IOM5_DEVCFG = (IOM5_DEVCFG & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_DEVCFG_DEVADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOM5_IOMDBG  -------------------------------
// SVD Line: 34839

unsigned int IOM5_IOMDBG __AT (0x50009410);



// -----------------------------  Field Item: IOM5_IOMDBG_DBGDATA  --------------------------------
// SVD Line: 34849

//  <item> SFDITEM_FIELD__IOM5_IOMDBG_DBGDATA
//    <name> DBGDATA </name>
//    <rw> 
//    <i> [Bits 31..3] RW (@ 0x50009410) Debug control for various options. DBGDATA[1:0] is used to select between different debug data available in the DBG0 and DBG1 registers. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOM5_IOMDBG >> 3) & 0x1FFFFFFF), ((IOM5_IOMDBG = (IOM5_IOMDBG & ~(0x1FFFFFFFUL << 3 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: IOM5_IOMDBG_APBCLKON  --------------------------------
// SVD Line: 34856

//  <item> SFDITEM_FIELD__IOM5_IOMDBG_APBCLKON
//    <name> APBCLKON </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50009410) APBCLK debug clock control. Enable APB_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_IOMDBG ) </loc>
//      <o.2..2> APBCLKON
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOM5_IOMDBG_IOCLKON  --------------------------------
// SVD Line: 34863

//  <item> SFDITEM_FIELD__IOM5_IOMDBG_IOCLKON
//    <name> IOCLKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50009410) IOCLK debug clock control. Enable IO_CLK to be active when this bit is '1'. Otherwise, the clock is controlled with gating from the logic as needed. </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_IOMDBG ) </loc>
//      <o.1..1> IOCLKON
//    </check>
//  </item>
//  


// ------------------------------  Field Item: IOM5_IOMDBG_DBGEN  ---------------------------------
// SVD Line: 34870

//  <item> SFDITEM_FIELD__IOM5_IOMDBG_DBGEN
//    <name> DBGEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50009410) Debug Enable. Setting bit will enable the update of data within this register, otherwise it is clock gated for power savings </i>
//    <check> 
//      <loc> ( (unsigned int) IOM5_IOMDBG ) </loc>
//      <o.0..0> DBGEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: IOM5_IOMDBG  ----------------------------------
// SVD Line: 34839

//  <rtree> SFDITEM_REG__IOM5_IOMDBG
//    <name> IOMDBG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50009410) IOM Debug Register </i>
//    <loc> ( (unsigned int)((IOM5_IOMDBG >> 0) & 0xFFFFFFFF), ((IOM5_IOMDBG = (IOM5_IOMDBG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOM5_IOMDBG_DBGDATA </item>
//    <item> SFDITEM_FIELD__IOM5_IOMDBG_APBCLKON </item>
//    <item> SFDITEM_FIELD__IOM5_IOMDBG_IOCLKON </item>
//    <item> SFDITEM_FIELD__IOM5_IOMDBG_DBGEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: IOM5  -------------------------------------
// SVD Line: 34909

//  <view> IOM5
//    <name> IOM5 </name>
//    <item> SFDITEM_REG__IOM5_FIFO </item>
//    <item> SFDITEM_REG__IOM5_FIFOPTR </item>
//    <item> SFDITEM_REG__IOM5_FIFOTHR </item>
//    <item> SFDITEM_REG__IOM5_FIFOPOP </item>
//    <item> SFDITEM_REG__IOM5_FIFOPUSH </item>
//    <item> SFDITEM_REG__IOM5_FIFOCTRL </item>
//    <item> SFDITEM_REG__IOM5_FIFOLOC </item>
//    <item> SFDITEM_REG__IOM5_INTEN </item>
//    <item> SFDITEM_REG__IOM5_INTSTAT </item>
//    <item> SFDITEM_REG__IOM5_INTCLR </item>
//    <item> SFDITEM_REG__IOM5_INTSET </item>
//    <item> SFDITEM_REG__IOM5_CLKCFG </item>
//    <item> SFDITEM_REG__IOM5_SUBMODCTRL </item>
//    <item> SFDITEM_REG__IOM5_CMD </item>
//    <item> SFDITEM_REG__IOM5_CMDRPT </item>
//    <item> SFDITEM_REG__IOM5_OFFSETHI </item>
//    <item> SFDITEM_REG__IOM5_CMDSTAT </item>
//    <item> SFDITEM_REG__IOM5_DMATRIGEN </item>
//    <item> SFDITEM_REG__IOM5_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__IOM5_DMACFG </item>
//    <item> SFDITEM_REG__IOM5_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__IOM5_DMATARGADDR </item>
//    <item> SFDITEM_REG__IOM5_DMASTAT </item>
//    <item> SFDITEM_REG__IOM5_CQCFG </item>
//    <item> SFDITEM_REG__IOM5_CQADDR </item>
//    <item> SFDITEM_REG__IOM5_CQSTAT </item>
//    <item> SFDITEM_REG__IOM5_CQFLAGS </item>
//    <item> SFDITEM_REG__IOM5_CQSETCLEAR </item>
//    <item> SFDITEM_REG__IOM5_CQPAUSEEN </item>
//    <item> SFDITEM_REG__IOM5_CQCURIDX </item>
//    <item> SFDITEM_REG__IOM5_CQENDIDX </item>
//    <item> SFDITEM_REG__IOM5_STATUS </item>
//    <item> SFDITEM_REG__IOM5_MSPICFG </item>
//    <item> SFDITEM_REG__IOM5_MI2CCFG </item>
//    <item> SFDITEM_REG__IOM5_DEVCFG </item>
//    <item> SFDITEM_REG__IOM5_IOMDBG </item>
//  </view>
//  


// -------------------------  Register Item Address: IOSLAVE_FIFOPTR  -----------------------------
// SVD Line: 34940

unsigned int IOSLAVE_FIFOPTR __AT (0x50000100);



// ---------------------------  Field Item: IOSLAVE_FIFOPTR_FIFOSIZ  ------------------------------
// SVD Line: 34950

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOPTR_FIFOSIZ
//    <name> FIFOSIZ </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50000100) The number of bytes currently in the hardware FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOPTR >> 8) & 0xFF), ((IOSLAVE_FIFOPTR = (IOSLAVE_FIFOPTR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_FIFOPTR_FIFOPTR  ------------------------------
// SVD Line: 34957

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOPTR_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50000100) Current FIFO pointer. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOPTR >> 0) & 0xFF), ((IOSLAVE_FIFOPTR = (IOSLAVE_FIFOPTR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_FIFOPTR  --------------------------------
// SVD Line: 34940

//  <rtree> SFDITEM_REG__IOSLAVE_FIFOPTR
//    <name> FIFOPTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000100) Current FIFO Pointer </i>
//    <loc> ( (unsigned int)((IOSLAVE_FIFOPTR >> 0) & 0xFFFFFFFF), ((IOSLAVE_FIFOPTR = (IOSLAVE_FIFOPTR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOPTR_FIFOSIZ </item>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOPTR_FIFOPTR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_FIFOCFG  -----------------------------
// SVD Line: 34966

unsigned int IOSLAVE_FIFOCFG __AT (0x50000104);



// ---------------------------  Field Item: IOSLAVE_FIFOCFG_ROBASE  -------------------------------
// SVD Line: 34976

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_ROBASE
//    <name> ROBASE </name>
//    <rw> 
//    <i> [Bits 29..24] RW (@ 0x50000104) Defines the read-only area. The IO Slave read-only area is situated in LRAM at (ROBASE*8) to (FIFOBASE*8-1) </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOCFG >> 24) & 0x3F), ((IOSLAVE_FIFOCFG = (IOSLAVE_FIFOCFG & ~(0x3FUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_FIFOCFG_FIFOMAX  ------------------------------
// SVD Line: 34983

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_FIFOMAX
//    <name> FIFOMAX </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50000104) These bits hold the maximum FIFO address in 8 byte segments. It is also the beginning of the RAM area of the LRAM. Note that no RAM area is configured if FIFOMAX is set to 0x1F. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOCFG >> 8) & 0x3F), ((IOSLAVE_FIFOCFG = (IOSLAVE_FIFOCFG & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: IOSLAVE_FIFOCFG_FIFOBASE  ------------------------------
// SVD Line: 34990

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_FIFOBASE
//    <name> FIFOBASE </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50000104) These bits hold the base address of the I/O FIFO in 8 byte segments. The IO Slave FIFO is situated in LRAM at (FIFOBASE*8) to (FIFOMAX*8-1). </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOCFG >> 0) & 0x1F), ((IOSLAVE_FIFOCFG = (IOSLAVE_FIFOCFG & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_FIFOCFG  --------------------------------
// SVD Line: 34966

//  <rtree> SFDITEM_REG__IOSLAVE_FIFOCFG
//    <name> FIFOCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000104) FIFO Configuration </i>
//    <loc> ( (unsigned int)((IOSLAVE_FIFOCFG >> 0) & 0xFFFFFFFF), ((IOSLAVE_FIFOCFG = (IOSLAVE_FIFOCFG & ~(0x3F003F1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F003F1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_ROBASE </item>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_FIFOMAX </item>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOCFG_FIFOBASE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_FIFOTHR  -----------------------------
// SVD Line: 34999

unsigned int IOSLAVE_FIFOTHR __AT (0x50000108);



// ---------------------------  Field Item: IOSLAVE_FIFOTHR_FIFOTHR  ------------------------------
// SVD Line: 35009

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOTHR_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50000108) FIFO size interrupt threshold. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_FIFOTHR >> 0) & 0xFF), ((IOSLAVE_FIFOTHR = (IOSLAVE_FIFOTHR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_FIFOTHR  --------------------------------
// SVD Line: 34999

//  <rtree> SFDITEM_REG__IOSLAVE_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000108) FIFO Threshold Configuration </i>
//    <loc> ( (unsigned int)((IOSLAVE_FIFOTHR >> 0) & 0xFFFFFFFF), ((IOSLAVE_FIFOTHR = (IOSLAVE_FIFOTHR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOTHR_FIFOTHR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOSLAVE_FUPD  ------------------------------
// SVD Line: 35018

unsigned int IOSLAVE_FUPD __AT (0x5000010C);



// -----------------------------  Field Item: IOSLAVE_FUPD_IOREAD  --------------------------------
// SVD Line: 35028

//  <item> SFDITEM_FIELD__IOSLAVE_FUPD_IOREAD
//    <name> IOREAD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000010C) This bitfield indicates an IO read is active. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_FUPD ) </loc>
//      <o.1..1> IOREAD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_FUPD_FIFOUPD  --------------------------------
// SVD Line: 35035

//  <item> SFDITEM_FIELD__IOSLAVE_FUPD_FIFOUPD
//    <name> FIFOUPD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000010C) This bit indicates that a FIFO update is underway. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_FUPD ) </loc>
//      <o.0..0> FIFOUPD
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOSLAVE_FUPD  ----------------------------------
// SVD Line: 35018

//  <rtree> SFDITEM_REG__IOSLAVE_FUPD
//    <name> FUPD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000010C) FIFO Update Status </i>
//    <loc> ( (unsigned int)((IOSLAVE_FUPD >> 0) & 0xFFFFFFFF), ((IOSLAVE_FUPD = (IOSLAVE_FUPD & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FUPD_IOREAD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_FUPD_FIFOUPD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_FIFOCTR  -----------------------------
// SVD Line: 35044

unsigned int IOSLAVE_FIFOCTR __AT (0x50000110);



// ---------------------------  Field Item: IOSLAVE_FIFOCTR_FIFOCTR  ------------------------------
// SVD Line: 35054

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOCTR_FIFOCTR
//    <name> FIFOCTR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50000110) Virtual FIFO byte count </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOSLAVE_FIFOCTR >> 0) & 0x3FF), ((IOSLAVE_FIFOCTR = (IOSLAVE_FIFOCTR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_FIFOCTR  --------------------------------
// SVD Line: 35044

//  <rtree> SFDITEM_REG__IOSLAVE_FIFOCTR
//    <name> FIFOCTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000110) Overall FIFO Counter </i>
//    <loc> ( (unsigned int)((IOSLAVE_FIFOCTR >> 0) & 0xFFFFFFFF), ((IOSLAVE_FIFOCTR = (IOSLAVE_FIFOCTR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOCTR_FIFOCTR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_FIFOINC  -----------------------------
// SVD Line: 35063

unsigned int IOSLAVE_FIFOINC __AT (0x50000114);



// ---------------------------  Field Item: IOSLAVE_FIFOINC_FIFOINC  ------------------------------
// SVD Line: 35073

//  <item> SFDITEM_FIELD__IOSLAVE_FIFOINC_FIFOINC
//    <name> FIFOINC </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50000114) Increment the Overall FIFO Counter by this value on a write </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOSLAVE_FIFOINC >> 0) & 0x3FF), ((IOSLAVE_FIFOINC = (IOSLAVE_FIFOINC & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_FIFOINC  --------------------------------
// SVD Line: 35063

//  <rtree> SFDITEM_REG__IOSLAVE_FIFOINC
//    <name> FIFOINC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000114) Overall FIFO Counter Increment </i>
//    <loc> ( (unsigned int)((IOSLAVE_FIFOINC >> 0) & 0xFFFFFFFF), ((IOSLAVE_FIFOINC = (IOSLAVE_FIFOINC & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_FIFOINC_FIFOINC </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: IOSLAVE_CFG  -------------------------------
// SVD Line: 35082

unsigned int IOSLAVE_CFG __AT (0x50000118);



// ------------------------------  Field Item: IOSLAVE_CFG_IFCEN  ---------------------------------
// SVD Line: 35092

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_IFCEN
//    <name> IFCEN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50000118) \nIOSLAVE interface enable.\n0 : DIS = Disable the IOSLAVE value.\n1 : EN = Enable the IOSLAVE value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOSLAVE_CFG ) </loc>
//      <o.31..31> IFCEN
//        <0=> 0: DIS = Disable the IOSLAVE value.
//        <1=> 1: EN = Enable the IOSLAVE value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_CFG_I2CADDR  --------------------------------
// SVD Line: 35110

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_I2CADDR
//    <name> I2CADDR </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x50000118) 7-bit or 10-bit I2C device address. </i>
//    <edit> 
//      <loc> ( (unsigned short)((IOSLAVE_CFG >> 8) & 0xFFF), ((IOSLAVE_CFG = (IOSLAVE_CFG & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_CFG_STARTRD  --------------------------------
// SVD Line: 35117

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_STARTRD
//    <name> STARTRD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50000118) \nThis bit holds the cycle to initiate an I/O RAM read.\n0 : LATE = Initiate I/O RAM read late in each transferred byte. value.\n1 : EARLY = Initiate I/O RAM read early in each transferred byte. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOSLAVE_CFG ) </loc>
//      <o.4..4> STARTRD
//        <0=> 0: LATE = Initiate I/O RAM read late in each transferred byte. value.
//        <1=> 1: EARLY = Initiate I/O RAM read early in each transferred byte. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: IOSLAVE_CFG_LSB  ----------------------------------
// SVD Line: 35135

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_LSB
//    <name> LSB </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50000118) \nThis bit selects the transfer bit ordering.\n0 : MSB_FIRST = Data is assumed to be sent and received with MSB first. value.\n1 : LSB_FIRST = Data is assumed to be sent and received with LSB first. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOSLAVE_CFG ) </loc>
//      <o.2..2> LSB
//        <0=> 0: MSB_FIRST = Data is assumed to be sent and received with MSB first. value.
//        <1=> 1: LSB_FIRST = Data is assumed to be sent and received with LSB first. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: IOSLAVE_CFG_SPOL  ----------------------------------
// SVD Line: 35153

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_SPOL
//    <name> SPOL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50000118) \nThis bit selects SPI polarity.\n0 : SPI_MODES_0_3 = Polarity 0, handles SPI modes 0 and 3. value.\n1 : SPI_MODES_1_2 = Polarity 1, handles SPI modes 1 and 2. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOSLAVE_CFG ) </loc>
//      <o.1..1> SPOL
//        <0=> 0: SPI_MODES_0_3 = Polarity 0, handles SPI modes 0 and 3. value.
//        <1=> 1: SPI_MODES_1_2 = Polarity 1, handles SPI modes 1 and 2. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_CFG_IFCSEL  ---------------------------------
// SVD Line: 35171

//  <item> SFDITEM_FIELD__IOSLAVE_CFG_IFCSEL
//    <name> IFCSEL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50000118) \nThis bit selects the I/O interface.\n0 : I2C = Selects I2C interface for the IO Slave. value.\n1 : SPI = Selects SPI interface for the IO Slave. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) IOSLAVE_CFG ) </loc>
//      <o.0..0> IFCSEL
//        <0=> 0: I2C = Selects I2C interface for the IO Slave. value.
//        <1=> 1: SPI = Selects SPI interface for the IO Slave. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: IOSLAVE_CFG  ----------------------------------
// SVD Line: 35082

//  <rtree> SFDITEM_REG__IOSLAVE_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000118) I/O Slave Configuration </i>
//    <loc> ( (unsigned int)((IOSLAVE_CFG >> 0) & 0xFFFFFFFF), ((IOSLAVE_CFG = (IOSLAVE_CFG & ~(0x800FFF17UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x800FFF17) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_IFCEN </item>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_I2CADDR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_STARTRD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_LSB </item>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_SPOL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_CFG_IFCSEL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOSLAVE_PRENC  ------------------------------
// SVD Line: 35191

unsigned int IOSLAVE_PRENC __AT (0x5000011C);



// -----------------------------  Field Item: IOSLAVE_PRENC_PRENC  --------------------------------
// SVD Line: 35201

//  <item> SFDITEM_FIELD__IOSLAVE_PRENC_PRENC
//    <name> PRENC </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5000011C) These bits hold the priority encode of the REGACC interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_PRENC >> 0) & 0x1F), ((IOSLAVE_PRENC = (IOSLAVE_PRENC & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: IOSLAVE_PRENC  ---------------------------------
// SVD Line: 35191

//  <rtree> SFDITEM_REG__IOSLAVE_PRENC
//    <name> PRENC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000011C) I/O Slave Interrupt Priority Encode </i>
//    <loc> ( (unsigned int)((IOSLAVE_PRENC >> 0) & 0xFFFFFFFF), ((IOSLAVE_PRENC = (IOSLAVE_PRENC & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_PRENC_PRENC </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_IOINTCTL  ----------------------------
// SVD Line: 35210

unsigned int IOSLAVE_IOINTCTL __AT (0x50000120);



// --------------------------  Field Item: IOSLAVE_IOINTCTL_IOINTSET  -----------------------------
// SVD Line: 35220

//  <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTSET
//    <name> IOINTSET </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x50000120) These bits set the IOINT interrupts when written with a 1. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_IOINTCTL >> 24) & 0xFF), ((IOSLAVE_IOINTCTL = (IOSLAVE_IOINTCTL & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: IOSLAVE_IOINTCTL_IOINTCLR  -----------------------------
// SVD Line: 35227

//  <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTCLR
//    <name> IOINTCLR </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50000120) This bit clears all of the IOINT interrupts when written with a 1. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_IOINTCTL ) </loc>
//      <o.16..16> IOINTCLR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_IOINTCTL_IOINT  -------------------------------
// SVD Line: 35234

//  <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINT
//    <name> IOINT </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x50000120) These bits read the IOINT interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_IOINTCTL >> 8) & 0xFF), ((IOSLAVE_IOINTCTL = (IOSLAVE_IOINTCTL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: IOSLAVE_IOINTCTL_IOINTEN  ------------------------------
// SVD Line: 35241

//  <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTEN
//    <name> IOINTEN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50000120) These read-only bits indicate whether the IOINT interrupts are enabled. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_IOINTCTL >> 0) & 0xFF), ((IOSLAVE_IOINTCTL = (IOSLAVE_IOINTCTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: IOSLAVE_IOINTCTL  --------------------------------
// SVD Line: 35210

//  <rtree> SFDITEM_REG__IOSLAVE_IOINTCTL
//    <name> IOINTCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000120) I/O Interrupt Control </i>
//    <loc> ( (unsigned int)((IOSLAVE_IOINTCTL >> 0) & 0xFFFFFFFF), ((IOSLAVE_IOINTCTL = (IOSLAVE_IOINTCTL & ~(0xFF01FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTSET </item>
//    <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTCLR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINT </item>
//    <item> SFDITEM_FIELD__IOSLAVE_IOINTCTL_IOINTEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOSLAVE_GENADD  -----------------------------
// SVD Line: 35250

unsigned int IOSLAVE_GENADD __AT (0x50000124);



// ----------------------------  Field Item: IOSLAVE_GENADD_GADATA  -------------------------------
// SVD Line: 35260

//  <item> SFDITEM_FIELD__IOSLAVE_GENADD_GADATA
//    <name> GADATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50000124) The data supplied on the last General Address reference. </i>
//    <edit> 
//      <loc> ( (unsigned char)((IOSLAVE_GENADD >> 0) & 0xFF), ((IOSLAVE_GENADD = (IOSLAVE_GENADD & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_GENADD  ---------------------------------
// SVD Line: 35250

//  <rtree> SFDITEM_REG__IOSLAVE_GENADD
//    <name> GENADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000124) General Address Data </i>
//    <loc> ( (unsigned int)((IOSLAVE_GENADD >> 0) & 0xFFFFFFFF), ((IOSLAVE_GENADD = (IOSLAVE_GENADD & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_GENADD_GADATA </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOSLAVE_INTEN  ------------------------------
// SVD Line: 35269

unsigned int IOSLAVE_INTEN __AT (0x50000200);



// ----------------------------  Field Item: IOSLAVE_INTEN_XCMPWR  --------------------------------
// SVD Line: 35279

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPWR
//    <name> XCMPWR </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50000200) Transfer complete interrupt, write to register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.9..9> XCMPWR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_XCMPWF  --------------------------------
// SVD Line: 35286

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPWF
//    <name> XCMPWF </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50000200) Transfer complete interrupt, write to FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.8..8> XCMPWF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_XCMPRR  --------------------------------
// SVD Line: 35293

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPRR
//    <name> XCMPRR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50000200) Transfer complete interrupt, read from register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.7..7> XCMPRR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_XCMPRF  --------------------------------
// SVD Line: 35300

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPRF
//    <name> XCMPRF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50000200) Transfer complete interrupt, read from FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.6..6> XCMPRF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_IOINTW  --------------------------------
// SVD Line: 35307

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_IOINTW
//    <name> IOINTW </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50000200) IO Write interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.5..5> IOINTW
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_INTEN_GENAD  --------------------------------
// SVD Line: 35314

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_GENAD
//    <name> GENAD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50000200) I2C General Address interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.4..4> GENAD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_FRDERR  --------------------------------
// SVD Line: 35321

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_FRDERR
//    <name> FRDERR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50000200) FIFO Read Error interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.3..3> FRDERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTEN_FUNDFL  --------------------------------
// SVD Line: 35328

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50000200) FIFO Underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_INTEN_FOVFL  --------------------------------
// SVD Line: 35335

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50000200) FIFO Overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.1..1> FOVFL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: IOSLAVE_INTEN_FSIZE  --------------------------------
// SVD Line: 35342

//  <item> SFDITEM_FIELD__IOSLAVE_INTEN_FSIZE
//    <name> FSIZE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50000200) FIFO Size interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTEN ) </loc>
//      <o.0..0> FSIZE
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: IOSLAVE_INTEN  ---------------------------------
// SVD Line: 35269

//  <rtree> SFDITEM_REG__IOSLAVE_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000200) IO Slave Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOSLAVE_INTEN >> 0) & 0xFFFFFFFF), ((IOSLAVE_INTEN = (IOSLAVE_INTEN & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPWR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPWF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPRR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_XCMPRF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_IOINTW </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_GENAD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_FRDERR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_FOVFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTEN_FSIZE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: IOSLAVE_INTSTAT  -----------------------------
// SVD Line: 35351

unsigned int IOSLAVE_INTSTAT __AT (0x50000204);



// ---------------------------  Field Item: IOSLAVE_INTSTAT_XCMPWR  -------------------------------
// SVD Line: 35361

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPWR
//    <name> XCMPWR </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50000204) Transfer complete interrupt, write to register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.9..9> XCMPWR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_XCMPWF  -------------------------------
// SVD Line: 35368

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPWF
//    <name> XCMPWF </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50000204) Transfer complete interrupt, write to FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.8..8> XCMPWF
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_XCMPRR  -------------------------------
// SVD Line: 35375

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPRR
//    <name> XCMPRR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50000204) Transfer complete interrupt, read from register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.7..7> XCMPRR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_XCMPRF  -------------------------------
// SVD Line: 35382

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPRF
//    <name> XCMPRF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50000204) Transfer complete interrupt, read from FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.6..6> XCMPRF
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_IOINTW  -------------------------------
// SVD Line: 35389

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_IOINTW
//    <name> IOINTW </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50000204) IO Write interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.5..5> IOINTW
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSTAT_GENAD  -------------------------------
// SVD Line: 35396

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_GENAD
//    <name> GENAD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50000204) I2C General Address interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.4..4> GENAD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_FRDERR  -------------------------------
// SVD Line: 35403

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FRDERR
//    <name> FRDERR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50000204) FIFO Read Error interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.3..3> FRDERR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: IOSLAVE_INTSTAT_FUNDFL  -------------------------------
// SVD Line: 35410

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50000204) FIFO Underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSTAT_FOVFL  -------------------------------
// SVD Line: 35417

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50000204) FIFO Overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.1..1> FOVFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSTAT_FSIZE  -------------------------------
// SVD Line: 35424

//  <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FSIZE
//    <name> FSIZE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50000204) FIFO Size interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSTAT ) </loc>
//      <o.0..0> FSIZE
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_INTSTAT  --------------------------------
// SVD Line: 35351

//  <rtree> SFDITEM_REG__IOSLAVE_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000204) IO Slave Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOSLAVE_INTSTAT >> 0) & 0xFFFFFFFF), ((IOSLAVE_INTSTAT = (IOSLAVE_INTSTAT & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPWR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPWF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPRR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_XCMPRF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_IOINTW </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_GENAD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FRDERR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FOVFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSTAT_FSIZE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOSLAVE_INTCLR  -----------------------------
// SVD Line: 35433

unsigned int IOSLAVE_INTCLR __AT (0x50000208);



// ----------------------------  Field Item: IOSLAVE_INTCLR_XCMPWR  -------------------------------
// SVD Line: 35443

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPWR
//    <name> XCMPWR </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50000208) Transfer complete interrupt, write to register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.9..9> XCMPWR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_XCMPWF  -------------------------------
// SVD Line: 35450

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPWF
//    <name> XCMPWF </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50000208) Transfer complete interrupt, write to FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.8..8> XCMPWF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_XCMPRR  -------------------------------
// SVD Line: 35457

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPRR
//    <name> XCMPRR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50000208) Transfer complete interrupt, read from register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.7..7> XCMPRR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_XCMPRF  -------------------------------
// SVD Line: 35464

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPRF
//    <name> XCMPRF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50000208) Transfer complete interrupt, read from FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.6..6> XCMPRF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_IOINTW  -------------------------------
// SVD Line: 35471

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_IOINTW
//    <name> IOINTW </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50000208) IO Write interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.5..5> IOINTW
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_GENAD  --------------------------------
// SVD Line: 35478

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_GENAD
//    <name> GENAD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50000208) I2C General Address interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.4..4> GENAD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_FRDERR  -------------------------------
// SVD Line: 35485

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FRDERR
//    <name> FRDERR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50000208) FIFO Read Error interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.3..3> FRDERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_FUNDFL  -------------------------------
// SVD Line: 35492

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50000208) FIFO Underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_FOVFL  --------------------------------
// SVD Line: 35499

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50000208) FIFO Overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.1..1> FOVFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTCLR_FSIZE  --------------------------------
// SVD Line: 35506

//  <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FSIZE
//    <name> FSIZE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50000208) FIFO Size interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTCLR ) </loc>
//      <o.0..0> FSIZE
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_INTCLR  ---------------------------------
// SVD Line: 35433

//  <rtree> SFDITEM_REG__IOSLAVE_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000208) IO Slave Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOSLAVE_INTCLR >> 0) & 0xFFFFFFFF), ((IOSLAVE_INTCLR = (IOSLAVE_INTCLR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPWR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPWF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPRR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_XCMPRF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_IOINTW </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_GENAD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FRDERR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FOVFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTCLR_FSIZE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: IOSLAVE_INTSET  -----------------------------
// SVD Line: 35515

unsigned int IOSLAVE_INTSET __AT (0x5000020C);



// ----------------------------  Field Item: IOSLAVE_INTSET_XCMPWR  -------------------------------
// SVD Line: 35525

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPWR
//    <name> XCMPWR </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5000020C) Transfer complete interrupt, write to register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.9..9> XCMPWR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_XCMPWF  -------------------------------
// SVD Line: 35532

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPWF
//    <name> XCMPWF </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5000020C) Transfer complete interrupt, write to FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.8..8> XCMPWF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_XCMPRR  -------------------------------
// SVD Line: 35539

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPRR
//    <name> XCMPRR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5000020C) Transfer complete interrupt, read from register space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.7..7> XCMPRR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_XCMPRF  -------------------------------
// SVD Line: 35546

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPRF
//    <name> XCMPRF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5000020C) Transfer complete interrupt, read from FIFO space. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.6..6> XCMPRF
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_IOINTW  -------------------------------
// SVD Line: 35553

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_IOINTW
//    <name> IOINTW </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5000020C) IO Write interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.5..5> IOINTW
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_GENAD  --------------------------------
// SVD Line: 35560

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_GENAD
//    <name> GENAD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5000020C) I2C General Address interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.4..4> GENAD
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_FRDERR  -------------------------------
// SVD Line: 35567

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_FRDERR
//    <name> FRDERR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5000020C) FIFO Read Error interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.3..3> FRDERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_FUNDFL  -------------------------------
// SVD Line: 35574

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_FUNDFL
//    <name> FUNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5000020C) FIFO Underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.2..2> FUNDFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_FOVFL  --------------------------------
// SVD Line: 35581

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_FOVFL
//    <name> FOVFL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5000020C) FIFO Overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.1..1> FOVFL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: IOSLAVE_INTSET_FSIZE  --------------------------------
// SVD Line: 35588

//  <item> SFDITEM_FIELD__IOSLAVE_INTSET_FSIZE
//    <name> FSIZE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5000020C) FIFO Size interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) IOSLAVE_INTSET ) </loc>
//      <o.0..0> FSIZE
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: IOSLAVE_INTSET  ---------------------------------
// SVD Line: 35515

//  <rtree> SFDITEM_REG__IOSLAVE_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000020C) IO Slave Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOSLAVE_INTSET >> 0) & 0xFFFFFFFF), ((IOSLAVE_INTSET = (IOSLAVE_INTSET & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPWR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPWF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPRR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_XCMPRF </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_IOINTW </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_GENAD </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_FRDERR </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_FUNDFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_FOVFL </item>
//    <item> SFDITEM_FIELD__IOSLAVE_INTSET_FSIZE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: IOSLAVE_REGACCINTEN  ---------------------------
// SVD Line: 35597

unsigned int IOSLAVE_REGACCINTEN __AT (0x50000210);



// -------------------------  Field Item: IOSLAVE_REGACCINTEN_REGACC  -----------------------------
// SVD Line: 35607

//  <item> SFDITEM_FIELD__IOSLAVE_REGACCINTEN_REGACC
//    <name> REGACC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000210) Register access interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOSLAVE_REGACCINTEN >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTEN = (IOSLAVE_REGACCINTEN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: IOSLAVE_REGACCINTEN  ------------------------------
// SVD Line: 35597

//  <rtree> SFDITEM_REG__IOSLAVE_REGACCINTEN
//    <name> REGACCINTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000210) Register Access Interrupts: Enable </i>
//    <loc> ( (unsigned int)((IOSLAVE_REGACCINTEN >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTEN = (IOSLAVE_REGACCINTEN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_REGACCINTEN_REGACC </item>
//  </rtree>
//  


// ----------------------  Register Item Address: IOSLAVE_REGACCINTSTAT  --------------------------
// SVD Line: 35616

unsigned int IOSLAVE_REGACCINTSTAT __AT (0x50000214);



// ------------------------  Field Item: IOSLAVE_REGACCINTSTAT_REGACC  ----------------------------
// SVD Line: 35626

//  <item> SFDITEM_FIELD__IOSLAVE_REGACCINTSTAT_REGACC
//    <name> REGACC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000214) Register access interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOSLAVE_REGACCINTSTAT >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTSTAT = (IOSLAVE_REGACCINTSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: IOSLAVE_REGACCINTSTAT  -----------------------------
// SVD Line: 35616

//  <rtree> SFDITEM_REG__IOSLAVE_REGACCINTSTAT
//    <name> REGACCINTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000214) Register Access Interrupts: Status </i>
//    <loc> ( (unsigned int)((IOSLAVE_REGACCINTSTAT >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTSTAT = (IOSLAVE_REGACCINTSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_REGACCINTSTAT_REGACC </item>
//  </rtree>
//  


// -----------------------  Register Item Address: IOSLAVE_REGACCINTCLR  --------------------------
// SVD Line: 35635

unsigned int IOSLAVE_REGACCINTCLR __AT (0x50000218);



// -------------------------  Field Item: IOSLAVE_REGACCINTCLR_REGACC  ----------------------------
// SVD Line: 35645

//  <item> SFDITEM_FIELD__IOSLAVE_REGACCINTCLR_REGACC
//    <name> REGACC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000218) Register access interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOSLAVE_REGACCINTCLR >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTCLR = (IOSLAVE_REGACCINTCLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: IOSLAVE_REGACCINTCLR  ------------------------------
// SVD Line: 35635

//  <rtree> SFDITEM_REG__IOSLAVE_REGACCINTCLR
//    <name> REGACCINTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50000218) Register Access Interrupts: Clear </i>
//    <loc> ( (unsigned int)((IOSLAVE_REGACCINTCLR >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTCLR = (IOSLAVE_REGACCINTCLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_REGACCINTCLR_REGACC </item>
//  </rtree>
//  


// -----------------------  Register Item Address: IOSLAVE_REGACCINTSET  --------------------------
// SVD Line: 35654

unsigned int IOSLAVE_REGACCINTSET __AT (0x5000021C);



// -------------------------  Field Item: IOSLAVE_REGACCINTSET_REGACC  ----------------------------
// SVD Line: 35664

//  <item> SFDITEM_FIELD__IOSLAVE_REGACCINTSET_REGACC
//    <name> REGACC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000021C) Register access interrupts. </i>
//    <edit> 
//      <loc> ( (unsigned int)((IOSLAVE_REGACCINTSET >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTSET = (IOSLAVE_REGACCINTSET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: IOSLAVE_REGACCINTSET  ------------------------------
// SVD Line: 35654

//  <rtree> SFDITEM_REG__IOSLAVE_REGACCINTSET
//    <name> REGACCINTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5000021C) Register Access Interrupts: Set </i>
//    <loc> ( (unsigned int)((IOSLAVE_REGACCINTSET >> 0) & 0xFFFFFFFF), ((IOSLAVE_REGACCINTSET = (IOSLAVE_REGACCINTSET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__IOSLAVE_REGACCINTSET_REGACC </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: IOSLAVE  ------------------------------------
// SVD Line: 34918

//  <view> IOSLAVE
//    <name> IOSLAVE </name>
//    <item> SFDITEM_REG__IOSLAVE_FIFOPTR </item>
//    <item> SFDITEM_REG__IOSLAVE_FIFOCFG </item>
//    <item> SFDITEM_REG__IOSLAVE_FIFOTHR </item>
//    <item> SFDITEM_REG__IOSLAVE_FUPD </item>
//    <item> SFDITEM_REG__IOSLAVE_FIFOCTR </item>
//    <item> SFDITEM_REG__IOSLAVE_FIFOINC </item>
//    <item> SFDITEM_REG__IOSLAVE_CFG </item>
//    <item> SFDITEM_REG__IOSLAVE_PRENC </item>
//    <item> SFDITEM_REG__IOSLAVE_IOINTCTL </item>
//    <item> SFDITEM_REG__IOSLAVE_GENADD </item>
//    <item> SFDITEM_REG__IOSLAVE_INTEN </item>
//    <item> SFDITEM_REG__IOSLAVE_INTSTAT </item>
//    <item> SFDITEM_REG__IOSLAVE_INTCLR </item>
//    <item> SFDITEM_REG__IOSLAVE_INTSET </item>
//    <item> SFDITEM_REG__IOSLAVE_REGACCINTEN </item>
//    <item> SFDITEM_REG__IOSLAVE_REGACCINTSTAT </item>
//    <item> SFDITEM_REG__IOSLAVE_REGACCINTCLR </item>
//    <item> SFDITEM_REG__IOSLAVE_REGACCINTSET </item>
//  </view>
//  


// --------------------------  Register Item Address: MCUCTRL_CHIPPN  -----------------------------
// SVD Line: 35695

unsigned int MCUCTRL_CHIPPN __AT (0x40020000);



// ---------------------------  Field Item: MCUCTRL_CHIPPN_PARTNUM  -------------------------------
// SVD Line: 35705

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPPN_PARTNUM
//    <name> PARTNUM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020000) BCD part number. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_CHIPPN >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPPN = (MCUCTRL_CHIPPN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_CHIPPN  ---------------------------------
// SVD Line: 35695

//  <rtree> SFDITEM_REG__MCUCTRL_CHIPPN
//    <name> CHIPPN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020000) Chip Information Register </i>
//    <loc> ( (unsigned int)((MCUCTRL_CHIPPN >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPPN = (MCUCTRL_CHIPPN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPPN_PARTNUM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_CHIPID0  -----------------------------
// SVD Line: 35831

unsigned int MCUCTRL_CHIPID0 __AT (0x40020004);



// ---------------------------  Field Item: MCUCTRL_CHIPID0_CHIPID0  ------------------------------
// SVD Line: 35841

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPID0_CHIPID0
//    <name> CHIPID0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020004) Unique chip ID 0. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_CHIPID0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPID0 = (MCUCTRL_CHIPID0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_CHIPID0  --------------------------------
// SVD Line: 35831

//  <rtree> SFDITEM_REG__MCUCTRL_CHIPID0
//    <name> CHIPID0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020004) Unique Chip ID 0 </i>
//    <loc> ( (unsigned int)((MCUCTRL_CHIPID0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPID0 = (MCUCTRL_CHIPID0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPID0_CHIPID0 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_CHIPID1  -----------------------------
// SVD Line: 35856

unsigned int MCUCTRL_CHIPID1 __AT (0x40020008);



// ---------------------------  Field Item: MCUCTRL_CHIPID1_CHIPID1  ------------------------------
// SVD Line: 35866

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPID1_CHIPID1
//    <name> CHIPID1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020008) Unique chip ID 1. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_CHIPID1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPID1 = (MCUCTRL_CHIPID1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_CHIPID1  --------------------------------
// SVD Line: 35856

//  <rtree> SFDITEM_REG__MCUCTRL_CHIPID1
//    <name> CHIPID1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020008) Unique Chip ID 1 </i>
//    <loc> ( (unsigned int)((MCUCTRL_CHIPID1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPID1 = (MCUCTRL_CHIPID1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPID1_CHIPID1 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_CHIPREV  -----------------------------
// SVD Line: 35881

unsigned int MCUCTRL_CHIPREV __AT (0x4002000C);



// ---------------------------  Field Item: MCUCTRL_CHIPREV_SIPART  -------------------------------
// SVD Line: 35891

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_SIPART
//    <name> SIPART </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x4002000C) Silicon Part ID </i>
//    <edit> 
//      <loc> ( (unsigned short)((MCUCTRL_CHIPREV >> 8) & 0xFFF), ((MCUCTRL_CHIPREV = (MCUCTRL_CHIPREV & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_CHIPREV_REVMAJ  -------------------------------
// SVD Line: 35898

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_REVMAJ
//    <name> REVMAJ </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4002000C) \nMajor Revision ID.\n0 : Reserved - do not use\n1 : A = Apollo3 revision A value.\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_CHIPREV ) </loc>
//      <o.7..4> REVMAJ
//        <0=> 0: 
//        <1=> 1: A = Apollo3 revision A value.
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_CHIPREV_REVMIN  -------------------------------
// SVD Line: 35911

//  <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_REVMIN
//    <name> REVMIN </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4002000C) \nMinor Revision ID.\n0 : Reserved - do not use\n1 : REV0 = Apollo3 minor rev 0. Minor revision value, succeeding minor revisions will increment from this value. value.\n2 : REV1 = Apollo3 minor rev 1. value.\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_CHIPREV ) </loc>
//      <o.3..0> REVMIN
//        <0=> 0: 
//        <1=> 1: REV0 = Apollo3 minor rev 0. Minor revision value, succeeding minor revisions will increment from this value. value.
//        <2=> 2: REV1 = Apollo3 minor rev 1. value.
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_CHIPREV  --------------------------------
// SVD Line: 35881

//  <rtree> SFDITEM_REG__MCUCTRL_CHIPREV
//    <name> CHIPREV </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002000C) Chip Revision </i>
//    <loc> ( (unsigned int)((MCUCTRL_CHIPREV >> 0) & 0xFFFFFFFF), ((MCUCTRL_CHIPREV = (MCUCTRL_CHIPREV & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_SIPART </item>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_REVMAJ </item>
//    <item> SFDITEM_FIELD__MCUCTRL_CHIPREV_REVMIN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_VENDORID  ----------------------------
// SVD Line: 35931

unsigned int MCUCTRL_VENDORID __AT (0x40020010);



// --------------------------  Field Item: MCUCTRL_VENDORID_VENDORID  -----------------------------
// SVD Line: 35941

//  <item> SFDITEM_FIELD__MCUCTRL_VENDORID_VENDORID
//    <name> VENDORID </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020010) Unique Vendor ID </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_VENDORID >> 0) & 0xFFFFFFFF), ((MCUCTRL_VENDORID = (MCUCTRL_VENDORID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_VENDORID  --------------------------------
// SVD Line: 35931

//  <rtree> SFDITEM_REG__MCUCTRL_VENDORID
//    <name> VENDORID </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020010) Unique Vendor ID </i>
//    <loc> ( (unsigned int)((MCUCTRL_VENDORID >> 0) & 0xFFFFFFFF), ((MCUCTRL_VENDORID = (MCUCTRL_VENDORID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_VENDORID_VENDORID </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MCUCTRL_SKU  -------------------------------
// SVD Line: 35956

unsigned int MCUCTRL_SKU __AT (0x40020014);



// -----------------------------  Field Item: MCUCTRL_SKU_SECBOOT  --------------------------------
// SVD Line: 35966

//  <item> SFDITEM_FIELD__MCUCTRL_SKU_SECBOOT
//    <name> SECBOOT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40020014) Secure boot feature allowed </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SKU ) </loc>
//      <o.2..2> SECBOOT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: MCUCTRL_SKU_ALLOWBLE  --------------------------------
// SVD Line: 35973

//  <item> SFDITEM_FIELD__MCUCTRL_SKU_ALLOWBLE
//    <name> ALLOWBLE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020014) Allow BLE feature </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SKU ) </loc>
//      <o.1..1> ALLOWBLE
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_SKU_ALLOWBURST  -------------------------------
// SVD Line: 35980

//  <item> SFDITEM_FIELD__MCUCTRL_SKU_ALLOWBURST
//    <name> ALLOWBURST </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020014) Allow Burst feature </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SKU ) </loc>
//      <o.0..0> ALLOWBURST
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MCUCTRL_SKU  ----------------------------------
// SVD Line: 35956

//  <rtree> SFDITEM_REG__MCUCTRL_SKU
//    <name> SKU </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020014) Unique Chip SKU </i>
//    <loc> ( (unsigned int)((MCUCTRL_SKU >> 0) & 0xFFFFFFFF), ((MCUCTRL_SKU = (MCUCTRL_SKU & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SKU_SECBOOT </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SKU_ALLOWBLE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SKU_ALLOWBURST </item>
//  </rtree>
//  


// ----------------------  Register Item Address: MCUCTRL_FEATUREENABLE  --------------------------
// SVD Line: 35989

unsigned int MCUCTRL_FEATUREENABLE __AT (0x40020018);



// ----------------------  Field Item: MCUCTRL_FEATUREENABLE_BURSTAVAIL  --------------------------
// SVD Line: 35999

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTAVAIL
//    <name> BURSTAVAIL </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40020018) \nAvailability of Burst functionality\n0 : NOTAVAIL = Burst functionality not available value.\n1 : AVAIL = Burst functionality available value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.6..6> BURSTAVAIL
//        <0=> 0: NOTAVAIL = Burst functionality not available value.
//        <1=> 1: AVAIL = Burst functionality available value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_FEATUREENABLE_BURSTACK  ---------------------------
// SVD Line: 36017

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTACK
//    <name> BURSTACK </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40020018) ACK for BURSTREQ </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.5..5> BURSTACK
//    </check>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_FEATUREENABLE_BURSTREQ  ---------------------------
// SVD Line: 36024

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTREQ
//    <name> BURSTREQ </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40020018) \nControls the Burst functionality\n0 : DIS = Disable the Burst functionality value.\n1 : EN = Enable the Burst functionality value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.4..4> BURSTREQ
//        <0=> 0: DIS = Disable the Burst functionality value.
//        <1=> 1: EN = Enable the Burst functionality value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_FEATUREENABLE_BLEAVAIL  ---------------------------
// SVD Line: 36042

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEAVAIL
//    <name> BLEAVAIL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40020018) \nAVAILABILITY of the BLE functionality\n0 : NOTAVAIL = BLE functionality not available value.\n1 : AVAIL = BLE functionality available value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.2..2> BLEAVAIL
//        <0=> 0: NOTAVAIL = BLE functionality not available value.
//        <1=> 1: AVAIL = BLE functionality available value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_FEATUREENABLE_BLEACK  ----------------------------
// SVD Line: 36060

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEACK
//    <name> BLEACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020018) ACK for BLEREQ </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.1..1> BLEACK
//    </check>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_FEATUREENABLE_BLEREQ  ----------------------------
// SVD Line: 36067

//  <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEREQ
//    <name> BLEREQ </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020018) \nControls the BLE functionality\n0 : DIS = Disable the BLE functionality value.\n1 : EN = Enable the BLE functionality value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FEATUREENABLE ) </loc>
//      <o.0..0> BLEREQ
//        <0=> 0: DIS = Disable the BLE functionality value.
//        <1=> 1: EN = Enable the BLE functionality value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: MCUCTRL_FEATUREENABLE  -----------------------------
// SVD Line: 35989

//  <rtree> SFDITEM_REG__MCUCTRL_FEATUREENABLE
//    <name> FEATUREENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020018) Feature Enable on Burst and BLE </i>
//    <loc> ( (unsigned int)((MCUCTRL_FEATUREENABLE >> 0) & 0xFFFFFFFF), ((MCUCTRL_FEATUREENABLE = (MCUCTRL_FEATUREENABLE & ~(0x77UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x77) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTAVAIL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTACK </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BURSTREQ </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEAVAIL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEACK </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FEATUREENABLE_BLEREQ </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_DEBUGGER  ----------------------------
// SVD Line: 36087

unsigned int MCUCTRL_DEBUGGER __AT (0x40020020);



// --------------------------  Field Item: MCUCTRL_DEBUGGER_LOCKOUT  ------------------------------
// SVD Line: 36097

//  <item> SFDITEM_FIELD__MCUCTRL_DEBUGGER_LOCKOUT
//    <name> LOCKOUT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020020) Lockout of debugger (SWD). </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_DEBUGGER ) </loc>
//      <o.0..0> LOCKOUT
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_DEBUGGER  --------------------------------
// SVD Line: 36087

//  <rtree> SFDITEM_REG__MCUCTRL_DEBUGGER
//    <name> DEBUGGER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020020) Debugger Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_DEBUGGER >> 0) & 0xFFFFFFFF), ((MCUCTRL_DEBUGGER = (MCUCTRL_DEBUGGER & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DEBUGGER_LOCKOUT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_BODCTRL  -----------------------------
// SVD Line: 36106

unsigned int MCUCTRL_BODCTRL __AT (0x40020100);



// -------------------------  Field Item: MCUCTRL_BODCTRL_BODHVREFSEL  ----------------------------
// SVD Line: 36116

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODHVREFSEL
//    <name> BODHVREFSEL </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40020100) BODH External Reference Select. Note: the SWE mux select in PWRSEQ2SWE must be set for this to take effect. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.5..5> BODHVREFSEL
//    </check>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_BODCTRL_BODLVREFSEL  ----------------------------
// SVD Line: 36123

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODLVREFSEL
//    <name> BODLVREFSEL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40020100) BODL External Reference Select. Note: the SWE mux select in PWRSEQ2SWE must be set for this to take effect. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.4..4> BODLVREFSEL
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_BODCTRL_BODFPWD  ------------------------------
// SVD Line: 36130

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODFPWD
//    <name> BODFPWD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40020100) BODF Power Down. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.3..3> BODFPWD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_BODCTRL_BODCPWD  ------------------------------
// SVD Line: 36137

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODCPWD
//    <name> BODCPWD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40020100) BODC Power Down. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.2..2> BODCPWD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_BODCTRL_BODHPWD  ------------------------------
// SVD Line: 36144

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODHPWD
//    <name> BODHPWD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020100) BODH Power Down. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.1..1> BODHPWD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_BODCTRL_BODLPWD  ------------------------------
// SVD Line: 36151

//  <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODLPWD
//    <name> BODLPWD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020100) BODL Power Down. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_BODCTRL ) </loc>
//      <o.0..0> BODLPWD
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_BODCTRL  --------------------------------
// SVD Line: 36106

//  <rtree> SFDITEM_REG__MCUCTRL_BODCTRL
//    <name> BODCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020100) BOD control Register </i>
//    <loc> ( (unsigned int)((MCUCTRL_BODCTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_BODCTRL = (MCUCTRL_BODCTRL & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODHVREFSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODLVREFSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODFPWD </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODCPWD </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODHPWD </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BODCTRL_BODLPWD </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_ADCPWRDLY  ----------------------------
// SVD Line: 36160

unsigned int MCUCTRL_ADCPWRDLY __AT (0x40020104);



// --------------------------  Field Item: MCUCTRL_ADCPWRDLY_ADCPWR1  -----------------------------
// SVD Line: 36170

//  <item> SFDITEM_FIELD__MCUCTRL_ADCPWRDLY_ADCPWR1
//    <name> ADCPWR1 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40020104) ADC Reference Keeper enable delay in 16 ADC CLK increments for ADC_CLKSEL = 0x1, 8 ADC CLOCK increments for ADC_CLKSEL = 0x2. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCPWRDLY >> 8) & 0xFF), ((MCUCTRL_ADCPWRDLY = (MCUCTRL_ADCPWRDLY & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: MCUCTRL_ADCPWRDLY_ADCPWR0  -----------------------------
// SVD Line: 36177

//  <item> SFDITEM_FIELD__MCUCTRL_ADCPWRDLY_ADCPWR0
//    <name> ADCPWR0 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40020104) ADC Reference Buffer Power Enable delay in 64 ADC CLK increments for ADC_CLKSEL = 0x1, 32 ADC CLOCK increments for ADC_CLKSEL = 0x2. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCPWRDLY >> 0) & 0xFF), ((MCUCTRL_ADCPWRDLY = (MCUCTRL_ADCPWRDLY & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_ADCPWRDLY  -------------------------------
// SVD Line: 36160

//  <rtree> SFDITEM_REG__MCUCTRL_ADCPWRDLY
//    <name> ADCPWRDLY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020104) ADC Power Up Delay Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_ADCPWRDLY >> 0) & 0xFFFFFFFF), ((MCUCTRL_ADCPWRDLY = (MCUCTRL_ADCPWRDLY & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCPWRDLY_ADCPWR1 </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCPWRDLY_ADCPWR0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MCUCTRL_ADCCAL  -----------------------------
// SVD Line: 36186

unsigned int MCUCTRL_ADCCAL __AT (0x4002010C);



// ------------------------  Field Item: MCUCTRL_ADCCAL_ADCCALIBRATED  ----------------------------
// SVD Line: 36196

//  <item> SFDITEM_FIELD__MCUCTRL_ADCCAL_ADCCALIBRATED
//    <name> ADCCALIBRATED </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4002010C) \nStatus for ADC Calibration\n0 : FALSE = ADC is not calibrated value.\n1 : TRUE = ADC is calibrated value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_ADCCAL ) </loc>
//      <o.1..1> ADCCALIBRATED
//        <0=> 0: FALSE = ADC is not calibrated value.
//        <1=> 1: TRUE = ADC is calibrated value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: MCUCTRL_ADCCAL_CALONPWRUP  -----------------------------
// SVD Line: 36214

//  <item> SFDITEM_FIELD__MCUCTRL_ADCCAL_CALONPWRUP
//    <name> CALONPWRUP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4002010C) \nRun ADC Calibration on initial power up sequence\n0 : DIS = Disable automatic calibration on initial power up value.\n1 : EN = Enable automatic calibration on initial power up value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_ADCCAL ) </loc>
//      <o.0..0> CALONPWRUP
//        <0=> 0: DIS = Disable automatic calibration on initial power up value.
//        <1=> 1: EN = Enable automatic calibration on initial power up value.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_ADCCAL  ---------------------------------
// SVD Line: 36186

//  <rtree> SFDITEM_REG__MCUCTRL_ADCCAL
//    <name> ADCCAL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002010C) ADC Calibration Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_ADCCAL >> 0) & 0xFFFFFFFF), ((MCUCTRL_ADCCAL = (MCUCTRL_ADCCAL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCCAL_ADCCALIBRATED </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCCAL_CALONPWRUP </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_ADCBATTLOAD  ---------------------------
// SVD Line: 36234

unsigned int MCUCTRL_ADCBATTLOAD __AT (0x40020110);



// ------------------------  Field Item: MCUCTRL_ADCBATTLOAD_BATTLOAD  ----------------------------
// SVD Line: 36244

//  <item> SFDITEM_FIELD__MCUCTRL_ADCBATTLOAD_BATTLOAD
//    <name> BATTLOAD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020110) \nEnable the ADC battery load resistor\n0 : DIS = Battery load is disconnected value.\n1 : EN = Battery load is enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_ADCBATTLOAD ) </loc>
//      <o.0..0> BATTLOAD
//        <0=> 0: DIS = Battery load is disconnected value.
//        <1=> 1: EN = Battery load is enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_ADCBATTLOAD  ------------------------------
// SVD Line: 36234

//  <rtree> SFDITEM_REG__MCUCTRL_ADCBATTLOAD
//    <name> ADCBATTLOAD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020110) ADC Battery Load Enable </i>
//    <loc> ( (unsigned int)((MCUCTRL_ADCBATTLOAD >> 0) & 0xFFFFFFFF), ((MCUCTRL_ADCBATTLOAD = (MCUCTRL_ADCBATTLOAD & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCBATTLOAD_BATTLOAD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_ADCTRIM  -----------------------------
// SVD Line: 36264

unsigned int MCUCTRL_ADCTRIM __AT (0x40020118);



// -----------------------  Field Item: MCUCTRL_ADCTRIM_ADCRFBUFIBTRIM  ---------------------------
// SVD Line: 36274

//  <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCRFBUFIBTRIM
//    <name> ADCRFBUFIBTRIM </name>
//    <rw> 
//    <i> [Bits 12..11] RW (@ 0x40020118) ADC reference buffer input bias trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCTRIM >> 11) & 0x3), ((MCUCTRL_ADCTRIM = (MCUCTRL_ADCTRIM & ~(0x3UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_ADCTRIM_ADCREFBUFTRIM  ---------------------------
// SVD Line: 36281

//  <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCREFBUFTRIM
//    <name> ADCREFBUFTRIM </name>
//    <rw> 
//    <i> [Bits 10..6] RW (@ 0x40020118) ADC Reference buffer trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCTRIM >> 6) & 0x1F), ((MCUCTRL_ADCTRIM = (MCUCTRL_ADCTRIM & ~(0x1FUL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_ADCTRIM_ADCREFKEEPIBTRIM  --------------------------
// SVD Line: 36288

//  <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCREFKEEPIBTRIM
//    <name> ADCREFKEEPIBTRIM </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40020118) ADC Reference Ibias trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCTRIM >> 0) & 0x3), ((MCUCTRL_ADCTRIM = (MCUCTRL_ADCTRIM & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MCUCTRL_ADCTRIM  --------------------------------
// SVD Line: 36264

//  <rtree> SFDITEM_REG__MCUCTRL_ADCTRIM
//    <name> ADCTRIM </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020118) ADC Trims </i>
//    <loc> ( (unsigned int)((MCUCTRL_ADCTRIM >> 0) & 0xFFFFFFFF), ((MCUCTRL_ADCTRIM = (MCUCTRL_ADCTRIM & ~(0x1FC3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FC3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCRFBUFIBTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCREFBUFTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCTRIM_ADCREFKEEPIBTRIM </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_ADCREFCOMP  ---------------------------
// SVD Line: 36297

unsigned int MCUCTRL_ADCREFCOMP __AT (0x4002011C);



// ------------------------  Field Item: MCUCTRL_ADCREFCOMP_ADCRFCMPEN  ---------------------------
// SVD Line: 36307

//  <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADCRFCMPEN
//    <name> ADCRFCMPEN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4002011C) ADC Reference comparator power down </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_ADCREFCOMP ) </loc>
//      <o.16..16> ADCRFCMPEN
//    </check>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_ADCREFCOMP_ADCREFKEEPTRIM  -------------------------
// SVD Line: 36314

//  <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADCREFKEEPTRIM
//    <name> ADCREFKEEPTRIM </name>
//    <rw> 
//    <i> [Bits 12..8] RW (@ 0x4002011C) ADC Reference Keeper Trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_ADCREFCOMP >> 8) & 0x1F), ((MCUCTRL_ADCREFCOMP = (MCUCTRL_ADCREFCOMP & ~(0x1FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_ADCREFCOMP_ADC_REFCOMP_OUT  -------------------------
// SVD Line: 36321

//  <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADC_REFCOMP_OUT
//    <name> ADC_REFCOMP_OUT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4002011C) Output of the ADC reference comparator </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_ADCREFCOMP ) </loc>
//      <o.0..0> ADC_REFCOMP_OUT
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_ADCREFCOMP  -------------------------------
// SVD Line: 36297

//  <rtree> SFDITEM_REG__MCUCTRL_ADCREFCOMP
//    <name> ADCREFCOMP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002011C) ADC Referece Keeper and Comparator Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_ADCREFCOMP >> 0) & 0xFFFFFFFF), ((MCUCTRL_ADCREFCOMP = (MCUCTRL_ADCREFCOMP & ~(0x11F01UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x11F01) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADCRFCMPEN </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADCREFKEEPTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_ADCREFCOMP_ADC_REFCOMP_OUT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_XTALCTRL  ----------------------------
// SVD Line: 36330

unsigned int MCUCTRL_XTALCTRL __AT (0x40020120);



// -----------------------  Field Item: MCUCTRL_XTALCTRL_XTALICOMPTRIM  ---------------------------
// SVD Line: 36340

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALICOMPTRIM
//    <name> XTALICOMPTRIM </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40020120) XTAL ICOMP trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_XTALCTRL >> 8) & 0x3), ((MCUCTRL_XTALCTRL = (MCUCTRL_XTALCTRL & ~(0x3UL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALCTRL_XTALIBUFTRIM  ---------------------------
// SVD Line: 36347

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALIBUFTRIM
//    <name> XTALIBUFTRIM </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40020120) XTAL IBUFF trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_XTALCTRL >> 6) & 0x3), ((MCUCTRL_XTALCTRL = (MCUCTRL_XTALCTRL & ~(0x3UL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_XTALCTRL_PWDBODXTAL  ----------------------------
// SVD Line: 36354

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PWDBODXTAL
//    <name> PWDBODXTAL </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40020120) \nXTAL Power down on brown out.\n0 : PWRUPBOD = Power up xtal on BOD value.\n1 : PWRDNBOD = Power down XTAL on BOD. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.5..5> PWDBODXTAL
//        <0=> 0: PWRUPBOD = Power up xtal on BOD value.
//        <1=> 1: PWRDNBOD = Power down XTAL on BOD. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALCTRL_PDNBCMPRXTAL  ---------------------------
// SVD Line: 36372

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PDNBCMPRXTAL
//    <name> PDNBCMPRXTAL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40020120) \nXTAL Oscillator Power Down Comparator.\n0 : PWRDNCOMP = Power down XTAL oscillator comparator. value.\n1 : PWRUPCOMP = Power up XTAL oscillator comparator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.4..4> PDNBCMPRXTAL
//        <0=> 0: PWRDNCOMP = Power down XTAL oscillator comparator. value.
//        <1=> 1: PWRUPCOMP = Power up XTAL oscillator comparator. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALCTRL_PDNBCOREXTAL  ---------------------------
// SVD Line: 36390

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PDNBCOREXTAL
//    <name> PDNBCOREXTAL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40020120) \nXTAL Oscillator Power Down Core.\n0 : PWRDNCORE = Power down XTAL oscillator core. value.\n1 : PWRUPCORE = Power up XTAL oscillator core. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.3..3> PDNBCOREXTAL
//        <0=> 0: PWRDNCORE = Power down XTAL oscillator core. value.
//        <1=> 1: PWRUPCORE = Power up XTAL oscillator core. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALCTRL_BYPCMPRXTAL  ----------------------------
// SVD Line: 36408

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_BYPCMPRXTAL
//    <name> BYPCMPRXTAL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40020120) \nXTAL Oscillator Bypass Comparator.\n0 : USECOMP = Use the XTAL oscillator comparator. value.\n1 : BYPCOMP = Bypass the XTAL oscillator comparator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.2..2> BYPCMPRXTAL
//        <0=> 0: USECOMP = Use the XTAL oscillator comparator. value.
//        <1=> 1: BYPCOMP = Bypass the XTAL oscillator comparator. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALCTRL_FDBKDSBLXTAL  ---------------------------
// SVD Line: 36426

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_FDBKDSBLXTAL
//    <name> FDBKDSBLXTAL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020120) \nXTAL Oscillator Disable Feedback.\n0 : EN = Enable XTAL oscillator comparator. value.\n1 : DIS = Disable XTAL oscillator comparator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.1..1> FDBKDSBLXTAL
//        <0=> 0: EN = Enable XTAL oscillator comparator. value.
//        <1=> 1: DIS = Disable XTAL oscillator comparator. value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: MCUCTRL_XTALCTRL_XTALSWE  ------------------------------
// SVD Line: 36444

//  <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALSWE
//    <name> XTALSWE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020120) \nXTAL Software Override Enable.\n0 : OVERRIDE_DIS = XTAL Software Override Disable. value.\n1 : OVERRIDE_EN = XTAL Software Override Enable. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALCTRL ) </loc>
//      <o.0..0> XTALSWE
//        <0=> 0: OVERRIDE_DIS = XTAL Software Override Disable. value.
//        <1=> 1: OVERRIDE_EN = XTAL Software Override Enable. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_XTALCTRL  --------------------------------
// SVD Line: 36330

//  <rtree> SFDITEM_REG__MCUCTRL_XTALCTRL
//    <name> XTALCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020120) XTAL Oscillator Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_XTALCTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_XTALCTRL = (MCUCTRL_XTALCTRL & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALICOMPTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALIBUFTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PWDBODXTAL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PDNBCMPRXTAL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_PDNBCOREXTAL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_BYPCMPRXTAL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_FDBKDSBLXTAL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALCTRL_XTALSWE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_XTALGENCTRL  ---------------------------
// SVD Line: 36464

unsigned int MCUCTRL_XTALGENCTRL __AT (0x40020124);



// ---------------------  Field Item: MCUCTRL_XTALGENCTRL_XTALKSBIASTRIM  -------------------------
// SVD Line: 36474

//  <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_XTALKSBIASTRIM
//    <name> XTALKSBIASTRIM </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40020124) XTAL IBIAS Kick start trim. This trim value is used during the startup process to enable a faster lock. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_XTALGENCTRL >> 8) & 0x3F), ((MCUCTRL_XTALGENCTRL = (MCUCTRL_XTALGENCTRL & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_XTALGENCTRL_XTALBIASTRIM  --------------------------
// SVD Line: 36481

//  <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_XTALBIASTRIM
//    <name> XTALBIASTRIM </name>
//    <rw> 
//    <i> [Bits 7..2] RW (@ 0x40020124) XTAL BIAS trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_XTALGENCTRL >> 2) & 0x3F), ((MCUCTRL_XTALGENCTRL = (MCUCTRL_XTALGENCTRL & ~(0x3FUL << 2 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_XTALGENCTRL_ACWARMUP  ----------------------------
// SVD Line: 36488

//  <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_ACWARMUP
//    <name> ACWARMUP </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40020124) \nAuto-calibration delay control\n0 : SEC1 = Warmup period of 1-2 seconds value.\n1 : SEC2 = Warmup period of 2-4 seconds value.\n2 : SEC4 = Warmup period of 4-8 seconds value.\n3 : SEC8 = Warmup period of 8-16 seconds value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_XTALGENCTRL ) </loc>
//      <o.1..0> ACWARMUP
//        <0=> 0: SEC1 = Warmup period of 1-2 seconds value.
//        <1=> 1: SEC2 = Warmup period of 2-4 seconds value.
//        <2=> 2: SEC4 = Warmup period of 4-8 seconds value.
//        <3=> 3: SEC8 = Warmup period of 8-16 seconds value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_XTALGENCTRL  ------------------------------
// SVD Line: 36464

//  <rtree> SFDITEM_REG__MCUCTRL_XTALGENCTRL
//    <name> XTALGENCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020124) XTAL Oscillator General Control </i>
//    <loc> ( (unsigned int)((MCUCTRL_XTALGENCTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_XTALGENCTRL = (MCUCTRL_XTALGENCTRL & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_XTALKSBIASTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_XTALBIASTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_XTALGENCTRL_ACWARMUP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_MISCCTRL  ----------------------------
// SVD Line: 36518

unsigned int MCUCTRL_MISCCTRL __AT (0x40020198);



// -------------------------  Field Item: MCUCTRL_MISCCTRL_BLE_RESETN  ----------------------------
// SVD Line: 36528

//  <item> SFDITEM_FIELD__MCUCTRL_MISCCTRL_BLE_RESETN
//    <name> BLE_RESETN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40020198) BLE reset signal. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_MISCCTRL ) </loc>
//      <o.5..5> BLE_RESETN
//    </check>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_MISCCTRL_RESERVED_RW_0  ---------------------------
// SVD Line: 36535

//  <item> SFDITEM_FIELD__MCUCTRL_MISCCTRL_RESERVED_RW_0
//    <name> RESERVED_RW_0 </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x40020198) Reserved bits, always leave unchanged. The MISCCTRL register must be modified via atomic RMW, leaving this bitfield completely unmodified. Failure to do so will result in unpredictable behavior. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_MISCCTRL >> 0) & 0x1F), ((MCUCTRL_MISCCTRL = (MCUCTRL_MISCCTRL & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_MISCCTRL  --------------------------------
// SVD Line: 36518

//  <rtree> SFDITEM_REG__MCUCTRL_MISCCTRL
//    <name> MISCCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020198) Miscellaneous control register. </i>
//    <loc> ( (unsigned int)((MCUCTRL_MISCCTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_MISCCTRL = (MCUCTRL_MISCCTRL & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_MISCCTRL_BLE_RESETN </item>
//    <item> SFDITEM_FIELD__MCUCTRL_MISCCTRL_RESERVED_RW_0 </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_BOOTLOADER  ---------------------------
// SVD Line: 36544

unsigned int MCUCTRL_BOOTLOADER __AT (0x400201A0);



// -----------------------  Field Item: MCUCTRL_BOOTLOADER_SECBOOTONRST  --------------------------
// SVD Line: 36554

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOTONRST
//    <name> SECBOOTONRST </name>
//    <rw> 
//    <i> [Bits 31..30] RW (@ 0x400201A0) \nIndicates whether the secure boot on warm reset is enabled\n0 : DISABLED = Secure boot disabled value.\n1 : ENABLED = Secure boot enabled value.\n2 : ERROR = Error in secure boot configuration value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.31..30> SECBOOTONRST
//        <0=> 0: DISABLED = Secure boot disabled value.
//        <1=> 1: ENABLED = Secure boot enabled value.
//        <2=> 2: ERROR = Error in secure boot configuration value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_BOOTLOADER_SECBOOT  -----------------------------
// SVD Line: 36577

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOT
//    <name> SECBOOT </name>
//    <rw> 
//    <i> [Bits 29..28] RW (@ 0x400201A0) \nIndicates whether the secure boot on cold reset is enabled\n0 : DISABLED = Secure boot disabled value.\n1 : ENABLED = Secure boot enabled value.\n2 : ERROR = Error in secure boot configuration value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.29..28> SECBOOT
//        <0=> 0: DISABLED = Secure boot disabled value.
//        <1=> 1: ENABLED = Secure boot enabled value.
//        <2=> 2: ERROR = Error in secure boot configuration value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_BOOTLOADER_SECBOOTFEATURE  -------------------------
// SVD Line: 36600

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOTFEATURE
//    <name> SECBOOTFEATURE </name>
//    <rw> 
//    <i> [Bits 27..26] RW (@ 0x400201A0) \nIndicates whether the secure boot feature is enabled.\n0 : DISABLED = Secure boot disabled value.\n1 : ENABLED = Secure boot enabled value.\n2 : ERROR = Error in secure boot configuration value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.27..26> SECBOOTFEATURE
//        <0=> 0: DISABLED = Secure boot disabled value.
//        <1=> 1: ENABLED = Secure boot enabled value.
//        <2=> 2: ERROR = Error in secure boot configuration value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_BOOTLOADER_PROTLOCK  ----------------------------
// SVD Line: 36623

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_PROTLOCK
//    <name> PROTLOCK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x400201A0) \nFlash protection lock. Always resets to 1, write 1 to clear. Enables writes to flash protection register set.\n0 : Reserved - do not use\n1 : LOCK = Enable the secure boot lock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.2..2> PROTLOCK
//        <0=> 0: 
//        <1=> 1: LOCK = Enable the secure boot lock value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: MCUCTRL_BOOTLOADER_SBLOCK  -----------------------------
// SVD Line: 36636

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SBLOCK
//    <name> SBLOCK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x400201A0) \nSecure boot lock. Always resets to 1, write 1 to clear. Enables system visibility to bootloader until set.\n0 : Reserved - do not use\n1 : LOCK = Enable the secure boot lock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.1..1> SBLOCK
//        <0=> 0: 
//        <1=> 1: LOCK = Enable the secure boot lock value.
//    </combo>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_BOOTLOADER_BOOTLOADERLOW  --------------------------
// SVD Line: 36649

//  <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_BOOTLOADERLOW
//    <name> BOOTLOADERLOW </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400201A0) \nDetermines whether the bootloader code is visible at address 0x00000000 or not. Resets to 1, write 1 to clear.\n0 : Reserved - do not use\n1 : ADDR0 = Bootloader code at 0x00000000. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_BOOTLOADER ) </loc>
//      <o.0..0> BOOTLOADERLOW
//        <0=> 0: 
//        <1=> 1: ADDR0 = Bootloader code at 0x00000000. value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_BOOTLOADER  -------------------------------
// SVD Line: 36544

//  <rtree> SFDITEM_REG__MCUCTRL_BOOTLOADER
//    <name> BOOTLOADER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201A0) Bootloader and secure boot functions </i>
//    <loc> ( (unsigned int)((MCUCTRL_BOOTLOADER >> 0) & 0xFFFFFFFF), ((MCUCTRL_BOOTLOADER = (MCUCTRL_BOOTLOADER & ~(0xFC000007UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFC000007) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOTONRST </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOT </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SECBOOTFEATURE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_PROTLOCK </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_SBLOCK </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BOOTLOADER_BOOTLOADERLOW </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_SHADOWVALID  ---------------------------
// SVD Line: 36664

unsigned int MCUCTRL_SHADOWVALID __AT (0x400201A4);



// -----------------------  Field Item: MCUCTRL_SHADOWVALID_INFO0_VALID  --------------------------
// SVD Line: 36674

//  <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_INFO0_VALID
//    <name> INFO0_VALID </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x400201A4) \nIndicates whether info0 contains valid data\n0 : Reserved - do not use\n1 : VALID = Flash info0 (customer) space contains valid data. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_SHADOWVALID ) </loc>
//      <o.2..2> INFO0_VALID
//        <0=> 0: 
//        <1=> 1: VALID = Flash info0 (customer) space contains valid data. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_SHADOWVALID_BLDSLEEP  ----------------------------
// SVD Line: 36687

//  <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_BLDSLEEP
//    <name> BLDSLEEP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x400201A4) \nIndicates whether the bootloader should sleep or deep sleep if no image loaded.\n0 : Reserved - do not use\n1 : DEEPSLEEP = Bootloader will go to deep sleep if no flash image loaded value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_SHADOWVALID ) </loc>
//      <o.1..1> BLDSLEEP
//        <0=> 0: 
//        <1=> 1: DEEPSLEEP = Bootloader will go to deep sleep if no flash image loaded value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: MCUCTRL_SHADOWVALID_VALID  -----------------------------
// SVD Line: 36700

//  <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_VALID
//    <name> VALID </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400201A4) \nIndicates whether the shadow registers contain valid data from the Flash Information Space.\n0 : Reserved - do not use\n1 : VALID = Flash information space contains valid data. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_SHADOWVALID ) </loc>
//      <o.0..0> VALID
//        <0=> 0: 
//        <1=> 1: VALID = Flash information space contains valid data. value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_SHADOWVALID  ------------------------------
// SVD Line: 36664

//  <rtree> SFDITEM_REG__MCUCTRL_SHADOWVALID
//    <name> SHADOWVALID </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201A4) Register to indicate whether the shadow registers have been successfully loaded from the Flash Information Space. </i>
//    <loc> ( (unsigned int)((MCUCTRL_SHADOWVALID >> 0) & 0xFFFFFFFF), ((MCUCTRL_SHADOWVALID = (MCUCTRL_SHADOWVALID & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_INFO0_VALID </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_BLDSLEEP </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SHADOWVALID_VALID </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_SCRATCH0  ----------------------------
// SVD Line: 36715

unsigned int MCUCTRL_SCRATCH0 __AT (0x400201B0);



// --------------------------  Field Item: MCUCTRL_SCRATCH0_SCRATCH0  -----------------------------
// SVD Line: 36725

//  <item> SFDITEM_FIELD__MCUCTRL_SCRATCH0_SCRATCH0
//    <name> SCRATCH0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201B0) Scratch register 0. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_SCRATCH0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_SCRATCH0 = (MCUCTRL_SCRATCH0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_SCRATCH0  --------------------------------
// SVD Line: 36715

//  <rtree> SFDITEM_REG__MCUCTRL_SCRATCH0
//    <name> SCRATCH0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201B0) Scratch register that is not reset by any reset </i>
//    <loc> ( (unsigned int)((MCUCTRL_SCRATCH0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_SCRATCH0 = (MCUCTRL_SCRATCH0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SCRATCH0_SCRATCH0 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_SCRATCH1  ----------------------------
// SVD Line: 36734

unsigned int MCUCTRL_SCRATCH1 __AT (0x400201B4);



// --------------------------  Field Item: MCUCTRL_SCRATCH1_SCRATCH1  -----------------------------
// SVD Line: 36744

//  <item> SFDITEM_FIELD__MCUCTRL_SCRATCH1_SCRATCH1
//    <name> SCRATCH1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201B4) Scratch register 1. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_SCRATCH1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_SCRATCH1 = (MCUCTRL_SCRATCH1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_SCRATCH1  --------------------------------
// SVD Line: 36734

//  <rtree> SFDITEM_REG__MCUCTRL_SCRATCH1
//    <name> SCRATCH1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201B4) Scratch register that is not reset by any reset </i>
//    <loc> ( (unsigned int)((MCUCTRL_SCRATCH1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_SCRATCH1 = (MCUCTRL_SCRATCH1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SCRATCH1_SCRATCH1 </item>
//  </rtree>
//  


// ----------------------  Register Item Address: MCUCTRL_ICODEFAULTADDR  -------------------------
// SVD Line: 36753

unsigned int MCUCTRL_ICODEFAULTADDR __AT (0x400201C0);



// --------------------  Field Item: MCUCTRL_ICODEFAULTADDR_ICODEFAULTADDR  -----------------------
// SVD Line: 36763

//  <item> SFDITEM_FIELD__MCUCTRL_ICODEFAULTADDR_ICODEFAULTADDR
//    <name> ICODEFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C0) The ICODE bus address observed when a Bus Fault occurred. Once an address is captured in this field, it is held until the corresponding Fault Observed bit is cleared in the FAULTSTATUS register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_ICODEFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_ICODEFAULTADDR = (MCUCTRL_ICODEFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register RTree: MCUCTRL_ICODEFAULTADDR  -----------------------------
// SVD Line: 36753

//  <rtree> SFDITEM_REG__MCUCTRL_ICODEFAULTADDR
//    <name> ICODEFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C0) ICODE bus address which was present when a bus fault occurred. </i>
//    <loc> ( (unsigned int)((MCUCTRL_ICODEFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_ICODEFAULTADDR = (MCUCTRL_ICODEFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_ICODEFAULTADDR_ICODEFAULTADDR </item>
//  </rtree>
//  


// ----------------------  Register Item Address: MCUCTRL_DCODEFAULTADDR  -------------------------
// SVD Line: 36772

unsigned int MCUCTRL_DCODEFAULTADDR __AT (0x400201C4);



// --------------------  Field Item: MCUCTRL_DCODEFAULTADDR_DCODEFAULTADDR  -----------------------
// SVD Line: 36782

//  <item> SFDITEM_FIELD__MCUCTRL_DCODEFAULTADDR_DCODEFAULTADDR
//    <name> DCODEFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C4) The DCODE bus address observed when a Bus Fault occurred. Once an address is captured in this field, it is held until the corresponding Fault Observed bit is cleared in the FAULTSTATUS register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_DCODEFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_DCODEFAULTADDR = (MCUCTRL_DCODEFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register RTree: MCUCTRL_DCODEFAULTADDR  -----------------------------
// SVD Line: 36772

//  <rtree> SFDITEM_REG__MCUCTRL_DCODEFAULTADDR
//    <name> DCODEFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C4) DCODE bus address which was present when a bus fault occurred. </i>
//    <loc> ( (unsigned int)((MCUCTRL_DCODEFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_DCODEFAULTADDR = (MCUCTRL_DCODEFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DCODEFAULTADDR_DCODEFAULTADDR </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_SYSFAULTADDR  --------------------------
// SVD Line: 36791

unsigned int MCUCTRL_SYSFAULTADDR __AT (0x400201C8);



// ----------------------  Field Item: MCUCTRL_SYSFAULTADDR_SYSFAULTADDR  -------------------------
// SVD Line: 36801

//  <item> SFDITEM_FIELD__MCUCTRL_SYSFAULTADDR_SYSFAULTADDR
//    <name> SYSFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C8) SYS bus address observed when a Bus Fault occurred. Once an address is captured in this field, it is held until the corresponding Fault Observed bit is cleared in the FAULTSTATUS register. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_SYSFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_SYSFAULTADDR = (MCUCTRL_SYSFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: MCUCTRL_SYSFAULTADDR  ------------------------------
// SVD Line: 36791

//  <rtree> SFDITEM_REG__MCUCTRL_SYSFAULTADDR
//    <name> SYSFAULTADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201C8) System bus address which was present when a bus fault occurred. </i>
//    <loc> ( (unsigned int)((MCUCTRL_SYSFAULTADDR >> 0) & 0xFFFFFFFF), ((MCUCTRL_SYSFAULTADDR = (MCUCTRL_SYSFAULTADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SYSFAULTADDR_SYSFAULTADDR </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_FAULTSTATUS  ---------------------------
// SVD Line: 36810

unsigned int MCUCTRL_FAULTSTATUS __AT (0x400201CC);



// ------------------------  Field Item: MCUCTRL_FAULTSTATUS_SYSFAULT  ----------------------------
// SVD Line: 36820

//  <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_SYSFAULT
//    <name> SYSFAULT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x400201CC) \nSYS Bus Decoder Fault Detected bit. When set, a fault has been detected, and the SYSFAULTADDR register will contain the bus address which generated the fault.\n0 : NOFAULT = No bus fault has been detected. value.\n1 : FAULT = Bus fault detected. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FAULTSTATUS ) </loc>
//      <o.2..2> SYSFAULT
//        <0=> 0: NOFAULT = No bus fault has been detected. value.
//        <1=> 1: FAULT = Bus fault detected. value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_FAULTSTATUS_DCODEFAULT  ---------------------------
// SVD Line: 36838

//  <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_DCODEFAULT
//    <name> DCODEFAULT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x400201CC) \nDCODE Bus Decoder Fault Detected bit. When set, a fault has been detected, and the DCODEFAULTADDR register will contain the bus address which generated the fault.\n0 : NOFAULT = No DCODE fault has been detected. value.\n1 : FAULT = DCODE fault detected. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FAULTSTATUS ) </loc>
//      <o.1..1> DCODEFAULT
//        <0=> 0: NOFAULT = No DCODE fault has been detected. value.
//        <1=> 1: FAULT = DCODE fault detected. value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_FAULTSTATUS_ICODEFAULT  ---------------------------
// SVD Line: 36856

//  <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_ICODEFAULT
//    <name> ICODEFAULT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400201CC) \nThe ICODE Bus Decoder Fault Detected bit. When set, a fault has been detected, and the ICODEFAULTADDR register will contain the bus address which generated the fault.\n0 : NOFAULT = No ICODE fault has been detected. value.\n1 : FAULT = ICODE fault detected. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FAULTSTATUS ) </loc>
//      <o.0..0> ICODEFAULT
//        <0=> 0: NOFAULT = No ICODE fault has been detected. value.
//        <1=> 1: FAULT = ICODE fault detected. value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_FAULTSTATUS  ------------------------------
// SVD Line: 36810

//  <rtree> SFDITEM_REG__MCUCTRL_FAULTSTATUS
//    <name> FAULTSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201CC) Reflects the status of the bus decoders' fault detection. Any write to this register will clear all of the status bits within the register. </i>
//    <loc> ( (unsigned int)((MCUCTRL_FAULTSTATUS >> 0) & 0xFFFFFFFF), ((MCUCTRL_FAULTSTATUS = (MCUCTRL_FAULTSTATUS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_SYSFAULT </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_DCODEFAULT </item>
//    <item> SFDITEM_FIELD__MCUCTRL_FAULTSTATUS_ICODEFAULT </item>
//  </rtree>
//  


// ----------------------  Register Item Address: MCUCTRL_FAULTCAPTUREEN  -------------------------
// SVD Line: 36876

unsigned int MCUCTRL_FAULTCAPTUREEN __AT (0x400201D0);



// --------------------  Field Item: MCUCTRL_FAULTCAPTUREEN_FAULTCAPTUREEN  -----------------------
// SVD Line: 36886

//  <item> SFDITEM_FIELD__MCUCTRL_FAULTCAPTUREEN_FAULTCAPTUREEN
//    <name> FAULTCAPTUREEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400201D0) \nFault Capture Enable field. When set, the Fault Capture monitors are enabled and addresses which generate a hard fault are captured into the FAULTADDR registers.\n0 : DIS = Disable fault capture. value.\n1 : EN = Enable fault capture. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_FAULTCAPTUREEN ) </loc>
//      <o.0..0> FAULTCAPTUREEN
//        <0=> 0: DIS = Disable fault capture. value.
//        <1=> 1: EN = Enable fault capture. value.
//    </combo>
//  </item>
//  


// -------------------------  Register RTree: MCUCTRL_FAULTCAPTUREEN  -----------------------------
// SVD Line: 36876

//  <rtree> SFDITEM_REG__MCUCTRL_FAULTCAPTUREEN
//    <name> FAULTCAPTUREEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400201D0) Enable the fault capture registers </i>
//    <loc> ( (unsigned int)((MCUCTRL_FAULTCAPTUREEN >> 0) & 0xFFFFFFFF), ((MCUCTRL_FAULTCAPTUREEN = (MCUCTRL_FAULTCAPTUREEN & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FAULTCAPTUREEN_FAULTCAPTUREEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MCUCTRL_DBGR1  ------------------------------
// SVD Line: 36906

unsigned int MCUCTRL_DBGR1 __AT (0x40020200);



// ----------------------------  Field Item: MCUCTRL_DBGR1_ONETO8  --------------------------------
// SVD Line: 36916

//  <item> SFDITEM_FIELD__MCUCTRL_DBGR1_ONETO8
//    <name> ONETO8 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020200) Read-only register for communication validation </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_DBGR1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DBGR1 = (MCUCTRL_DBGR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MCUCTRL_DBGR1  ---------------------------------
// SVD Line: 36906

//  <rtree> SFDITEM_REG__MCUCTRL_DBGR1
//    <name> DBGR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020200) Read-only debug register 1 </i>
//    <loc> ( (unsigned int)((MCUCTRL_DBGR1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DBGR1 = (MCUCTRL_DBGR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DBGR1_ONETO8 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MCUCTRL_DBGR2  ------------------------------
// SVD Line: 36925

unsigned int MCUCTRL_DBGR2 __AT (0x40020204);



// ---------------------------  Field Item: MCUCTRL_DBGR2_COOLCODE  -------------------------------
// SVD Line: 36935

//  <item> SFDITEM_FIELD__MCUCTRL_DBGR2_COOLCODE
//    <name> COOLCODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020204) Read-only register for communication validation </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_DBGR2 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DBGR2 = (MCUCTRL_DBGR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MCUCTRL_DBGR2  ---------------------------------
// SVD Line: 36925

//  <rtree> SFDITEM_REG__MCUCTRL_DBGR2
//    <name> DBGR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020204) Read-only debug register 2 </i>
//    <loc> ( (unsigned int)((MCUCTRL_DBGR2 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DBGR2 = (MCUCTRL_DBGR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DBGR2_COOLCODE </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_PMUENABLE  ----------------------------
// SVD Line: 36944

unsigned int MCUCTRL_PMUENABLE __AT (0x40020220);



// --------------------------  Field Item: MCUCTRL_PMUENABLE_ENABLE  ------------------------------
// SVD Line: 36954

//  <item> SFDITEM_FIELD__MCUCTRL_PMUENABLE_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020220) \nPMU Enable Control bit. When set, the MCU's PMU will place the MCU into the lowest power consuming Deep Sleep mode upon execution of a WFI instruction (dependent on the setting of the SLEEPDEEP bit in the ARM SCR register). When cleared, regardless of the requested sleep mode, the PMU will not enter the lowest power Deep Sleep mode, instead entering the Sleep mode.\n0 : DIS = Disable MCU power management. value.\n1 : EN = Enable MCU power management. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_PMUENABLE ) </loc>
//      <o.0..0> ENABLE
//        <0=> 0: DIS = Disable MCU power management. value.
//        <1=> 1: EN = Enable MCU power management. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_PMUENABLE  -------------------------------
// SVD Line: 36944

//  <rtree> SFDITEM_REG__MCUCTRL_PMUENABLE
//    <name> PMUENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020220) Control bit to enable/disable the PMU </i>
//    <loc> ( (unsigned int)((MCUCTRL_PMUENABLE >> 0) & 0xFFFFFFFF), ((MCUCTRL_PMUENABLE = (MCUCTRL_PMUENABLE & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_PMUENABLE_ENABLE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_TPIUCTRL  ----------------------------
// SVD Line: 36974

unsigned int MCUCTRL_TPIUCTRL __AT (0x40020250);



// ---------------------------  Field Item: MCUCTRL_TPIUCTRL_CLKSEL  ------------------------------
// SVD Line: 36984

//  <item> SFDITEM_FIELD__MCUCTRL_TPIUCTRL_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40020250) \nThis field selects the frequency of the ARM M4 TPIU port.\n0 : LOWPWR = Low power state. value.\n1 : HFRCDIV2 = Selects HFRC divided by 2 as the source TPIU clk value.\n2 : HFRCDIV8 = Selects HFRC divided by 8 as the source TPIU clk value.\n3 : HFRCDIV16 = Selects HFRC divided by 16 as the source TPIU clk value.\n4 : HFRCDIV32 = Selects HFRC divided by 32 as the source TPIU clk value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_TPIUCTRL ) </loc>
//      <o.10..8> CLKSEL
//        <0=> 0: LOWPWR = Low power state. value.
//        <1=> 1: HFRCDIV2 = Selects HFRC divided by 2 as the source TPIU clk value.
//        <2=> 2: HFRCDIV8 = Selects HFRC divided by 8 as the source TPIU clk value.
//        <3=> 3: HFRCDIV16 = Selects HFRC divided by 16 as the source TPIU clk value.
//        <4=> 4: HFRCDIV32 = Selects HFRC divided by 32 as the source TPIU clk value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: MCUCTRL_TPIUCTRL_ENABLE  ------------------------------
// SVD Line: 37017

//  <item> SFDITEM_FIELD__MCUCTRL_TPIUCTRL_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020250) \nTPIU Enable field. When set, the ARM M4 TPIU is enabled and data can be streamed out of the MCU's SWO port using the ARM ITM and TPIU modules.\n0 : DIS = Disable the TPIU. value.\n1 : EN = Enable the TPIU. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_TPIUCTRL ) </loc>
//      <o.0..0> ENABLE
//        <0=> 0: DIS = Disable the TPIU. value.
//        <1=> 1: EN = Enable the TPIU. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_TPIUCTRL  --------------------------------
// SVD Line: 36974

//  <rtree> SFDITEM_REG__MCUCTRL_TPIUCTRL
//    <name> TPIUCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020250) TPIU Control Register. Determines the clock enable and frequency for the M4's TPIU interface. </i>
//    <loc> ( (unsigned int)((MCUCTRL_TPIUCTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_TPIUCTRL = (MCUCTRL_TPIUCTRL & ~(0x701UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x701) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_TPIUCTRL_CLKSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_TPIUCTRL_ENABLE </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_OTAPOINTER  ---------------------------
// SVD Line: 37037

unsigned int MCUCTRL_OTAPOINTER __AT (0x40020264);



// ------------------------  Field Item: MCUCTRL_OTAPOINTER_OTAPOINTER  ---------------------------
// SVD Line: 37047

//  <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTAPOINTER
//    <name> OTAPOINTER </name>
//    <rw> 
//    <i> [Bits 31..2] RW (@ 0x40020264) Flash page pointer with updated OTA image </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_OTAPOINTER >> 2) & 0x3FFFFFFF), ((MCUCTRL_OTAPOINTER = (MCUCTRL_OTAPOINTER & ~(0x3FFFFFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFFFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_OTAPOINTER_OTASBLUPDATE  --------------------------
// SVD Line: 37054

//  <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTASBLUPDATE
//    <name> OTASBLUPDATE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020264) Indicates that the sbl_init has been updated </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_OTAPOINTER ) </loc>
//      <o.1..1> OTASBLUPDATE
//    </check>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_OTAPOINTER_OTAVALID  ----------------------------
// SVD Line: 37061

//  <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTAVALID
//    <name> OTAVALID </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020264) Indicates that an OTA update is valid </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_OTAPOINTER ) </loc>
//      <o.0..0> OTAVALID
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_OTAPOINTER  -------------------------------
// SVD Line: 37037

//  <rtree> SFDITEM_REG__MCUCTRL_OTAPOINTER
//    <name> OTAPOINTER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020264) OTA (Over the Air) Update Pointer/Status. Reset only by POA </i>
//    <loc> ( (unsigned int)((MCUCTRL_OTAPOINTER >> 0) & 0xFFFFFFFF), ((MCUCTRL_OTAPOINTER = (MCUCTRL_OTAPOINTER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTAPOINTER </item>
//    <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTASBLUPDATE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_OTAPOINTER_OTAVALID </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_APBDMACTRL  ---------------------------
// SVD Line: 37070

unsigned int MCUCTRL_APBDMACTRL __AT (0x40020280);



// ------------------------  Field Item: MCUCTRL_APBDMACTRL_HYSTERESIS  ---------------------------
// SVD Line: 37080

//  <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_HYSTERESIS
//    <name> HYSTERESIS </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40020280) This field determines how long the DMA will remain active during deep sleep before shutting down and returning the system to full deep sleep. Values are based on a 94KHz clock and are roughly 10us increments for a range of ~10us to 2.55ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_APBDMACTRL >> 8) & 0xFF), ((MCUCTRL_APBDMACTRL = (MCUCTRL_APBDMACTRL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: MCUCTRL_APBDMACTRL_DECODEABORT  ---------------------------
// SVD Line: 37087

//  <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_DECODEABORT
//    <name> DECODEABORT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020280) \nAPB Decode Abort. When set, the APB bridge will issue a data abort (bus fault) on transactions to peripherals that are powered down. When set to 0, writes are quietly discarded and reads return 0.\n0 : DISABLE = Bus operations to powered down peripherals are quietly discarded value.\n1 : ENABLE = Bus operations to powered down peripherals result in a bus fault. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_APBDMACTRL ) </loc>
//      <o.1..1> DECODEABORT
//        <0=> 0: DISABLE = Bus operations to powered down peripherals are quietly discarded value.
//        <1=> 1: ENABLE = Bus operations to powered down peripherals result in a bus fault. value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: MCUCTRL_APBDMACTRL_DMA_ENABLE  ---------------------------
// SVD Line: 37105

//  <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_DMA_ENABLE
//    <name> DMA_ENABLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020280) \nEnable the DMA controller. When disabled, DMA requests will be ignored by the controller\n0 : DISABLE = DMA operations disabled value.\n1 : ENABLE = DMA operations enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MCUCTRL_APBDMACTRL ) </loc>
//      <o.0..0> DMA_ENABLE
//        <0=> 0: DISABLE = DMA operations disabled value.
//        <1=> 1: ENABLE = DMA operations enabled value.
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_APBDMACTRL  -------------------------------
// SVD Line: 37070

//  <rtree> SFDITEM_REG__MCUCTRL_APBDMACTRL
//    <name> APBDMACTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020280) DMA Control Register. Determines misc settings for DMA operation </i>
//    <loc> ( (unsigned int)((MCUCTRL_APBDMACTRL >> 0) & 0xFFFFFFFF), ((MCUCTRL_APBDMACTRL = (MCUCTRL_APBDMACTRL & ~(0xFF03UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF03) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_HYSTERESIS </item>
//    <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_DECODEABORT </item>
//    <item> SFDITEM_FIELD__MCUCTRL_APBDMACTRL_DMA_ENABLE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_SRAMMODE  ----------------------------
// SVD Line: 37125

unsigned int MCUCTRL_SRAMMODE __AT (0x40020284);



// ----------------------  Field Item: MCUCTRL_SRAMMODE_DPREFETCH_CACHE  --------------------------
// SVD Line: 37135

//  <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_DPREFETCH_CACHE
//    <name> DPREFETCH_CACHE </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40020284) Secondary prefetch feature that will cache prefetched data across bus waitstates (requires DPREFETCH to be set). </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SRAMMODE ) </loc>
//      <o.5..5> DPREFETCH_CACHE
//    </check>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_SRAMMODE_DPREFETCH  -----------------------------
// SVD Line: 37142

//  <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_DPREFETCH
//    <name> DPREFETCH </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40020284) When set, data bus accesses to the SRAM banks will be prefetched (normally 2 cycle read access). Use of this mode bit is only recommended if the work flow has a large number of sequential accesses. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SRAMMODE ) </loc>
//      <o.4..4> DPREFETCH
//    </check>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_SRAMMODE_IPREFETCH_CACHE  --------------------------
// SVD Line: 37149

//  <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_IPREFETCH_CACHE
//    <name> IPREFETCH_CACHE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40020284) Secondary prefetch feature that will cache prefetched data across bus waitstates (requires IPREFETCH to be set). </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SRAMMODE ) </loc>
//      <o.1..1> IPREFETCH_CACHE
//    </check>
//  </item>
//  


// -------------------------  Field Item: MCUCTRL_SRAMMODE_IPREFETCH  -----------------------------
// SVD Line: 37156

//  <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_IPREFETCH
//    <name> IPREFETCH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40020284) When set, instruction accesses to the SRAM banks will be prefetched (normally 2 cycle read access). Generally, this mode bit should be set for improved performance when executing instructions from SRAM. </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SRAMMODE ) </loc>
//      <o.0..0> IPREFETCH
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_SRAMMODE  --------------------------------
// SVD Line: 37125

//  <rtree> SFDITEM_REG__MCUCTRL_SRAMMODE
//    <name> SRAMMODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020284) SRAM Controller mode bits </i>
//    <loc> ( (unsigned int)((MCUCTRL_SRAMMODE >> 0) & 0xFFFFFFFF), ((MCUCTRL_SRAMMODE = (MCUCTRL_SRAMMODE & ~(0x33UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x33) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_DPREFETCH_CACHE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_DPREFETCH </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_IPREFETCH_CACHE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SRAMMODE_IPREFETCH </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_KEXTCLKSEL  ---------------------------
// SVD Line: 37165

unsigned int MCUCTRL_KEXTCLKSEL __AT (0x40020348);



// ------------------------  Field Item: MCUCTRL_KEXTCLKSEL_KEXTCLKSEL  ---------------------------
// SVD Line: 37175

//  <item> SFDITEM_FIELD__MCUCTRL_KEXTCLKSEL_KEXTCLKSEL
//    <name> KEXTCLKSEL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020348) Key register value. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_KEXTCLKSEL >> 0) & 0xFFFFFFFF), ((MCUCTRL_KEXTCLKSEL = (MCUCTRL_KEXTCLKSEL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_KEXTCLKSEL  -------------------------------
// SVD Line: 37165

//  <rtree> SFDITEM_REG__MCUCTRL_KEXTCLKSEL
//    <name> KEXTCLKSEL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020348) Key Register to enable the use of external clock selects via the EXTCLKSEL reg </i>
//    <loc> ( (unsigned int)((MCUCTRL_KEXTCLKSEL >> 0) & 0xFFFFFFFF), ((MCUCTRL_KEXTCLKSEL = (MCUCTRL_KEXTCLKSEL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_KEXTCLKSEL_KEXTCLKSEL </item>
//  </rtree>
//  


// ------------------------  Register Item Address: MCUCTRL_SIMOBUCK4  ----------------------------
// SVD Line: 37190

unsigned int MCUCTRL_SIMOBUCK4 __AT (0x4002035C);



// ---------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKIBIASTRIM  ------------------------
// SVD Line: 37200

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKIBIASTRIM
//    <name> SIMOBUCKIBIASTRIM </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4002035C) simobuck_bias_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 28) & 0xF), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOMODE  -------------------------
// SVD Line: 37207

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOMODE
//    <name> SIMOBUCKUVLOMODE </name>
//    <rw> 
//    <i> [Bits 27..26] RW (@ 0x4002035C) simobuck_uvlo_mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 26) & 0x3), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x3UL << 26 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 26 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKPRIORITYSEL  -----------------------
// SVD Line: 37214

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKPRIORITYSEL
//    <name> SIMOBUCKPRIORITYSEL </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4002035C) simobuck_priority_sel </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SIMOBUCK4 ) </loc>
//      <o.25..25> SIMOBUCKPRIORITYSEL
//    </check>
//  </item>
//  


// ------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2TIMEOUTEN  ----------------------
// SVD Line: 37221

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2TIMEOUTEN
//    <name> SIMOBUCKCOMP2TIMEOUTEN </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4002035C) simobuck_comp2_timeout_en </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SIMOBUCK4 ) </loc>
//      <o.24..24> SIMOBUCKCOMP2TIMEOUTEN
//    </check>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2LPEN  ------------------------
// SVD Line: 37228

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2LPEN
//    <name> SIMOBUCKCOMP2LPEN </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x4002035C) simobuck_comp2_lp_en </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SIMOBUCK4 ) </loc>
//      <o.23..23> SIMOBUCKCOMP2LPEN
//    </check>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKCLKDIVSEL  ------------------------
// SVD Line: 37235

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCLKDIVSEL
//    <name> SIMOBUCKCLKDIVSEL </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x4002035C) simobuck_clkdiv_sel </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 21) & 0x3), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x3UL << 21 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 21 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKEXTCLKSEL  ------------------------
// SVD Line: 37242

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKEXTCLKSEL
//    <name> SIMOBUCKEXTCLKSEL </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4002035C) simobuck_extclk_sel </i>
//    <check> 
//      <loc> ( (unsigned int) MCUCTRL_SIMOBUCK4 ) </loc>
//      <o.20..20> SIMOBUCKEXTCLKSEL
//    </check>
//  </item>
//  


// ------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKUVLODRVSTRTRIM  ----------------------
// SVD Line: 37249

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLODRVSTRTRIM
//    <name> SIMOBUCKUVLODRVSTRTRIM </name>
//    <rw> 
//    <i> [Bits 19..17] RW (@ 0x4002035C) simobuck_uvlo_drvstr_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 17) & 0x7), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x7UL << 17 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 17 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOCNTRTRIM  -----------------------
// SVD Line: 37256

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOCNTRTRIM
//    <name> SIMOBUCKUVLOCNTRTRIM </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x4002035C) simobuck_uvlo_cntr_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 14) & 0x7), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKZXTRIM  --------------------------
// SVD Line: 37263

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKZXTRIM
//    <name> SIMOBUCKZXTRIM </name>
//    <rw> 
//    <i> [Bits 13..10] RW (@ 0x4002035C) simobuck_zx_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 10) & 0xF), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0xFUL << 10 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 10 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLEAKAGETRIM  ----------------------
// SVD Line: 37270

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLEAKAGETRIM
//    <name> SIMOBUCKMEMLEAKAGETRIM </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x4002035C) simobuck_mem_leakage_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 8) & 0x3), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x3UL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPDRVSTRTRIM  ---------------------
// SVD Line: 37277

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPDRVSTRTRIM
//    <name> SIMOBUCKMEMLPDRVSTRTRIM </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x4002035C) simobuck_mem_lp_drvstr_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 6) & 0x3), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x3UL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKMEMACTDRVSTRTRIM  ---------------------
// SVD Line: 37284

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMACTDRVSTRTRIM
//    <name> SIMOBUCKMEMACTDRVSTRTRIM </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x4002035C) simobuck_mem_act_drvstr_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 4) & 0x3), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPLOWTONTRIM  ---------------------
// SVD Line: 37291

//  <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPLOWTONTRIM
//    <name> SIMOBUCKMEMLPLOWTONTRIM </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4002035C) simobuck_mem_lp_low_ton_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_SIMOBUCK4 >> 0) & 0xF), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_SIMOBUCK4  -------------------------------
// SVD Line: 37190

//  <rtree> SFDITEM_REG__MCUCTRL_SIMOBUCK4
//    <name> SIMOBUCK4 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002035C) SIMO Buck Control Reg1 </i>
//    <loc> ( (unsigned int)((MCUCTRL_SIMOBUCK4 >> 0) & 0xFFFFFFFF), ((MCUCTRL_SIMOBUCK4 = (MCUCTRL_SIMOBUCK4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKIBIASTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOMODE </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKPRIORITYSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2TIMEOUTEN </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCOMP2LPEN </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKCLKDIVSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKEXTCLKSEL </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLODRVSTRTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKUVLOCNTRTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKZXTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLEAKAGETRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPDRVSTRTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMACTDRVSTRTRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_SIMOBUCK4_SIMOBUCKMEMLPLOWTONTRIM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MCUCTRL_BLEBUCK2  ----------------------------
// SVD Line: 37300

unsigned int MCUCTRL_BLEBUCK2 __AT (0x40020368);



// ---------------------  Field Item: MCUCTRL_BLEBUCK2_BLEBUCKTOND2ATRIM  -------------------------
// SVD Line: 37310

//  <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTOND2ATRIM
//    <name> BLEBUCKTOND2ATRIM </name>
//    <rw> 
//    <i> [Bits 17..12] RW (@ 0x40020368) blebuck_ton_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_BLEBUCK2 >> 12) & 0x3F), ((MCUCTRL_BLEBUCK2 = (MCUCTRL_BLEBUCK2 & ~(0x3FUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: MCUCTRL_BLEBUCK2_BLEBUCKTONHITRIM  -------------------------
// SVD Line: 37317

//  <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTONHITRIM
//    <name> BLEBUCKTONHITRIM </name>
//    <rw> 
//    <i> [Bits 11..6] RW (@ 0x40020368) blebuck_ton_hi_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_BLEBUCK2 >> 6) & 0x3F), ((MCUCTRL_BLEBUCK2 = (MCUCTRL_BLEBUCK2 & ~(0x3FUL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Field Item: MCUCTRL_BLEBUCK2_BLEBUCKTONLOWTRIM  -------------------------
// SVD Line: 37324

//  <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTONLOWTRIM
//    <name> BLEBUCKTONLOWTRIM </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40020368) blebuck_ton_low_trim </i>
//    <edit> 
//      <loc> ( (unsigned char)((MCUCTRL_BLEBUCK2 >> 0) & 0x3F), ((MCUCTRL_BLEBUCK2 = (MCUCTRL_BLEBUCK2 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MCUCTRL_BLEBUCK2  --------------------------------
// SVD Line: 37300

//  <rtree> SFDITEM_REG__MCUCTRL_BLEBUCK2
//    <name> BLEBUCK2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40020368) BLEBUCK2 Control Reg </i>
//    <loc> ( (unsigned int)((MCUCTRL_BLEBUCK2 >> 0) & 0xFFFFFFFF), ((MCUCTRL_BLEBUCK2 = (MCUCTRL_BLEBUCK2 & ~(0x3FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTOND2ATRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTONHITRIM </item>
//    <item> SFDITEM_FIELD__MCUCTRL_BLEBUCK2_BLEBUCKTONLOWTRIM </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_FLASHWPROT0  ---------------------------
// SVD Line: 37333

unsigned int MCUCTRL_FLASHWPROT0 __AT (0x400203A0);



// -------------------------  Field Item: MCUCTRL_FLASHWPROT0_FW0BITS  ----------------------------
// SVD Line: 37343

//  <item> SFDITEM_FIELD__MCUCTRL_FLASHWPROT0_FW0BITS
//    <name> FW0BITS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203A0) Write protect flash 0x00000000 - 0x0007FFFF. Each bit provides write protection for 16KB chunks of flash data space. Bits are cleared by writing a 1 to the bit. When read, 0 indicates the region is protected. Bits are sticky (can be set when PROTLOCK is 1, but only cleared by reset) </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_FLASHWPROT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHWPROT0 = (MCUCTRL_FLASHWPROT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_FLASHWPROT0  ------------------------------
// SVD Line: 37333

//  <rtree> SFDITEM_REG__MCUCTRL_FLASHWPROT0
//    <name> FLASHWPROT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203A0) Flash Write Protection Bits </i>
//    <loc> ( (unsigned int)((MCUCTRL_FLASHWPROT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHWPROT0 = (MCUCTRL_FLASHWPROT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FLASHWPROT0_FW0BITS </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_FLASHWPROT1  ---------------------------
// SVD Line: 37352

unsigned int MCUCTRL_FLASHWPROT1 __AT (0x400203A4);



// -------------------------  Field Item: MCUCTRL_FLASHWPROT1_FW1BITS  ----------------------------
// SVD Line: 37362

//  <item> SFDITEM_FIELD__MCUCTRL_FLASHWPROT1_FW1BITS
//    <name> FW1BITS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203A4) Write protect flash 0x00080000 - 0x000FFFFF. Each bit provides write protection for 16KB chunks of flash data space. Bits are cleared by writing a 1 to the bit. When read, 0 indicates the region is protected. Bits are sticky (can be set when PROTLOCK is 1, but only cleared by reset) </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_FLASHWPROT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHWPROT1 = (MCUCTRL_FLASHWPROT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_FLASHWPROT1  ------------------------------
// SVD Line: 37352

//  <rtree> SFDITEM_REG__MCUCTRL_FLASHWPROT1
//    <name> FLASHWPROT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203A4) Flash Write Protection Bits </i>
//    <loc> ( (unsigned int)((MCUCTRL_FLASHWPROT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHWPROT1 = (MCUCTRL_FLASHWPROT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FLASHWPROT1_FW1BITS </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_FLASHRPROT0  ---------------------------
// SVD Line: 37371

unsigned int MCUCTRL_FLASHRPROT0 __AT (0x400203B0);



// -------------------------  Field Item: MCUCTRL_FLASHRPROT0_FR0BITS  ----------------------------
// SVD Line: 37381

//  <item> SFDITEM_FIELD__MCUCTRL_FLASHRPROT0_FR0BITS
//    <name> FR0BITS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203B0) Copy (read) protect flash 0x00000000 - 0x0007FFFF. Each bit provides read protection for 16KB chunks of flash. Bits are cleared by writing a 1 to the bit. When read, 0 indicates the region is protected. Bits are sticky (can be set when PROTLOCK is 1, but only cleared by reset) </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_FLASHRPROT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHRPROT0 = (MCUCTRL_FLASHRPROT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_FLASHRPROT0  ------------------------------
// SVD Line: 37371

//  <rtree> SFDITEM_REG__MCUCTRL_FLASHRPROT0
//    <name> FLASHRPROT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203B0) Flash Read Protection Bits </i>
//    <loc> ( (unsigned int)((MCUCTRL_FLASHRPROT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHRPROT0 = (MCUCTRL_FLASHRPROT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FLASHRPROT0_FR0BITS </item>
//  </rtree>
//  


// -----------------------  Register Item Address: MCUCTRL_FLASHRPROT1  ---------------------------
// SVD Line: 37390

unsigned int MCUCTRL_FLASHRPROT1 __AT (0x400203B4);



// -------------------------  Field Item: MCUCTRL_FLASHRPROT1_FR1BITS  ----------------------------
// SVD Line: 37400

//  <item> SFDITEM_FIELD__MCUCTRL_FLASHRPROT1_FR1BITS
//    <name> FR1BITS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203B4) Copy (read) protect flash 0x00080000 - 0x000FFFFF. Each bit provides read protection for 16KB chunks of flash. Bits are cleared by writing a 1 to the bit. When read, 0 indicates the region is protected. Bits are sticky (can be set when PROTLOCK is 1, but only cleared by reset) </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_FLASHRPROT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHRPROT1 = (MCUCTRL_FLASHRPROT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: MCUCTRL_FLASHRPROT1  ------------------------------
// SVD Line: 37390

//  <rtree> SFDITEM_REG__MCUCTRL_FLASHRPROT1
//    <name> FLASHRPROT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203B4) Flash Read Protection Bits </i>
//    <loc> ( (unsigned int)((MCUCTRL_FLASHRPROT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_FLASHRPROT1 = (MCUCTRL_FLASHRPROT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_FLASHRPROT1_FR1BITS </item>
//  </rtree>
//  


// -------------------  Register Item Address: MCUCTRL_DMASRAMWRITEPROTECT0  ----------------------
// SVD Line: 37409

unsigned int MCUCTRL_DMASRAMWRITEPROTECT0 __AT (0x400203C0);



// -------------------  Field Item: MCUCTRL_DMASRAMWRITEPROTECT0_DMA_WPROT0  ----------------------
// SVD Line: 37419

//  <item> SFDITEM_FIELD__MCUCTRL_DMASRAMWRITEPROTECT0_DMA_WPROT0
//    <name> DMA_WPROT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203C0) Write protect SRAM from DMA. Each bit provides write protection for an 8KB region of memory. When set to 1, the region will be protected from DMA writes, when set to 0, DMA may write the region. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_DMASRAMWRITEPROTECT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMWRITEPROTECT0 = (MCUCTRL_DMASRAMWRITEPROTECT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register RTree: MCUCTRL_DMASRAMWRITEPROTECT0  --------------------------
// SVD Line: 37409

//  <rtree> SFDITEM_REG__MCUCTRL_DMASRAMWRITEPROTECT0
//    <name> DMASRAMWRITEPROTECT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203C0) SRAM write-protection bits. </i>
//    <loc> ( (unsigned int)((MCUCTRL_DMASRAMWRITEPROTECT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMWRITEPROTECT0 = (MCUCTRL_DMASRAMWRITEPROTECT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DMASRAMWRITEPROTECT0_DMA_WPROT0 </item>
//  </rtree>
//  


// -------------------  Register Item Address: MCUCTRL_DMASRAMWRITEPROTECT1  ----------------------
// SVD Line: 37428

unsigned int MCUCTRL_DMASRAMWRITEPROTECT1 __AT (0x400203C4);



// -------------------  Field Item: MCUCTRL_DMASRAMWRITEPROTECT1_DMA_WPROT1  ----------------------
// SVD Line: 37438

//  <item> SFDITEM_FIELD__MCUCTRL_DMASRAMWRITEPROTECT1_DMA_WPROT1
//    <name> DMA_WPROT1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400203C4) Write protect SRAM from DMA. Each bit provides write protection for an 8KB region of memory. When set to 1, the region will be protected from DMA writes, when set to 0, DMA may write the region. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MCUCTRL_DMASRAMWRITEPROTECT1 >> 0) & 0xFFFF), ((MCUCTRL_DMASRAMWRITEPROTECT1 = (MCUCTRL_DMASRAMWRITEPROTECT1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register RTree: MCUCTRL_DMASRAMWRITEPROTECT1  --------------------------
// SVD Line: 37428

//  <rtree> SFDITEM_REG__MCUCTRL_DMASRAMWRITEPROTECT1
//    <name> DMASRAMWRITEPROTECT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203C4) SRAM write-protection bits. </i>
//    <loc> ( (unsigned int)((MCUCTRL_DMASRAMWRITEPROTECT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMWRITEPROTECT1 = (MCUCTRL_DMASRAMWRITEPROTECT1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DMASRAMWRITEPROTECT1_DMA_WPROT1 </item>
//  </rtree>
//  


// -------------------  Register Item Address: MCUCTRL_DMASRAMREADPROTECT0  -----------------------
// SVD Line: 37447

unsigned int MCUCTRL_DMASRAMREADPROTECT0 __AT (0x400203D0);



// -------------------  Field Item: MCUCTRL_DMASRAMREADPROTECT0_DMA_RPROT0  -----------------------
// SVD Line: 37457

//  <item> SFDITEM_FIELD__MCUCTRL_DMASRAMREADPROTECT0_DMA_RPROT0
//    <name> DMA_RPROT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203D0) Read protect SRAM from DMA. Each bit provides write protection for an 8KB region of memory. When set to 1, the region will be protected from DMA reads, when set to 0, DMA may read the region. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MCUCTRL_DMASRAMREADPROTECT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMREADPROTECT0 = (MCUCTRL_DMASRAMREADPROTECT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register RTree: MCUCTRL_DMASRAMREADPROTECT0  --------------------------
// SVD Line: 37447

//  <rtree> SFDITEM_REG__MCUCTRL_DMASRAMREADPROTECT0
//    <name> DMASRAMREADPROTECT0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203D0) SRAM read-protection bits. </i>
//    <loc> ( (unsigned int)((MCUCTRL_DMASRAMREADPROTECT0 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMREADPROTECT0 = (MCUCTRL_DMASRAMREADPROTECT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DMASRAMREADPROTECT0_DMA_RPROT0 </item>
//  </rtree>
//  


// -------------------  Register Item Address: MCUCTRL_DMASRAMREADPROTECT1  -----------------------
// SVD Line: 37466

unsigned int MCUCTRL_DMASRAMREADPROTECT1 __AT (0x400203D4);



// -------------------  Field Item: MCUCTRL_DMASRAMREADPROTECT1_DMA_RPROT1  -----------------------
// SVD Line: 37476

//  <item> SFDITEM_FIELD__MCUCTRL_DMASRAMREADPROTECT1_DMA_RPROT1
//    <name> DMA_RPROT1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400203D4) Read protect SRAM from DMA. Each bit provides write protection for an 8KB region of memory. When set to 1, the region will be protected from DMA reads, when set to 0, DMA may read the region. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MCUCTRL_DMASRAMREADPROTECT1 >> 0) & 0xFFFF), ((MCUCTRL_DMASRAMREADPROTECT1 = (MCUCTRL_DMASRAMREADPROTECT1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register RTree: MCUCTRL_DMASRAMREADPROTECT1  --------------------------
// SVD Line: 37466

//  <rtree> SFDITEM_REG__MCUCTRL_DMASRAMREADPROTECT1
//    <name> DMASRAMREADPROTECT1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400203D4) SRAM read-protection bits. </i>
//    <loc> ( (unsigned int)((MCUCTRL_DMASRAMREADPROTECT1 >> 0) & 0xFFFFFFFF), ((MCUCTRL_DMASRAMREADPROTECT1 = (MCUCTRL_DMASRAMREADPROTECT1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MCUCTRL_DMASRAMREADPROTECT1_DMA_RPROT1 </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: MCUCTRL  ------------------------------------
// SVD Line: 35676

//  <view> MCUCTRL
//    <name> MCUCTRL </name>
//    <item> SFDITEM_REG__MCUCTRL_CHIPPN </item>
//    <item> SFDITEM_REG__MCUCTRL_CHIPID0 </item>
//    <item> SFDITEM_REG__MCUCTRL_CHIPID1 </item>
//    <item> SFDITEM_REG__MCUCTRL_CHIPREV </item>
//    <item> SFDITEM_REG__MCUCTRL_VENDORID </item>
//    <item> SFDITEM_REG__MCUCTRL_SKU </item>
//    <item> SFDITEM_REG__MCUCTRL_FEATUREENABLE </item>
//    <item> SFDITEM_REG__MCUCTRL_DEBUGGER </item>
//    <item> SFDITEM_REG__MCUCTRL_BODCTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_ADCPWRDLY </item>
//    <item> SFDITEM_REG__MCUCTRL_ADCCAL </item>
//    <item> SFDITEM_REG__MCUCTRL_ADCBATTLOAD </item>
//    <item> SFDITEM_REG__MCUCTRL_ADCTRIM </item>
//    <item> SFDITEM_REG__MCUCTRL_ADCREFCOMP </item>
//    <item> SFDITEM_REG__MCUCTRL_XTALCTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_XTALGENCTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_MISCCTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_BOOTLOADER </item>
//    <item> SFDITEM_REG__MCUCTRL_SHADOWVALID </item>
//    <item> SFDITEM_REG__MCUCTRL_SCRATCH0 </item>
//    <item> SFDITEM_REG__MCUCTRL_SCRATCH1 </item>
//    <item> SFDITEM_REG__MCUCTRL_ICODEFAULTADDR </item>
//    <item> SFDITEM_REG__MCUCTRL_DCODEFAULTADDR </item>
//    <item> SFDITEM_REG__MCUCTRL_SYSFAULTADDR </item>
//    <item> SFDITEM_REG__MCUCTRL_FAULTSTATUS </item>
//    <item> SFDITEM_REG__MCUCTRL_FAULTCAPTUREEN </item>
//    <item> SFDITEM_REG__MCUCTRL_DBGR1 </item>
//    <item> SFDITEM_REG__MCUCTRL_DBGR2 </item>
//    <item> SFDITEM_REG__MCUCTRL_PMUENABLE </item>
//    <item> SFDITEM_REG__MCUCTRL_TPIUCTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_OTAPOINTER </item>
//    <item> SFDITEM_REG__MCUCTRL_APBDMACTRL </item>
//    <item> SFDITEM_REG__MCUCTRL_SRAMMODE </item>
//    <item> SFDITEM_REG__MCUCTRL_KEXTCLKSEL </item>
//    <item> SFDITEM_REG__MCUCTRL_SIMOBUCK4 </item>
//    <item> SFDITEM_REG__MCUCTRL_BLEBUCK2 </item>
//    <item> SFDITEM_REG__MCUCTRL_FLASHWPROT0 </item>
//    <item> SFDITEM_REG__MCUCTRL_FLASHWPROT1 </item>
//    <item> SFDITEM_REG__MCUCTRL_FLASHRPROT0 </item>
//    <item> SFDITEM_REG__MCUCTRL_FLASHRPROT1 </item>
//    <item> SFDITEM_REG__MCUCTRL_DMASRAMWRITEPROTECT0 </item>
//    <item> SFDITEM_REG__MCUCTRL_DMASRAMWRITEPROTECT1 </item>
//    <item> SFDITEM_REG__MCUCTRL_DMASRAMREADPROTECT0 </item>
//    <item> SFDITEM_REG__MCUCTRL_DMASRAMREADPROTECT1 </item>
//  </view>
//  


// ----------------------------  Register Item Address: MSPI_CTRL  --------------------------------
// SVD Line: 37507

unsigned int MSPI_CTRL __AT (0x50014000);



// -----------------------------  Field Item: MSPI_CTRL_XFERBYTES  --------------------------------
// SVD Line: 37517

//  <item> SFDITEM_FIELD__MSPI_CTRL_XFERBYTES
//    <name> XFERBYTES </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x50014000) Number of bytes to transmit or receive (based on TXRX bit) </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_CTRL >> 16) & 0xFFFF), ((MSPI_CTRL = (MSPI_CTRL & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: MSPI_CTRL_PIOSCRAMBLE  -------------------------------
// SVD Line: 37524

//  <item> SFDITEM_FIELD__MSPI_CTRL_PIOSCRAMBLE
//    <name> PIOSCRAMBLE </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50014000) Enables data scrambling for PIO opertions. This should only be used for data operations and never for commands to a device. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.11..11> PIOSCRAMBLE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_TXRX  -----------------------------------
// SVD Line: 37531

//  <item> SFDITEM_FIELD__MSPI_CTRL_TXRX
//    <name> TXRX </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50014000) 1 Indicates a TX operation, 0 indicates an RX operation of XFERBYTES </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.10..10> TXRX
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_SENDI  ----------------------------------
// SVD Line: 37538

//  <item> SFDITEM_FIELD__MSPI_CTRL_SENDI
//    <name> SENDI </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50014000) Indicates whether an instruction phase should be sent (see INSTR field and ISIZE field in CFG register) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.9..9> SENDI
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_SENDA  ----------------------------------
// SVD Line: 37545

//  <item> SFDITEM_FIELD__MSPI_CTRL_SENDA
//    <name> SENDA </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50014000) Indicates whether an address phase should be sent (see ADDR register and ASIZE field in CFG register) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.8..8> SENDA
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CTRL_ENTURN  ----------------------------------
// SVD Line: 37552

//  <item> SFDITEM_FIELD__MSPI_CTRL_ENTURN
//    <name> ENTURN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50014000) Indicates whether TX->RX turnaround cycles should be enabled for this operation (see TURNAROUND field in CFG register). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.7..7> ENTURN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_CTRL_BIGENDIAN  --------------------------------
// SVD Line: 37559

//  <item> SFDITEM_FIELD__MSPI_CTRL_BIGENDIAN
//    <name> BIGENDIAN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50014000) 1 indicates data in FIFO is in big endian format (MSB first); 0 indicates little endian data (default, LSB first). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.6..6> BIGENDIAN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_CONT  -----------------------------------
// SVD Line: 37566

//  <item> SFDITEM_FIELD__MSPI_CTRL_CONT
//    <name> CONT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50014000) Continuation transfer. When 1, indicates that the MSPI will hold CE low after the transaction completes. This is included for compatibility with IOM module since the MSPI transfer module can handle most cases in a single transfer. NOTE: CONT functionality only works with CLKDIV=2 (24 MHz). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.5..5> CONT
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CTRL_QUADCMD  ---------------------------------
// SVD Line: 37573

//  <item> SFDITEM_FIELD__MSPI_CTRL_QUADCMD
//    <name> QUADCMD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014000) Flag indicating that the operation is a command that should be replicated to both devices in paired QUAD mode. This is typically only used when reading/writing configuration registers in paired flash devices (do not set for memory transfers). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.3..3> QUADCMD
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_BUSY  -----------------------------------
// SVD Line: 37580

//  <item> SFDITEM_FIELD__MSPI_CTRL_BUSY
//    <name> BUSY </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014000) Command status: 1 indicates controller is busy (command in progress) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.2..2> BUSY
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CTRL_STATUS  ----------------------------------
// SVD Line: 37587

//  <item> SFDITEM_FIELD__MSPI_CTRL_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014000) Command status: 1 indicates command has completed. Cleared by writing 1 to this bit or starting a new transfer. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.1..1> STATUS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CTRL_START  ----------------------------------
// SVD Line: 37594

//  <item> SFDITEM_FIELD__MSPI_CTRL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014000) Write to 1 to initiate a PIO transaction on the bus (typically the entire register should be written at once with this bit set). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CTRL ) </loc>
//      <o.0..0> START
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: MSPI_CTRL  -----------------------------------
// SVD Line: 37507

//  <rtree> SFDITEM_REG__MSPI_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014000) MSPI PIO Transfer Control/Status Register </i>
//    <loc> ( (unsigned int)((MSPI_CTRL >> 0) & 0xFFFFFFFF), ((MSPI_CTRL = (MSPI_CTRL & ~(0xFFFF0FEFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF0FEF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CTRL_XFERBYTES </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_PIOSCRAMBLE </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_TXRX </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_SENDI </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_SENDA </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_ENTURN </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_BIGENDIAN </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_CONT </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_QUADCMD </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_BUSY </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_STATUS </item>
//    <item> SFDITEM_FIELD__MSPI_CTRL_START </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: MSPI_CFG  --------------------------------
// SVD Line: 37603

unsigned int MSPI_CFG __AT (0x50014004);



// --------------------------------  Field Item: MSPI_CFG_CPOL  -----------------------------------
// SVD Line: 37613

//  <item> SFDITEM_FIELD__MSPI_CFG_CPOL
//    <name> CPOL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50014004) \nSerial clock polarity.\n0 : LOW = Clock inactive state is low. value.\n1 : HIGH = Clock inactive state is high. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_CFG ) </loc>
//      <o.17..17> CPOL
//        <0=> 0: LOW = Clock inactive state is low. value.
//        <1=> 1: HIGH = Clock inactive state is high. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: MSPI_CFG_CPHA  -----------------------------------
// SVD Line: 37631

//  <item> SFDITEM_FIELD__MSPI_CFG_CPHA
//    <name> CPHA </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50014004) \nSerial clock phase.\n0 : MIDDLE = Clock toggles in middle of data bit. value.\n1 : START = Clock toggles at start of data bit. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_CFG ) </loc>
//      <o.16..16> CPHA
//        <0=> 0: MIDDLE = Clock toggles in middle of data bit. value.
//        <1=> 1: START = Clock toggles at start of data bit. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_CFG_TURNAROUND  --------------------------------
// SVD Line: 37649

//  <item> SFDITEM_FIELD__MSPI_CFG_TURNAROUND
//    <name> TURNAROUND </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50014004) Number of turnaound cycles (for TX->RX transitions). Qualified by ENTURN or XIPENTURN bit field. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CFG >> 8) & 0x3F), ((MSPI_CFG = (MSPI_CFG & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CFG_SEPIO  -----------------------------------
// SVD Line: 37656

//  <item> SFDITEM_FIELD__MSPI_CFG_SEPIO
//    <name> SEPIO </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50014004) Separate IO configuration. This bit should be set when the target device has separate MOSI and MISO pins. Respective IN/OUT bits below should be set to map pins. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CFG ) </loc>
//      <o.7..7> SEPIO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CFG_ISIZE  -----------------------------------
// SVD Line: 37663

//  <item> SFDITEM_FIELD__MSPI_CFG_ISIZE
//    <name> ISIZE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50014004) Instruction Size enum  name = I8  value = 0x0  desc = Instruction is 1 byte enum  name = I16  value = 0x1  desc = Instruction is 2 bytes </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CFG ) </loc>
//      <o.6..6> ISIZE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CFG_ASIZE  -----------------------------------
// SVD Line: 37678

//  <item> SFDITEM_FIELD__MSPI_CFG_ASIZE
//    <name> ASIZE </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x50014004) Address Size. Address bytes to send from ADDR register  name = A1  value = 0x0  desc = Send one address byte enum  name = A2  value = 0x1  desc = Send two address bytes enum  name = A3  value = 0x2  desc = Send three address bytes enum  name = A4  value = 0x3  desc = Send four address bytes </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CFG >> 4) & 0x3), ((MSPI_CFG = (MSPI_CFG & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CFG_DEVCFG  ----------------------------------
// SVD Line: 37700

//  <item> SFDITEM_FIELD__MSPI_CFG_DEVCFG
//    <name> DEVCFG </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50014004) \nFlash configuration for XIP and AUTO DMA operations. Controls value for SER (Slave Enable) for XIP operations and address generation for DMA/XIP modes. Also used to configure SPIFRF (frame format).\n0 : Reserved - do not use\n1 : SERIAL0 = Single bit SPI flash on chip select 0 value.\n2 : SERIAL1 = Single bit SPI flash on chip select 1 value.\n3 : QUADPAIRED_SERIAL = Dual Quad SPI flash on chip selects 0/1, but transmit in serial mode for initialization operations value.\n4 : Reserved - do not use\n5 : DUAL0 = Dual SPI flash on chip select 0 value.\n6 : DUAL1 = Dual bit SPI flash on chip select 1 value.\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : QUAD0 = Quad SPI flash on chip select 0 value.\n10 : QUAD1 = Quad SPI flash on chip select 1 value.\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : OCTAL0 = Octal SPI flash on chip select 0 value.\n14 : OCTAL1 = Octal SPI flash on chip select 1 value.\n15 : QUADPAIRED = Dual Quad SPI flash on chip selects 0/1. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_CFG ) </loc>
//      <o.3..0> DEVCFG
//        <0=> 0: 
//        <1=> 1: SERIAL0 = Single bit SPI flash on chip select 0 value.
//        <2=> 2: SERIAL1 = Single bit SPI flash on chip select 1 value.
//        <3=> 3: QUADPAIRED_SERIAL = Dual Quad SPI flash on chip selects 0/1, but transmit in serial mode for initialization operations value.
//        <4=> 4: 
//        <5=> 5: DUAL0 = Dual SPI flash on chip select 0 value.
//        <6=> 6: DUAL1 = Dual bit SPI flash on chip select 1 value.
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: QUAD0 = Quad SPI flash on chip select 0 value.
//        <10=> 10: QUAD1 = Quad SPI flash on chip select 1 value.
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: OCTAL0 = Octal SPI flash on chip select 0 value.
//        <14=> 14: OCTAL1 = Octal SPI flash on chip select 1 value.
//        <15=> 15: QUADPAIRED = Dual Quad SPI flash on chip selects 0/1. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: MSPI_CFG  ------------------------------------
// SVD Line: 37603

//  <rtree> SFDITEM_REG__MSPI_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014004) MSPI Transfer Configuration Register </i>
//    <loc> ( (unsigned int)((MSPI_CFG >> 0) & 0xFFFFFFFF), ((MSPI_CFG = (MSPI_CFG & ~(0x33FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x33FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CFG_CPOL </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_CPHA </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_TURNAROUND </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_SEPIO </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_ISIZE </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_ASIZE </item>
//    <item> SFDITEM_FIELD__MSPI_CFG_DEVCFG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: MSPI_ADDR  --------------------------------
// SVD Line: 37760

unsigned int MSPI_ADDR __AT (0x50014008);



// -------------------------------  Field Item: MSPI_ADDR_ADDR  -----------------------------------
// SVD Line: 37770

//  <item> SFDITEM_FIELD__MSPI_ADDR_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014008) Optional Address field to send (after optional instruction field) - qualified by ASIZE in CMD register. NOTE: This register is aliased to DMADEVADDR. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_ADDR >> 0) & 0xFFFFFFFF), ((MSPI_ADDR = (MSPI_ADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: MSPI_ADDR  -----------------------------------
// SVD Line: 37760

//  <rtree> SFDITEM_REG__MSPI_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014008) MSPI Transfer Address Register </i>
//    <loc> ( (unsigned int)((MSPI_ADDR >> 0) & 0xFFFFFFFF), ((MSPI_ADDR = (MSPI_ADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_ADDR_ADDR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: MSPI_INSTR  -------------------------------
// SVD Line: 37779

unsigned int MSPI_INSTR __AT (0x5001400C);



// ------------------------------  Field Item: MSPI_INSTR_INSTR  ----------------------------------
// SVD Line: 37789

//  <item> SFDITEM_FIELD__MSPI_INSTR_INSTR
//    <name> INSTR </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x5001400C) Optional Instruction field to send (1st byte) - qualified by ISEND/ISIZE </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_INSTR >> 0) & 0xFFFF), ((MSPI_INSTR = (MSPI_INSTR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_INSTR  -----------------------------------
// SVD Line: 37779

//  <rtree> SFDITEM_REG__MSPI_INSTR
//    <name> INSTR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001400C) MSPI Transfer Instruction </i>
//    <loc> ( (unsigned int)((MSPI_INSTR >> 0) & 0xFFFFFFFF), ((MSPI_INSTR = (MSPI_INSTR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_INSTR_INSTR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_TXFIFO  -------------------------------
// SVD Line: 37798

unsigned int MSPI_TXFIFO __AT (0x50014010);



// -----------------------------  Field Item: MSPI_TXFIFO_TXFIFO  ---------------------------------
// SVD Line: 37808

//  <item> SFDITEM_FIELD__MSPI_TXFIFO_TXFIFO
//    <name> TXFIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014010) Data to be transmitted. Data should normall be aligned to the LSB (pad the upper bits with zeros) unless BIGENDIAN is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_TXFIFO >> 0) & 0xFFFFFFFF), ((MSPI_TXFIFO = (MSPI_TXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_TXFIFO  ----------------------------------
// SVD Line: 37798

//  <rtree> SFDITEM_REG__MSPI_TXFIFO
//    <name> TXFIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014010) TX Data FIFO </i>
//    <loc> ( (unsigned int)((MSPI_TXFIFO >> 0) & 0xFFFFFFFF), ((MSPI_TXFIFO = (MSPI_TXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_TXFIFO_TXFIFO </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_RXFIFO  -------------------------------
// SVD Line: 37817

unsigned int MSPI_RXFIFO __AT (0x50014014);



// -----------------------------  Field Item: MSPI_RXFIFO_RXFIFO  ---------------------------------
// SVD Line: 37827

//  <item> SFDITEM_FIELD__MSPI_RXFIFO_RXFIFO
//    <name> RXFIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014014) Receive data. Data is aligned to the LSB (padded zeros on upper bits) unless BIGENDIAN is set. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_RXFIFO >> 0) & 0xFFFFFFFF), ((MSPI_RXFIFO = (MSPI_RXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_RXFIFO  ----------------------------------
// SVD Line: 37817

//  <rtree> SFDITEM_REG__MSPI_RXFIFO
//    <name> RXFIFO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014014) RX Data FIFO </i>
//    <loc> ( (unsigned int)((MSPI_RXFIFO >> 0) & 0xFFFFFFFF), ((MSPI_RXFIFO = (MSPI_RXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_RXFIFO_RXFIFO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_TXENTRIES  -----------------------------
// SVD Line: 37836

unsigned int MSPI_TXENTRIES __AT (0x50014018);



// --------------------------  Field Item: MSPI_TXENTRIES_TXENTRIES  ------------------------------
// SVD Line: 37846

//  <item> SFDITEM_FIELD__MSPI_TXENTRIES_TXENTRIES
//    <name> TXENTRIES </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50014018) Number of 32-bit words/entries in TX FIFO </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_TXENTRIES >> 0) & 0x1F), ((MSPI_TXENTRIES = (MSPI_TXENTRIES & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_TXENTRIES  ---------------------------------
// SVD Line: 37836

//  <rtree> SFDITEM_REG__MSPI_TXENTRIES
//    <name> TXENTRIES </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014018) TX FIFO Entries </i>
//    <loc> ( (unsigned int)((MSPI_TXENTRIES >> 0) & 0xFFFFFFFF), ((MSPI_TXENTRIES = (MSPI_TXENTRIES & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_TXENTRIES_TXENTRIES </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_RXENTRIES  -----------------------------
// SVD Line: 37855

unsigned int MSPI_RXENTRIES __AT (0x5001401C);



// --------------------------  Field Item: MSPI_RXENTRIES_RXENTRIES  ------------------------------
// SVD Line: 37865

//  <item> SFDITEM_FIELD__MSPI_RXENTRIES_RXENTRIES
//    <name> RXENTRIES </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x5001401C) Number of 32-bit words/entries in RX FIFO </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_RXENTRIES >> 0) & 0x1F), ((MSPI_RXENTRIES = (MSPI_RXENTRIES & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_RXENTRIES  ---------------------------------
// SVD Line: 37855

//  <rtree> SFDITEM_REG__MSPI_RXENTRIES
//    <name> RXENTRIES </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001401C) RX FIFO Entries </i>
//    <loc> ( (unsigned int)((MSPI_RXENTRIES >> 0) & 0xFFFFFFFF), ((MSPI_RXENTRIES = (MSPI_RXENTRIES & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_RXENTRIES_RXENTRIES </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_THRESHOLD  -----------------------------
// SVD Line: 37874

unsigned int MSPI_THRESHOLD __AT (0x50014020);



// ---------------------------  Field Item: MSPI_THRESHOLD_RXTHRESH  ------------------------------
// SVD Line: 37884

//  <item> SFDITEM_FIELD__MSPI_THRESHOLD_RXTHRESH
//    <name> RXTHRESH </name>
//    <rw> 
//    <i> [Bits 12..8] RW (@ 0x50014020) Number of entries in TX FIFO that cause RXE interrupt </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_THRESHOLD >> 8) & 0x1F), ((MSPI_THRESHOLD = (MSPI_THRESHOLD & ~(0x1FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: MSPI_THRESHOLD_TXTHRESH  ------------------------------
// SVD Line: 37891

//  <item> SFDITEM_FIELD__MSPI_THRESHOLD_TXTHRESH
//    <name> TXTHRESH </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50014020) Number of entries in TX FIFO that cause TXF interrupt </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_THRESHOLD >> 0) & 0x1F), ((MSPI_THRESHOLD = (MSPI_THRESHOLD & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_THRESHOLD  ---------------------------------
// SVD Line: 37874

//  <rtree> SFDITEM_REG__MSPI_THRESHOLD
//    <name> THRESHOLD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014020) TX/RX FIFO Threshhold Levels </i>
//    <loc> ( (unsigned int)((MSPI_THRESHOLD >> 0) & 0xFFFFFFFF), ((MSPI_THRESHOLD = (MSPI_THRESHOLD & ~(0x1F1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_THRESHOLD_RXTHRESH </item>
//    <item> SFDITEM_FIELD__MSPI_THRESHOLD_TXTHRESH </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_MSPICFG  ------------------------------
// SVD Line: 37900

unsigned int MSPI_MSPICFG __AT (0x50014100);



// -----------------------------  Field Item: MSPI_MSPICFG_PRSTN  ---------------------------------
// SVD Line: 37910

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_PRSTN
//    <name> PRSTN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50014100) Peripheral reset. Master reset to the entire MSPI module (DMA, XIP, and transfer state machines). 1=normal operation, 0=in reset. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.31..31> PRSTN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_IPRSTN  --------------------------------
// SVD Line: 37917

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_IPRSTN
//    <name> IPRSTN </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50014100) IP block reset. Write to 0 to put the transfer module in reset or 1 for normal operation. This may be required after error conditions to clear the transfer on the bus. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.30..30> IPRSTN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MSPI_MSPICFG_FIFORESET  -------------------------------
// SVD Line: 37924

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_FIFORESET
//    <name> FIFORESET </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x50014100) Reset MSPI FIFO (active high). 1=reset FIFO, 0=normal operation. May be used to manually flush the FIFO in error handling. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.29..29> FIFORESET
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_CLKDIV  --------------------------------
// SVD Line: 37931

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_CLKDIV
//    <name> CLKDIV </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x50014100) \nClock Divider. Allows dividing 48 MHz base clock by integer multiples. Enumerations are provided for common frequency, but any integer divide from 48 MHz is allowed. Odd divide ratios will result in a 33/66 percent duty cycle with a long low clock pulse (to allow longer round-trip for read data).\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : CLK24 = 24 MHz MSPI clock value.\n3 : Reserved - do not use\n4 : CLK12 = 12 MHz MSPI clock value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : CLK6 = 6 MHz MSPI clock value.\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : CLK3 = 3 MHz MSPI clock value.\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use\n32 : CLK1_5 = 1.5 MHz MSPI clock value.\n33 : Reserved - do not use\n34 : Reserved - do not use\n35 : Reserved - do not use\n36 : Reserved - do not use\n37 : Reserved - do not use\n38 : Reserved - do not use\n39 : Reserved - do not use\n40 : Reserved - do not use\n41 : Reserved - do not use\n42 : Reserved - do not use\n43 : Reserved - do not use\n44 : Reserved - do not use\n45 : Reserved - do not use\n46 : Reserved - do not use\n47 : Reserved - do not use\n48 : Reserved - do not use\n49 : Reserved - do not use\n50 : Reserved - do not use\n51 : Reserved - do not use\n52 : Reserved - do not use\n53 : Reserved - do not use\n54 : Reserved - do not use\n55 : Reserved - do not use\n56 : Reserved - do not use\n57 : Reserved - do not use\n58 : Reserved - do not use\n59 : Reserved - do not use\n60 : Reserved - do not use\n61 : Reserved - do not use\n62 : Reserved - do not use\n63 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.13..8> CLKDIV
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: CLK24 = 24 MHz MSPI clock value.
//        <3=> 3: 
//        <4=> 4: CLK12 = 12 MHz MSPI clock value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: CLK6 = 6 MHz MSPI clock value.
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: CLK3 = 3 MHz MSPI clock value.
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//        <32=> 32: CLK1_5 = 1.5 MHz MSPI clock value.
//        <33=> 33: 
//        <34=> 34: 
//        <35=> 35: 
//        <36=> 36: 
//        <37=> 37: 
//        <38=> 38: 
//        <39=> 39: 
//        <40=> 40: 
//        <41=> 41: 
//        <42=> 42: 
//        <43=> 43: 
//        <44=> 44: 
//        <45=> 45: 
//        <46=> 46: 
//        <47=> 47: 
//        <48=> 48: 
//        <49=> 49: 
//        <50=> 50: 
//        <51=> 51: 
//        <52=> 52: 
//        <53=> 53: 
//        <54=> 54: 
//        <55=> 55: 
//        <56=> 56: 
//        <57=> 57: 
//        <58=> 58: 
//        <59=> 59: 
//        <60=> 60: 
//        <61=> 61: 
//        <62=> 62: 
//        <63=> 63: 
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_IOMSEL  --------------------------------
// SVD Line: 37964

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_IOMSEL
//    <name> IOMSEL </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x50014100) \nSelects which IOM is selected for CQ handshake status.\n0 : IOM0 = ERROR: desc VALUE MISSING value.\n1 : IOM1 = ERROR: desc VALUE MISSING value.\n2 : IOM2 = ERROR: desc VALUE MISSING value.\n3 : IOM3 = ERROR: desc VALUE MISSING value.\n4 : IOM4 = ERROR: desc VALUE MISSING value.\n5 : IOM5 = ERROR: desc VALUE MISSING value.\n6 : Reserved - do not use\n7 : DISABLED = No IOM selected. Signals always zero. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.6..4> IOMSEL
//        <0=> 0: IOM0 = ERROR: desc VALUE MISSING value.
//        <1=> 1: IOM1 = ERROR: desc VALUE MISSING value.
//        <2=> 2: IOM2 = ERROR: desc VALUE MISSING value.
//        <3=> 3: IOM3 = ERROR: desc VALUE MISSING value.
//        <4=> 4: IOM4 = ERROR: desc VALUE MISSING value.
//        <5=> 5: IOM5 = ERROR: desc VALUE MISSING value.
//        <6=> 6: 
//        <7=> 7: DISABLED = No IOM selected. Signals always zero. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_TXNEG  ---------------------------------
// SVD Line: 38007

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_TXNEG
//    <name> TXNEG </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014100) \nLaunches TX data a half clock cycle (~10ns) early. This should normally be programmed to zero (NORMAL).\n0 : NORMAL = TX launched from posedge internal clock value.\n1 : NEGEDGE = TX data launched from negedge of internal clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.3..3> TXNEG
//        <0=> 0: NORMAL = TX launched from posedge internal clock value.
//        <1=> 1: NEGEDGE = TX data launched from negedge of internal clock value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_RXNEG  ---------------------------------
// SVD Line: 38025

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_RXNEG
//    <name> RXNEG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014100) \nAdjusts the RX capture phase to the negedge of the 48MHz internal clock (~10ns early). For normal operation, it is expected that RXNEG will be set to 0.\n0 : NORMAL = RX data sampled on posedge of internal clock value.\n1 : NEGEDGE = RX data sampled on negedge of internal clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.2..2> RXNEG
//        <0=> 0: NORMAL = RX data sampled on posedge of internal clock value.
//        <1=> 1: NEGEDGE = RX data sampled on negedge of internal clock value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_RXCAP  ---------------------------------
// SVD Line: 38043

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_RXCAP
//    <name> RXCAP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014100) \nControls RX data capture phase. A setting of 0 (NORMAL) captures read data at the normal capture point relative to the internal clock launch point. However, to accomodate chip/pad/board delays, a setting of RXCAP of 1 is expected to be used to align the capture point with the return data window. This bit is used in conjunction with RXNEG to provide 4 unique capture points, all about 10ns apart.\n0 : NORMAL = RX Capture phase aligns with CPHA setting value.\n1 : DELAY = RX Capture phase is delayed from CPHA setting by one clock edge value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.1..1> RXCAP
//        <0=> 0: NORMAL = RX Capture phase aligns with CPHA setting value.
//        <1=> 1: DELAY = RX Capture phase is delayed from CPHA setting by one clock edge value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_MSPICFG_APBCLK  --------------------------------
// SVD Line: 38061

//  <item> SFDITEM_FIELD__MSPI_MSPICFG_APBCLK
//    <name> APBCLK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014100) \nEnable continuous APB clock. For power-efficient operation, APBCLK should be set to 0.\n0 : DIS = Disable continuous clock. value.\n1 : EN = Enable continuous clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_MSPICFG ) </loc>
//      <o.0..0> APBCLK
//        <0=> 0: DIS = Disable continuous clock. value.
//        <1=> 1: EN = Enable continuous clock. value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_MSPICFG  ----------------------------------
// SVD Line: 37900

//  <rtree> SFDITEM_REG__MSPI_MSPICFG
//    <name> MSPICFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014100) MSPI Module Configuration </i>
//    <loc> ( (unsigned int)((MSPI_MSPICFG >> 0) & 0xFFFFFFFF), ((MSPI_MSPICFG = (MSPI_MSPICFG & ~(0xE0003F7FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xE0003F7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_PRSTN </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_IPRSTN </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_FIFORESET </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_CLKDIV </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_IOMSEL </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_TXNEG </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_RXNEG </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_RXCAP </item>
//    <item> SFDITEM_FIELD__MSPI_MSPICFG_APBCLK </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_PADCFG  -------------------------------
// SVD Line: 38081

unsigned int MSPI_PADCFG __AT (0x50014104);



// ------------------------------  Field Item: MSPI_PADCFG_REVCS  ---------------------------------
// SVD Line: 38091

//  <item> SFDITEM_FIELD__MSPI_PADCFG_REVCS
//    <name> REVCS </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x50014104) Reverse CS connections. Allows CS1 to be associated with lower data lanes and CS0 to be associated with upper data lines </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.21..21> REVCS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_PADCFG_IN3  ----------------------------------
// SVD Line: 38098

//  <item> SFDITEM_FIELD__MSPI_PADCFG_IN3
//    <name> IN3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50014104) Data Input pad 3 pin muxing: 0=pad[3] 1=pad[7] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.20..20> IN3
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_PADCFG_IN2  ----------------------------------
// SVD Line: 38105

//  <item> SFDITEM_FIELD__MSPI_PADCFG_IN2
//    <name> IN2 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x50014104) Data Input pad 2 pin muxing: 0=pad[2] 1=pad[6] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.19..19> IN2
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_PADCFG_IN1  ----------------------------------
// SVD Line: 38112

//  <item> SFDITEM_FIELD__MSPI_PADCFG_IN1
//    <name> IN1 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50014104) Data Input pad 1 pin muxing: 0=pad[1] 1=pad[5] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.18..18> IN1
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_PADCFG_IN0  ----------------------------------
// SVD Line: 38119

//  <item> SFDITEM_FIELD__MSPI_PADCFG_IN0
//    <name> IN0 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x50014104) Data Input pad 0 pin muxing: 0=pad[0] 1=pad[4] 2=pad[1] 3=pad[5] </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_PADCFG >> 16) & 0x3), ((MSPI_PADCFG = (MSPI_PADCFG & ~(0x3UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: MSPI_PADCFG_OUT7  ----------------------------------
// SVD Line: 38126

//  <item> SFDITEM_FIELD__MSPI_PADCFG_OUT7
//    <name> OUT7 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50014104) Output pad 7 configuration. 0=data[7] 1=data[3] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.4..4> OUT7
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_PADCFG_OUT6  ----------------------------------
// SVD Line: 38133

//  <item> SFDITEM_FIELD__MSPI_PADCFG_OUT6
//    <name> OUT6 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014104) Output pad 6 configuration. 0=data[6] 1=data[2] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.3..3> OUT6
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_PADCFG_OUT5  ----------------------------------
// SVD Line: 38140

//  <item> SFDITEM_FIELD__MSPI_PADCFG_OUT5
//    <name> OUT5 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014104) Output pad 5 configuration. 0=data[5] 1=data[1] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.2..2> OUT5
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_PADCFG_OUT4  ----------------------------------
// SVD Line: 38147

//  <item> SFDITEM_FIELD__MSPI_PADCFG_OUT4
//    <name> OUT4 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014104) Output pad 4 configuration. 0=data[4] 1=data[0] </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.1..1> OUT4
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_PADCFG_OUT3  ----------------------------------
// SVD Line: 38154

//  <item> SFDITEM_FIELD__MSPI_PADCFG_OUT3
//    <name> OUT3 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014104) Output pad 3 configuration. 0=data[3] 1=CLK </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_PADCFG ) </loc>
//      <o.0..0> OUT3
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_PADCFG  ----------------------------------
// SVD Line: 38081

//  <rtree> SFDITEM_REG__MSPI_PADCFG
//    <name> PADCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014104) MSPI Output Pad Configuration </i>
//    <loc> ( (unsigned int)((MSPI_PADCFG >> 0) & 0xFFFFFFFF), ((MSPI_PADCFG = (MSPI_PADCFG & ~(0x3F001FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F001F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_REVCS </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_IN3 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_IN2 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_IN1 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_IN0 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_OUT7 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_OUT6 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_OUT5 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_OUT4 </item>
//    <item> SFDITEM_FIELD__MSPI_PADCFG_OUT3 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_PADOUTEN  ------------------------------
// SVD Line: 38163

unsigned int MSPI_PADOUTEN __AT (0x50014108);



// -----------------------------  Field Item: MSPI_PADOUTEN_OUTEN  --------------------------------
// SVD Line: 38173

//  <item> SFDITEM_FIELD__MSPI_PADOUTEN_OUTEN
//    <name> OUTEN </name>
//    <rw> 
//    <i> [Bits 8..0] RW (@ 0x50014108) Output pad enable configuration. Indicates which pads should be driven. Bits [3:0] are Quad0 data, [7:4] are Quad1 data, and [8] is clock. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_PADOUTEN >> 0) & 0x1FF), ((MSPI_PADOUTEN = (MSPI_PADOUTEN & ~(0x1FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_PADOUTEN  ---------------------------------
// SVD Line: 38163

//  <rtree> SFDITEM_REG__MSPI_PADOUTEN
//    <name> PADOUTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014108) MSPI Output Enable Pad Configuration </i>
//    <loc> ( (unsigned int)((MSPI_PADOUTEN >> 0) & 0xFFFFFFFF), ((MSPI_PADOUTEN = (MSPI_PADOUTEN & ~(0x1FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_PADOUTEN_OUTEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: MSPI_FLASH  -------------------------------
// SVD Line: 38203

unsigned int MSPI_FLASH __AT (0x5001410C);



// ----------------------------  Field Item: MSPI_FLASH_READINSTR  --------------------------------
// SVD Line: 38213

//  <item> SFDITEM_FIELD__MSPI_FLASH_READINSTR
//    <name> READINSTR </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x5001410C) Read command sent to flash for DMA/XIP operations </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_FLASH >> 24) & 0xFF), ((MSPI_FLASH = (MSPI_FLASH & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: MSPI_FLASH_WRITEINSTR  -------------------------------
// SVD Line: 38220

//  <item> SFDITEM_FIELD__MSPI_FLASH_WRITEINSTR
//    <name> WRITEINSTR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x5001410C) Write command sent for DMA operations </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_FLASH >> 16) & 0xFF), ((MSPI_FLASH = (MSPI_FLASH & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: MSPI_FLASH_XIPMIXED  --------------------------------
// SVD Line: 38227

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPMIXED
//    <name> XIPMIXED </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x5001410C) Reserved. Set to 0x0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_FLASH >> 8) & 0x7), ((MSPI_FLASH = (MSPI_FLASH & ~(0x7UL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: MSPI_FLASH_XIPSENDI  --------------------------------
// SVD Line: 38234

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPSENDI
//    <name> XIPSENDI </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5001410C) Indicates whether XIP/AUTO DMA operations should send an instruction (see READINSTR field and ISIZE field in CFG) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.7..7> XIPSENDI
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_FLASH_XIPSENDA  --------------------------------
// SVD Line: 38241

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPSENDA
//    <name> XIPSENDA </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5001410C) Indicates whether XIP/AUTO DMA operations should send an an address phase (see DMADEVADDR register and ASIZE field in CFG) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.6..6> XIPSENDA
//    </check>
//  </item>
//  


// ----------------------------  Field Item: MSPI_FLASH_XIPENTURN  --------------------------------
// SVD Line: 38248

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPENTURN
//    <name> XIPENTURN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5001410C) Indicates whether XIP/AUTO DMA operations should enable TX->RX turnaround cycles </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.5..5> XIPENTURN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MSPI_FLASH_XIPBIGENDIAN  ------------------------------
// SVD Line: 38255

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPBIGENDIAN
//    <name> XIPBIGENDIAN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5001410C) Indicates whether XIP/AUTO DMA data transfers are in big or little endian format </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.4..4> XIPBIGENDIAN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_FLASH_XIPACK  ---------------------------------
// SVD Line: 38262

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPACK
//    <name> XIPACK </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x5001410C) \nControls transmission of Micron XIP acknowledge cycles (Micron Flash devices only)\n0 : NOACK = No acknowledege sent. Data IOs are tristated the first turnaround cycle value.\n1 : Reserved - do not use\n2 : ACK = Positive acknowledege sent. Data IOs are driven to 0 the first turnaround cycle to acknowledge XIP mode value.\n3 : TERMINATE = Negative acknowledege sent. Data IOs are driven to 1 the first turnaround cycle to terminate XIP mode. XIPSENDI should be reenabled for the next transfer value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.3..2> XIPACK
//        <0=> 0: NOACK = No acknowledege sent. Data IOs are tristated the first turnaround cycle value.
//        <1=> 1: 
//        <2=> 2: ACK = Positive acknowledege sent. Data IOs are driven to 0 the first turnaround cycle to acknowledge XIP mode value.
//        <3=> 3: TERMINATE = Negative acknowledege sent. Data IOs are driven to 1 the first turnaround cycle to terminate XIP mode. XIPSENDI should be reenabled for the next transfer value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: MSPI_FLASH_XIPEN  ----------------------------------
// SVD Line: 38285

//  <item> SFDITEM_FIELD__MSPI_FLASH_XIPEN
//    <name> XIPEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001410C) Enable the XIP (eXecute In Place) function which effectively enables the address decoding of the MSPI device in the flash/cache address space at address 0x04000000-0x07FFFFFF. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_FLASH ) </loc>
//      <o.0..0> XIPEN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_FLASH  -----------------------------------
// SVD Line: 38203

//  <rtree> SFDITEM_REG__MSPI_FLASH
//    <name> FLASH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001410C) Configuration for XIP/DMA support of SPI flash modules. </i>
//    <loc> ( (unsigned int)((MSPI_FLASH >> 0) & 0xFFFFFFFF), ((MSPI_FLASH = (MSPI_FLASH & ~(0xFFFF07FDUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF07FD) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_FLASH_READINSTR </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_WRITEINSTR </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPMIXED </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPSENDI </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPSENDA </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPENTURN </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPBIGENDIAN </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPACK </item>
//    <item> SFDITEM_FIELD__MSPI_FLASH_XIPEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MSPI_SCRAMBLING  -----------------------------
// SVD Line: 38294

unsigned int MSPI_SCRAMBLING __AT (0x50014120);



// --------------------------  Field Item: MSPI_SCRAMBLING_SCRENABLE  -----------------------------
// SVD Line: 38304

//  <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCRENABLE
//    <name> SCRENABLE </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50014120) Enables Data Scrambling Region. When 1 reads and writes to the range will be scrambled. When 0, data will be read/written unmodified. Address range is specified in 64K granularity and the START/END ranges are included within the range. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_SCRAMBLING ) </loc>
//      <o.31..31> SCRENABLE
//    </check>
//  </item>
//  


// ---------------------------  Field Item: MSPI_SCRAMBLING_SCREND  -------------------------------
// SVD Line: 38311

//  <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCREND
//    <name> SCREND </name>
//    <rw> 
//    <i> [Bits 25..16] RW (@ 0x50014120) Scrambling region end address [25:16] (64K block granularity). The END block is the LAST block included in the scrambled address range. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_SCRAMBLING >> 16) & 0x3FF), ((MSPI_SCRAMBLING = (MSPI_SCRAMBLING & ~(0x3FFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: MSPI_SCRAMBLING_SCRSTART  ------------------------------
// SVD Line: 38318

//  <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCRSTART
//    <name> SCRSTART </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x50014120) Scrambling region start address [25:16] (64K block granularity). The START block is the FIRST block included in the scrambled address range. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_SCRAMBLING >> 0) & 0x3FF), ((MSPI_SCRAMBLING = (MSPI_SCRAMBLING & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_SCRAMBLING  --------------------------------
// SVD Line: 38294

//  <rtree> SFDITEM_REG__MSPI_SCRAMBLING
//    <name> SCRAMBLING </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014120) External Flash Scrambling Controls </i>
//    <loc> ( (unsigned int)((MSPI_SCRAMBLING >> 0) & 0xFFFFFFFF), ((MSPI_SCRAMBLING = (MSPI_SCRAMBLING & ~(0x83FF03FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x83FF03FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCRENABLE </item>
//    <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCREND </item>
//    <item> SFDITEM_FIELD__MSPI_SCRAMBLING_SCRSTART </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: MSPI_INTEN  -------------------------------
// SVD Line: 38327

unsigned int MSPI_INTEN __AT (0x50014200);



// ------------------------------  Field Item: MSPI_INTEN_SCRERR  ---------------------------------
// SVD Line: 38337

//  <item> SFDITEM_FIELD__MSPI_INTEN_SCRERR
//    <name> SCRERR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50014200) Scrambling Alignment Error. Scrambling operations must be aligned to word (4-byte) start address. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.12..12> SCRERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTEN_CQERR  ----------------------------------
// SVD Line: 38344

//  <item> SFDITEM_FIELD__MSPI_INTEN_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50014200) Command Queue Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.11..11> CQERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTEN_CQPAUSED  --------------------------------
// SVD Line: 38351

//  <item> SFDITEM_FIELD__MSPI_INTEN_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50014200) Command Queue is Paused. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.10..10> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTEN_CQUPD  ----------------------------------
// SVD Line: 38358

//  <item> SFDITEM_FIELD__MSPI_INTEN_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50014200) Command Queue Update Interrupt. Issued whenever the CQ performs an operation where address bit[0] is set. Useful for triggering CURIDX interrupts. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.9..9> CQUPD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTEN_CQCMP  ----------------------------------
// SVD Line: 38365

//  <item> SFDITEM_FIELD__MSPI_INTEN_CQCMP
//    <name> CQCMP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50014200) Command Queue Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.8..8> CQCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_DERR  ----------------------------------
// SVD Line: 38372

//  <item> SFDITEM_FIELD__MSPI_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50014200) DMA Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.7..7> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_DCMP  ----------------------------------
// SVD Line: 38379

//  <item> SFDITEM_FIELD__MSPI_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50014200) DMA Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.6..6> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_RXF  -----------------------------------
// SVD Line: 38386

//  <item> SFDITEM_FIELD__MSPI_INTEN_RXF
//    <name> RXF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50014200) Receive FIFO full </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.5..5> RXF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_RXO  -----------------------------------
// SVD Line: 38393

//  <item> SFDITEM_FIELD__MSPI_INTEN_RXO
//    <name> RXO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50014200) Receive FIFO overflow (cannot happen in MSPI design -- MSPI bus pins will stall) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.4..4> RXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_RXU  -----------------------------------
// SVD Line: 38400

//  <item> SFDITEM_FIELD__MSPI_INTEN_RXU
//    <name> RXU </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014200) Receive FIFO underflow (only occurs when SW reads from an empty FIFO) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.3..3> RXU
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_TXO  -----------------------------------
// SVD Line: 38407

//  <item> SFDITEM_FIELD__MSPI_INTEN_TXO
//    <name> TXO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014200) Transmit FIFO Overflow (only occurs when SW writes to a full FIFO). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.2..2> TXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTEN_TXE  -----------------------------------
// SVD Line: 38414

//  <item> SFDITEM_FIELD__MSPI_INTEN_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014200) Transmit FIFO empty. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.1..1> TXE
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTEN_CMDCMP  ---------------------------------
// SVD Line: 38421

//  <item> SFDITEM_FIELD__MSPI_INTEN_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014200) Transfer complete. Note that DMA and CQ operations are layered, so CMDCMP, DCMP, and CQ* can all be signalled simultaneously </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTEN ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_INTEN  -----------------------------------
// SVD Line: 38327

//  <rtree> SFDITEM_REG__MSPI_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014200) MSPI Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((MSPI_INTEN >> 0) & 0xFFFFFFFF), ((MSPI_INTEN = (MSPI_INTEN & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_INTEN_SCRERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_CQERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_CQPAUSED </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_CQUPD </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_CQCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_RXF </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_RXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_RXU </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_TXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_TXE </item>
//    <item> SFDITEM_FIELD__MSPI_INTEN_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_INTSTAT  ------------------------------
// SVD Line: 38430

unsigned int MSPI_INTSTAT __AT (0x50014204);



// -----------------------------  Field Item: MSPI_INTSTAT_SCRERR  --------------------------------
// SVD Line: 38440

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_SCRERR
//    <name> SCRERR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50014204) Scrambling Alignment Error. Scrambling operations must be aligned to word (4-byte) start address. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.12..12> SCRERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTSTAT_CQERR  ---------------------------------
// SVD Line: 38447

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50014204) Command Queue Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.11..11> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: MSPI_INTSTAT_CQPAUSED  -------------------------------
// SVD Line: 38454

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50014204) Command Queue is Paused. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.10..10> CQPAUSED
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTSTAT_CQUPD  ---------------------------------
// SVD Line: 38461

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50014204) Command Queue Update Interrupt. Issued whenever the CQ performs an operation where address bit[0] is set. Useful for triggering CURIDX interrupts. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.9..9> CQUPD
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTSTAT_CQCMP  ---------------------------------
// SVD Line: 38468

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_CQCMP
//    <name> CQCMP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50014204) Command Queue Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.8..8> CQCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_DERR  ---------------------------------
// SVD Line: 38475

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50014204) DMA Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.7..7> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_DCMP  ---------------------------------
// SVD Line: 38482

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50014204) DMA Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.6..6> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_RXF  ----------------------------------
// SVD Line: 38489

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_RXF
//    <name> RXF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50014204) Receive FIFO full </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.5..5> RXF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_RXO  ----------------------------------
// SVD Line: 38496

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_RXO
//    <name> RXO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50014204) Receive FIFO overflow (cannot happen in MSPI design -- MSPI bus pins will stall) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.4..4> RXO
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_RXU  ----------------------------------
// SVD Line: 38503

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_RXU
//    <name> RXU </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014204) Receive FIFO underflow (only occurs when SW reads from an empty FIFO) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.3..3> RXU
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_TXO  ----------------------------------
// SVD Line: 38510

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_TXO
//    <name> TXO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014204) Transmit FIFO Overflow (only occurs when SW writes to a full FIFO). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.2..2> TXO
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSTAT_TXE  ----------------------------------
// SVD Line: 38517

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014204) Transmit FIFO empty. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.1..1> TXE
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTSTAT_CMDCMP  --------------------------------
// SVD Line: 38524

//  <item> SFDITEM_FIELD__MSPI_INTSTAT_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014204) Transfer complete. Note that DMA and CQ operations are layered, so CMDCMP, DCMP, and CQ* can all be signalled simultaneously </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSTAT ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_INTSTAT  ----------------------------------
// SVD Line: 38430

//  <rtree> SFDITEM_REG__MSPI_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014204) MSPI Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((MSPI_INTSTAT >> 0) & 0xFFFFFFFF), ((MSPI_INTSTAT = (MSPI_INTSTAT & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_SCRERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_CQUPD </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_CQCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_RXF </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_RXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_RXU </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_TXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_TXE </item>
//    <item> SFDITEM_FIELD__MSPI_INTSTAT_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_INTCLR  -------------------------------
// SVD Line: 38533

unsigned int MSPI_INTCLR __AT (0x50014208);



// -----------------------------  Field Item: MSPI_INTCLR_SCRERR  ---------------------------------
// SVD Line: 38543

//  <item> SFDITEM_FIELD__MSPI_INTCLR_SCRERR
//    <name> SCRERR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x50014208) Scrambling Alignment Error. Scrambling operations must be aligned to word (4-byte) start address. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.12..12> SCRERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTCLR_CQERR  ---------------------------------
// SVD Line: 38550

//  <item> SFDITEM_FIELD__MSPI_INTCLR_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x50014208) Command Queue Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.11..11> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: MSPI_INTCLR_CQPAUSED  --------------------------------
// SVD Line: 38557

//  <item> SFDITEM_FIELD__MSPI_INTCLR_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50014208) Command Queue is Paused. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.10..10> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTCLR_CQUPD  ---------------------------------
// SVD Line: 38564

//  <item> SFDITEM_FIELD__MSPI_INTCLR_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50014208) Command Queue Update Interrupt. Issued whenever the CQ performs an operation where address bit[0] is set. Useful for triggering CURIDX interrupts. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.9..9> CQUPD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTCLR_CQCMP  ---------------------------------
// SVD Line: 38571

//  <item> SFDITEM_FIELD__MSPI_INTCLR_CQCMP
//    <name> CQCMP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50014208) Command Queue Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.8..8> CQCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTCLR_DERR  ----------------------------------
// SVD Line: 38578

//  <item> SFDITEM_FIELD__MSPI_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x50014208) DMA Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.7..7> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTCLR_DCMP  ----------------------------------
// SVD Line: 38585

//  <item> SFDITEM_FIELD__MSPI_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x50014208) DMA Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.6..6> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTCLR_RXF  ----------------------------------
// SVD Line: 38592

//  <item> SFDITEM_FIELD__MSPI_INTCLR_RXF
//    <name> RXF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x50014208) Receive FIFO full </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.5..5> RXF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTCLR_RXO  ----------------------------------
// SVD Line: 38599

//  <item> SFDITEM_FIELD__MSPI_INTCLR_RXO
//    <name> RXO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50014208) Receive FIFO overflow (cannot happen in MSPI design -- MSPI bus pins will stall) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.4..4> RXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTCLR_RXU  ----------------------------------
// SVD Line: 38606

//  <item> SFDITEM_FIELD__MSPI_INTCLR_RXU
//    <name> RXU </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014208) Receive FIFO underflow (only occurs when SW reads from an empty FIFO) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.3..3> RXU
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTCLR_TXO  ----------------------------------
// SVD Line: 38613

//  <item> SFDITEM_FIELD__MSPI_INTCLR_TXO
//    <name> TXO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014208) Transmit FIFO Overflow (only occurs when SW writes to a full FIFO). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.2..2> TXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTCLR_TXE  ----------------------------------
// SVD Line: 38620

//  <item> SFDITEM_FIELD__MSPI_INTCLR_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014208) Transmit FIFO empty. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.1..1> TXE
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTCLR_CMDCMP  ---------------------------------
// SVD Line: 38627

//  <item> SFDITEM_FIELD__MSPI_INTCLR_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014208) Transfer complete. Note that DMA and CQ operations are layered, so CMDCMP, DCMP, and CQ* can all be signalled simultaneously </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTCLR ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_INTCLR  ----------------------------------
// SVD Line: 38533

//  <rtree> SFDITEM_REG__MSPI_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014208) MSPI Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((MSPI_INTCLR >> 0) & 0xFFFFFFFF), ((MSPI_INTCLR = (MSPI_INTCLR & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_SCRERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_CQERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_CQPAUSED </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_CQUPD </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_CQCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_RXF </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_RXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_RXU </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_TXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_TXE </item>
//    <item> SFDITEM_FIELD__MSPI_INTCLR_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_INTSET  -------------------------------
// SVD Line: 38636

unsigned int MSPI_INTSET __AT (0x5001420C);



// -----------------------------  Field Item: MSPI_INTSET_SCRERR  ---------------------------------
// SVD Line: 38646

//  <item> SFDITEM_FIELD__MSPI_INTSET_SCRERR
//    <name> SCRERR </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x5001420C) Scrambling Alignment Error. Scrambling operations must be aligned to word (4-byte) start address. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.12..12> SCRERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSET_CQERR  ---------------------------------
// SVD Line: 38653

//  <item> SFDITEM_FIELD__MSPI_INTSET_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x5001420C) Command Queue Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.11..11> CQERR
//    </check>
//  </item>
//  


// ----------------------------  Field Item: MSPI_INTSET_CQPAUSED  --------------------------------
// SVD Line: 38660

//  <item> SFDITEM_FIELD__MSPI_INTSET_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x5001420C) Command Queue is Paused. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.10..10> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSET_CQUPD  ---------------------------------
// SVD Line: 38667

//  <item> SFDITEM_FIELD__MSPI_INTSET_CQUPD
//    <name> CQUPD </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x5001420C) Command Queue Update Interrupt. Issued whenever the CQ performs an operation where address bit[0] is set. Useful for triggering CURIDX interrupts. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.9..9> CQUPD
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSET_CQCMP  ---------------------------------
// SVD Line: 38674

//  <item> SFDITEM_FIELD__MSPI_INTSET_CQCMP
//    <name> CQCMP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x5001420C) Command Queue Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.8..8> CQCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSET_DERR  ----------------------------------
// SVD Line: 38681

//  <item> SFDITEM_FIELD__MSPI_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x5001420C) DMA Error Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.7..7> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_INTSET_DCMP  ----------------------------------
// SVD Line: 38688

//  <item> SFDITEM_FIELD__MSPI_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x5001420C) DMA Complete Interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.6..6> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTSET_RXF  ----------------------------------
// SVD Line: 38695

//  <item> SFDITEM_FIELD__MSPI_INTSET_RXF
//    <name> RXF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x5001420C) Receive FIFO full </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.5..5> RXF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTSET_RXO  ----------------------------------
// SVD Line: 38702

//  <item> SFDITEM_FIELD__MSPI_INTSET_RXO
//    <name> RXO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5001420C) Receive FIFO overflow (cannot happen in MSPI design -- MSPI bus pins will stall) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.4..4> RXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTSET_RXU  ----------------------------------
// SVD Line: 38709

//  <item> SFDITEM_FIELD__MSPI_INTSET_RXU
//    <name> RXU </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5001420C) Receive FIFO underflow (only occurs when SW reads from an empty FIFO) </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.3..3> RXU
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTSET_TXO  ----------------------------------
// SVD Line: 38716

//  <item> SFDITEM_FIELD__MSPI_INTSET_TXO
//    <name> TXO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5001420C) Transmit FIFO Overflow (only occurs when SW writes to a full FIFO). </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.2..2> TXO
//    </check>
//  </item>
//  


// -------------------------------  Field Item: MSPI_INTSET_TXE  ----------------------------------
// SVD Line: 38723

//  <item> SFDITEM_FIELD__MSPI_INTSET_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5001420C) Transmit FIFO empty. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.1..1> TXE
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_INTSET_CMDCMP  ---------------------------------
// SVD Line: 38730

//  <item> SFDITEM_FIELD__MSPI_INTSET_CMDCMP
//    <name> CMDCMP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001420C) Transfer complete. Note that DMA and CQ operations are layered, so CMDCMP, DCMP, and CQ* can all be signalled simultaneously </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_INTSET ) </loc>
//      <o.0..0> CMDCMP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_INTSET  ----------------------------------
// SVD Line: 38636

//  <rtree> SFDITEM_REG__MSPI_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001420C) MSPI Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((MSPI_INTSET >> 0) & 0xFFFFFFFF), ((MSPI_INTSET = (MSPI_INTSET & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_INTSET_SCRERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_CQERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_CQPAUSED </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_CQUPD </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_CQCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_RXF </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_RXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_RXU </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_TXO </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_TXE </item>
//    <item> SFDITEM_FIELD__MSPI_INTSET_CMDCMP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_DMACFG  -------------------------------
// SVD Line: 38739

unsigned int MSPI_DMACFG __AT (0x50014250);



// ----------------------------  Field Item: MSPI_DMACFG_DMAPWROFF  -------------------------------
// SVD Line: 38749

//  <item> SFDITEM_FIELD__MSPI_DMACFG_DMAPWROFF
//    <name> DMAPWROFF </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x50014250) Power off MSPI domain upon completion of DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_DMACFG ) </loc>
//      <o.18..18> DMAPWROFF
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 38756

//  <item> SFDITEM_FIELD__MSPI_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bits 4..3] RW (@ 0x50014250) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value.\n2 : AUTO = Auto Priority (priority raised once TX FIFO empties or RX FIFO fills) value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_DMACFG ) </loc>
//      <o.4..3> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//        <2=> 2: AUTO = Auto Priority (priority raised once TX FIFO empties or RX FIFO fills) value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: MSPI_DMACFG_DMADIR  ---------------------------------
// SVD Line: 38779

//  <item> SFDITEM_FIELD__MSPI_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014250) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction value.\n1 : M2P = Memory to Peripheral transaction value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_DMACFG ) </loc>
//      <o.2..2> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction value.
//        <1=> 1: M2P = Memory to Peripheral transaction value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: MSPI_DMACFG_DMAEN  ---------------------------------
// SVD Line: 38797

//  <item> SFDITEM_FIELD__MSPI_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x50014250) \nDMA Enable. Setting this bit to EN will start the DMA operation\n0 : DIS = Disable DMA Function value.\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : EN = Enable HW controlled DMA Function to manage DMA to flash devices. HW will automatically handle issuance of instruction/address bytes based on settings in the FLASH register. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_DMACFG ) </loc>
//      <o.1..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: EN = Enable HW controlled DMA Function to manage DMA to flash devices. HW will automatically handle issuance of instruction/address bytes based on settings in the FLASH register. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_DMACFG  ----------------------------------
// SVD Line: 38739

//  <rtree> SFDITEM_REG__MSPI_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014250) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((MSPI_DMACFG >> 0) & 0xFFFFFFFF), ((MSPI_DMACFG = (MSPI_DMACFG & ~(0x4001FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x4001F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMACFG_DMAPWROFF </item>
//    <item> SFDITEM_FIELD__MSPI_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__MSPI_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__MSPI_DMACFG_DMAEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_DMASTAT  ------------------------------
// SVD Line: 38817

unsigned int MSPI_DMASTAT __AT (0x50014254);



// -----------------------------  Field Item: MSPI_DMASTAT_SCRERR  --------------------------------
// SVD Line: 38827

//  <item> SFDITEM_FIELD__MSPI_DMASTAT_SCRERR
//    <name> SCRERR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50014254) Scrambling Access Alignment Error. This active high bit signals that a scrambling operation was specified for a non-word aligned DEVADDR. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_DMASTAT ) </loc>
//      <o.3..3> SCRERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_DMASTAT_DMAERR  --------------------------------
// SVD Line: 38834

//  <item> SFDITEM_FIELD__MSPI_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50014254) DMA Error. This active high bit signals that an error was encountered during the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_DMASTAT_DMACPL  --------------------------------
// SVD Line: 38841

//  <item> SFDITEM_FIELD__MSPI_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50014254) DMA Transfer Complete. This signals the end of the DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_DMASTAT_DMATIP  --------------------------------
// SVD Line: 38848

//  <item> SFDITEM_FIELD__MSPI_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50014254) DMA Transfer In Progress indicator. 1 will indicate that a DMA transfer is active. The DMA transfer may be waiting on data, transferring data, or waiting for priority. All of these will be indicated with a 1. A 0 will indicate that the DMA is fully complete and no further transactions will be done. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_DMASTAT  ----------------------------------
// SVD Line: 38817

//  <rtree> SFDITEM_REG__MSPI_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014254) DMA Status Register </i>
//    <loc> ( (unsigned int)((MSPI_DMASTAT >> 0) & 0xFFFFFFFF), ((MSPI_DMASTAT = (MSPI_DMASTAT & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMASTAT_SCRERR </item>
//    <item> SFDITEM_FIELD__MSPI_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__MSPI_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__MSPI_DMASTAT_DMATIP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MSPI_DMATARGADDR  ----------------------------
// SVD Line: 38857

unsigned int MSPI_DMATARGADDR __AT (0x50014258);



// --------------------------  Field Item: MSPI_DMATARGADDR_TARGADDR  -----------------------------
// SVD Line: 38867

//  <item> SFDITEM_FIELD__MSPI_DMATARGADDR_TARGADDR
//    <name> TARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014258) Target byte address for source of DMA (either read or write). In cases of non-word aligned addresses, the DMA logic will take care for ensuring only the target bytes are read/written. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_DMATARGADDR >> 0) & 0xFFFFFFFF), ((MSPI_DMATARGADDR = (MSPI_DMATARGADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MSPI_DMATARGADDR  --------------------------------
// SVD Line: 38857

//  <rtree> SFDITEM_REG__MSPI_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014258) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((MSPI_DMATARGADDR >> 0) & 0xFFFFFFFF), ((MSPI_DMATARGADDR = (MSPI_DMATARGADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMATARGADDR_TARGADDR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MSPI_DMADEVADDR  -----------------------------
// SVD Line: 38876

unsigned int MSPI_DMADEVADDR __AT (0x5001425C);



// ---------------------------  Field Item: MSPI_DMADEVADDR_DEVADDR  ------------------------------
// SVD Line: 38886

//  <item> SFDITEM_FIELD__MSPI_DMADEVADDR_DEVADDR
//    <name> DEVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001425C) SPI Device address for automated DMA transactions (both read and write). </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_DMADEVADDR >> 0) & 0xFFFFFFFF), ((MSPI_DMADEVADDR = (MSPI_DMADEVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_DMADEVADDR  --------------------------------
// SVD Line: 38876

//  <rtree> SFDITEM_REG__MSPI_DMADEVADDR
//    <name> DMADEVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001425C) DMA Device Address Register </i>
//    <loc> ( (unsigned int)((MSPI_DMADEVADDR >> 0) & 0xFFFFFFFF), ((MSPI_DMADEVADDR = (MSPI_DMADEVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMADEVADDR_DEVADDR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MSPI_DMATOTCOUNT  ----------------------------
// SVD Line: 38895

unsigned int MSPI_DMATOTCOUNT __AT (0x50014260);



// --------------------------  Field Item: MSPI_DMATOTCOUNT_TOTCOUNT  -----------------------------
// SVD Line: 38905

//  <item> SFDITEM_FIELD__MSPI_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x50014260) Total Transfer Count in bytes. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_DMATOTCOUNT >> 0) & 0xFFFF), ((MSPI_DMATOTCOUNT = (MSPI_DMATOTCOUNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: MSPI_DMATOTCOUNT  --------------------------------
// SVD Line: 38895

//  <rtree> SFDITEM_REG__MSPI_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014260) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((MSPI_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((MSPI_DMATOTCOUNT = (MSPI_DMATOTCOUNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_DMABCOUNT  -----------------------------
// SVD Line: 38914

unsigned int MSPI_DMABCOUNT __AT (0x50014264);



// ----------------------------  Field Item: MSPI_DMABCOUNT_BCOUNT  -------------------------------
// SVD Line: 38924

//  <item> SFDITEM_FIELD__MSPI_DMABCOUNT_BCOUNT
//    <name> BCOUNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x50014264) Burst transfer size in bytes. This is the number of bytes transferred when a FIFO trigger event occurs. Recommended values are 16 or 32. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_DMABCOUNT >> 0) & 0xFF), ((MSPI_DMABCOUNT = (MSPI_DMABCOUNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_DMABCOUNT  ---------------------------------
// SVD Line: 38914

//  <rtree> SFDITEM_REG__MSPI_DMABCOUNT
//    <name> DMABCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014264) DMA BYTE Transfer Count </i>
//    <loc> ( (unsigned int)((MSPI_DMABCOUNT >> 0) & 0xFFFFFFFF), ((MSPI_DMABCOUNT = (MSPI_DMABCOUNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMABCOUNT_BCOUNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_DMATHRESH  -----------------------------
// SVD Line: 38933

unsigned int MSPI_DMATHRESH __AT (0x50014278);



// --------------------------  Field Item: MSPI_DMATHRESH_DMATHRESH  ------------------------------
// SVD Line: 38943

//  <item> SFDITEM_FIELD__MSPI_DMATHRESH_DMATHRESH
//    <name> DMATHRESH </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x50014278) DMA transfer FIFO level trigger. For read operations, DMA is triggered when the FIFO level is greater than this value. For write operations, DMA is triggered when the FIFO level is less than this level. Each DMA operation will consist of BCOUNT bytes. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_DMATHRESH >> 0) & 0xF), ((MSPI_DMATHRESH = (MSPI_DMATHRESH & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_DMATHRESH  ---------------------------------
// SVD Line: 38933

//  <rtree> SFDITEM_REG__MSPI_DMATHRESH
//    <name> DMATHRESH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50014278) DMA Transmit Trigger Threshhold </i>
//    <loc> ( (unsigned int)((MSPI_DMATHRESH >> 0) & 0xFFFFFFFF), ((MSPI_DMATHRESH = (MSPI_DMATHRESH & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_DMATHRESH_DMATHRESH </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: MSPI_CQCFG  -------------------------------
// SVD Line: 38952

unsigned int MSPI_CQCFG __AT (0x500142A0);



// -------------------------  Field Item: MSPI_CQCFG_CQAUTOCLEARMASK  -----------------------------
// SVD Line: 38962

//  <item> SFDITEM_FIELD__MSPI_CQCFG_CQAUTOCLEARMASK
//    <name> CQAUTOCLEARMASK </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x500142A0) Eanble clear of CQMASK after each pause operation. This may be useful when using software flags to pause CQ. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQCFG ) </loc>
//      <o.3..3> CQAUTOCLEARMASK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: MSPI_CQCFG_CQPWROFF  --------------------------------
// SVD Line: 38969

//  <item> SFDITEM_FIELD__MSPI_CQCFG_CQPWROFF
//    <name> CQPWROFF </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500142A0) Power off MSPI domain upon completion of DMA operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQCFG ) </loc>
//      <o.2..2> CQPWROFF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CQCFG_CQPRI  ----------------------------------
// SVD Line: 38976

//  <item> SFDITEM_FIELD__MSPI_CQCFG_CQPRI
//    <name> CQPRI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500142A0) \nSets the Priority of the command queue dma request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_CQCFG ) </loc>
//      <o.1..1> CQPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: MSPI_CQCFG_CQEN  ----------------------------------
// SVD Line: 38994

//  <item> SFDITEM_FIELD__MSPI_CQCFG_CQEN
//    <name> CQEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500142A0) \nCommand queue enable. When set, will enable the processing of the command queue\n0 : DIS = Disable CQ Function value.\n1 : EN = Enable CQ Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) MSPI_CQCFG ) </loc>
//      <o.0..0> CQEN
//        <0=> 0: DIS = Disable CQ Function value.
//        <1=> 1: EN = Enable CQ Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_CQCFG  -----------------------------------
// SVD Line: 38952

//  <rtree> SFDITEM_REG__MSPI_CQCFG
//    <name> CQCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142A0) Command Queue Configuration Register </i>
//    <loc> ( (unsigned int)((MSPI_CQCFG >> 0) & 0xFFFFFFFF), ((MSPI_CQCFG = (MSPI_CQCFG & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQCFG_CQAUTOCLEARMASK </item>
//    <item> SFDITEM_FIELD__MSPI_CQCFG_CQPWROFF </item>
//    <item> SFDITEM_FIELD__MSPI_CQCFG_CQPRI </item>
//    <item> SFDITEM_FIELD__MSPI_CQCFG_CQEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_CQADDR  -------------------------------
// SVD Line: 39014

unsigned int MSPI_CQADDR __AT (0x500142A8);



// -----------------------------  Field Item: MSPI_CQADDR_CQADDR  ---------------------------------
// SVD Line: 39024

//  <item> SFDITEM_FIELD__MSPI_CQADDR_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 28..0] RW (@ 0x500142A8) Address of command queue buffer in SRAM or flash. The buffer address must be aligned to a word boundary. </i>
//    <edit> 
//      <loc> ( (unsigned int)((MSPI_CQADDR >> 0) & 0x1FFFFFFF), ((MSPI_CQADDR = (MSPI_CQADDR & ~(0x1FFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_CQADDR  ----------------------------------
// SVD Line: 39014

//  <rtree> SFDITEM_REG__MSPI_CQADDR
//    <name> CQADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142A8) CQ Target Read Address Register </i>
//    <loc> ( (unsigned int)((MSPI_CQADDR >> 0) & 0xFFFFFFFF), ((MSPI_CQADDR = (MSPI_CQADDR & ~(0x1FFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQADDR_CQADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_CQSTAT  -------------------------------
// SVD Line: 39033

unsigned int MSPI_CQSTAT __AT (0x500142AC);



// ----------------------------  Field Item: MSPI_CQSTAT_CQPAUSED  --------------------------------
// SVD Line: 39043

//  <item> SFDITEM_FIELD__MSPI_CQSTAT_CQPAUSED
//    <name> CQPAUSED </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x500142AC) Command queue is currently paused status. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQSTAT ) </loc>
//      <o.3..3> CQPAUSED
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CQSTAT_CQERR  ---------------------------------
// SVD Line: 39050

//  <item> SFDITEM_FIELD__MSPI_CQSTAT_CQERR
//    <name> CQERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x500142AC) Command queue processing Error. This active high bit signals that an error was encountered during the CQ operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQSTAT ) </loc>
//      <o.2..2> CQERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CQSTAT_CQCPL  ---------------------------------
// SVD Line: 39057

//  <item> SFDITEM_FIELD__MSPI_CQSTAT_CQCPL
//    <name> CQCPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x500142AC) Command queue operation Complete. This signals the end of the command queue operation. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQSTAT ) </loc>
//      <o.1..1> CQCPL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: MSPI_CQSTAT_CQTIP  ---------------------------------
// SVD Line: 39064

//  <item> SFDITEM_FIELD__MSPI_CQSTAT_CQTIP
//    <name> CQTIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x500142AC) Command queue Transfer In Progress indicator. 1 will indicate that a CQ transfer is active and this will remain active even when paused waiting for external event. </i>
//    <check> 
//      <loc> ( (unsigned int) MSPI_CQSTAT ) </loc>
//      <o.0..0> CQTIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: MSPI_CQSTAT  ----------------------------------
// SVD Line: 39033

//  <rtree> SFDITEM_REG__MSPI_CQSTAT
//    <name> CQSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142AC) Command Queue Status Register </i>
//    <loc> ( (unsigned int)((MSPI_CQSTAT >> 0) & 0xFFFFFFFF), ((MSPI_CQSTAT = (MSPI_CQSTAT & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQSTAT_CQPAUSED </item>
//    <item> SFDITEM_FIELD__MSPI_CQSTAT_CQERR </item>
//    <item> SFDITEM_FIELD__MSPI_CQSTAT_CQCPL </item>
//    <item> SFDITEM_FIELD__MSPI_CQSTAT_CQTIP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_CQFLAGS  ------------------------------
// SVD Line: 39073

unsigned int MSPI_CQFLAGS __AT (0x500142B0);



// ----------------------------  Field Item: MSPI_CQFLAGS_CQFLAGS  --------------------------------
// SVD Line: 39083

//  <item> SFDITEM_FIELD__MSPI_CQFLAGS_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500142B0) Current flag status (read-only). Bits [7:0] are software controllable and bits [15:8] are hardware status. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_CQFLAGS >> 0) & 0xFFFF), ((MSPI_CQFLAGS = (MSPI_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_CQFLAGS  ----------------------------------
// SVD Line: 39073

//  <rtree> SFDITEM_REG__MSPI_CQFLAGS
//    <name> CQFLAGS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142B0) Command Queue Flag Register </i>
//    <loc> ( (unsigned int)((MSPI_CQFLAGS >> 0) & 0xFFFFFFFF), ((MSPI_CQFLAGS = (MSPI_CQFLAGS & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQFLAGS_CQFLAGS </item>
//  </rtree>
//  


// -------------------------  Register Item Address: MSPI_CQSETCLEAR  -----------------------------
// SVD Line: 39163

unsigned int MSPI_CQSETCLEAR __AT (0x500142B4);



// ---------------------------  Field Item: MSPI_CQSETCLEAR_CQFCLR  -------------------------------
// SVD Line: 39173

//  <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFCLR
//    <name> CQFCLR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x500142B4) Clear CQFlag status bits. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CQSETCLEAR >> 16) & 0xFF), ((MSPI_CQSETCLEAR = (MSPI_CQSETCLEAR & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: MSPI_CQSETCLEAR_CQFTOGGLE  -----------------------------
// SVD Line: 39180

//  <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFTOGGLE
//    <name> CQFTOGGLE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x500142B4) Toggle CQFlag status bits </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CQSETCLEAR >> 8) & 0xFF), ((MSPI_CQSETCLEAR = (MSPI_CQSETCLEAR & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: MSPI_CQSETCLEAR_CQFSET  -------------------------------
// SVD Line: 39187

//  <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFSET
//    <name> CQFSET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500142B4) Set CQFlag status bits. Set has priority over clear if both are high. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CQSETCLEAR >> 0) & 0xFF), ((MSPI_CQSETCLEAR = (MSPI_CQSETCLEAR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: MSPI_CQSETCLEAR  --------------------------------
// SVD Line: 39163

//  <rtree> SFDITEM_REG__MSPI_CQSETCLEAR
//    <name> CQSETCLEAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142B4) Command Queue Flag Set/Clear Register </i>
//    <loc> ( (unsigned int)((MSPI_CQSETCLEAR >> 0) & 0xFFFFFFFF), ((MSPI_CQSETCLEAR = (MSPI_CQSETCLEAR & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFCLR </item>
//    <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFTOGGLE </item>
//    <item> SFDITEM_FIELD__MSPI_CQSETCLEAR_CQFSET </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: MSPI_CQPAUSE  ------------------------------
// SVD Line: 39196

unsigned int MSPI_CQPAUSE __AT (0x500142B8);



// -----------------------------  Field Item: MSPI_CQPAUSE_CQMASK  --------------------------------
// SVD Line: 39206

//  <item> SFDITEM_FIELD__MSPI_CQPAUSE_CQMASK
//    <name> CQMASK </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x500142B8) CQ will pause processing until all specified events are satisfied. </i>
//    <edit> 
//      <loc> ( (unsigned short)((MSPI_CQPAUSE >> 0) & 0xFFFF), ((MSPI_CQPAUSE = (MSPI_CQPAUSE & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_CQPAUSE  ----------------------------------
// SVD Line: 39196

//  <rtree> SFDITEM_REG__MSPI_CQPAUSE
//    <name> CQPAUSE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142B8) Command Queue Pause Mask Register </i>
//    <loc> ( (unsigned int)((MSPI_CQPAUSE >> 0) & 0xFFFFFFFF), ((MSPI_CQPAUSE = (MSPI_CQPAUSE & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQPAUSE_CQMASK </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_CQCURIDX  ------------------------------
// SVD Line: 39286

unsigned int MSPI_CQCURIDX __AT (0x500142C0);



// ---------------------------  Field Item: MSPI_CQCURIDX_CQCURIDX  -------------------------------
// SVD Line: 39296

//  <item> SFDITEM_FIELD__MSPI_CQCURIDX_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500142C0) Can be used to indicate the current position of the command queue by having CQ operations write this field. A CQ hardware status flag indicates when CURIDX and ENDIDX are not equal, allowing SW to pause the CQ processing until the end index is updated. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CQCURIDX >> 0) & 0xFF), ((MSPI_CQCURIDX = (MSPI_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_CQCURIDX  ---------------------------------
// SVD Line: 39286

//  <rtree> SFDITEM_REG__MSPI_CQCURIDX
//    <name> CQCURIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142C0) Command Queue Current Index </i>
//    <loc> ( (unsigned int)((MSPI_CQCURIDX >> 0) & 0xFFFFFFFF), ((MSPI_CQCURIDX = (MSPI_CQCURIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQCURIDX_CQCURIDX </item>
//  </rtree>
//  


// --------------------------  Register Item Address: MSPI_CQENDIDX  ------------------------------
// SVD Line: 39305

unsigned int MSPI_CQENDIDX __AT (0x500142C4);



// ---------------------------  Field Item: MSPI_CQENDIDX_CQENDIDX  -------------------------------
// SVD Line: 39315

//  <item> SFDITEM_FIELD__MSPI_CQENDIDX_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x500142C4) Can be used to indicate the end position of the command queue. A CQ hardware status bit indices when CURIDX != ENDIDX so that the CQ can be paused when it reaches the end pointer. </i>
//    <edit> 
//      <loc> ( (unsigned char)((MSPI_CQENDIDX >> 0) & 0xFF), ((MSPI_CQENDIDX = (MSPI_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: MSPI_CQENDIDX  ---------------------------------
// SVD Line: 39305

//  <rtree> SFDITEM_REG__MSPI_CQENDIDX
//    <name> CQENDIDX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x500142C4) Command Queue End Index </i>
//    <loc> ( (unsigned int)((MSPI_CQENDIDX >> 0) & 0xFFFFFFFF), ((MSPI_CQENDIDX = (MSPI_CQENDIDX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__MSPI_CQENDIDX_CQENDIDX </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: MSPI  -------------------------------------
// SVD Line: 37488

//  <view> MSPI
//    <name> MSPI </name>
//    <item> SFDITEM_REG__MSPI_CTRL </item>
//    <item> SFDITEM_REG__MSPI_CFG </item>
//    <item> SFDITEM_REG__MSPI_ADDR </item>
//    <item> SFDITEM_REG__MSPI_INSTR </item>
//    <item> SFDITEM_REG__MSPI_TXFIFO </item>
//    <item> SFDITEM_REG__MSPI_RXFIFO </item>
//    <item> SFDITEM_REG__MSPI_TXENTRIES </item>
//    <item> SFDITEM_REG__MSPI_RXENTRIES </item>
//    <item> SFDITEM_REG__MSPI_THRESHOLD </item>
//    <item> SFDITEM_REG__MSPI_MSPICFG </item>
//    <item> SFDITEM_REG__MSPI_PADCFG </item>
//    <item> SFDITEM_REG__MSPI_PADOUTEN </item>
//    <item> SFDITEM_REG__MSPI_FLASH </item>
//    <item> SFDITEM_REG__MSPI_SCRAMBLING </item>
//    <item> SFDITEM_REG__MSPI_INTEN </item>
//    <item> SFDITEM_REG__MSPI_INTSTAT </item>
//    <item> SFDITEM_REG__MSPI_INTCLR </item>
//    <item> SFDITEM_REG__MSPI_INTSET </item>
//    <item> SFDITEM_REG__MSPI_DMACFG </item>
//    <item> SFDITEM_REG__MSPI_DMASTAT </item>
//    <item> SFDITEM_REG__MSPI_DMATARGADDR </item>
//    <item> SFDITEM_REG__MSPI_DMADEVADDR </item>
//    <item> SFDITEM_REG__MSPI_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__MSPI_DMABCOUNT </item>
//    <item> SFDITEM_REG__MSPI_DMATHRESH </item>
//    <item> SFDITEM_REG__MSPI_CQCFG </item>
//    <item> SFDITEM_REG__MSPI_CQADDR </item>
//    <item> SFDITEM_REG__MSPI_CQSTAT </item>
//    <item> SFDITEM_REG__MSPI_CQFLAGS </item>
//    <item> SFDITEM_REG__MSPI_CQSETCLEAR </item>
//    <item> SFDITEM_REG__MSPI_CQPAUSE </item>
//    <item> SFDITEM_REG__MSPI_CQCURIDX </item>
//    <item> SFDITEM_REG__MSPI_CQENDIDX </item>
//  </view>
//  


// -----------------------------  Register Item Address: PDM_PCFG  --------------------------------
// SVD Line: 39346

unsigned int PDM_PCFG __AT (0x50011000);



// -------------------------------  Field Item: PDM_PCFG_LRSWAP  ----------------------------------
// SVD Line: 39356

//  <item> SFDITEM_FIELD__PDM_PCFG_LRSWAP
//    <name> LRSWAP </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50011000) \nLeft/right channel swap.\n0 : NOSWAP = No channel swapping (IFO Read LEFT_RIGHT). value.\n1 : EN = Swap left and right channels (FIFO Read RIGHT_LEFT). value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.31..31> LRSWAP
//        <0=> 0: NOSWAP = No channel swapping (IFO Read LEFT_RIGHT). value.
//        <1=> 1: EN = Swap left and right channels (FIFO Read RIGHT_LEFT). value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_PGARIGHT  ---------------------------------
// SVD Line: 39374

//  <item> SFDITEM_FIELD__PDM_PCFG_PGARIGHT
//    <name> PGARIGHT </name>
//    <rw> 
//    <i> [Bits 30..26] RW (@ 0x50011000) \nRight channel PGA gain.\n0 : M60DB = -6.0 db gain. value.\n1 : M45DB = -4.5 db gain. value.\n2 : M300DB = -3.0 db gain. value.\n3 : M15DB = -1.5 db gain. value.\n4 : 0DB = 0.0 db gain. value.\n5 : P15DB = 1.5 db gain. value.\n6 : P30DB = 3.0 db gain. value.\n7 : P45DB = 4.5 db gain. value.\n8 : P60DB = 6.0 db gain. value.\n9 : P75DB = 7.5 db gain. value.\n10 : P90DB = 9.0 db gain. value.\n11 : P105DB = 10.5 db gain. value.\n12 : P120DB = 12.0 db gain. value.\n13 : P135DB = 13.5 db gain. value.\n14 : P150DB = 15.0 db gain. value.\n15 : P165DB = 16.5 db gain. value.\n16 : P180DB = 18.0 db gain. value.\n17 : P195DB = 19.5 db gain. value.\n18 : P210DB = 21.0 db gain. value.\n19 : P225DB = 22.5 db gain. value.\n20 : P240DB = 24.0 db gain. value.\n21 : P255DB = 25.5 db gain. value.\n22 : P270DB = 27.0 db gain. value.\n23 : P285DB = 28.5 db gain. value.\n24 : P300DB = 30.0 db gain. value.\n25 : P315DB = 31.5 db gain. value.\n26 : P330DB = 33.0 db gain. value.\n27 : P345DB = 34.5 db gain. value.\n28 : P360DB = 36.0 db gain. value.\n29 : P375DB = 37.5 db gain. value.\n30 : P390DB = 39.0 db gain. value.\n31 : P405DB = 40.5 db gain. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.30..26> PGARIGHT
//        <0=> 0: M60DB = -6.0 db gain. value.
//        <1=> 1: M45DB = -4.5 db gain. value.
//        <2=> 2: M300DB = -3.0 db gain. value.
//        <3=> 3: M15DB = -1.5 db gain. value.
//        <4=> 4: 0DB = 0.0 db gain. value.
//        <5=> 5: P15DB = 1.5 db gain. value.
//        <6=> 6: P30DB = 3.0 db gain. value.
//        <7=> 7: P45DB = 4.5 db gain. value.
//        <8=> 8: P60DB = 6.0 db gain. value.
//        <9=> 9: P75DB = 7.5 db gain. value.
//        <10=> 10: P90DB = 9.0 db gain. value.
//        <11=> 11: P105DB = 10.5 db gain. value.
//        <12=> 12: P120DB = 12.0 db gain. value.
//        <13=> 13: P135DB = 13.5 db gain. value.
//        <14=> 14: P150DB = 15.0 db gain. value.
//        <15=> 15: P165DB = 16.5 db gain. value.
//        <16=> 16: P180DB = 18.0 db gain. value.
//        <17=> 17: P195DB = 19.5 db gain. value.
//        <18=> 18: P210DB = 21.0 db gain. value.
//        <19=> 19: P225DB = 22.5 db gain. value.
//        <20=> 20: P240DB = 24.0 db gain. value.
//        <21=> 21: P255DB = 25.5 db gain. value.
//        <22=> 22: P270DB = 27.0 db gain. value.
//        <23=> 23: P285DB = 28.5 db gain. value.
//        <24=> 24: P300DB = 30.0 db gain. value.
//        <25=> 25: P315DB = 31.5 db gain. value.
//        <26=> 26: P330DB = 33.0 db gain. value.
//        <27=> 27: P345DB = 34.5 db gain. value.
//        <28=> 28: P360DB = 36.0 db gain. value.
//        <29=> 29: P375DB = 37.5 db gain. value.
//        <30=> 30: P390DB = 39.0 db gain. value.
//        <31=> 31: P405DB = 40.5 db gain. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_PGALEFT  ----------------------------------
// SVD Line: 39542

//  <item> SFDITEM_FIELD__PDM_PCFG_PGALEFT
//    <name> PGALEFT </name>
//    <rw> 
//    <i> [Bits 25..21] RW (@ 0x50011000) \nLeft channel PGA gain.\n0 : M60DB = -6.0 db gain. value.\n1 : M45DB = -4.5 db gain. value.\n2 : M300DB = -3.0 db gain. value.\n3 : M15DB = -1.5 db gain. value.\n4 : 0DB = 0.0 db gain. value.\n5 : P15DB = 1.5 db gain. value.\n6 : P30DB = 3.0 db gain. value.\n7 : P45DB = 4.5 db gain. value.\n8 : P60DB = 6.0 db gain. value.\n9 : P75DB = 7.5 db gain. value.\n10 : P90DB = 9.0 db gain. value.\n11 : P105DB = 10.5 db gain. value.\n12 : P120DB = 12.0 db gain. value.\n13 : P135DB = 13.5 db gain. value.\n14 : P150DB = 15.0 db gain. value.\n15 : P165DB = 16.5 db gain. value.\n16 : P180DB = 18.0 db gain. value.\n17 : P195DB = 19.5 db gain. value.\n18 : P210DB = 21.0 db gain. value.\n19 : P225DB = 22.5 db gain. value.\n20 : P240DB = 24.0 db gain. value.\n21 : P255DB = 25.5 db gain. value.\n22 : P270DB = 27.0 db gain. value.\n23 : P285DB = 28.5 db gain. value.\n24 : P300DB = 30.0 db gain. value.\n25 : P315DB = 31.5 db gain. value.\n26 : P330DB = 33.0 db gain. value.\n27 : P345DB = 34.5 db gain. value.\n28 : P360DB = 36.0 db gain. value.\n29 : P375DB = 37.5 db gain. value.\n30 : P390DB = 39.0 db gain. value.\n31 : P405DB = 40.5 db gain. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.25..21> PGALEFT
//        <0=> 0: M60DB = -6.0 db gain. value.
//        <1=> 1: M45DB = -4.5 db gain. value.
//        <2=> 2: M300DB = -3.0 db gain. value.
//        <3=> 3: M15DB = -1.5 db gain. value.
//        <4=> 4: 0DB = 0.0 db gain. value.
//        <5=> 5: P15DB = 1.5 db gain. value.
//        <6=> 6: P30DB = 3.0 db gain. value.
//        <7=> 7: P45DB = 4.5 db gain. value.
//        <8=> 8: P60DB = 6.0 db gain. value.
//        <9=> 9: P75DB = 7.5 db gain. value.
//        <10=> 10: P90DB = 9.0 db gain. value.
//        <11=> 11: P105DB = 10.5 db gain. value.
//        <12=> 12: P120DB = 12.0 db gain. value.
//        <13=> 13: P135DB = 13.5 db gain. value.
//        <14=> 14: P150DB = 15.0 db gain. value.
//        <15=> 15: P165DB = 16.5 db gain. value.
//        <16=> 16: P180DB = 18.0 db gain. value.
//        <17=> 17: P195DB = 19.5 db gain. value.
//        <18=> 18: P210DB = 21.0 db gain. value.
//        <19=> 19: P225DB = 22.5 db gain. value.
//        <20=> 20: P240DB = 24.0 db gain. value.
//        <21=> 21: P255DB = 25.5 db gain. value.
//        <22=> 22: P270DB = 27.0 db gain. value.
//        <23=> 23: P285DB = 28.5 db gain. value.
//        <24=> 24: P300DB = 30.0 db gain. value.
//        <25=> 25: P315DB = 31.5 db gain. value.
//        <26=> 26: P330DB = 33.0 db gain. value.
//        <27=> 27: P345DB = 34.5 db gain. value.
//        <28=> 28: P360DB = 36.0 db gain. value.
//        <29=> 29: P375DB = 37.5 db gain. value.
//        <30=> 30: P390DB = 39.0 db gain. value.
//        <31=> 31: P405DB = 40.5 db gain. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_MCLKDIV  ----------------------------------
// SVD Line: 39710

//  <item> SFDITEM_FIELD__PDM_PCFG_MCLKDIV
//    <name> MCLKDIV </name>
//    <rw> 
//    <i> [Bits 18..17] RW (@ 0x50011000) \nPDM_CLK frequency divisor.\n0 : MCKDIV1 = Divide input clock by 1 value.\n1 : MCKDIV2 = Divide input clock by 2 value.\n2 : MCKDIV3 = Divide input clock by 3 value.\n3 : MCKDIV4 = Divide input clock by 4 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.18..17> MCLKDIV
//        <0=> 0: MCKDIV1 = Divide input clock by 1 value.
//        <1=> 1: MCKDIV2 = Divide input clock by 2 value.
//        <2=> 2: MCKDIV3 = Divide input clock by 3 value.
//        <3=> 3: MCKDIV4 = Divide input clock by 4 value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_SINCRATE  ---------------------------------
// SVD Line: 39738

//  <item> SFDITEM_FIELD__PDM_PCFG_SINCRATE
//    <name> SINCRATE </name>
//    <rw> 
//    <i> [Bits 16..10] RW (@ 0x50011000) SINC decimation rate. </i>
//    <edit> 
//      <loc> ( (unsigned char)((PDM_PCFG >> 10) & 0x7F), ((PDM_PCFG = (PDM_PCFG & ~(0x7FUL << 10 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 10 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PDM_PCFG_ADCHPD  ----------------------------------
// SVD Line: 39745

//  <item> SFDITEM_FIELD__PDM_PCFG_ADCHPD
//    <name> ADCHPD </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50011000) \nHigh pass filter control.\n0 : DIS = Disable high pass filter. value.\n1 : EN = Enable high pass filter. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.9..9> ADCHPD
//        <0=> 0: DIS = Disable high pass filter. value.
//        <1=> 1: EN = Enable high pass filter. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_HPCUTOFF  ---------------------------------
// SVD Line: 39763

//  <item> SFDITEM_FIELD__PDM_PCFG_HPCUTOFF
//    <name> HPCUTOFF </name>
//    <rw> 
//    <i> [Bits 8..5] RW (@ 0x50011000) High pass filter coefficients. </i>
//    <edit> 
//      <loc> ( (unsigned char)((PDM_PCFG >> 5) & 0xF), ((PDM_PCFG = (PDM_PCFG & ~(0xFUL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PDM_PCFG_CYCLES  ----------------------------------
// SVD Line: 39770

//  <item> SFDITEM_FIELD__PDM_PCFG_CYCLES
//    <name> CYCLES </name>
//    <rw> 
//    <i> [Bits 4..2] RW (@ 0x50011000) Number of clocks during gain-setting changes. </i>
//    <edit> 
//      <loc> ( (unsigned char)((PDM_PCFG >> 2) & 0x7), ((PDM_PCFG = (PDM_PCFG & ~(0x7UL << 2 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PDM_PCFG_SOFTMUTE  ---------------------------------
// SVD Line: 39777

//  <item> SFDITEM_FIELD__PDM_PCFG_SOFTMUTE
//    <name> SOFTMUTE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011000) \nSoft mute control.\n0 : DIS = Disable Soft Mute. value.\n1 : EN = Enable Soft Mute. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.1..1> SOFTMUTE
//        <0=> 0: DIS = Disable Soft Mute. value.
//        <1=> 1: EN = Enable Soft Mute. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PDM_PCFG_PDMCOREEN  ---------------------------------
// SVD Line: 39795

//  <item> SFDITEM_FIELD__PDM_PCFG_PDMCOREEN
//    <name> PDMCOREEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011000) \nData Streaming Control.\n0 : DIS = Disable Data Streaming. value.\n1 : EN = Enable Data Streaming. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_PCFG ) </loc>
//      <o.0..0> PDMCOREEN
//        <0=> 0: DIS = Disable Data Streaming. value.
//        <1=> 1: EN = Enable Data Streaming. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: PDM_PCFG  ------------------------------------
// SVD Line: 39346

//  <rtree> SFDITEM_REG__PDM_PCFG
//    <name> PCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011000) PDM Configuration Register </i>
//    <loc> ( (unsigned int)((PDM_PCFG >> 0) & 0xFFFFFFFF), ((PDM_PCFG = (PDM_PCFG & ~(0xFFE7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFE7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_PCFG_LRSWAP </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_PGARIGHT </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_PGALEFT </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_MCLKDIV </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_SINCRATE </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_ADCHPD </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_HPCUTOFF </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_CYCLES </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_SOFTMUTE </item>
//    <item> SFDITEM_FIELD__PDM_PCFG_PDMCOREEN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: PDM_VCFG  --------------------------------
// SVD Line: 39815

unsigned int PDM_VCFG __AT (0x50011004);



// ------------------------------  Field Item: PDM_VCFG_IOCLKEN  ----------------------------------
// SVD Line: 39825

//  <item> SFDITEM_FIELD__PDM_VCFG_IOCLKEN
//    <name> IOCLKEN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x50011004) \nEnable the IO clock.\n0 : DIS = Disable FIFO read. value.\n1 : EN = Enable FIFO read. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.31..31> IOCLKEN
//        <0=> 0: DIS = Disable FIFO read. value.
//        <1=> 1: EN = Enable FIFO read. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: PDM_VCFG_RSTB  -----------------------------------
// SVD Line: 39843

//  <item> SFDITEM_FIELD__PDM_VCFG_RSTB
//    <name> RSTB </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x50011004) \nReset the IP core.\n0 : RESET = Reset the core. value.\n1 : NORM = Enable the core. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.30..30> RSTB
//        <0=> 0: RESET = Reset the core. value.
//        <1=> 1: NORM = Enable the core. value.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PDM_VCFG_PDMCLKSEL  ---------------------------------
// SVD Line: 39861

//  <item> SFDITEM_FIELD__PDM_VCFG_PDMCLKSEL
//    <name> PDMCLKSEL </name>
//    <rw> 
//    <i> [Bits 29..27] RW (@ 0x50011004) \nSelect the PDM input clock.\n0 : DISABLE = Static value. value.\n1 : 12MHz = PDM clock is 12 MHz. value.\n2 : 6MHz = PDM clock is 6 MHz. value.\n3 : 3MHz = PDM clock is 3 MHz. value.\n4 : 1_5MHz = PDM clock is 1.5 MHz. value.\n5 : 750KHz = PDM clock is 750 KHz. value.\n6 : 375KHz = PDM clock is 375 KHz. value.\n7 : 187KHz = PDM clock is 187.5 KHz. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.29..27> PDMCLKSEL
//        <0=> 0: DISABLE = Static value. value.
//        <1=> 1: 12MHz = PDM clock is 12 MHz. value.
//        <2=> 2: 6MHz = PDM clock is 6 MHz. value.
//        <3=> 3: 3MHz = PDM clock is 3 MHz. value.
//        <4=> 4: 1_5MHz = PDM clock is 1.5 MHz. value.
//        <5=> 5: 750KHz = PDM clock is 750 KHz. value.
//        <6=> 6: 375KHz = PDM clock is 375 KHz. value.
//        <7=> 7: 187KHz = PDM clock is 187.5 KHz. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_VCFG_PDMCLKEN  ---------------------------------
// SVD Line: 39909

//  <item> SFDITEM_FIELD__PDM_VCFG_PDMCLKEN
//    <name> PDMCLKEN </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x50011004) \nEnable the serial clock.\n0 : DIS = Disable serial clock. value.\n1 : EN = Enable serial clock. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.26..26> PDMCLKEN
//        <0=> 0: DIS = Disable serial clock. value.
//        <1=> 1: EN = Enable serial clock. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PDM_VCFG_I2SEN  -----------------------------------
// SVD Line: 39927

//  <item> SFDITEM_FIELD__PDM_VCFG_I2SEN
//    <name> I2SEN </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x50011004) \nI2S interface enable.\n0 : DIS = Disable I2S interface. value.\n1 : EN = Enable I2S interface. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.20..20> I2SEN
//        <0=> 0: DIS = Disable I2S interface. value.
//        <1=> 1: EN = Enable I2S interface. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_VCFG_BCLKINV  ----------------------------------
// SVD Line: 39945

//  <item> SFDITEM_FIELD__PDM_VCFG_BCLKINV
//    <name> BCLKINV </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x50011004) \nI2S BCLK input inversion.\n0 : INV = BCLK inverted. value.\n1 : NORM = BCLK not inverted. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.19..19> BCLKINV
//        <0=> 0: INV = BCLK inverted. value.
//        <1=> 1: NORM = BCLK not inverted. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_VCFG_DMICKDEL  ---------------------------------
// SVD Line: 39963

//  <item> SFDITEM_FIELD__PDM_VCFG_DMICKDEL
//    <name> DMICKDEL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x50011004) \nPDM clock sampling delay.\n0 : 0CYC = No delay. value.\n1 : 1CYC = 1 cycle delay. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.17..17> DMICKDEL
//        <0=> 0: 0CYC = No delay. value.
//        <1=> 1: 1CYC = 1 cycle delay. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PDM_VCFG_SELAP  -----------------------------------
// SVD Line: 39981

//  <item> SFDITEM_FIELD__PDM_VCFG_SELAP
//    <name> SELAP </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x50011004) \nSelect PDM input clock source.\n0 : INTERNAL = Clock source from internal clock generator. value.\n1 : I2S = Clock source from I2S BCLK. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.16..16> SELAP
//        <0=> 0: INTERNAL = Clock source from internal clock generator. value.
//        <1=> 1: I2S = Clock source from I2S BCLK. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_VCFG_PCMPACK  ----------------------------------
// SVD Line: 39999

//  <item> SFDITEM_FIELD__PDM_VCFG_PCMPACK
//    <name> PCMPACK </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50011004) \nPCM data packing enable.\n0 : DIS = Disable PCM packing. value.\n1 : EN = Enable PCM packing. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.8..8> PCMPACK
//        <0=> 0: DIS = Disable PCM packing. value.
//        <1=> 1: EN = Enable PCM packing. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PDM_VCFG_CHSET  -----------------------------------
// SVD Line: 40017

//  <item> SFDITEM_FIELD__PDM_VCFG_CHSET
//    <name> CHSET </name>
//    <rw> 
//    <i> [Bits 4..3] RW (@ 0x50011004) \nSet PCM channels.\n0 : DIS = Channel disabled. value.\n1 : LEFT = Mono left channel. value.\n2 : RIGHT = Mono right channel. value.\n3 : STEREO = Stereo channels. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_VCFG ) </loc>
//      <o.4..3> CHSET
//        <0=> 0: DIS = Channel disabled. value.
//        <1=> 1: LEFT = Mono left channel. value.
//        <2=> 2: RIGHT = Mono right channel. value.
//        <3=> 3: STEREO = Stereo channels. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: PDM_VCFG  ------------------------------------
// SVD Line: 39815

//  <rtree> SFDITEM_REG__PDM_VCFG
//    <name> VCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011004) Voice Configuration Register </i>
//    <loc> ( (unsigned int)((PDM_VCFG >> 0) & 0xFFFFFFFF), ((PDM_VCFG = (PDM_VCFG & ~(0xFC1B0118UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFC1B0118) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_VCFG_IOCLKEN </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_RSTB </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_PDMCLKSEL </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_PDMCLKEN </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_I2SEN </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_BCLKINV </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_DMICKDEL </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_SELAP </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_PCMPACK </item>
//    <item> SFDITEM_FIELD__PDM_VCFG_CHSET </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PDM_VOICESTAT  ------------------------------
// SVD Line: 40047

unsigned int PDM_VOICESTAT __AT (0x50011008);



// ----------------------------  Field Item: PDM_VOICESTAT_FIFOCNT  -------------------------------
// SVD Line: 40057

//  <item> SFDITEM_FIELD__PDM_VOICESTAT_FIFOCNT
//    <name> FIFOCNT </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x50011008) Valid 32-bit entries currently in the FIFO. </i>
//    <edit> 
//      <loc> ( (unsigned char)((PDM_VOICESTAT >> 0) & 0x3F), ((PDM_VOICESTAT = (PDM_VOICESTAT & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: PDM_VOICESTAT  ---------------------------------
// SVD Line: 40047

//  <rtree> SFDITEM_REG__PDM_VOICESTAT
//    <name> VOICESTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011008) Voice Status Register </i>
//    <loc> ( (unsigned int)((PDM_VOICESTAT >> 0) & 0xFFFFFFFF), ((PDM_VOICESTAT = (PDM_VOICESTAT & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_VOICESTAT_FIFOCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PDM_FIFOREAD  ------------------------------
// SVD Line: 40066

unsigned int PDM_FIFOREAD __AT (0x5001100C);



// ----------------------------  Field Item: PDM_FIFOREAD_FIFOREAD  -------------------------------
// SVD Line: 40076

//  <item> SFDITEM_FIELD__PDM_FIFOREAD_FIFOREAD
//    <name> FIFOREAD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001100C) FIFO read data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((PDM_FIFOREAD >> 0) & 0xFFFFFFFF), ((PDM_FIFOREAD = (PDM_FIFOREAD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: PDM_FIFOREAD  ----------------------------------
// SVD Line: 40066

//  <rtree> SFDITEM_REG__PDM_FIFOREAD
//    <name> FIFOREAD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001100C) FIFO Read </i>
//    <loc> ( (unsigned int)((PDM_FIFOREAD >> 0) & 0xFFFFFFFF), ((PDM_FIFOREAD = (PDM_FIFOREAD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_FIFOREAD_FIFOREAD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PDM_FIFOFLUSH  ------------------------------
// SVD Line: 40085

unsigned int PDM_FIFOFLUSH __AT (0x50011010);



// ---------------------------  Field Item: PDM_FIFOFLUSH_FIFOFLUSH  ------------------------------
// SVD Line: 40095

//  <item> SFDITEM_FIELD__PDM_FIFOFLUSH_FIFOFLUSH
//    <name> FIFOFLUSH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011010) FIFO FLUSH. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_FIFOFLUSH ) </loc>
//      <o.0..0> FIFOFLUSH
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: PDM_FIFOFLUSH  ---------------------------------
// SVD Line: 40085

//  <rtree> SFDITEM_REG__PDM_FIFOFLUSH
//    <name> FIFOFLUSH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011010) FIFO Flush </i>
//    <loc> ( (unsigned int)((PDM_FIFOFLUSH >> 0) & 0xFFFFFFFF), ((PDM_FIFOFLUSH = (PDM_FIFOFLUSH & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_FIFOFLUSH_FIFOFLUSH </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PDM_FIFOTHR  -------------------------------
// SVD Line: 40104

unsigned int PDM_FIFOTHR __AT (0x50011014);



// -----------------------------  Field Item: PDM_FIFOTHR_FIFOTHR  --------------------------------
// SVD Line: 40114

//  <item> SFDITEM_FIELD__PDM_FIFOTHR_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x50011014) FIFO Threshold value. When the FIFO count is equal to, or larger than this value (in words), a THR interrupt is generated (if enabled) </i>
//    <edit> 
//      <loc> ( (unsigned char)((PDM_FIFOTHR >> 0) & 0x1F), ((PDM_FIFOTHR = (PDM_FIFOTHR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PDM_FIFOTHR  ----------------------------------
// SVD Line: 40104

//  <rtree> SFDITEM_REG__PDM_FIFOTHR
//    <name> FIFOTHR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011014) FIFO Threshold </i>
//    <loc> ( (unsigned int)((PDM_FIFOTHR >> 0) & 0xFFFFFFFF), ((PDM_FIFOTHR = (PDM_FIFOTHR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_FIFOTHR_FIFOTHR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PDM_INTEN  --------------------------------
// SVD Line: 40123

unsigned int PDM_INTEN __AT (0x50011200);



// -------------------------------  Field Item: PDM_INTEN_DERR  -----------------------------------
// SVD Line: 40133

//  <item> SFDITEM_FIELD__PDM_INTEN_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50011200) DMA Error receieved </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTEN ) </loc>
//      <o.4..4> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTEN_DCMP  -----------------------------------
// SVD Line: 40140

//  <item> SFDITEM_FIELD__PDM_INTEN_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50011200) DMA completed a transfer </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTEN ) </loc>
//      <o.3..3> DCMP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTEN_UNDFL  ----------------------------------
// SVD Line: 40147

//  <item> SFDITEM_FIELD__PDM_INTEN_UNDFL
//    <name> UNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50011200) This is the FIFO underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTEN ) </loc>
//      <o.2..2> UNDFL
//    </check>
//  </item>
//  


// --------------------------------  Field Item: PDM_INTEN_OVF  -----------------------------------
// SVD Line: 40154

//  <item> SFDITEM_FIELD__PDM_INTEN_OVF
//    <name> OVF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011200) This is the FIFO overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTEN ) </loc>
//      <o.1..1> OVF
//    </check>
//  </item>
//  


// --------------------------------  Field Item: PDM_INTEN_THR  -----------------------------------
// SVD Line: 40161

//  <item> SFDITEM_FIELD__PDM_INTEN_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011200) This is the FIFO threshold interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTEN ) </loc>
//      <o.0..0> THR
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: PDM_INTEN  -----------------------------------
// SVD Line: 40123

//  <rtree> SFDITEM_REG__PDM_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011200) IO Master Interrupts: Enable </i>
//    <loc> ( (unsigned int)((PDM_INTEN >> 0) & 0xFFFFFFFF), ((PDM_INTEN = (PDM_INTEN & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_INTEN_DERR </item>
//    <item> SFDITEM_FIELD__PDM_INTEN_DCMP </item>
//    <item> SFDITEM_FIELD__PDM_INTEN_UNDFL </item>
//    <item> SFDITEM_FIELD__PDM_INTEN_OVF </item>
//    <item> SFDITEM_FIELD__PDM_INTEN_THR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PDM_INTSTAT  -------------------------------
// SVD Line: 40170

unsigned int PDM_INTSTAT __AT (0x50011204);



// ------------------------------  Field Item: PDM_INTSTAT_DERR  ----------------------------------
// SVD Line: 40180

//  <item> SFDITEM_FIELD__PDM_INTSTAT_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50011204) DMA Error receieved </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSTAT ) </loc>
//      <o.4..4> DERR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: PDM_INTSTAT_DCMP  ----------------------------------
// SVD Line: 40187

//  <item> SFDITEM_FIELD__PDM_INTSTAT_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50011204) DMA completed a transfer </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSTAT ) </loc>
//      <o.3..3> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: PDM_INTSTAT_UNDFL  ---------------------------------
// SVD Line: 40194

//  <item> SFDITEM_FIELD__PDM_INTSTAT_UNDFL
//    <name> UNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50011204) This is the FIFO underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSTAT ) </loc>
//      <o.2..2> UNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTSTAT_OVF  ----------------------------------
// SVD Line: 40201

//  <item> SFDITEM_FIELD__PDM_INTSTAT_OVF
//    <name> OVF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011204) This is the FIFO overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSTAT ) </loc>
//      <o.1..1> OVF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTSTAT_THR  ----------------------------------
// SVD Line: 40208

//  <item> SFDITEM_FIELD__PDM_INTSTAT_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011204) This is the FIFO threshold interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSTAT ) </loc>
//      <o.0..0> THR
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: PDM_INTSTAT  ----------------------------------
// SVD Line: 40170

//  <rtree> SFDITEM_REG__PDM_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011204) IO Master Interrupts: Status </i>
//    <loc> ( (unsigned int)((PDM_INTSTAT >> 0) & 0xFFFFFFFF), ((PDM_INTSTAT = (PDM_INTSTAT & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_INTSTAT_DERR </item>
//    <item> SFDITEM_FIELD__PDM_INTSTAT_DCMP </item>
//    <item> SFDITEM_FIELD__PDM_INTSTAT_UNDFL </item>
//    <item> SFDITEM_FIELD__PDM_INTSTAT_OVF </item>
//    <item> SFDITEM_FIELD__PDM_INTSTAT_THR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PDM_INTCLR  -------------------------------
// SVD Line: 40217

unsigned int PDM_INTCLR __AT (0x50011208);



// -------------------------------  Field Item: PDM_INTCLR_DERR  ----------------------------------
// SVD Line: 40227

//  <item> SFDITEM_FIELD__PDM_INTCLR_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x50011208) DMA Error receieved </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTCLR ) </loc>
//      <o.4..4> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTCLR_DCMP  ----------------------------------
// SVD Line: 40234

//  <item> SFDITEM_FIELD__PDM_INTCLR_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x50011208) DMA completed a transfer </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTCLR ) </loc>
//      <o.3..3> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: PDM_INTCLR_UNDFL  ----------------------------------
// SVD Line: 40241

//  <item> SFDITEM_FIELD__PDM_INTCLR_UNDFL
//    <name> UNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50011208) This is the FIFO underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTCLR ) </loc>
//      <o.2..2> UNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTCLR_OVF  -----------------------------------
// SVD Line: 40248

//  <item> SFDITEM_FIELD__PDM_INTCLR_OVF
//    <name> OVF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011208) This is the FIFO overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTCLR ) </loc>
//      <o.1..1> OVF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTCLR_THR  -----------------------------------
// SVD Line: 40255

//  <item> SFDITEM_FIELD__PDM_INTCLR_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011208) This is the FIFO threshold interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTCLR ) </loc>
//      <o.0..0> THR
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: PDM_INTCLR  -----------------------------------
// SVD Line: 40217

//  <rtree> SFDITEM_REG__PDM_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011208) IO Master Interrupts: Clear </i>
//    <loc> ( (unsigned int)((PDM_INTCLR >> 0) & 0xFFFFFFFF), ((PDM_INTCLR = (PDM_INTCLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_INTCLR_DERR </item>
//    <item> SFDITEM_FIELD__PDM_INTCLR_DCMP </item>
//    <item> SFDITEM_FIELD__PDM_INTCLR_UNDFL </item>
//    <item> SFDITEM_FIELD__PDM_INTCLR_OVF </item>
//    <item> SFDITEM_FIELD__PDM_INTCLR_THR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PDM_INTSET  -------------------------------
// SVD Line: 40264

unsigned int PDM_INTSET __AT (0x5001120C);



// -------------------------------  Field Item: PDM_INTSET_DERR  ----------------------------------
// SVD Line: 40274

//  <item> SFDITEM_FIELD__PDM_INTSET_DERR
//    <name> DERR </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x5001120C) DMA Error receieved </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSET ) </loc>
//      <o.4..4> DERR
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTSET_DCMP  ----------------------------------
// SVD Line: 40281

//  <item> SFDITEM_FIELD__PDM_INTSET_DCMP
//    <name> DCMP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x5001120C) DMA completed a transfer </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSET ) </loc>
//      <o.3..3> DCMP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: PDM_INTSET_UNDFL  ----------------------------------
// SVD Line: 40288

//  <item> SFDITEM_FIELD__PDM_INTSET_UNDFL
//    <name> UNDFL </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x5001120C) This is the FIFO underflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSET ) </loc>
//      <o.2..2> UNDFL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTSET_OVF  -----------------------------------
// SVD Line: 40295

//  <item> SFDITEM_FIELD__PDM_INTSET_OVF
//    <name> OVF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x5001120C) This is the FIFO overflow interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSET ) </loc>
//      <o.1..1> OVF
//    </check>
//  </item>
//  


// -------------------------------  Field Item: PDM_INTSET_THR  -----------------------------------
// SVD Line: 40302

//  <item> SFDITEM_FIELD__PDM_INTSET_THR
//    <name> THR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x5001120C) This is the FIFO threshold interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_INTSET ) </loc>
//      <o.0..0> THR
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: PDM_INTSET  -----------------------------------
// SVD Line: 40264

//  <rtree> SFDITEM_REG__PDM_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001120C) IO Master Interrupts: Set </i>
//    <loc> ( (unsigned int)((PDM_INTSET >> 0) & 0xFFFFFFFF), ((PDM_INTSET = (PDM_INTSET & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_INTSET_DERR </item>
//    <item> SFDITEM_FIELD__PDM_INTSET_DCMP </item>
//    <item> SFDITEM_FIELD__PDM_INTSET_UNDFL </item>
//    <item> SFDITEM_FIELD__PDM_INTSET_OVF </item>
//    <item> SFDITEM_FIELD__PDM_INTSET_THR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PDM_DMATRIGEN  ------------------------------
// SVD Line: 40311

unsigned int PDM_DMATRIGEN __AT (0x50011240);



// ----------------------------  Field Item: PDM_DMATRIGEN_DTHR90  --------------------------------
// SVD Line: 40321

//  <item> SFDITEM_FIELD__PDM_DMATRIGEN_DTHR90
//    <name> DTHR90 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011240) Trigger DMA at FIFO 90 percent full. This signal is also used internally for AUTOHIP function </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMATRIGEN ) </loc>
//      <o.1..1> DTHR90
//    </check>
//  </item>
//  


// -----------------------------  Field Item: PDM_DMATRIGEN_DTHR  ---------------------------------
// SVD Line: 40328

//  <item> SFDITEM_FIELD__PDM_DMATRIGEN_DTHR
//    <name> DTHR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011240) Trigger DMA upon when FIFO iss filled to level indicated by the FIFO THRESHOLD,at granularity of 16 bytes only </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMATRIGEN ) </loc>
//      <o.0..0> DTHR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: PDM_DMATRIGEN  ---------------------------------
// SVD Line: 40311

//  <rtree> SFDITEM_REG__PDM_DMATRIGEN
//    <name> DMATRIGEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011240) DMA Trigger Enable Register </i>
//    <loc> ( (unsigned int)((PDM_DMATRIGEN >> 0) & 0xFFFFFFFF), ((PDM_DMATRIGEN = (PDM_DMATRIGEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMATRIGEN_DTHR90 </item>
//    <item> SFDITEM_FIELD__PDM_DMATRIGEN_DTHR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PDM_DMATRIGSTAT  -----------------------------
// SVD Line: 40337

unsigned int PDM_DMATRIGSTAT __AT (0x50011244);



// -------------------------  Field Item: PDM_DMATRIGSTAT_DTHR90STAT  -----------------------------
// SVD Line: 40347

//  <item> SFDITEM_FIELD__PDM_DMATRIGSTAT_DTHR90STAT
//    <name> DTHR90STAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011244) Triggered DMA from FIFO reaching 90 percent full </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMATRIGSTAT ) </loc>
//      <o.1..1> DTHR90STAT
//    </check>
//  </item>
//  


// --------------------------  Field Item: PDM_DMATRIGSTAT_DTHRSTAT  ------------------------------
// SVD Line: 40354

//  <item> SFDITEM_FIELD__PDM_DMATRIGSTAT_DTHRSTAT
//    <name> DTHRSTAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011244) Triggered DMA from FIFO reaching threshold </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMATRIGSTAT ) </loc>
//      <o.0..0> DTHRSTAT
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: PDM_DMATRIGSTAT  --------------------------------
// SVD Line: 40337

//  <rtree> SFDITEM_REG__PDM_DMATRIGSTAT
//    <name> DMATRIGSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011244) DMA Trigger Status Register </i>
//    <loc> ( (unsigned int)((PDM_DMATRIGSTAT >> 0) & 0xFFFFFFFF), ((PDM_DMATRIGSTAT = (PDM_DMATRIGSTAT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMATRIGSTAT_DTHR90STAT </item>
//    <item> SFDITEM_FIELD__PDM_DMATRIGSTAT_DTHRSTAT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PDM_DMACFG  -------------------------------
// SVD Line: 40363

unsigned int PDM_DMACFG __AT (0x50011280);



// -----------------------------  Field Item: PDM_DMACFG_DPWROFF  ---------------------------------
// SVD Line: 40373

//  <item> SFDITEM_FIELD__PDM_DMACFG_DPWROFF
//    <name> DPWROFF </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x50011280) Power Off the ADC System upon DMACPL. </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMACFG ) </loc>
//      <o.10..10> DPWROFF
//    </check>
//  </item>
//  


// -----------------------------  Field Item: PDM_DMACFG_DAUTOHIP  --------------------------------
// SVD Line: 40380

//  <item> SFDITEM_FIELD__PDM_DMACFG_DAUTOHIP
//    <name> DAUTOHIP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x50011280) Raise priority to high on fifo full, and DMAPRI set to low </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMACFG ) </loc>
//      <o.9..9> DAUTOHIP
//    </check>
//  </item>
//  


// ------------------------------  Field Item: PDM_DMACFG_DMAPRI  ---------------------------------
// SVD Line: 40387

//  <item> SFDITEM_FIELD__PDM_DMACFG_DMAPRI
//    <name> DMAPRI </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x50011280) \nSets the Priority of the DMA request\n0 : LOW = Low Priority (service as best effort) value.\n1 : HIGH = High Priority (service immediately) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_DMACFG ) </loc>
//      <o.8..8> DMAPRI
//        <0=> 0: LOW = Low Priority (service as best effort) value.
//        <1=> 1: HIGH = High Priority (service immediately) value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_DMACFG_DMADIR  ---------------------------------
// SVD Line: 40405

//  <item> SFDITEM_FIELD__PDM_DMACFG_DMADIR
//    <name> DMADIR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50011280) \nDirection\n0 : P2M = Peripheral to Memory (SRAM) transaction. THe PDM module will only DMA to memory. value.\n1 : M2P = Memory to Peripheral transaction. Not available for PDM module value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_DMACFG ) </loc>
//      <o.2..2> DMADIR
//        <0=> 0: P2M = Peripheral to Memory (SRAM) transaction. THe PDM module will only DMA to memory. value.
//        <1=> 1: M2P = Memory to Peripheral transaction. Not available for PDM module value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PDM_DMACFG_DMAEN  ----------------------------------
// SVD Line: 40423

//  <item> SFDITEM_FIELD__PDM_DMACFG_DMAEN
//    <name> DMAEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011280) \nDMA Enable\n0 : DIS = Disable DMA Function value.\n1 : EN = Enable DMA Function value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PDM_DMACFG ) </loc>
//      <o.0..0> DMAEN
//        <0=> 0: DIS = Disable DMA Function value.
//        <1=> 1: EN = Enable DMA Function value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: PDM_DMACFG  -----------------------------------
// SVD Line: 40363

//  <rtree> SFDITEM_REG__PDM_DMACFG
//    <name> DMACFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011280) DMA Configuration Register </i>
//    <loc> ( (unsigned int)((PDM_DMACFG >> 0) & 0xFFFFFFFF), ((PDM_DMACFG = (PDM_DMACFG & ~(0x705UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x705) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMACFG_DPWROFF </item>
//    <item> SFDITEM_FIELD__PDM_DMACFG_DAUTOHIP </item>
//    <item> SFDITEM_FIELD__PDM_DMACFG_DMAPRI </item>
//    <item> SFDITEM_FIELD__PDM_DMACFG_DMADIR </item>
//    <item> SFDITEM_FIELD__PDM_DMACFG_DMAEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PDM_DMATOTCOUNT  -----------------------------
// SVD Line: 40443

unsigned int PDM_DMATOTCOUNT __AT (0x50011288);



// --------------------------  Field Item: PDM_DMATOTCOUNT_TOTCOUNT  ------------------------------
// SVD Line: 40453

//  <item> SFDITEM_FIELD__PDM_DMATOTCOUNT_TOTCOUNT
//    <name> TOTCOUNT </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x50011288) Total Transfer Count. The transfer count must be a multiple of the THR setting to avoid DMA overruns. </i>
//    <edit> 
//      <loc> ( (unsigned int)((PDM_DMATOTCOUNT >> 0) & 0xFFFFF), ((PDM_DMATOTCOUNT = (PDM_DMATOTCOUNT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: PDM_DMATOTCOUNT  --------------------------------
// SVD Line: 40443

//  <rtree> SFDITEM_REG__PDM_DMATOTCOUNT
//    <name> DMATOTCOUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011288) DMA Total Transfer Count </i>
//    <loc> ( (unsigned int)((PDM_DMATOTCOUNT >> 0) & 0xFFFFFFFF), ((PDM_DMATOTCOUNT = (PDM_DMATOTCOUNT & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMATOTCOUNT_TOTCOUNT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PDM_DMATARGADDR  -----------------------------
// SVD Line: 40462

unsigned int PDM_DMATARGADDR __AT (0x5001128C);



// --------------------------  Field Item: PDM_DMATARGADDR_UTARGADDR  -----------------------------
// SVD Line: 40472

//  <item> SFDITEM_FIELD__PDM_DMATARGADDR_UTARGADDR
//    <name> UTARGADDR </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x5001128C) SRAM Target </i>
//    <edit> 
//      <loc> ( (unsigned short)((PDM_DMATARGADDR >> 20) & 0xFFF), ((PDM_DMATARGADDR = (PDM_DMATARGADDR & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: PDM_DMATARGADDR_LTARGADDR  -----------------------------
// SVD Line: 40479

//  <item> SFDITEM_FIELD__PDM_DMATARGADDR_LTARGADDR
//    <name> LTARGADDR </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x5001128C) DMA Target Address. This register is not updated with the current address of the DMA, but will remain static with the original address during the DMA transfer. </i>
//    <edit> 
//      <loc> ( (unsigned int)((PDM_DMATARGADDR >> 0) & 0xFFFFF), ((PDM_DMATARGADDR = (PDM_DMATARGADDR & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: PDM_DMATARGADDR  --------------------------------
// SVD Line: 40462

//  <rtree> SFDITEM_REG__PDM_DMATARGADDR
//    <name> DMATARGADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x5001128C) DMA Target Address Register </i>
//    <loc> ( (unsigned int)((PDM_DMATARGADDR >> 0) & 0xFFFFFFFF), ((PDM_DMATARGADDR = (PDM_DMATARGADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMATARGADDR_UTARGADDR </item>
//    <item> SFDITEM_FIELD__PDM_DMATARGADDR_LTARGADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PDM_DMASTAT  -------------------------------
// SVD Line: 40488

unsigned int PDM_DMASTAT __AT (0x50011290);



// -----------------------------  Field Item: PDM_DMASTAT_DMAERR  ---------------------------------
// SVD Line: 40498

//  <item> SFDITEM_FIELD__PDM_DMASTAT_DMAERR
//    <name> DMAERR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x50011290) DMA Error </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMASTAT ) </loc>
//      <o.2..2> DMAERR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: PDM_DMASTAT_DMACPL  ---------------------------------
// SVD Line: 40505

//  <item> SFDITEM_FIELD__PDM_DMASTAT_DMACPL
//    <name> DMACPL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x50011290) DMA Transfer Complete </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMASTAT ) </loc>
//      <o.1..1> DMACPL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: PDM_DMASTAT_DMATIP  ---------------------------------
// SVD Line: 40512

//  <item> SFDITEM_FIELD__PDM_DMASTAT_DMATIP
//    <name> DMATIP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x50011290) DMA Transfer In Progress </i>
//    <check> 
//      <loc> ( (unsigned int) PDM_DMASTAT ) </loc>
//      <o.0..0> DMATIP
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: PDM_DMASTAT  ----------------------------------
// SVD Line: 40488

//  <rtree> SFDITEM_REG__PDM_DMASTAT
//    <name> DMASTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x50011290) DMA Status Register </i>
//    <loc> ( (unsigned int)((PDM_DMASTAT >> 0) & 0xFFFFFFFF), ((PDM_DMASTAT = (PDM_DMASTAT & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PDM_DMASTAT_DMAERR </item>
//    <item> SFDITEM_FIELD__PDM_DMASTAT_DMACPL </item>
//    <item> SFDITEM_FIELD__PDM_DMASTAT_DMATIP </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: PDM  --------------------------------------
// SVD Line: 39327

//  <view> PDM
//    <name> PDM </name>
//    <item> SFDITEM_REG__PDM_PCFG </item>
//    <item> SFDITEM_REG__PDM_VCFG </item>
//    <item> SFDITEM_REG__PDM_VOICESTAT </item>
//    <item> SFDITEM_REG__PDM_FIFOREAD </item>
//    <item> SFDITEM_REG__PDM_FIFOFLUSH </item>
//    <item> SFDITEM_REG__PDM_FIFOTHR </item>
//    <item> SFDITEM_REG__PDM_INTEN </item>
//    <item> SFDITEM_REG__PDM_INTSTAT </item>
//    <item> SFDITEM_REG__PDM_INTCLR </item>
//    <item> SFDITEM_REG__PDM_INTSET </item>
//    <item> SFDITEM_REG__PDM_DMATRIGEN </item>
//    <item> SFDITEM_REG__PDM_DMATRIGSTAT </item>
//    <item> SFDITEM_REG__PDM_DMACFG </item>
//    <item> SFDITEM_REG__PDM_DMATOTCOUNT </item>
//    <item> SFDITEM_REG__PDM_DMATARGADDR </item>
//    <item> SFDITEM_REG__PDM_DMASTAT </item>
//  </view>
//  


// ------------------------  Register Item Address: PWRCTRL_SUPPLYSRC  ----------------------------
// SVD Line: 40540

unsigned int PWRCTRL_SUPPLYSRC __AT (0x40021000);



// -------------------------  Field Item: PWRCTRL_SUPPLYSRC_BLEBUCKEN  ----------------------------
// SVD Line: 40550

//  <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSRC_BLEBUCKEN
//    <name> BLEBUCKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021000) \nEnables and Selects the BLE Buck as the supply for the BLE power domain or for Burst LDO. It takes the initial value from Customer INFO space. Buck will be powered up only if there is an active request for BLEH domain or Burst mode and appropriate feature is allowed.\n0 : DIS = Disable the BLE Buck. value.\n1 : EN = Enable the BLE Buck. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_SUPPLYSRC ) </loc>
//      <o.0..0> BLEBUCKEN
//        <0=> 0: DIS = Disable the BLE Buck. value.
//        <1=> 1: EN = Enable the BLE Buck. value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: PWRCTRL_SUPPLYSRC  -------------------------------
// SVD Line: 40540

//  <rtree> SFDITEM_REG__PWRCTRL_SUPPLYSRC
//    <name> SUPPLYSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021000) Voltage Regulator Select Register </i>
//    <loc> ( (unsigned int)((PWRCTRL_SUPPLYSRC >> 0) & 0xFFFFFFFF), ((PWRCTRL_SUPPLYSRC = (PWRCTRL_SUPPLYSRC & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSRC_BLEBUCKEN </item>
//  </rtree>
//  


// -----------------------  Register Item Address: PWRCTRL_SUPPLYSTATUS  --------------------------
// SVD Line: 40570

unsigned int PWRCTRL_SUPPLYSTATUS __AT (0x40021004);



// -----------------------  Field Item: PWRCTRL_SUPPLYSTATUS_BLEBUCKON  ---------------------------
// SVD Line: 40580

//  <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSTATUS_BLEBUCKON
//    <name> BLEBUCKON </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021004) \nIndicates whether the BLE (if supported) domain and burst (if supported) domain is supplied from the LDO or the Buck. Buck will be powered up only if there is an active request for BLEH domain or Burst mode and appropriate reature is allowed.\n0 : LDO = Indicates the the LDO is supplying the BLE/Burst power domain value.\n1 : BUCK = Indicates the the Buck is supplying the BLE/Burst power domain value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_SUPPLYSTATUS ) </loc>
//      <o.1..1> BLEBUCKON
//        <0=> 0: LDO = Indicates the the LDO is supplying the BLE/Burst power domain value.
//        <1=> 1: BUCK = Indicates the the Buck is supplying the BLE/Burst power domain value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_SUPPLYSTATUS_SIMOBUCKON  --------------------------
// SVD Line: 40598

//  <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSTATUS_SIMOBUCKON
//    <name> SIMOBUCKON </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021004) \nIndicates whether the Core/Mem low-voltage domains are supplied from the LDO or the Buck.\n0 : OFF = Indicates the the SIMO Buck is OFF. value.\n1 : ON = Indicates the the SIMO Buck is ON. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_SUPPLYSTATUS ) </loc>
//      <o.0..0> SIMOBUCKON
//        <0=> 0: OFF = Indicates the the SIMO Buck is OFF. value.
//        <1=> 1: ON = Indicates the the SIMO Buck is ON. value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_SUPPLYSTATUS  ------------------------------
// SVD Line: 40570

//  <rtree> SFDITEM_REG__PWRCTRL_SUPPLYSTATUS
//    <name> SUPPLYSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021004) Voltage Regulators status </i>
//    <loc> ( (unsigned int)((PWRCTRL_SUPPLYSTATUS >> 0) & 0xFFFFFFFF), ((PWRCTRL_SUPPLYSTATUS = (PWRCTRL_SUPPLYSTATUS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSTATUS_BLEBUCKON </item>
//    <item> SFDITEM_FIELD__PWRCTRL_SUPPLYSTATUS_SIMOBUCKON </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PWRCTRL_DEVPWREN  ----------------------------
// SVD Line: 40618

unsigned int PWRCTRL_DEVPWREN __AT (0x40021008);



// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRBLEL  ------------------------------
// SVD Line: 40628

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRBLEL
//    <name> PWRBLEL </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40021008) \nPower up BLE controller\n0 : DIS = Power down BLE controller value.\n1 : EN = Power up BLE controller value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.13..13> PWRBLEL
//        <0=> 0: DIS = Power down BLE controller value.
//        <1=> 1: EN = Power up BLE controller value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_DEVPWREN_PWRPDM  ------------------------------
// SVD Line: 40646

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRPDM
//    <name> PWRPDM </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40021008) \nPower up PDM block\n0 : DIS = Power down PDM value.\n1 : EN = Power up PDM value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.12..12> PWRPDM
//        <0=> 0: DIS = Power down PDM value.
//        <1=> 1: EN = Power up PDM value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRMSPI  ------------------------------
// SVD Line: 40664

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRMSPI
//    <name> PWRMSPI </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40021008) \nPower up MSPI Controller\n0 : DIS = Power down MSPI value.\n1 : EN = Power up MSPI value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.11..11> PWRMSPI
//        <0=> 0: DIS = Power down MSPI value.
//        <1=> 1: EN = Power up MSPI value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRSCARD  -----------------------------
// SVD Line: 40682

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRSCARD
//    <name> PWRSCARD </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40021008) \nPower up SCARD Controller\n0 : DIS = Power down SCARD value.\n1 : EN = Power up SCARD value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.10..10> PWRSCARD
//        <0=> 0: DIS = Power down SCARD value.
//        <1=> 1: EN = Power up SCARD value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_DEVPWREN_PWRADC  ------------------------------
// SVD Line: 40700

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRADC
//    <name> PWRADC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40021008) \nPower up ADC Digital Controller\n0 : DIS = Power Down ADC value.\n1 : EN = Power up ADC value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.9..9> PWRADC
//        <0=> 0: DIS = Power Down ADC value.
//        <1=> 1: EN = Power up ADC value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRUART1  -----------------------------
// SVD Line: 40718

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRUART1
//    <name> PWRUART1 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40021008) \nPower up UART Controller 1\n0 : DIS = Power down UART 1 value.\n1 : EN = Power up UART 1 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.8..8> PWRUART1
//        <0=> 0: DIS = Power down UART 1 value.
//        <1=> 1: EN = Power up UART 1 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRUART0  -----------------------------
// SVD Line: 40736

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRUART0
//    <name> PWRUART0 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40021008) \nPower up UART Controller 0\n0 : DIS = Power down UART 0 value.\n1 : EN = Power up UART 0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.7..7> PWRUART0
//        <0=> 0: DIS = Power down UART 0 value.
//        <1=> 1: EN = Power up UART 0 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM5  ------------------------------
// SVD Line: 40754

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM5
//    <name> PWRIOM5 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40021008) \nPower up IO Master 5\n0 : DIS = Power down IO Master 5 value.\n1 : EN = Power up IO Master 5 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.6..6> PWRIOM5
//        <0=> 0: DIS = Power down IO Master 5 value.
//        <1=> 1: EN = Power up IO Master 5 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM4  ------------------------------
// SVD Line: 40772

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM4
//    <name> PWRIOM4 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40021008) \nPower up IO Master 4\n0 : DIS = Power down IO Master 4 value.\n1 : EN = Power up IO Master 4 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.5..5> PWRIOM4
//        <0=> 0: DIS = Power down IO Master 4 value.
//        <1=> 1: EN = Power up IO Master 4 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM3  ------------------------------
// SVD Line: 40790

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM3
//    <name> PWRIOM3 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40021008) \nPower up IO Master 3\n0 : DIS = Power down IO Master 3 value.\n1 : EN = Power up IO Master 3 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.4..4> PWRIOM3
//        <0=> 0: DIS = Power down IO Master 3 value.
//        <1=> 1: EN = Power up IO Master 3 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM2  ------------------------------
// SVD Line: 40808

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM2
//    <name> PWRIOM2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021008) \nPower up IO Master 2\n0 : DIS = Power down IO Master 2 value.\n1 : EN = Power up IO Master 2 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.3..3> PWRIOM2
//        <0=> 0: DIS = Power down IO Master 2 value.
//        <1=> 1: EN = Power up IO Master 2 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM1  ------------------------------
// SVD Line: 40826

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM1
//    <name> PWRIOM1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021008) \nPower up IO Master 1\n0 : DIS = Power down IO Master 1 value.\n1 : EN = Power up IO Master 1 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.2..2> PWRIOM1
//        <0=> 0: DIS = Power down IO Master 1 value.
//        <1=> 1: EN = Power up IO Master 1 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOM0  ------------------------------
// SVD Line: 40844

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM0
//    <name> PWRIOM0 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021008) \nPower up IO Master 0\n0 : DIS = Power down IO Master 0 value.\n1 : EN = Power up IO Master 0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.1..1> PWRIOM0
//        <0=> 0: DIS = Power down IO Master 0 value.
//        <1=> 1: EN = Power up IO Master 0 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_DEVPWREN_PWRIOS  ------------------------------
// SVD Line: 40862

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOS
//    <name> PWRIOS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021008) \nPower up IO Slave\n0 : DIS = Power down IO slave value.\n1 : EN = Power up IO slave value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREN ) </loc>
//      <o.0..0> PWRIOS
//        <0=> 0: DIS = Power down IO slave value.
//        <1=> 1: EN = Power up IO slave value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: PWRCTRL_DEVPWREN  --------------------------------
// SVD Line: 40618

//  <rtree> SFDITEM_REG__PWRCTRL_DEVPWREN
//    <name> DEVPWREN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021008) Device Power Enables </i>
//    <loc> ( (unsigned int)((PWRCTRL_DEVPWREN >> 0) & 0xFFFFFFFF), ((PWRCTRL_DEVPWREN = (PWRCTRL_DEVPWREN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRBLEL </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRPDM </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRMSPI </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRSCARD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRADC </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRUART1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRUART0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM5 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM4 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM3 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM2 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOM0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREN_PWRIOS </item>
//  </rtree>
//  


// ----------------------  Register Item Address: PWRCTRL_MEMPWDINSLEEP  --------------------------
// SVD Line: 40882

unsigned int PWRCTRL_MEMPWDINSLEEP __AT (0x4002100C);



// ----------------------  Field Item: PWRCTRL_MEMPWDINSLEEP_CACHEPWDSLP  -------------------------
// SVD Line: 40892

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_CACHEPWDSLP
//    <name> CACHEPWDSLP </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4002100C) \npower down cache in deep sleep\n0 : DIS = Retain cache in deep sleep value.\n1 : EN = Power down cache in deep sleep value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWDINSLEEP ) </loc>
//      <o.31..31> CACHEPWDSLP
//        <0=> 0: DIS = Retain cache in deep sleep value.
//        <1=> 1: EN = Power down cache in deep sleep value.
//    </combo>
//  </item>
//  


// ---------------------  Field Item: PWRCTRL_MEMPWDINSLEEP_FLASH1PWDSLP  -------------------------
// SVD Line: 40910

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_FLASH1PWDSLP
//    <name> FLASH1PWDSLP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4002100C) \nPowerdown flash1 in deep sleep\n0 : DIS = Flash1 is kept powered on during deepsleep value.\n1 : EN = Flash1 is powered down during deepsleep value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWDINSLEEP ) </loc>
//      <o.14..14> FLASH1PWDSLP
//        <0=> 0: DIS = Flash1 is kept powered on during deepsleep value.
//        <1=> 1: EN = Flash1 is powered down during deepsleep value.
//    </combo>
//  </item>
//  


// ---------------------  Field Item: PWRCTRL_MEMPWDINSLEEP_FLASH0PWDSLP  -------------------------
// SVD Line: 40928

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_FLASH0PWDSLP
//    <name> FLASH0PWDSLP </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4002100C) \nPowerdown flash0 in deep sleep\n0 : DIS = Flash0 is kept powered on during deepsleep value.\n1 : EN = Flash0 is powered down during deepsleep value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWDINSLEEP ) </loc>
//      <o.13..13> FLASH0PWDSLP
//        <0=> 0: DIS = Flash0 is kept powered on during deepsleep value.
//        <1=> 1: EN = Flash0 is powered down during deepsleep value.
//    </combo>
//  </item>
//  


// ----------------------  Field Item: PWRCTRL_MEMPWDINSLEEP_SRAMPWDSLP  --------------------------
// SVD Line: 40946

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_SRAMPWDSLP
//    <name> SRAMPWDSLP </name>
//    <rw> 
//    <i> [Bits 12..3] RW (@ 0x4002100C) Selects which SRAM banks are powered down in deep sleep mode, causing the contents of the bank to be lost. </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWRCTRL_MEMPWDINSLEEP >> 3) & 0x3FF), ((PWRCTRL_MEMPWDINSLEEP = (PWRCTRL_MEMPWDINSLEEP & ~(0x3FFUL << 3 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: PWRCTRL_MEMPWDINSLEEP_DTCMPWDSLP  --------------------------
// SVD Line: 41039

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_DTCMPWDSLP
//    <name> DTCMPWDSLP </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4002100C) \npower down DTCM in deep sleep\n0 : NONE = All DTCM retained value.\n1 : GROUP0DTCM0 = Group0_DTCM0 powered down in deep sleep (0KB-8KB) value.\n2 : GROUP0DTCM1 = Group0_DTCM1 powered down in deep sleep (8KB-32KB) value.\n3 : GROUP0 = Both DTCMs in group0 are powered down in deep sleep (0KB-32KB) value.\n4 : GROUP1 = Group1 DTCM powered down in deep sleep (32KB-64KB) value.\n5 : Reserved - do not use\n6 : ALLBUTGROUP0DTCM0 = Group1 and Group0_DTCM1 are powered down in deep sleep (8KB-64KB) value.\n7 : ALL = All DTCMs powered down in deep sleep (0KB-64KB) value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWDINSLEEP ) </loc>
//      <o.2..0> DTCMPWDSLP
//        <0=> 0: NONE = All DTCM retained value.
//        <1=> 1: GROUP0DTCM0 = Group0_DTCM0 powered down in deep sleep (0KB-8KB) value.
//        <2=> 2: GROUP0DTCM1 = Group0_DTCM1 powered down in deep sleep (8KB-32KB) value.
//        <3=> 3: GROUP0 = Both DTCMs in group0 are powered down in deep sleep (0KB-32KB) value.
//        <4=> 4: GROUP1 = Group1 DTCM powered down in deep sleep (32KB-64KB) value.
//        <5=> 5: 
//        <6=> 6: ALLBUTGROUP0DTCM0 = Group1 and Group0_DTCM1 are powered down in deep sleep (8KB-64KB) value.
//        <7=> 7: ALL = All DTCMs powered down in deep sleep (0KB-64KB) value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_MEMPWDINSLEEP  -----------------------------
// SVD Line: 40882

//  <rtree> SFDITEM_REG__PWRCTRL_MEMPWDINSLEEP
//    <name> MEMPWDINSLEEP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002100C) Powerdown SRAM banks in Deep Sleep mode </i>
//    <loc> ( (unsigned int)((PWRCTRL_MEMPWDINSLEEP >> 0) & 0xFFFFFFFF), ((PWRCTRL_MEMPWDINSLEEP = (PWRCTRL_MEMPWDINSLEEP & ~(0x80007FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x80007FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_CACHEPWDSLP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_FLASH1PWDSLP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_FLASH0PWDSLP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_SRAMPWDSLP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWDINSLEEP_DTCMPWDSLP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PWRCTRL_MEMPWREN  ----------------------------
// SVD Line: 41084

unsigned int PWRCTRL_MEMPWREN __AT (0x40021010);



// --------------------------  Field Item: PWRCTRL_MEMPWREN_CACHEB2  ------------------------------
// SVD Line: 41094

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_CACHEB2
//    <name> CACHEB2 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40021010) \nPower up Cache Bank 2. This works in conjunction with Cache enable from flash_cache module. To power up cache bank2, cache has to be enabled and this bit has to be set.\n0 : DIS = Power down Cache Bank 2 value.\n1 : EN = Power up Cache Bank 2 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREN ) </loc>
//      <o.31..31> CACHEB2
//        <0=> 0: DIS = Power down Cache Bank 2 value.
//        <1=> 1: EN = Power up Cache Bank 2 value.
//    </combo>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_MEMPWREN_CACHEB0  ------------------------------
// SVD Line: 41112

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_CACHEB0
//    <name> CACHEB0 </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40021010) \nPower up Cache Bank 0. This works in conjunction with Cache enable from flash_cache module. To power up cache bank0, cache has to be enabled and this bit has to be set.\n0 : DIS = Power down Cache Bank 0 value.\n1 : EN = Power up Cache Bank 0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREN ) </loc>
//      <o.30..30> CACHEB0
//        <0=> 0: DIS = Power down Cache Bank 0 value.
//        <1=> 1: EN = Power up Cache Bank 0 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_MEMPWREN_FLASH1  ------------------------------
// SVD Line: 41130

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_FLASH1
//    <name> FLASH1 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40021010) \nPower up Flash1\n0 : DIS = Power down Flash1 value.\n1 : EN = Power up Flash1 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREN ) </loc>
//      <o.14..14> FLASH1
//        <0=> 0: DIS = Power down Flash1 value.
//        <1=> 1: EN = Power up Flash1 value.
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_MEMPWREN_FLASH0  ------------------------------
// SVD Line: 41148

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_FLASH0
//    <name> FLASH0 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40021010) \nPower up Flash0\n0 : DIS = Power down Flash0 value.\n1 : EN = Power up Flash0 value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREN ) </loc>
//      <o.13..13> FLASH0
//        <0=> 0: DIS = Power down Flash0 value.
//        <1=> 1: EN = Power up Flash0 value.
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: PWRCTRL_MEMPWREN_SRAM  -------------------------------
// SVD Line: 41166

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_SRAM
//    <name> SRAM </name>
//    <rw> 
//    <i> [Bits 12..3] RW (@ 0x40021010) Power up SRAM groups </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWRCTRL_MEMPWREN >> 3) & 0x3FF), ((PWRCTRL_MEMPWREN = (PWRCTRL_MEMPWREN & ~(0x3FFUL << 3 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWRCTRL_MEMPWREN_DTCM  -------------------------------
// SVD Line: 41249

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_DTCM
//    <name> DTCM </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40021010) \nPower up DTCM\n0 : NONE = Do not enable power to any DTCMs value.\n1 : GROUP0DTCM0 = Power ON only GROUP0_DTCM0 value.\n2 : GROUP0DTCM1 = Power ON only GROUP0_DTCM1 value.\n3 : GROUP0 = Power ON only DTCMs in group0 value.\n4 : GROUP1 = Power ON only DTCMs in group1 value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : ALL = Power ON all DTCMs value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREN ) </loc>
//      <o.2..0> DTCM
//        <0=> 0: NONE = Do not enable power to any DTCMs value.
//        <1=> 1: GROUP0DTCM0 = Power ON only GROUP0_DTCM0 value.
//        <2=> 2: GROUP0DTCM1 = Power ON only GROUP0_DTCM1 value.
//        <3=> 3: GROUP0 = Power ON only DTCMs in group0 value.
//        <4=> 4: GROUP1 = Power ON only DTCMs in group1 value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: ALL = Power ON all DTCMs value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: PWRCTRL_MEMPWREN  --------------------------------
// SVD Line: 41084

//  <rtree> SFDITEM_REG__PWRCTRL_MEMPWREN
//    <name> MEMPWREN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021010) Enables individual banks of the MEMORY array </i>
//    <loc> ( (unsigned int)((PWRCTRL_MEMPWREN >> 0) & 0xFFFFFFFF), ((PWRCTRL_MEMPWREN = (PWRCTRL_MEMPWREN & ~(0xC0007FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0007FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_CACHEB2 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_CACHEB0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_FLASH1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_FLASH0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_SRAM </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREN_DTCM </item>
//  </rtree>
//  


// -----------------------  Register Item Address: PWRCTRL_MEMPWRSTATUS  --------------------------
// SVD Line: 41289

unsigned int PWRCTRL_MEMPWRSTATUS __AT (0x40021014);



// ------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_CACHEB2  ----------------------------
// SVD Line: 41299

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_CACHEB2
//    <name> CACHEB2 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40021014) This bit is 1 if power is supplied to Cache Bank 2 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.16..16> CACHEB2
//    </check>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_CACHEB0  ----------------------------
// SVD Line: 41306

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_CACHEB0
//    <name> CACHEB0 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40021014) This bit is 1 if power is supplied to Cache Bank 0 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.15..15> CACHEB0
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_FLASH1  ----------------------------
// SVD Line: 41313

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_FLASH1
//    <name> FLASH1 </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40021014) This bit is 1 if power is supplied to FLASH 1 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.14..14> FLASH1
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_FLASH0  ----------------------------
// SVD Line: 41320

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_FLASH0
//    <name> FLASH0 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40021014) This bit is 1 if power is supplied to FLASH 0 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.13..13> FLASH0
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM9  -----------------------------
// SVD Line: 41327

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM9
//    <name> SRAM9 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP9 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.12..12> SRAM9
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM8  -----------------------------
// SVD Line: 41334

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM8
//    <name> SRAM8 </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP8 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.11..11> SRAM8
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM7  -----------------------------
// SVD Line: 41341

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM7
//    <name> SRAM7 </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP7 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.10..10> SRAM7
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM6  -----------------------------
// SVD Line: 41348

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM6
//    <name> SRAM6 </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP6 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.9..9> SRAM6
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM5  -----------------------------
// SVD Line: 41355

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM5
//    <name> SRAM5 </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP5 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.8..8> SRAM5
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM4  -----------------------------
// SVD Line: 41362

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM4
//    <name> SRAM4 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP4 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.7..7> SRAM4
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM3  -----------------------------
// SVD Line: 41369

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM3
//    <name> SRAM3 </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP3 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.6..6> SRAM3
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM2  -----------------------------
// SVD Line: 41376

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM2
//    <name> SRAM2 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP2 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.5..5> SRAM2
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM1  -----------------------------
// SVD Line: 41383

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM1
//    <name> SRAM1 </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP1 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.4..4> SRAM1
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_SRAM0  -----------------------------
// SVD Line: 41390

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM0
//    <name> SRAM0 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021014) This bit is 1 if power is supplied to SRAM GROUP0 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.3..3> SRAM0
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_DTCM1  -----------------------------
// SVD Line: 41397

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM1
//    <name> DTCM1 </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021014) This bit is 1 if power is supplied to DTCM GROUP1 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.2..2> DTCM1
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_DTCM01  ----------------------------
// SVD Line: 41404

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM01
//    <name> DTCM01 </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021014) This bit is 1 if power is supplied to DTCM GROUP0_1 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.1..1> DTCM01
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MEMPWRSTATUS_DTCM00  ----------------------------
// SVD Line: 41411

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM00
//    <name> DTCM00 </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021014) This bit is 1 if power is supplied to DTCM GROUP0_0 </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWRSTATUS ) </loc>
//      <o.0..0> DTCM00
//    </check>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_MEMPWRSTATUS  ------------------------------
// SVD Line: 41289

//  <rtree> SFDITEM_REG__PWRCTRL_MEMPWRSTATUS
//    <name> MEMPWRSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021014) Mem Power ON Status </i>
//    <loc> ( (unsigned int)((PWRCTRL_MEMPWRSTATUS >> 0) & 0xFFFFFFFF), ((PWRCTRL_MEMPWRSTATUS = (PWRCTRL_MEMPWRSTATUS & ~(0x1FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_CACHEB2 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_CACHEB0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_FLASH1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_FLASH0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM9 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM8 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM7 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM6 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM5 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM4 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM3 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM2 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_SRAM0 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM1 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM01 </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWRSTATUS_DTCM00 </item>
//  </rtree>
//  


// -----------------------  Register Item Address: PWRCTRL_DEVPWRSTATUS  --------------------------
// SVD Line: 41420

unsigned int PWRCTRL_DEVPWRSTATUS __AT (0x40021018);



// ----------------------  Field Item: PWRCTRL_DEVPWRSTATUS_SYSDEEPSLEEP  -------------------------
// SVD Line: 41430

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_SYSDEEPSLEEP
//    <name> SYSDEEPSLEEP </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40021018) This bit is 1 if SYSTEM has been in Deep Sleep. Write '1' to this bit to clear it. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.31..31> SYSDEEPSLEEP
//    </check>
//  </item>
//  


// ---------------------  Field Item: PWRCTRL_DEVPWRSTATUS_COREDEEPSLEEP  -------------------------
// SVD Line: 41437

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_COREDEEPSLEEP
//    <name> COREDEEPSLEEP </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40021018) This bit is 1 if CORE has been in Deep Sleep. Write '1' to this bit to clear it. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.30..30> COREDEEPSLEEP
//    </check>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWRSTATUS_CORESLEEP  ---------------------------
// SVD Line: 41444

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_CORESLEEP
//    <name> CORESLEEP </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40021018) This bit is 1 if CORE has been in SLEEP State. Write '1' to this bit to clear it. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.29..29> CORESLEEP
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_BLEH  -----------------------------
// SVD Line: 41451

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_BLEH
//    <name> BLEH </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40021018) This bit is 1 if power is supplied to BLEH </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.9..9> BLEH
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_BLEL  -----------------------------
// SVD Line: 41458

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_BLEL
//    <name> BLEL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40021018) This bit is 1 if power is supplied to BLEL </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.8..8> BLEL
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_PWRPDM  ----------------------------
// SVD Line: 41465

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRPDM
//    <name> PWRPDM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40021018) This bit is 1 if power is supplied to PDM </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.7..7> PWRPDM
//    </check>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_PWRMSPI  ----------------------------
// SVD Line: 41472

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRMSPI
//    <name> PWRMSPI </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40021018) This bit is 1 if power is supplied to MSPI </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.6..6> PWRMSPI
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_PWRADC  ----------------------------
// SVD Line: 41479

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRADC
//    <name> PWRADC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40021018) This bit is 1 if power is supplied to ADC </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.5..5> PWRADC
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_HCPC  -----------------------------
// SVD Line: 41486

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPC
//    <name> HCPC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40021018) This bit is 1 if power is supplied to HCPC domain (IO MASTER4, 5, 6) </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.4..4> HCPC
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_HCPB  -----------------------------
// SVD Line: 41493

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPB
//    <name> HCPB </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021018) This bit is 1 if power is supplied to HCPB domain (IO MASTER 0, 1, 2) </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.3..3> HCPB
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_HCPA  -----------------------------
// SVD Line: 41500

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPA
//    <name> HCPA </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021018) This bit is 1 if power is supplied to HCPA domain (IO SLAVE, UART0, UART1, SCARD) </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.2..2> HCPA
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_MCUH  -----------------------------
// SVD Line: 41507

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_MCUH
//    <name> MCUH </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021018) This bit is 1 if power is supplied to MCUH </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.1..1> MCUH
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_DEVPWRSTATUS_MCUL  -----------------------------
// SVD Line: 41514

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_MCUL
//    <name> MCUL </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021018) This bit is 1 if power is supplied to MCUL </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWRSTATUS ) </loc>
//      <o.0..0> MCUL
//    </check>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_DEVPWRSTATUS  ------------------------------
// SVD Line: 41420

//  <rtree> SFDITEM_REG__PWRCTRL_DEVPWRSTATUS
//    <name> DEVPWRSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021018) Device Power ON Status </i>
//    <loc> ( (unsigned int)((PWRCTRL_DEVPWRSTATUS >> 0) & 0xFFFFFFFF), ((PWRCTRL_DEVPWRSTATUS = (PWRCTRL_DEVPWRSTATUS & ~(0xE00003FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xE00003FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_SYSDEEPSLEEP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_COREDEEPSLEEP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_CORESLEEP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_BLEH </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_BLEL </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRPDM </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRMSPI </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_PWRADC </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPC </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPB </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_HCPA </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_MCUH </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWRSTATUS_MCUL </item>
//  </rtree>
//  


// -------------------------  Register Item Address: PWRCTRL_SRAMCTRL  ----------------------------
// SVD Line: 41523

unsigned int PWRCTRL_SRAMCTRL __AT (0x4002101C);



// -----------------------  Field Item: PWRCTRL_SRAMCTRL_SRAMLIGHTSLEEP  --------------------------
// SVD Line: 41533

//  <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMLIGHTSLEEP
//    <name> SRAMLIGHTSLEEP </name>
//    <rw> 
//    <i> [Bits 19..8] RW (@ 0x4002101C) Light Sleep enable for each TCM/SRAM bank. When 1, corresponding bank will be put into light sleep. For optimal power, banks should be put into light sleep while the system is active but the bank has minimal or no accesses. </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWRCTRL_SRAMCTRL >> 8) & 0xFFF), ((PWRCTRL_SRAMCTRL = (PWRCTRL_SRAMCTRL & ~(0xFFFUL << 8 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Field Item: PWRCTRL_SRAMCTRL_SRAMMASTERCLKGATE  -------------------------
// SVD Line: 41551

//  <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMMASTERCLKGATE
//    <name> SRAMMASTERCLKGATE </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4002101C) \nThis bit is 1 when the master clock gate is enabled (top-level clock gate for entire SRAM block)\n0 : DIS = Disables Master SRAM Clock Gating value.\n1 : EN = Enable Master SRAM Clock Gate value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_SRAMCTRL ) </loc>
//      <o.2..2> SRAMMASTERCLKGATE
//        <0=> 0: DIS = Disables Master SRAM Clock Gating value.
//        <1=> 1: EN = Enable Master SRAM Clock Gate value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_SRAMCTRL_SRAMCLKGATE  ----------------------------
// SVD Line: 41569

//  <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMCLKGATE
//    <name> SRAMCLKGATE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4002101C) \nThis bit is 1 if clock gating is allowed for individual system SRAMs\n0 : DIS = Disables Individual SRAM Clock Gating value.\n1 : EN = Enable Individual SRAM Clock Gating value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_SRAMCTRL ) </loc>
//      <o.1..1> SRAMCLKGATE
//        <0=> 0: DIS = Disables Individual SRAM Clock Gating value.
//        <1=> 1: EN = Enable Individual SRAM Clock Gating value.
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: PWRCTRL_SRAMCTRL  --------------------------------
// SVD Line: 41523

//  <rtree> SFDITEM_REG__PWRCTRL_SRAMCTRL
//    <name> SRAMCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002101C) SRAM Control register </i>
//    <loc> ( (unsigned int)((PWRCTRL_SRAMCTRL >> 0) & 0xFFFFFFFF), ((PWRCTRL_SRAMCTRL = (PWRCTRL_SRAMCTRL & ~(0xFFF06UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF06) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMLIGHTSLEEP </item>
//    <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMMASTERCLKGATE </item>
//    <item> SFDITEM_FIELD__PWRCTRL_SRAMCTRL_SRAMCLKGATE </item>
//  </rtree>
//  


// ------------------------  Register Item Address: PWRCTRL_ADCSTATUS  ----------------------------
// SVD Line: 41589

unsigned int PWRCTRL_ADCSTATUS __AT (0x40021020);



// -------------------------  Field Item: PWRCTRL_ADCSTATUS_REFBUFPWD  ----------------------------
// SVD Line: 41599

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_REFBUFPWD
//    <name> REFBUFPWD </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40021020) This bit indicates that the ADC REFBUF is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.5..5> REFBUFPWD
//    </check>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_ADCSTATUS_REFKEEPPWD  ----------------------------
// SVD Line: 41606

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_REFKEEPPWD
//    <name> REFKEEPPWD </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40021020) This bit indicates that the ADC REFKEEP is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.4..4> REFKEEPPWD
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_ADCSTATUS_VBATPWD  -----------------------------
// SVD Line: 41613

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_VBATPWD
//    <name> VBATPWD </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021020) This bit indicates that the ADC VBAT resistor divider is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.3..3> VBATPWD
//    </check>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_ADCSTATUS_VPTATPWD  -----------------------------
// SVD Line: 41620

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_VPTATPWD
//    <name> VPTATPWD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021020) This bit indicates that the ADC temperature sensor input buffer is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.2..2> VPTATPWD
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_ADCSTATUS_BGTPWD  ------------------------------
// SVD Line: 41627

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_BGTPWD
//    <name> BGTPWD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021020) This bit indicates that the ADC Band Gap is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.1..1> BGTPWD
//    </check>
//  </item>
//  


// --------------------------  Field Item: PWRCTRL_ADCSTATUS_ADCPWD  ------------------------------
// SVD Line: 41634

//  <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_ADCPWD
//    <name> ADCPWD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021020) This bit indicates that the ADC is powered down </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_ADCSTATUS ) </loc>
//      <o.0..0> ADCPWD
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: PWRCTRL_ADCSTATUS  -------------------------------
// SVD Line: 41589

//  <rtree> SFDITEM_REG__PWRCTRL_ADCSTATUS
//    <name> ADCSTATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021020) Power Status Register for ADC Block </i>
//    <loc> ( (unsigned int)((PWRCTRL_ADCSTATUS >> 0) & 0xFFFFFFFF), ((PWRCTRL_ADCSTATUS = (PWRCTRL_ADCSTATUS & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_REFBUFPWD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_REFKEEPPWD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_VBATPWD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_VPTATPWD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_BGTPWD </item>
//    <item> SFDITEM_FIELD__PWRCTRL_ADCSTATUS_ADCPWD </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWRCTRL_MISC  ------------------------------
// SVD Line: 41643

unsigned int PWRCTRL_MISC __AT (0x40021024);



// ------------------------  Field Item: PWRCTRL_MISC_FORCEBLEBUCKACT  ----------------------------
// SVD Line: 41653

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEBLEBUCKACT
//    <name> FORCEBLEBUCKACT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40021024) Control Bit to enable BLE Buck to be in active state when BLE Buck is enabled. Default behavior is to be in active only when Burst or BLEH power on are requested. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.7..7> FORCEBLEBUCKACT
//    </check>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_MISC_MEMVRLPBLE  ------------------------------
// SVD Line: 41660

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_MEMVRLPBLE
//    <name> MEMVRLPBLE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40021024) \nControl Bit to let Mem VR go to lp mode in deep sleep even when BLEL or BLEH is powered on given none of the other domains require it.\n0 : DIS = Mem VR will stay in active mode when BLE is powered on. value.\n1 : EN = Mem VR can go to lp mode even when BLE is powered on. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.6..6> MEMVRLPBLE
//        <0=> 0: DIS = Mem VR will stay in active mode when BLE is powered on. value.
//        <1=> 1: EN = Mem VR can go to lp mode even when BLE is powered on. value.
//    </combo>
//  </item>
//  


// -------------------------  Field Item: PWRCTRL_MISC_FORCEMEMVRADC  -----------------------------
// SVD Line: 41678

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEMEMVRADC
//    <name> FORCEMEMVRADC </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40021024) \nControl Bit to force mem VR to LP or ACT mode in deep sleep when ADC is powered ON. 0x3 results in picking LP mode.\n0 : DIS = In this mode if all the other domains but ADC are powered down, mem VR will duty cycle between active and LP modes depending on ADC sampling. value.\n1 : LP = In this mode if all the other domains but ADC are powered down, mem VR will stay in LP mode. value.\n2 : ACT = In this mode if all the other domains but ADC are powered down, mem VR will stay in ACT mode. value.\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.5..4> FORCEMEMVRADC
//        <0=> 0: DIS = In this mode if all the other domains but ADC are powered down, mem VR will duty cycle between active and LP modes depending on ADC sampling. value.
//        <1=> 1: LP = In this mode if all the other domains but ADC are powered down, mem VR will stay in LP mode. value.
//        <2=> 2: ACT = In this mode if all the other domains but ADC are powered down, mem VR will stay in ACT mode. value.
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_MISC_FORCEMEMVRLPTIMERS  --------------------------
// SVD Line: 41701

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEMEMVRLPTIMERS
//    <name> FORCEMEMVRLPTIMERS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021024) Control Bit to force Mem VR to LP mode in deep sleep even when hfrc based ctimer or stimer is running. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.3..3> FORCEMEMVRLPTIMERS
//    </check>
//  </item>
//  


// ----------------------  Field Item: PWRCTRL_MISC_FORCECOREVRLPTIMERS  --------------------------
// SVD Line: 41708

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCECOREVRLPTIMERS
//    <name> FORCECOREVRLPTIMERS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021024) Control Bit to force Core VR to LP mode in deep sleep even when hfrc based ctimer or stimer is running. </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.2..2> FORCECOREVRLPTIMERS
//    </check>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_MISC_FORCECOREVRLPPDM  ---------------------------
// SVD Line: 41715

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCECOREVRLPPDM
//    <name> FORCECOREVRLPPDM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021024) Control bit to enable the core VR to go into LP mode with HCPA/B/C/MSPI are powered off but PDM is powered on </i>
//    <check> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.1..1> FORCECOREVRLPPDM
//    </check>
//  </item>
//  


// ---------------------------  Field Item: PWRCTRL_MISC_SIMOBUCKEN  ------------------------------
// SVD Line: 41722

//  <item> SFDITEM_FIELD__PWRCTRL_MISC_SIMOBUCKEN
//    <name> SIMOBUCKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021024) \nEnables and Selects the SIMO Buck as the supply for the low-voltage power domain. It takes the initial value from the bit set in Customer INFO space.\n0 : DIS = Disable the SIMO Buck value.\n1 : EN = Enable the SIMO Buck value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MISC ) </loc>
//      <o.0..0> SIMOBUCKEN
//        <0=> 0: DIS = Disable the SIMO Buck value.
//        <1=> 1: EN = Enable the SIMO Buck value.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWRCTRL_MISC  ----------------------------------
// SVD Line: 41643

//  <rtree> SFDITEM_REG__PWRCTRL_MISC
//    <name> MISC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021024) Power Optimization Control Bits </i>
//    <loc> ( (unsigned int)((PWRCTRL_MISC >> 0) & 0xFFFFFFFF), ((PWRCTRL_MISC = (PWRCTRL_MISC & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEBLEBUCKACT </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_MEMVRLPBLE </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEMEMVRADC </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCEMEMVRLPTIMERS </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCECOREVRLPTIMERS </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_FORCECOREVRLPPDM </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MISC_SIMOBUCKEN </item>
//  </rtree>
//  


// ----------------------  Register Item Address: PWRCTRL_DEVPWREVENTEN  --------------------------
// SVD Line: 41742

unsigned int PWRCTRL_DEVPWREVENTEN __AT (0x40021028);



// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_BURSTEVEN  --------------------------
// SVD Line: 41752

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BURSTEVEN
//    <name> BURSTEVEN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40021028) \nControl BURST status event\n0 : DIS = Disable BURST status event value.\n1 : EN = Enable BURST status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.31..31> BURSTEVEN
//        <0=> 0: DIS = Disable BURST status event value.
//        <1=> 1: EN = Enable BURST status event value.
//    </combo>
//  </item>
//  


// -------------------  Field Item: PWRCTRL_DEVPWREVENTEN_BURSTFEATUREEVEN  -----------------------
// SVD Line: 41770

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BURSTFEATUREEVEN
//    <name> BURSTFEATUREEVEN </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40021028) \nControl BURSTFEATURE status event\n0 : DIS = Disable BURSTFEATURE status event value.\n1 : EN = Enable BURSTFEATURE status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.30..30> BURSTFEATUREEVEN
//        <0=> 0: DIS = Disable BURSTFEATURE status event value.
//        <1=> 1: EN = Enable BURSTFEATURE status event value.
//    </combo>
//  </item>
//  


// --------------------  Field Item: PWRCTRL_DEVPWREVENTEN_BLEFEATUREEVEN  ------------------------
// SVD Line: 41788

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BLEFEATUREEVEN
//    <name> BLEFEATUREEVEN </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40021028) \nControl BLEFEATURE status event\n0 : DIS = Disable BLEFEATURE status event value.\n1 : EN = Enable BLEFEATURE status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.29..29> BLEFEATUREEVEN
//        <0=> 0: DIS = Disable BLEFEATURE status event value.
//        <1=> 1: EN = Enable BLEFEATURE status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_BLELEVEN  ---------------------------
// SVD Line: 41806

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BLELEVEN
//    <name> BLELEVEN </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40021028) \nControl BLE power-on status event\n0 : DIS = Disable BLE power-on status event value.\n1 : EN = Enable BLE power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.8..8> BLELEVEN
//        <0=> 0: DIS = Disable BLE power-on status event value.
//        <1=> 1: EN = Enable BLE power-on status event value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_DEVPWREVENTEN_PDMEVEN  ---------------------------
// SVD Line: 41824

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_PDMEVEN
//    <name> PDMEVEN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40021028) \nControl PDM power-on status event\n0 : DIS = Disable PDM power-on status event value.\n1 : EN = Enable PDM power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.7..7> PDMEVEN
//        <0=> 0: DIS = Disable PDM power-on status event value.
//        <1=> 1: EN = Enable PDM power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_MSPIEVEN  ---------------------------
// SVD Line: 41842

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MSPIEVEN
//    <name> MSPIEVEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40021028) \nControl MSPI power-on status event\n0 : DIS = Disable MSPI power-on status event value.\n1 : EN = Enable MSPI power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.6..6> MSPIEVEN
//        <0=> 0: DIS = Disable MSPI power-on status event value.
//        <1=> 1: EN = Enable MSPI power-on status event value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_DEVPWREVENTEN_ADCEVEN  ---------------------------
// SVD Line: 41860

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_ADCEVEN
//    <name> ADCEVEN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40021028) \nControl ADC power-on status event\n0 : DIS = Disable ADC power-on status event value.\n1 : EN = Enable ADC power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.5..5> ADCEVEN
//        <0=> 0: DIS = Disable ADC power-on status event value.
//        <1=> 1: EN = Enable ADC power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_HCPCEVEN  ---------------------------
// SVD Line: 41878

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPCEVEN
//    <name> HCPCEVEN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40021028) \nControl HCPC power-on status event\n0 : DIS = Disable HCPC power-on status event value.\n1 : EN = Enable HCPC power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.4..4> HCPCEVEN
//        <0=> 0: DIS = Disable HCPC power-on status event value.
//        <1=> 1: EN = Enable HCPC power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_HCPBEVEN  ---------------------------
// SVD Line: 41896

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPBEVEN
//    <name> HCPBEVEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40021028) \nControl HCPB power-on status event\n0 : DIS = Disable HCPB power-on status event value.\n1 : EN = Enable HCPB power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.3..3> HCPBEVEN
//        <0=> 0: DIS = Disable HCPB power-on status event value.
//        <1=> 1: EN = Enable HCPB power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_HCPAEVEN  ---------------------------
// SVD Line: 41914

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPAEVEN
//    <name> HCPAEVEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40021028) \nControl HCPA power-on status event\n0 : DIS = Disable HCPA power-on status event value.\n1 : EN = Enable HCPA power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.2..2> HCPAEVEN
//        <0=> 0: DIS = Disable HCPA power-on status event value.
//        <1=> 1: EN = Enable HCPA power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_MCUHEVEN  ---------------------------
// SVD Line: 41932

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MCUHEVEN
//    <name> MCUHEVEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40021028) \nControl MCUH power-on status event\n0 : DIS = Disable MCUH power-on status event value.\n1 : EN = Enable MCHU power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.1..1> MCUHEVEN
//        <0=> 0: DIS = Disable MCUH power-on status event value.
//        <1=> 1: EN = Enable MCHU power-on status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_DEVPWREVENTEN_MCULEVEN  ---------------------------
// SVD Line: 41950

//  <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MCULEVEN
//    <name> MCULEVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40021028) \nControl MCUL power-on status event\n0 : DIS = Disable MCUL power-on status event value.\n1 : EN = Enable MCUL power-on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_DEVPWREVENTEN ) </loc>
//      <o.0..0> MCULEVEN
//        <0=> 0: DIS = Disable MCUL power-on status event value.
//        <1=> 1: EN = Enable MCUL power-on status event value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_DEVPWREVENTEN  -----------------------------
// SVD Line: 41742

//  <rtree> SFDITEM_REG__PWRCTRL_DEVPWREVENTEN
//    <name> DEVPWREVENTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40021028) Event enable register to control which DEVPWRSTATUS bits are routed to event input of CPU. </i>
//    <loc> ( (unsigned int)((PWRCTRL_DEVPWREVENTEN >> 0) & 0xFFFFFFFF), ((PWRCTRL_DEVPWREVENTEN = (PWRCTRL_DEVPWREVENTEN & ~(0xE00001FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xE00001FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BURSTEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BURSTFEATUREEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BLEFEATUREEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_BLELEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_PDMEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MSPIEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_ADCEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPCEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPBEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_HCPAEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MCUHEVEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_DEVPWREVENTEN_MCULEVEN </item>
//  </rtree>
//  


// ----------------------  Register Item Address: PWRCTRL_MEMPWREVENTEN  --------------------------
// SVD Line: 41970

unsigned int PWRCTRL_MEMPWREVENTEN __AT (0x4002102C);



// -----------------------  Field Item: PWRCTRL_MEMPWREVENTEN_CACHEB2EN  --------------------------
// SVD Line: 41980

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_CACHEB2EN
//    <name> CACHEB2EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4002102C) \nControl CACHEB2 power-on status event\n0 : DIS = Disable CACHE BANK 2 status event value.\n1 : EN = Enable CACHE BANK 2 status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREVENTEN ) </loc>
//      <o.31..31> CACHEB2EN
//        <0=> 0: DIS = Disable CACHE BANK 2 status event value.
//        <1=> 1: EN = Enable CACHE BANK 2 status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_MEMPWREVENTEN_CACHEB0EN  --------------------------
// SVD Line: 41998

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_CACHEB0EN
//    <name> CACHEB0EN </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4002102C) \nControl CACHE BANK 0 power-on status event\n0 : DIS = Disable CACHE BANK 0 status event value.\n1 : EN = Enable CACHE BANK 0 status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREVENTEN ) </loc>
//      <o.30..30> CACHEB0EN
//        <0=> 0: DIS = Disable CACHE BANK 0 status event value.
//        <1=> 1: EN = Enable CACHE BANK 0 status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_MEMPWREVENTEN_FLASH1EN  ---------------------------
// SVD Line: 42016

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_FLASH1EN
//    <name> FLASH1EN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4002102C) \nControl Flash power-on status event\n0 : DIS = Disables FLASH status event value.\n1 : EN = Enable FLASH status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREVENTEN ) </loc>
//      <o.14..14> FLASH1EN
//        <0=> 0: DIS = Disables FLASH status event value.
//        <1=> 1: EN = Enable FLASH status event value.
//    </combo>
//  </item>
//  


// -----------------------  Field Item: PWRCTRL_MEMPWREVENTEN_FLASH0EN  ---------------------------
// SVD Line: 42034

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_FLASH0EN
//    <name> FLASH0EN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4002102C) \nControl Flash power-on status event\n0 : DIS = Disables FLASH status event value.\n1 : EN = Enable FLASH status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREVENTEN ) </loc>
//      <o.13..13> FLASH0EN
//        <0=> 0: DIS = Disables FLASH status event value.
//        <1=> 1: EN = Enable FLASH status event value.
//    </combo>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_MEMPWREVENTEN_SRAMEN  ----------------------------
// SVD Line: 42052

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_SRAMEN
//    <name> SRAMEN </name>
//    <rw> 
//    <i> [Bits 12..3] RW (@ 0x4002102C) Control SRAM power-on status event </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWRCTRL_MEMPWREVENTEN >> 3) & 0x3FF), ((PWRCTRL_MEMPWREVENTEN = (PWRCTRL_MEMPWREVENTEN & ~(0x3FFUL << 3 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: PWRCTRL_MEMPWREVENTEN_DTCMEN  ----------------------------
// SVD Line: 42115

//  <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_DTCMEN
//    <name> DTCMEN </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4002102C) \nEnable DTCM power-on status event\n0 : NONE = Do not enable DTCM power-on status event value.\n1 : GROUP0DTCM0EN = Enable GROUP0_DTCM0 power on status event value.\n2 : GROUP0DTCM1EN = Enable GROUP0_DTCM1 power on status event value.\n3 : GROUP0EN = Enable DTCMs in group0 power on status event value.\n4 : GROUP1EN = Enable DTCMs in group1 power on status event value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : ALL = Enable all DTCM power on status event value. </i>
//    <combo> 
//      <loc> ( (unsigned int) PWRCTRL_MEMPWREVENTEN ) </loc>
//      <o.2..0> DTCMEN
//        <0=> 0: NONE = Do not enable DTCM power-on status event value.
//        <1=> 1: GROUP0DTCM0EN = Enable GROUP0_DTCM0 power on status event value.
//        <2=> 2: GROUP0DTCM1EN = Enable GROUP0_DTCM1 power on status event value.
//        <3=> 3: GROUP0EN = Enable DTCMs in group0 power on status event value.
//        <4=> 4: GROUP1EN = Enable DTCMs in group1 power on status event value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: ALL = Enable all DTCM power on status event value.
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: PWRCTRL_MEMPWREVENTEN  -----------------------------
// SVD Line: 41970

//  <rtree> SFDITEM_REG__PWRCTRL_MEMPWREVENTEN
//    <name> MEMPWREVENTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002102C) Event enable register to control which MEMPWRSTATUS bits are routed to event input of CPU. </i>
//    <loc> ( (unsigned int)((PWRCTRL_MEMPWREVENTEN >> 0) & 0xFFFFFFFF), ((PWRCTRL_MEMPWREVENTEN = (PWRCTRL_MEMPWREVENTEN & ~(0xC0007FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0007FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_CACHEB2EN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_CACHEB0EN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_FLASH1EN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_FLASH0EN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_SRAMEN </item>
//    <item> SFDITEM_FIELD__PWRCTRL_MEMPWREVENTEN_DTCMEN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWRCTRL  ------------------------------------
// SVD Line: 40524

//  <view> PWRCTRL
//    <name> PWRCTRL </name>
//    <item> SFDITEM_REG__PWRCTRL_SUPPLYSRC </item>
//    <item> SFDITEM_REG__PWRCTRL_SUPPLYSTATUS </item>
//    <item> SFDITEM_REG__PWRCTRL_DEVPWREN </item>
//    <item> SFDITEM_REG__PWRCTRL_MEMPWDINSLEEP </item>
//    <item> SFDITEM_REG__PWRCTRL_MEMPWREN </item>
//    <item> SFDITEM_REG__PWRCTRL_MEMPWRSTATUS </item>
//    <item> SFDITEM_REG__PWRCTRL_DEVPWRSTATUS </item>
//    <item> SFDITEM_REG__PWRCTRL_SRAMCTRL </item>
//    <item> SFDITEM_REG__PWRCTRL_ADCSTATUS </item>
//    <item> SFDITEM_REG__PWRCTRL_MISC </item>
//    <item> SFDITEM_REG__PWRCTRL_DEVPWREVENTEN </item>
//    <item> SFDITEM_REG__PWRCTRL_MEMPWREVENTEN </item>
//  </view>
//  


// ----------------------------  Register Item Address: RSTGEN_CFG  -------------------------------
// SVD Line: 42174

unsigned int RSTGEN_CFG __AT (0x40000000);



// ------------------------------  Field Item: RSTGEN_CFG_WDREN  ----------------------------------
// SVD Line: 42184

//  <item> SFDITEM_FIELD__RSTGEN_CFG_WDREN
//    <name> WDREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000000) Watchdog Timer Reset Enable. NOTE: The WDT module must also be configured for WDT reset. This includes enabling the RESEN bit in WDTCFG register in Watch dog timer block. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_CFG ) </loc>
//      <o.1..1> WDREN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_CFG_BODHREN  ---------------------------------
// SVD Line: 42191

//  <item> SFDITEM_FIELD__RSTGEN_CFG_BODHREN
//    <name> BODHREN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000000) Brown out high (2.1v) reset enable. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_CFG ) </loc>
//      <o.0..0> BODHREN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: RSTGEN_CFG  -----------------------------------
// SVD Line: 42174

//  <rtree> SFDITEM_REG__RSTGEN_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000000) Configuration Register </i>
//    <loc> ( (unsigned int)((RSTGEN_CFG >> 0) & 0xFFFFFFFF), ((RSTGEN_CFG = (RSTGEN_CFG & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_CFG_WDREN </item>
//    <item> SFDITEM_FIELD__RSTGEN_CFG_BODHREN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: RSTGEN_SWPOI  ------------------------------
// SVD Line: 42200

unsigned int RSTGEN_SWPOI __AT (0x40000004);



// ----------------------------  Field Item: RSTGEN_SWPOI_SWPOIKEY  -------------------------------
// SVD Line: 42210

//  <item> SFDITEM_FIELD__RSTGEN_SWPOI_SWPOIKEY
//    <name> SWPOIKEY </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000004) 0x1B generates a software POI reset. This is a write-only register. Reading from this register will yield only all 0s. </i>
//    <edit> 
//      <loc> ( (unsigned char)((RSTGEN_SWPOI >> 0) & 0xFF), ((RSTGEN_SWPOI = (RSTGEN_SWPOI & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: RSTGEN_SWPOI  ----------------------------------
// SVD Line: 42200

//  <rtree> SFDITEM_REG__RSTGEN_SWPOI
//    <name> SWPOI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000004) Software POI Reset </i>
//    <loc> ( (unsigned int)((RSTGEN_SWPOI >> 0) & 0xFFFFFFFF), ((RSTGEN_SWPOI = (RSTGEN_SWPOI & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_SWPOI_SWPOIKEY </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: RSTGEN_SWPOR  ------------------------------
// SVD Line: 42225

unsigned int RSTGEN_SWPOR __AT (0x40000008);



// ----------------------------  Field Item: RSTGEN_SWPOR_SWPORKEY  -------------------------------
// SVD Line: 42235

//  <item> SFDITEM_FIELD__RSTGEN_SWPOR_SWPORKEY
//    <name> SWPORKEY </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000008) 0xD4 generates a software POR reset. </i>
//    <edit> 
//      <loc> ( (unsigned char)((RSTGEN_SWPOR >> 0) & 0xFF), ((RSTGEN_SWPOR = (RSTGEN_SWPOR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: RSTGEN_SWPOR  ----------------------------------
// SVD Line: 42225

//  <rtree> SFDITEM_REG__RSTGEN_SWPOR
//    <name> SWPOR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000008) Software POR Reset </i>
//    <loc> ( (unsigned int)((RSTGEN_SWPOR >> 0) & 0xFFFFFFFF), ((RSTGEN_SWPOR = (RSTGEN_SWPOR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_SWPOR_SWPORKEY </item>
//  </rtree>
//  


// --------------------------  Register Item Address: RSTGEN_TPIURST  -----------------------------
// SVD Line: 42250

unsigned int RSTGEN_TPIURST __AT (0x40000014);



// ---------------------------  Field Item: RSTGEN_TPIURST_TPIURST  -------------------------------
// SVD Line: 42260

//  <item> SFDITEM_FIELD__RSTGEN_TPIURST_TPIURST
//    <name> TPIURST </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000014) Static reset for the TPIU. Write to '1' to assert reset to TPIU. Write to '0' to clear the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_TPIURST ) </loc>
//      <o.0..0> TPIURST
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: RSTGEN_TPIURST  ---------------------------------
// SVD Line: 42250

//  <rtree> SFDITEM_REG__RSTGEN_TPIURST
//    <name> TPIURST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000014) TPIU reset </i>
//    <loc> ( (unsigned int)((RSTGEN_TPIURST >> 0) & 0xFFFFFFFF), ((RSTGEN_TPIURST = (RSTGEN_TPIURST & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_TPIURST_TPIURST </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: RSTGEN_INTEN  ------------------------------
// SVD Line: 42269

unsigned int RSTGEN_INTEN __AT (0x40000200);



// ------------------------------  Field Item: RSTGEN_INTEN_BODH  ---------------------------------
// SVD Line: 42279

//  <item> SFDITEM_FIELD__RSTGEN_INTEN_BODH
//    <name> BODH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000200) Enables an interrupt that triggers when VCC is below BODH level. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_INTEN ) </loc>
//      <o.0..0> BODH
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: RSTGEN_INTEN  ----------------------------------
// SVD Line: 42269

//  <rtree> SFDITEM_REG__RSTGEN_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000200) Reset Interrupt register: Enable </i>
//    <loc> ( (unsigned int)((RSTGEN_INTEN >> 0) & 0xFFFFFFFF), ((RSTGEN_INTEN = (RSTGEN_INTEN & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_INTEN_BODH </item>
//  </rtree>
//  


// --------------------------  Register Item Address: RSTGEN_INTSTAT  -----------------------------
// SVD Line: 42288

unsigned int RSTGEN_INTSTAT __AT (0x40000204);



// -----------------------------  Field Item: RSTGEN_INTSTAT_BODH  --------------------------------
// SVD Line: 42298

//  <item> SFDITEM_FIELD__RSTGEN_INTSTAT_BODH
//    <name> BODH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000204) Enables an interrupt that triggers when VCC is below BODH level. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_INTSTAT ) </loc>
//      <o.0..0> BODH
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: RSTGEN_INTSTAT  ---------------------------------
// SVD Line: 42288

//  <rtree> SFDITEM_REG__RSTGEN_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000204) Reset Interrupt register: Status </i>
//    <loc> ( (unsigned int)((RSTGEN_INTSTAT >> 0) & 0xFFFFFFFF), ((RSTGEN_INTSTAT = (RSTGEN_INTSTAT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_INTSTAT_BODH </item>
//  </rtree>
//  


// --------------------------  Register Item Address: RSTGEN_INTCLR  ------------------------------
// SVD Line: 42307

unsigned int RSTGEN_INTCLR __AT (0x40000208);



// -----------------------------  Field Item: RSTGEN_INTCLR_BODH  ---------------------------------
// SVD Line: 42317

//  <item> SFDITEM_FIELD__RSTGEN_INTCLR_BODH
//    <name> BODH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000208) Enables an interrupt that triggers when VCC is below BODH level. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_INTCLR ) </loc>
//      <o.0..0> BODH
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: RSTGEN_INTCLR  ---------------------------------
// SVD Line: 42307

//  <rtree> SFDITEM_REG__RSTGEN_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000208) Reset Interrupt register: Clear </i>
//    <loc> ( (unsigned int)((RSTGEN_INTCLR >> 0) & 0xFFFFFFFF), ((RSTGEN_INTCLR = (RSTGEN_INTCLR & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_INTCLR_BODH </item>
//  </rtree>
//  


// --------------------------  Register Item Address: RSTGEN_INTSET  ------------------------------
// SVD Line: 42326

unsigned int RSTGEN_INTSET __AT (0x4000020C);



// -----------------------------  Field Item: RSTGEN_INTSET_BODH  ---------------------------------
// SVD Line: 42336

//  <item> SFDITEM_FIELD__RSTGEN_INTSET_BODH
//    <name> BODH </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000020C) Enables an interrupt that triggers when VCC is below BODH level. </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_INTSET ) </loc>
//      <o.0..0> BODH
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: RSTGEN_INTSET  ---------------------------------
// SVD Line: 42326

//  <rtree> SFDITEM_REG__RSTGEN_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000020C) Reset Interrupt register: Set </i>
//    <loc> ( (unsigned int)((RSTGEN_INTSET >> 0) & 0xFFFFFFFF), ((RSTGEN_INTSET = (RSTGEN_INTSET & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_INTSET_BODH </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: RSTGEN_STAT  -------------------------------
// SVD Line: 42345

unsigned int RSTGEN_STAT __AT (0x4FFFF000);



// ------------------------------  Field Item: RSTGEN_STAT_SBOOT  ---------------------------------
// SVD Line: 42355

//  <item> SFDITEM_FIELD__RSTGEN_STAT_SBOOT
//    <name> SBOOT </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4FFFF000) Set when booting securely (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.31..31> SBOOT
//    </check>
//  </item>
//  


// ------------------------------  Field Item: RSTGEN_STAT_FBOOT  ---------------------------------
// SVD Line: 42362

//  <item> SFDITEM_FIELD__RSTGEN_STAT_FBOOT
//    <name> FBOOT </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4FFFF000) Set if current boot was initiated by soft reset and resulted in Fast Boot (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.30..30> FBOOT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_BOBSTAT  --------------------------------
// SVD Line: 42369

//  <item> SFDITEM_FIELD__RSTGEN_STAT_BOBSTAT
//    <name> BOBSTAT </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4FFFF000) A BLE/Burst Regulator Brownout Event occurred (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.10..10> BOBSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_BOFSTAT  --------------------------------
// SVD Line: 42376

//  <item> SFDITEM_FIELD__RSTGEN_STAT_BOFSTAT
//    <name> BOFSTAT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4FFFF000) A Memory Regulator Brownout Event occurred (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.9..9> BOFSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_BOCSTAT  --------------------------------
// SVD Line: 42383

//  <item> SFDITEM_FIELD__RSTGEN_STAT_BOCSTAT
//    <name> BOCSTAT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4FFFF000) A Core Regulator Brownout Event occurred (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.8..8> BOCSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_BOUSTAT  --------------------------------
// SVD Line: 42390

//  <item> SFDITEM_FIELD__RSTGEN_STAT_BOUSTAT
//    <name> BOUSTAT </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4FFFF000) An Unregulated Supply Brownout Event occurred (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.7..7> BOUSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_WDRSTAT  --------------------------------
// SVD Line: 42397

//  <item> SFDITEM_FIELD__RSTGEN_STAT_WDRSTAT
//    <name> WDRSTAT </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4FFFF000) Reset was initiated by a Watchdog Timer Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.6..6> WDRSTAT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: RSTGEN_STAT_DBGRSTAT  --------------------------------
// SVD Line: 42404

//  <item> SFDITEM_FIELD__RSTGEN_STAT_DBGRSTAT
//    <name> DBGRSTAT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4FFFF000) Reset was a initiated by Debugger Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.5..5> DBGRSTAT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: RSTGEN_STAT_POIRSTAT  --------------------------------
// SVD Line: 42411

//  <item> SFDITEM_FIELD__RSTGEN_STAT_POIRSTAT
//    <name> POIRSTAT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4FFFF000) Reset was a initiated by Software POI Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.4..4> POIRSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_SWRSTAT  --------------------------------
// SVD Line: 42418

//  <item> SFDITEM_FIELD__RSTGEN_STAT_SWRSTAT
//    <name> SWRSTAT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4FFFF000) Reset was a initiated by SW POR or AIRCR Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.3..3> SWRSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_BORSTAT  --------------------------------
// SVD Line: 42425

//  <item> SFDITEM_FIELD__RSTGEN_STAT_BORSTAT
//    <name> BORSTAT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4FFFF000) Reset was initiated by a Brown-Out Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.2..2> BORSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_PORSTAT  --------------------------------
// SVD Line: 42432

//  <item> SFDITEM_FIELD__RSTGEN_STAT_PORSTAT
//    <name> PORSTAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4FFFF000) Reset was initiated by a Power-On Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.1..1> PORSTAT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: RSTGEN_STAT_EXRSTAT  --------------------------------
// SVD Line: 42439

//  <item> SFDITEM_FIELD__RSTGEN_STAT_EXRSTAT
//    <name> EXRSTAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4FFFF000) Reset was initiated by an External Reset (SBL). </i>
//    <check> 
//      <loc> ( (unsigned int) RSTGEN_STAT ) </loc>
//      <o.0..0> EXRSTAT
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: RSTGEN_STAT  ----------------------------------
// SVD Line: 42345

//  <rtree> SFDITEM_REG__RSTGEN_STAT
//    <name> STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4FFFF000) Status Register (SBL) </i>
//    <loc> ( (unsigned int)((RSTGEN_STAT >> 0) & 0xFFFFFFFF), ((RSTGEN_STAT = (RSTGEN_STAT & ~(0xC00007FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC00007FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_SBOOT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_FBOOT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_BOBSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_BOFSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_BOCSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_BOUSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_WDRSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_DBGRSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_POIRSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_SWRSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_BORSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_PORSTAT </item>
//    <item> SFDITEM_FIELD__RSTGEN_STAT_EXRSTAT </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: RSTGEN  ------------------------------------
// SVD Line: 42158

//  <view> RSTGEN
//    <name> RSTGEN </name>
//    <item> SFDITEM_REG__RSTGEN_CFG </item>
//    <item> SFDITEM_REG__RSTGEN_SWPOI </item>
//    <item> SFDITEM_REG__RSTGEN_SWPOR </item>
//    <item> SFDITEM_REG__RSTGEN_TPIURST </item>
//    <item> SFDITEM_REG__RSTGEN_INTEN </item>
//    <item> SFDITEM_REG__RSTGEN_INTSTAT </item>
//    <item> SFDITEM_REG__RSTGEN_INTCLR </item>
//    <item> SFDITEM_REG__RSTGEN_INTSET </item>
//    <item> SFDITEM_REG__RSTGEN_STAT </item>
//  </view>
//  


// ----------------------------  Register Item Address: RTC_CTRLOW  -------------------------------
// SVD Line: 42470

unsigned int RTC_CTRLOW __AT (0x40004240);



// ------------------------------  Field Item: RTC_CTRLOW_CTRHR  ----------------------------------
// SVD Line: 42480

//  <item> SFDITEM_FIELD__RTC_CTRLOW_CTRHR
//    <name> CTRHR </name>
//    <rw> 
//    <i> [Bits 29..24] RW (@ 0x40004240) Hours Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRLOW >> 24) & 0x3F), ((RTC_CTRLOW = (RTC_CTRLOW & ~(0x3FUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_CTRLOW_CTRMIN  ---------------------------------
// SVD Line: 42487

//  <item> SFDITEM_FIELD__RTC_CTRLOW_CTRMIN
//    <name> CTRMIN </name>
//    <rw> 
//    <i> [Bits 22..16] RW (@ 0x40004240) Minutes Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRLOW >> 16) & 0x7F), ((RTC_CTRLOW = (RTC_CTRLOW & ~(0x7FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_CTRLOW_CTRSEC  ---------------------------------
// SVD Line: 42494

//  <item> SFDITEM_FIELD__RTC_CTRLOW_CTRSEC
//    <name> CTRSEC </name>
//    <rw> 
//    <i> [Bits 14..8] RW (@ 0x40004240) Seconds Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRLOW >> 8) & 0x7F), ((RTC_CTRLOW = (RTC_CTRLOW & ~(0x7FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_CTRLOW_CTR100  ---------------------------------
// SVD Line: 42501

//  <item> SFDITEM_FIELD__RTC_CTRLOW_CTR100
//    <name> CTR100 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40004240) 100ths of a second Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRLOW >> 0) & 0xFF), ((RTC_CTRLOW = (RTC_CTRLOW & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: RTC_CTRLOW  -----------------------------------
// SVD Line: 42470

//  <rtree> SFDITEM_REG__RTC_CTRLOW
//    <name> CTRLOW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004240) RTC Counters Lower </i>
//    <loc> ( (unsigned int)((RTC_CTRLOW >> 0) & 0xFFFFFFFF), ((RTC_CTRLOW = (RTC_CTRLOW & ~(0x3F7F7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F7F7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_CTRLOW_CTRHR </item>
//    <item> SFDITEM_FIELD__RTC_CTRLOW_CTRMIN </item>
//    <item> SFDITEM_FIELD__RTC_CTRLOW_CTRSEC </item>
//    <item> SFDITEM_FIELD__RTC_CTRLOW_CTR100 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_CTRUP  --------------------------------
// SVD Line: 42510

unsigned int RTC_CTRUP __AT (0x40004244);



// -------------------------------  Field Item: RTC_CTRUP_CTERR  ----------------------------------
// SVD Line: 42520

//  <item> SFDITEM_FIELD__RTC_CTRUP_CTERR
//    <name> CTERR </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40004244) \nCounter read error status. Error is triggered when software reads the lower word of the counters, and fails to read the upper counter within 1/100 second. This is because when the lower counter is read, the upper counter is held off from incrementing until it is read so that the full time stamp can be read.\n0 : NOERR = No read error occurred value.\n1 : RDERR = Read error occurred value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_CTRUP ) </loc>
//      <o.31..31> CTERR
//        <0=> 0: NOERR = No read error occurred value.
//        <1=> 1: RDERR = Read error occurred value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: RTC_CTRUP_CEB  -----------------------------------
// SVD Line: 42538

//  <item> SFDITEM_FIELD__RTC_CTRUP_CEB
//    <name> CEB </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40004244) \nCentury enable\n0 : DIS = Disable the Century bit from changing value.\n1 : EN = Enable the Century bit to change value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_CTRUP ) </loc>
//      <o.28..28> CEB
//        <0=> 0: DIS = Disable the Century bit from changing value.
//        <1=> 1: EN = Enable the Century bit to change value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: RTC_CTRUP_CB  ------------------------------------
// SVD Line: 42556

//  <item> SFDITEM_FIELD__RTC_CTRUP_CB
//    <name> CB </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40004244) \nCentury\n0 : 2000 = Century is 2000s value.\n1 : 1900_2100 = Century is 1900s/2100s value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_CTRUP ) </loc>
//      <o.27..27> CB
//        <0=> 0: 2000 = Century is 2000s value.
//        <1=> 1: 1900_2100 = Century is 1900s/2100s value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: RTC_CTRUP_CTRWKDY  ---------------------------------
// SVD Line: 42574

//  <item> SFDITEM_FIELD__RTC_CTRUP_CTRWKDY
//    <name> CTRWKDY </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40004244) Weekdays Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRUP >> 24) & 0x7), ((RTC_CTRUP = (RTC_CTRUP & ~(0x7UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: RTC_CTRUP_CTRYR  ----------------------------------
// SVD Line: 42581

//  <item> SFDITEM_FIELD__RTC_CTRUP_CTRYR
//    <name> CTRYR </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40004244) Years Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRUP >> 16) & 0xFF), ((RTC_CTRUP = (RTC_CTRUP & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: RTC_CTRUP_CTRMO  ----------------------------------
// SVD Line: 42588

//  <item> SFDITEM_FIELD__RTC_CTRUP_CTRMO
//    <name> CTRMO </name>
//    <rw> 
//    <i> [Bits 12..8] RW (@ 0x40004244) Months Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRUP >> 8) & 0x1F), ((RTC_CTRUP = (RTC_CTRUP & ~(0x1FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_CTRUP_CTRDATE  ---------------------------------
// SVD Line: 42595

//  <item> SFDITEM_FIELD__RTC_CTRUP_CTRDATE
//    <name> CTRDATE </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40004244) Date Counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_CTRUP >> 0) & 0x3F), ((RTC_CTRUP = (RTC_CTRUP & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: RTC_CTRUP  -----------------------------------
// SVD Line: 42510

//  <rtree> SFDITEM_REG__RTC_CTRUP
//    <name> CTRUP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004244) RTC Counters Upper </i>
//    <loc> ( (unsigned int)((RTC_CTRUP >> 0) & 0xFFFFFFFF), ((RTC_CTRUP = (RTC_CTRUP & ~(0x9FFF1F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9FFF1F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CTERR </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CEB </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CB </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CTRWKDY </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CTRYR </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CTRMO </item>
//    <item> SFDITEM_FIELD__RTC_CTRUP_CTRDATE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_ALMLOW  -------------------------------
// SVD Line: 42604

unsigned int RTC_ALMLOW __AT (0x40004248);



// ------------------------------  Field Item: RTC_ALMLOW_ALMHR  ----------------------------------
// SVD Line: 42614

//  <item> SFDITEM_FIELD__RTC_ALMLOW_ALMHR
//    <name> ALMHR </name>
//    <rw> 
//    <i> [Bits 29..24] RW (@ 0x40004248) Hours Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMLOW >> 24) & 0x3F), ((RTC_ALMLOW = (RTC_ALMLOW & ~(0x3FUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_ALMLOW_ALMMIN  ---------------------------------
// SVD Line: 42621

//  <item> SFDITEM_FIELD__RTC_ALMLOW_ALMMIN
//    <name> ALMMIN </name>
//    <rw> 
//    <i> [Bits 22..16] RW (@ 0x40004248) Minutes Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMLOW >> 16) & 0x7F), ((RTC_ALMLOW = (RTC_ALMLOW & ~(0x7FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_ALMLOW_ALMSEC  ---------------------------------
// SVD Line: 42628

//  <item> SFDITEM_FIELD__RTC_ALMLOW_ALMSEC
//    <name> ALMSEC </name>
//    <rw> 
//    <i> [Bits 14..8] RW (@ 0x40004248) Seconds Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMLOW >> 8) & 0x7F), ((RTC_ALMLOW = (RTC_ALMLOW & ~(0x7FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_ALMLOW_ALM100  ---------------------------------
// SVD Line: 42635

//  <item> SFDITEM_FIELD__RTC_ALMLOW_ALM100
//    <name> ALM100 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40004248) 100ths of a second Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMLOW >> 0) & 0xFF), ((RTC_ALMLOW = (RTC_ALMLOW & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: RTC_ALMLOW  -----------------------------------
// SVD Line: 42604

//  <rtree> SFDITEM_REG__RTC_ALMLOW
//    <name> ALMLOW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004248) RTC Alarms Lower </i>
//    <loc> ( (unsigned int)((RTC_ALMLOW >> 0) & 0xFFFFFFFF), ((RTC_ALMLOW = (RTC_ALMLOW & ~(0x3F7F7FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F7F7FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_ALMLOW_ALMHR </item>
//    <item> SFDITEM_FIELD__RTC_ALMLOW_ALMMIN </item>
//    <item> SFDITEM_FIELD__RTC_ALMLOW_ALMSEC </item>
//    <item> SFDITEM_FIELD__RTC_ALMLOW_ALM100 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_ALMUP  --------------------------------
// SVD Line: 42644

unsigned int RTC_ALMUP __AT (0x4000424C);



// ------------------------------  Field Item: RTC_ALMUP_ALMWKDY  ---------------------------------
// SVD Line: 42654

//  <item> SFDITEM_FIELD__RTC_ALMUP_ALMWKDY
//    <name> ALMWKDY </name>
//    <rw> 
//    <i> [Bits 18..16] RW (@ 0x4000424C) Weekdays Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMUP >> 16) & 0x7), ((RTC_ALMUP = (RTC_ALMUP & ~(0x7UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: RTC_ALMUP_ALMMO  ----------------------------------
// SVD Line: 42661

//  <item> SFDITEM_FIELD__RTC_ALMUP_ALMMO
//    <name> ALMMO </name>
//    <rw> 
//    <i> [Bits 12..8] RW (@ 0x4000424C) Months Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMUP >> 8) & 0x1F), ((RTC_ALMUP = (RTC_ALMUP & ~(0x1FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: RTC_ALMUP_ALMDATE  ---------------------------------
// SVD Line: 42668

//  <item> SFDITEM_FIELD__RTC_ALMUP_ALMDATE
//    <name> ALMDATE </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x4000424C) Date Alarm </i>
//    <edit> 
//      <loc> ( (unsigned char)((RTC_ALMUP >> 0) & 0x3F), ((RTC_ALMUP = (RTC_ALMUP & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: RTC_ALMUP  -----------------------------------
// SVD Line: 42644

//  <rtree> SFDITEM_REG__RTC_ALMUP
//    <name> ALMUP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000424C) RTC Alarms Upper </i>
//    <loc> ( (unsigned int)((RTC_ALMUP >> 0) & 0xFFFFFFFF), ((RTC_ALMUP = (RTC_ALMUP & ~(0x71F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x71F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_ALMUP_ALMWKDY </item>
//    <item> SFDITEM_FIELD__RTC_ALMUP_ALMMO </item>
//    <item> SFDITEM_FIELD__RTC_ALMUP_ALMDATE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_RTCCTL  -------------------------------
// SVD Line: 42677

unsigned int RTC_RTCCTL __AT (0x40004250);



// ------------------------------  Field Item: RTC_RTCCTL_HR1224  ---------------------------------
// SVD Line: 42687

//  <item> SFDITEM_FIELD__RTC_RTCCTL_HR1224
//    <name> HR1224 </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40004250) \nHours Counter mode\n0 : 24HR = Hours in 24 hour mode value.\n1 : 12HR = Hours in 12 hour mode value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_RTCCTL ) </loc>
//      <o.5..5> HR1224
//        <0=> 0: 24HR = Hours in 24 hour mode value.
//        <1=> 1: 12HR = Hours in 12 hour mode value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: RTC_RTCCTL_RSTOP  ----------------------------------
// SVD Line: 42705

//  <item> SFDITEM_FIELD__RTC_RTCCTL_RSTOP
//    <name> RSTOP </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40004250) \nRTC input clock control\n0 : RUN = Allow the RTC input clock to run value.\n1 : STOP = Stop the RTC input clock value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_RTCCTL ) </loc>
//      <o.4..4> RSTOP
//        <0=> 0: RUN = Allow the RTC input clock to run value.
//        <1=> 1: STOP = Stop the RTC input clock value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: RTC_RTCCTL_RPT  -----------------------------------
// SVD Line: 42723

//  <item> SFDITEM_FIELD__RTC_RTCCTL_RPT
//    <name> RPT </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40004250) \nAlarm repeat interval\n0 : DIS = Alarm interrupt disabled value.\n1 : YEAR = Interrupt every year value.\n2 : MONTH = Interrupt every month value.\n3 : WEEK = Interrupt every week value.\n4 : DAY = Interrupt every day value.\n5 : HR = Interrupt every hour value.\n6 : MIN = Interrupt every minute value.\n7 : SEC = Interrupt every second/10th/100th value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_RTCCTL ) </loc>
//      <o.3..1> RPT
//        <0=> 0: DIS = Alarm interrupt disabled value.
//        <1=> 1: YEAR = Interrupt every year value.
//        <2=> 2: MONTH = Interrupt every month value.
//        <3=> 3: WEEK = Interrupt every week value.
//        <4=> 4: DAY = Interrupt every day value.
//        <5=> 5: HR = Interrupt every hour value.
//        <6=> 6: MIN = Interrupt every minute value.
//        <7=> 7: SEC = Interrupt every second/10th/100th value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: RTC_RTCCTL_WRTC  ----------------------------------
// SVD Line: 42771

//  <item> SFDITEM_FIELD__RTC_RTCCTL_WRTC
//    <name> WRTC </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004250) \nCounter write control\n0 : DIS = Counter writes are disabled value.\n1 : EN = Counter writes are enabled value. </i>
//    <combo> 
//      <loc> ( (unsigned int) RTC_RTCCTL ) </loc>
//      <o.0..0> WRTC
//        <0=> 0: DIS = Counter writes are disabled value.
//        <1=> 1: EN = Counter writes are enabled value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: RTC_RTCCTL  -----------------------------------
// SVD Line: 42677

//  <rtree> SFDITEM_REG__RTC_RTCCTL
//    <name> RTCCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004250) RTC Control Register </i>
//    <loc> ( (unsigned int)((RTC_RTCCTL >> 0) & 0xFFFFFFFF), ((RTC_RTCCTL = (RTC_RTCCTL & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_RTCCTL_HR1224 </item>
//    <item> SFDITEM_FIELD__RTC_RTCCTL_RSTOP </item>
//    <item> SFDITEM_FIELD__RTC_RTCCTL_RPT </item>
//    <item> SFDITEM_FIELD__RTC_RTCCTL_WRTC </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_INTEN  --------------------------------
// SVD Line: 42791

unsigned int RTC_INTEN __AT (0x40004300);



// --------------------------------  Field Item: RTC_INTEN_ALM  -----------------------------------
// SVD Line: 42801

//  <item> SFDITEM_FIELD__RTC_INTEN_ALM
//    <name> ALM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004300) RTC Alarm interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) RTC_INTEN ) </loc>
//      <o.0..0> ALM
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: RTC_INTEN  -----------------------------------
// SVD Line: 42791

//  <rtree> SFDITEM_REG__RTC_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004300) RTC Interrupt Register: Enable </i>
//    <loc> ( (unsigned int)((RTC_INTEN >> 0) & 0xFFFFFFFF), ((RTC_INTEN = (RTC_INTEN & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_INTEN_ALM </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: RTC_INTSTAT  -------------------------------
// SVD Line: 42810

unsigned int RTC_INTSTAT __AT (0x40004304);



// -------------------------------  Field Item: RTC_INTSTAT_ALM  ----------------------------------
// SVD Line: 42820

//  <item> SFDITEM_FIELD__RTC_INTSTAT_ALM
//    <name> ALM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004304) RTC Alarm interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) RTC_INTSTAT ) </loc>
//      <o.0..0> ALM
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: RTC_INTSTAT  ----------------------------------
// SVD Line: 42810

//  <rtree> SFDITEM_REG__RTC_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004304) RTC Interrupt Register: Status </i>
//    <loc> ( (unsigned int)((RTC_INTSTAT >> 0) & 0xFFFFFFFF), ((RTC_INTSTAT = (RTC_INTSTAT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_INTSTAT_ALM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_INTCLR  -------------------------------
// SVD Line: 42829

unsigned int RTC_INTCLR __AT (0x40004308);



// -------------------------------  Field Item: RTC_INTCLR_ALM  -----------------------------------
// SVD Line: 42839

//  <item> SFDITEM_FIELD__RTC_INTCLR_ALM
//    <name> ALM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40004308) RTC Alarm interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) RTC_INTCLR ) </loc>
//      <o.0..0> ALM
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: RTC_INTCLR  -----------------------------------
// SVD Line: 42829

//  <rtree> SFDITEM_REG__RTC_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40004308) RTC Interrupt Register: Clear </i>
//    <loc> ( (unsigned int)((RTC_INTCLR >> 0) & 0xFFFFFFFF), ((RTC_INTCLR = (RTC_INTCLR & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_INTCLR_ALM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: RTC_INTSET  -------------------------------
// SVD Line: 42848

unsigned int RTC_INTSET __AT (0x4000430C);



// -------------------------------  Field Item: RTC_INTSET_ALM  -----------------------------------
// SVD Line: 42858

//  <item> SFDITEM_FIELD__RTC_INTSET_ALM
//    <name> ALM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000430C) RTC Alarm interrupt </i>
//    <check> 
//      <loc> ( (unsigned int) RTC_INTSET ) </loc>
//      <o.0..0> ALM
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: RTC_INTSET  -----------------------------------
// SVD Line: 42848

//  <rtree> SFDITEM_REG__RTC_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000430C) RTC Interrupt Register: Set </i>
//    <loc> ( (unsigned int)((RTC_INTSET >> 0) & 0xFFFFFFFF), ((RTC_INTSET = (RTC_INTSET & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__RTC_INTSET_ALM </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: RTC  --------------------------------------
// SVD Line: 42451

//  <view> RTC
//    <name> RTC </name>
//    <item> SFDITEM_REG__RTC_CTRLOW </item>
//    <item> SFDITEM_REG__RTC_CTRUP </item>
//    <item> SFDITEM_REG__RTC_ALMLOW </item>
//    <item> SFDITEM_REG__RTC_ALMUP </item>
//    <item> SFDITEM_REG__RTC_RTCCTL </item>
//    <item> SFDITEM_REG__RTC_INTEN </item>
//    <item> SFDITEM_REG__RTC_INTSTAT </item>
//    <item> SFDITEM_REG__RTC_INTCLR </item>
//    <item> SFDITEM_REG__RTC_INTSET </item>
//  </view>
//  


// -----------------------------  Register Item Address: SCARD_SR  --------------------------------
// SVD Line: 42889

unsigned int SCARD_SR __AT (0x40080000);



// --------------------------------  Field Item: SCARD_SR_FHF  ------------------------------------
// SVD Line: 42899

//  <item> SFDITEM_FIELD__SCARD_SR_FHF
//    <name> FHF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40080000) FIFO Half Full. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.6..6> FHF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: SCARD_SR_FT2REND  ----------------------------------
// SVD Line: 42906

//  <item> SFDITEM_FIELD__SCARD_SR_FT2REND
//    <name> FT2REND </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40080000) TX to RX finished. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.5..5> FT2REND
//    </check>
//  </item>
//  


// ---------------------------------  Field Item: SCARD_SR_PE  ------------------------------------
// SVD Line: 42913

//  <item> SFDITEM_FIELD__SCARD_SR_PE
//    <name> PE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40080000) Parity Error. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.4..4> PE
//    </check>
//  </item>
//  


// --------------------------------  Field Item: SCARD_SR_OVR  ------------------------------------
// SVD Line: 42920

//  <item> SFDITEM_FIELD__SCARD_SR_OVR
//    <name> OVR </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40080000) RX FIFO overflow. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.3..3> OVR
//    </check>
//  </item>
//  


// --------------------------------  Field Item: SCARD_SR_FER  ------------------------------------
// SVD Line: 42927

//  <item> SFDITEM_FIELD__SCARD_SR_FER
//    <name> FER </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40080000) Framing error. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.2..2> FER
//    </check>
//  </item>
//  


// -------------------------------  Field Item: SCARD_SR_TBERBF  ----------------------------------
// SVD Line: 42934

//  <item> SFDITEM_FIELD__SCARD_SR_TBERBF
//    <name> TBERBF </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40080000) FIFO empty (transmit) or full (receive). </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.1..1> TBERBF
//    </check>
//  </item>
//  


// --------------------------------  Field Item: SCARD_SR_FNE  ------------------------------------
// SVD Line: 42941

//  <item> SFDITEM_FIELD__SCARD_SR_FNE
//    <name> FNE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40080000) RX FIFO not empty. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR ) </loc>
//      <o.0..0> FNE
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: SCARD_SR  ------------------------------------
// SVD Line: 42889

//  <rtree> SFDITEM_REG__SCARD_SR
//    <name> SR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40080000) ISO7816 interrupt status </i>
//    <loc> ( (unsigned int)((SCARD_SR >> 0) & 0xFFFFFFFF), ((SCARD_SR = (SCARD_SR & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SCARD_SR_FHF </item>
//    <item> SFDITEM_FIELD__SCARD_SR_FT2REND </item>
//    <item> SFDITEM_FIELD__SCARD_SR_PE </item>
//    <item> SFDITEM_FIELD__SCARD_SR_OVR </item>
//    <item> SFDITEM_FIELD__SCARD_SR_FER </item>
//    <item> SFDITEM_FIELD__SCARD_SR_TBERBF </item>
//    <item> SFDITEM_FIELD__SCARD_SR_FNE </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SCARD_DR  --------------------------------
// SVD Line: 42950

unsigned int SCARD_DR __AT (0x40080010);



// ---------------------------------  Field Item: SCARD_DR_DR  ------------------------------------
// SVD Line: 42960

//  <item> SFDITEM_FIELD__SCARD_DR_DR
//    <name> DR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40080010) Data register. </i>
//    <edit> 
//      <loc> ( (unsigned char)((SCARD_DR >> 0) & 0xFF), ((SCARD_DR = (SCARD_DR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: SCARD_DR  ------------------------------------
// SVD Line: 42950

//  <rtree> SFDITEM_REG__SCARD_DR
//    <name> DR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40080010) ISO7816 data </i>
//    <loc> ( (unsigned int)((SCARD_DR >> 0) & 0xFFFFFFFF), ((SCARD_DR = (SCARD_DR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SCARD_DR_DR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SCARD_SR1  --------------------------------
// SVD Line: 42969

unsigned int SCARD_SR1 __AT (0x40080020);



// -------------------------------  Field Item: SCARD_SR1_IDLE  -----------------------------------
// SVD Line: 42979

//  <item> SFDITEM_FIELD__SCARD_SR1_IDLE
//    <name> IDLE </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40080020) ISO7816 idle. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR1 ) </loc>
//      <o.3..3> IDLE
//    </check>
//  </item>
//  


// ------------------------------  Field Item: SCARD_SR1_SYNCEND  ---------------------------------
// SVD Line: 42986

//  <item> SFDITEM_FIELD__SCARD_SR1_SYNCEND
//    <name> SYNCEND </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40080020) Write complete synchronization. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR1 ) </loc>
//      <o.2..2> SYNCEND
//    </check>
//  </item>
//  


// --------------------------------  Field Item: SCARD_SR1_PRL  -----------------------------------
// SVD Line: 42993

//  <item> SFDITEM_FIELD__SCARD_SR1_PRL
//    <name> PRL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40080020) Card insert/remove. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR1 ) </loc>
//      <o.1..1> PRL
//    </check>
//  </item>
//  


// -----------------------------  Field Item: SCARD_SR1_ECNTOVER  ---------------------------------
// SVD Line: 43000

//  <item> SFDITEM_FIELD__SCARD_SR1_ECNTOVER
//    <name> ECNTOVER </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40080020) ETU counter overflow. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_SR1 ) </loc>
//      <o.0..0> ECNTOVER
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: SCARD_SR1  -----------------------------------
// SVD Line: 42969

//  <rtree> SFDITEM_REG__SCARD_SR1
//    <name> SR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40080020) ISO7816 interrupt status 1 </i>
//    <loc> ( (unsigned int)((SCARD_SR1 >> 0) & 0xFFFFFFFF), ((SCARD_SR1 = (SCARD_SR1 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SCARD_SR1_IDLE </item>
//    <item> SFDITEM_FIELD__SCARD_SR1_SYNCEND </item>
//    <item> SFDITEM_FIELD__SCARD_SR1_PRL </item>
//    <item> SFDITEM_FIELD__SCARD_SR1_ECNTOVER </item>
//  </rtree>
//  


// -------------------------  Register Item Address: SCARD_RETXCNTRMI  ----------------------------
// SVD Line: 43009

unsigned int SCARD_RETXCNTRMI __AT (0x40080038);



// -------------------------  Field Item: SCARD_RETXCNTRMI_RETXCNTRMI  ----------------------------
// SVD Line: 43019

//  <item> SFDITEM_FIELD__SCARD_RETXCNTRMI_RETXCNTRMI
//    <name> RETXCNTRMI </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40080038) Resent count inquiry register. </i>
//    <edit> 
//      <loc> ( (unsigned char)((SCARD_RETXCNTRMI >> 0) & 0xF), ((SCARD_RETXCNTRMI = (SCARD_RETXCNTRMI & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SCARD_RETXCNTRMI  --------------------------------
// SVD Line: 43009

//  <rtree> SFDITEM_REG__SCARD_RETXCNTRMI
//    <name> RETXCNTRMI </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40080038) ISO7816 resent count inquiry </i>
//    <loc> ( (unsigned int)((SCARD_RETXCNTRMI >> 0) & 0xFFFFFFFF), ((SCARD_RETXCNTRMI = (SCARD_RETXCNTRMI & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SCARD_RETXCNTRMI_RETXCNTRMI </item>
//  </rtree>
//  


// --------------------------  Register Item Address: SCARD_CLKCTRL  ------------------------------
// SVD Line: 43028

unsigned int SCARD_CLKCTRL __AT (0x40080100);



// ---------------------------  Field Item: SCARD_CLKCTRL_APBCLKEN  -------------------------------
// SVD Line: 43038

//  <item> SFDITEM_FIELD__SCARD_CLKCTRL_APBCLKEN
//    <name> APBCLKEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40080100) Enable the SCARD APB clock to run continuously. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_CLKCTRL ) </loc>
//      <o.1..1> APBCLKEN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: SCARD_CLKCTRL_CLKEN  --------------------------------
// SVD Line: 43045

//  <item> SFDITEM_FIELD__SCARD_CLKCTRL_CLKEN
//    <name> CLKEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40080100) Enable the serial source clock for SCARD. </i>
//    <check> 
//      <loc> ( (unsigned int) SCARD_CLKCTRL ) </loc>
//      <o.0..0> CLKEN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: SCARD_CLKCTRL  ---------------------------------
// SVD Line: 43028

//  <rtree> SFDITEM_REG__SCARD_CLKCTRL
//    <name> CLKCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40080100) Clock Control </i>
//    <loc> ( (unsigned int)((SCARD_CLKCTRL >> 0) & 0xFFFFFFFF), ((SCARD_CLKCTRL = (SCARD_CLKCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SCARD_CLKCTRL_APBCLKEN </item>
//    <item> SFDITEM_FIELD__SCARD_CLKCTRL_CLKEN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: SCARD  -------------------------------------
// SVD Line: 42870

//  <view> SCARD
//    <name> SCARD </name>
//    <item> SFDITEM_REG__SCARD_SR </item>
//    <item> SFDITEM_REG__SCARD_DR </item>
//    <item> SFDITEM_REG__SCARD_SR1 </item>
//    <item> SFDITEM_REG__SCARD_RETXCNTRMI </item>
//    <item> SFDITEM_REG__SCARD_CLKCTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: SECURITY_CTRL  ------------------------------
// SVD Line: 43073

unsigned int SECURITY_CTRL __AT (0x40030000);



// ---------------------------  Field Item: SECURITY_CTRL_CRCERROR  -------------------------------
// SVD Line: 43083

//  <item> SFDITEM_FIELD__SECURITY_CTRL_CRCERROR
//    <name> CRCERROR </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40030000) CRC Error Status - Set to 1 if an error occurs during a CRC operation. Cleared when CTRL register is written (with any value). Usually indicates an invalid address range. </i>
//    <check> 
//      <loc> ( (unsigned int) SECURITY_CTRL ) </loc>
//      <o.31..31> CRCERROR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: SECURITY_CTRL_FUNCTION  -------------------------------
// SVD Line: 43090

//  <item> SFDITEM_FIELD__SECURITY_CTRL_FUNCTION
//    <name> FUNCTION </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40030000) \nFunction Select\n0 : CRC32 = Perform CRC32 operation value.\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) SECURITY_CTRL ) </loc>
//      <o.7..4> FUNCTION
//        <0=> 0: CRC32 = Perform CRC32 operation value.
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: SECURITY_CTRL_ENABLE  --------------------------------
// SVD Line: 43103

//  <item> SFDITEM_FIELD__SECURITY_CTRL_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40030000) Function Enable. Software should set the ENABLE bit to initiate a CRC operation. Hardware will clear the ENABLE bit upon completion. </i>
//    <check> 
//      <loc> ( (unsigned int) SECURITY_CTRL ) </loc>
//      <o.0..0> ENABLE
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_CTRL  ---------------------------------
// SVD Line: 43073

//  <rtree> SFDITEM_REG__SECURITY_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030000) Control Register </i>
//    <loc> ( (unsigned int)((SECURITY_CTRL >> 0) & 0xFFFFFFFF), ((SECURITY_CTRL = (SECURITY_CTRL & ~(0x800000F1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x800000F1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_CTRL_CRCERROR </item>
//    <item> SFDITEM_FIELD__SECURITY_CTRL_FUNCTION </item>
//    <item> SFDITEM_FIELD__SECURITY_CTRL_ENABLE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: SECURITY_SRCADDR  ----------------------------
// SVD Line: 43112

unsigned int SECURITY_SRCADDR __AT (0x40030010);



// ----------------------------  Field Item: SECURITY_SRCADDR_ADDR  -------------------------------
// SVD Line: 43122

//  <item> SFDITEM_FIELD__SECURITY_SRCADDR_ADDR
//    <name> ADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030010) Source Buffer Address. Address may be byte aligned, but the length must be a multiple of 4 bits. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_SRCADDR >> 0) & 0xFFFFFFFF), ((SECURITY_SRCADDR = (SECURITY_SRCADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SECURITY_SRCADDR  --------------------------------
// SVD Line: 43112

//  <rtree> SFDITEM_REG__SECURITY_SRCADDR
//    <name> SRCADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030010) Source Addresss </i>
//    <loc> ( (unsigned int)((SECURITY_SRCADDR >> 0) & 0xFFFFFFFF), ((SECURITY_SRCADDR = (SECURITY_SRCADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_SRCADDR_ADDR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SECURITY_LEN  ------------------------------
// SVD Line: 43131

unsigned int SECURITY_LEN __AT (0x40030020);



// ------------------------------  Field Item: SECURITY_LEN_LEN  ----------------------------------
// SVD Line: 43141

//  <item> SFDITEM_FIELD__SECURITY_LEN_LEN
//    <name> LEN </name>
//    <rw> 
//    <i> [Bits 19..2] RW (@ 0x40030020) Buffer size (bottom two bits assumed to be zero to ensure a multiple of 4 bytes) </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_LEN >> 2) & 0x3FFFF), ((SECURITY_LEN = (SECURITY_LEN & ~(0x3FFFFUL << 2 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_LEN  ----------------------------------
// SVD Line: 43131

//  <rtree> SFDITEM_REG__SECURITY_LEN
//    <name> LEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030020) Length </i>
//    <loc> ( (unsigned int)((SECURITY_LEN >> 0) & 0xFFFFFFFF), ((SECURITY_LEN = (SECURITY_LEN & ~(0xFFFFCUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_LEN_LEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: SECURITY_RESULT  -----------------------------
// SVD Line: 43150

unsigned int SECURITY_RESULT __AT (0x40030030);



// -----------------------------  Field Item: SECURITY_RESULT_CRC  --------------------------------
// SVD Line: 43160

//  <item> SFDITEM_FIELD__SECURITY_RESULT_CRC
//    <name> CRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030030) CRC Seed/Result. Software must seed the CRC with 0xFFFFFFFF before starting a CRC operation (unless the CRC is continued from a previous operation). </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_RESULT >> 0) & 0xFFFFFFFF), ((SECURITY_RESULT = (SECURITY_RESULT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: SECURITY_RESULT  --------------------------------
// SVD Line: 43150

//  <rtree> SFDITEM_REG__SECURITY_RESULT
//    <name> RESULT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030030) CRC Seed/Result Register </i>
//    <loc> ( (unsigned int)((SECURITY_RESULT >> 0) & 0xFFFFFFFF), ((SECURITY_RESULT = (SECURITY_RESULT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_RESULT_CRC </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SECURITY_LOCKCTRL  ----------------------------
// SVD Line: 43169

unsigned int SECURITY_LOCKCTRL __AT (0x40030078);



// --------------------------  Field Item: SECURITY_LOCKCTRL_SELECT  ------------------------------
// SVD Line: 43179

//  <item> SFDITEM_FIELD__SECURITY_LOCKCTRL_SELECT
//    <name> SELECT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40030078) LOCK Function Select register. </i>
//    <edit> 
//      <loc> ( (unsigned char)((SECURITY_LOCKCTRL >> 0) & 0xFF), ((SECURITY_LOCKCTRL = (SECURITY_LOCKCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SECURITY_LOCKCTRL  -------------------------------
// SVD Line: 43169

//  <rtree> SFDITEM_REG__SECURITY_LOCKCTRL
//    <name> LOCKCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030078) LOCK Control Register </i>
//    <loc> ( (unsigned int)((SECURITY_LOCKCTRL >> 0) & 0xFFFFFFFF), ((SECURITY_LOCKCTRL = (SECURITY_LOCKCTRL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_LOCKCTRL_SELECT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SECURITY_LOCKSTAT  ----------------------------
// SVD Line: 43199

unsigned int SECURITY_LOCKSTAT __AT (0x4003007C);



// --------------------------  Field Item: SECURITY_LOCKSTAT_STATUS  ------------------------------
// SVD Line: 43209

//  <item> SFDITEM_FIELD__SECURITY_LOCKSTAT_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4003007C) LOCK Status register. This register is a bitmask for which resources are currently unlocked. These bits are one-hot per resource. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_LOCKSTAT >> 0) & 0xFFFFFFFF), ((SECURITY_LOCKSTAT = (SECURITY_LOCKSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SECURITY_LOCKSTAT  -------------------------------
// SVD Line: 43199

//  <rtree> SFDITEM_REG__SECURITY_LOCKSTAT
//    <name> LOCKSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4003007C) LOCK Status Register </i>
//    <loc> ( (unsigned int)((SECURITY_LOCKSTAT >> 0) & 0xFFFFFFFF), ((SECURITY_LOCKSTAT = (SECURITY_LOCKSTAT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_LOCKSTAT_STATUS </item>
//  </rtree>
//  


// --------------------------  Register Item Address: SECURITY_KEY0  ------------------------------
// SVD Line: 43229

unsigned int SECURITY_KEY0 __AT (0x40030080);



// -----------------------------  Field Item: SECURITY_KEY0_KEY0  ---------------------------------
// SVD Line: 43239

//  <item> SFDITEM_FIELD__SECURITY_KEY0_KEY0
//    <name> KEY0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030080) Bits [31:0] of the 128-bit key should be written to this register. To protect key values, the register always returns 0x00000000. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_KEY0 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY0 = (SECURITY_KEY0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_KEY0  ---------------------------------
// SVD Line: 43229

//  <rtree> SFDITEM_REG__SECURITY_KEY0
//    <name> KEY0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030080) Key0 Register </i>
//    <loc> ( (unsigned int)((SECURITY_KEY0 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY0 = (SECURITY_KEY0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_KEY0_KEY0 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: SECURITY_KEY1  ------------------------------
// SVD Line: 43248

unsigned int SECURITY_KEY1 __AT (0x40030084);



// -----------------------------  Field Item: SECURITY_KEY1_KEY1  ---------------------------------
// SVD Line: 43258

//  <item> SFDITEM_FIELD__SECURITY_KEY1_KEY1
//    <name> KEY1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030084) Bits [63:32] of the 128-bit key should be written to this register. To protect key values, the register always returns 0x00000000. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_KEY1 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY1 = (SECURITY_KEY1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_KEY1  ---------------------------------
// SVD Line: 43248

//  <rtree> SFDITEM_REG__SECURITY_KEY1
//    <name> KEY1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030084) Key1 Register </i>
//    <loc> ( (unsigned int)((SECURITY_KEY1 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY1 = (SECURITY_KEY1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_KEY1_KEY1 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: SECURITY_KEY2  ------------------------------
// SVD Line: 43267

unsigned int SECURITY_KEY2 __AT (0x40030088);



// -----------------------------  Field Item: SECURITY_KEY2_KEY2  ---------------------------------
// SVD Line: 43277

//  <item> SFDITEM_FIELD__SECURITY_KEY2_KEY2
//    <name> KEY2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030088) Bits [95:64] of the 128-bit key should be written to this register. To protect key values, the register always returns 0x00000000. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_KEY2 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY2 = (SECURITY_KEY2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_KEY2  ---------------------------------
// SVD Line: 43267

//  <rtree> SFDITEM_REG__SECURITY_KEY2
//    <name> KEY2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40030088) Key2 Register </i>
//    <loc> ( (unsigned int)((SECURITY_KEY2 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY2 = (SECURITY_KEY2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_KEY2_KEY2 </item>
//  </rtree>
//  


// --------------------------  Register Item Address: SECURITY_KEY3  ------------------------------
// SVD Line: 43286

unsigned int SECURITY_KEY3 __AT (0x4003008C);



// -----------------------------  Field Item: SECURITY_KEY3_KEY3  ---------------------------------
// SVD Line: 43296

//  <item> SFDITEM_FIELD__SECURITY_KEY3_KEY3
//    <name> KEY3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4003008C) Bits [127:96] of the 128-bit key should be written to this register. To protect key values, the register always returns 0x00000000. </i>
//    <edit> 
//      <loc> ( (unsigned int)((SECURITY_KEY3 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY3 = (SECURITY_KEY3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: SECURITY_KEY3  ---------------------------------
// SVD Line: 43286

//  <rtree> SFDITEM_REG__SECURITY_KEY3
//    <name> KEY3 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4003008C) Key3 Register </i>
//    <loc> ( (unsigned int)((SECURITY_KEY3 >> 0) & 0xFFFFFFFF), ((SECURITY_KEY3 = (SECURITY_KEY3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SECURITY_KEY3_KEY3 </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: SECURITY  -----------------------------------
// SVD Line: 43057

//  <view> SECURITY
//    <name> SECURITY </name>
//    <item> SFDITEM_REG__SECURITY_CTRL </item>
//    <item> SFDITEM_REG__SECURITY_SRCADDR </item>
//    <item> SFDITEM_REG__SECURITY_LEN </item>
//    <item> SFDITEM_REG__SECURITY_RESULT </item>
//    <item> SFDITEM_REG__SECURITY_LOCKCTRL </item>
//    <item> SFDITEM_REG__SECURITY_LOCKSTAT </item>
//    <item> SFDITEM_REG__SECURITY_KEY0 </item>
//    <item> SFDITEM_REG__SECURITY_KEY1 </item>
//    <item> SFDITEM_REG__SECURITY_KEY2 </item>
//    <item> SFDITEM_REG__SECURITY_KEY3 </item>
//  </view>
//  


// -----------------------------  Register Item Address: UART0_DR  --------------------------------
// SVD Line: 43327

unsigned int UART0_DR __AT (0x4001C000);



// -------------------------------  Field Item: UART0_DR_OEDATA  ----------------------------------
// SVD Line: 43337

//  <item> SFDITEM_FIELD__UART0_DR_OEDATA
//    <name> OEDATA </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001C000) \nThis is the overrun error indicator.\n0 : NOERR = No error on UART OEDATA, overrun error indicator. value.\n1 : ERR = Error on UART OEDATA, overrun error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_DR ) </loc>
//      <o.11..11> OEDATA
//        <0=> 0: NOERR = No error on UART OEDATA, overrun error indicator. value.
//        <1=> 1: ERR = Error on UART OEDATA, overrun error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART0_DR_BEDATA  ----------------------------------
// SVD Line: 43355

//  <item> SFDITEM_FIELD__UART0_DR_BEDATA
//    <name> BEDATA </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C000) \nThis is the break error indicator.\n0 : NOERR = No error on UART BEDATA, break error indicator. value.\n1 : ERR = Error on UART BEDATA, break error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_DR ) </loc>
//      <o.10..10> BEDATA
//        <0=> 0: NOERR = No error on UART BEDATA, break error indicator. value.
//        <1=> 1: ERR = Error on UART BEDATA, break error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART0_DR_PEDATA  ----------------------------------
// SVD Line: 43373

//  <item> SFDITEM_FIELD__UART0_DR_PEDATA
//    <name> PEDATA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C000) \nThis is the parity error indicator.\n0 : NOERR = No error on UART PEDATA, parity error indicator. value.\n1 : ERR = Error on UART PEDATA, parity error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_DR ) </loc>
//      <o.9..9> PEDATA
//        <0=> 0: NOERR = No error on UART PEDATA, parity error indicator. value.
//        <1=> 1: ERR = Error on UART PEDATA, parity error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART0_DR_FEDATA  ----------------------------------
// SVD Line: 43391

//  <item> SFDITEM_FIELD__UART0_DR_FEDATA
//    <name> FEDATA </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C000) \nThis is the framing error indicator.\n0 : NOERR = No error on UART FEDATA, framing error indicator. value.\n1 : ERR = Error on UART FEDATA, framing error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_DR ) </loc>
//      <o.8..8> FEDATA
//        <0=> 0: NOERR = No error on UART FEDATA, framing error indicator. value.
//        <1=> 1: ERR = Error on UART FEDATA, framing error indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_DR_DATA  -----------------------------------
// SVD Line: 43409

//  <item> SFDITEM_FIELD__UART0_DR_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4001C000) This is the UART data port. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_DR >> 0) & 0xFF), ((UART0_DR = (UART0_DR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: UART0_DR  ------------------------------------
// SVD Line: 43327

//  <rtree> SFDITEM_REG__UART0_DR
//    <name> DR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C000) UART Data Register </i>
//    <loc> ( (unsigned int)((UART0_DR >> 0) & 0xFFFFFFFF), ((UART0_DR = (UART0_DR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_DR_OEDATA </item>
//    <item> SFDITEM_FIELD__UART0_DR_BEDATA </item>
//    <item> SFDITEM_FIELD__UART0_DR_PEDATA </item>
//    <item> SFDITEM_FIELD__UART0_DR_FEDATA </item>
//    <item> SFDITEM_FIELD__UART0_DR_DATA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_RSR  --------------------------------
// SVD Line: 43418

unsigned int UART0_RSR __AT (0x4001C004);



// ------------------------------  Field Item: UART0_RSR_OESTAT  ----------------------------------
// SVD Line: 43428

//  <item> SFDITEM_FIELD__UART0_RSR_OESTAT
//    <name> OESTAT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C004) \nThis is the overrun error indicator.\n0 : NOERR = No error on UART OESTAT, overrun error indicator. value.\n1 : ERR = Error on UART OESTAT, overrun error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_RSR ) </loc>
//      <o.3..3> OESTAT
//        <0=> 0: NOERR = No error on UART OESTAT, overrun error indicator. value.
//        <1=> 1: ERR = Error on UART OESTAT, overrun error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART0_RSR_BESTAT  ----------------------------------
// SVD Line: 43446

//  <item> SFDITEM_FIELD__UART0_RSR_BESTAT
//    <name> BESTAT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C004) \nThis is the break error indicator.\n0 : NOERR = No error on UART BESTAT, break error indicator. value.\n1 : ERR = Error on UART BESTAT, break error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_RSR ) </loc>
//      <o.2..2> BESTAT
//        <0=> 0: NOERR = No error on UART BESTAT, break error indicator. value.
//        <1=> 1: ERR = Error on UART BESTAT, break error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART0_RSR_PESTAT  ----------------------------------
// SVD Line: 43464

//  <item> SFDITEM_FIELD__UART0_RSR_PESTAT
//    <name> PESTAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C004) \nThis is the parity error indicator.\n0 : NOERR = No error on UART PESTAT, parity error indicator. value.\n1 : ERR = Error on UART PESTAT, parity error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_RSR ) </loc>
//      <o.1..1> PESTAT
//        <0=> 0: NOERR = No error on UART PESTAT, parity error indicator. value.
//        <1=> 1: ERR = Error on UART PESTAT, parity error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART0_RSR_FESTAT  ----------------------------------
// SVD Line: 43482

//  <item> SFDITEM_FIELD__UART0_RSR_FESTAT
//    <name> FESTAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C004) \nThis is the framing error indicator.\n0 : NOERR = No error on UART FESTAT, framing error indicator. value.\n1 : ERR = Error on UART FESTAT, framing error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_RSR ) </loc>
//      <o.0..0> FESTAT
//        <0=> 0: NOERR = No error on UART FESTAT, framing error indicator. value.
//        <1=> 1: ERR = Error on UART FESTAT, framing error indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART0_RSR  -----------------------------------
// SVD Line: 43418

//  <rtree> SFDITEM_REG__UART0_RSR
//    <name> RSR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C004) UART Status Register </i>
//    <loc> ( (unsigned int)((UART0_RSR >> 0) & 0xFFFFFFFF), ((UART0_RSR = (UART0_RSR & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_RSR_OESTAT </item>
//    <item> SFDITEM_FIELD__UART0_RSR_BESTAT </item>
//    <item> SFDITEM_FIELD__UART0_RSR_PESTAT </item>
//    <item> SFDITEM_FIELD__UART0_RSR_FESTAT </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART0_FR  --------------------------------
// SVD Line: 43502

unsigned int UART0_FR __AT (0x4001C018);



// -------------------------------  Field Item: UART0_FR_TXBUSY  ----------------------------------
// SVD Line: 43512

//  <item> SFDITEM_FIELD__UART0_FR_TXBUSY
//    <name> TXBUSY </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C018) This bit holds the transmit BUSY indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.8..8> TXBUSY
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_TXFE  -----------------------------------
// SVD Line: 43519

//  <item> SFDITEM_FIELD__UART0_FR_TXFE
//    <name> TXFE </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C018) \nThis bit holds the transmit FIFO empty indicator.\n0 : Reserved - do not use\n1 : XMTFIFO_EMPTY = Transmit fifo is empty. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.7..7> TXFE
//        <0=> 0: 
//        <1=> 1: XMTFIFO_EMPTY = Transmit fifo is empty. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_RXFF  -----------------------------------
// SVD Line: 43532

//  <item> SFDITEM_FIELD__UART0_FR_RXFF
//    <name> RXFF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001C018) \nThis bit holds the receive FIFO full indicator.\n0 : Reserved - do not use\n1 : RCVFIFO_FULL = Receive fifo is full. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.6..6> RXFF
//        <0=> 0: 
//        <1=> 1: RCVFIFO_FULL = Receive fifo is full. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_TXFF  -----------------------------------
// SVD Line: 43545

//  <item> SFDITEM_FIELD__UART0_FR_TXFF
//    <name> TXFF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001C018) \nThis bit holds the transmit FIFO full indicator.\n0 : Reserved - do not use\n1 : XMTFIFO_FULL = Transmit fifo is full. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.5..5> TXFF
//        <0=> 0: 
//        <1=> 1: XMTFIFO_FULL = Transmit fifo is full. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_RXFE  -----------------------------------
// SVD Line: 43558

//  <item> SFDITEM_FIELD__UART0_FR_RXFE
//    <name> RXFE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C018) \nThis bit holds the receive FIFO empty indicator.\n0 : Reserved - do not use\n1 : RCVFIFO_EMPTY = Receive fifo is empty. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.4..4> RXFE
//        <0=> 0: 
//        <1=> 1: RCVFIFO_EMPTY = Receive fifo is empty. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_BUSY  -----------------------------------
// SVD Line: 43571

//  <item> SFDITEM_FIELD__UART0_FR_BUSY
//    <name> BUSY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C018) \nThis bit holds the busy indicator.\n0 : Reserved - do not use\n1 : BUSY = UART busy indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.3..3> BUSY
//        <0=> 0: 
//        <1=> 1: BUSY = UART busy indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_DCD  ------------------------------------
// SVD Line: 43584

//  <item> SFDITEM_FIELD__UART0_FR_DCD
//    <name> DCD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C018) \nThis bit holds the data carrier detect indicator.\n0 : Reserved - do not use\n1 : DETECTED = Data carrier detect detected. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.2..2> DCD
//        <0=> 0: 
//        <1=> 1: DETECTED = Data carrier detect detected. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_DSR  ------------------------------------
// SVD Line: 43597

//  <item> SFDITEM_FIELD__UART0_FR_DSR
//    <name> DSR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C018) \nThis bit holds the data set ready indicator.\n0 : Reserved - do not use\n1 : READY = Data set ready. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.1..1> DSR
//        <0=> 0: 
//        <1=> 1: READY = Data set ready. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART0_FR_CTS  ------------------------------------
// SVD Line: 43610

//  <item> SFDITEM_FIELD__UART0_FR_CTS
//    <name> CTS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C018) \nThis bit holds the clear to send indicator.\n0 : Reserved - do not use\n1 : CLEARTOSEND = Clear to send is indicated. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_FR ) </loc>
//      <o.0..0> CTS
//        <0=> 0: 
//        <1=> 1: CLEARTOSEND = Clear to send is indicated. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART0_FR  ------------------------------------
// SVD Line: 43502

//  <rtree> SFDITEM_REG__UART0_FR
//    <name> FR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C018) Flag Register </i>
//    <loc> ( (unsigned int)((UART0_FR >> 0) & 0xFFFFFFFF), ((UART0_FR = (UART0_FR & ~(0x1FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_FR_TXBUSY </item>
//    <item> SFDITEM_FIELD__UART0_FR_TXFE </item>
//    <item> SFDITEM_FIELD__UART0_FR_RXFF </item>
//    <item> SFDITEM_FIELD__UART0_FR_TXFF </item>
//    <item> SFDITEM_FIELD__UART0_FR_RXFE </item>
//    <item> SFDITEM_FIELD__UART0_FR_BUSY </item>
//    <item> SFDITEM_FIELD__UART0_FR_DCD </item>
//    <item> SFDITEM_FIELD__UART0_FR_DSR </item>
//    <item> SFDITEM_FIELD__UART0_FR_CTS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_ILPR  -------------------------------
// SVD Line: 43625

unsigned int UART0_ILPR __AT (0x4001C020);



// -----------------------------  Field Item: UART0_ILPR_ILPDVSR  ---------------------------------
// SVD Line: 43635

//  <item> SFDITEM_FIELD__UART0_ILPR_ILPDVSR
//    <name> ILPDVSR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4001C020) These bits hold the IrDA counter divisor. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_ILPR >> 0) & 0xFF), ((UART0_ILPR = (UART0_ILPR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART0_ILPR  -----------------------------------
// SVD Line: 43625

//  <rtree> SFDITEM_REG__UART0_ILPR
//    <name> ILPR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C020) IrDA Counter </i>
//    <loc> ( (unsigned int)((UART0_ILPR >> 0) & 0xFFFFFFFF), ((UART0_ILPR = (UART0_ILPR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_ILPR_ILPDVSR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_IBRD  -------------------------------
// SVD Line: 43644

unsigned int UART0_IBRD __AT (0x4001C024);



// ------------------------------  Field Item: UART0_IBRD_DIVINT  ---------------------------------
// SVD Line: 43654

//  <item> SFDITEM_FIELD__UART0_IBRD_DIVINT
//    <name> DIVINT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4001C024) These bits hold the baud integer divisor. </i>
//    <edit> 
//      <loc> ( (unsigned short)((UART0_IBRD >> 0) & 0xFFFF), ((UART0_IBRD = (UART0_IBRD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART0_IBRD  -----------------------------------
// SVD Line: 43644

//  <rtree> SFDITEM_REG__UART0_IBRD
//    <name> IBRD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C024) Integer Baud Rate Divisor </i>
//    <loc> ( (unsigned int)((UART0_IBRD >> 0) & 0xFFFFFFFF), ((UART0_IBRD = (UART0_IBRD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_IBRD_DIVINT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_FBRD  -------------------------------
// SVD Line: 43663

unsigned int UART0_FBRD __AT (0x4001C028);



// -----------------------------  Field Item: UART0_FBRD_DIVFRAC  ---------------------------------
// SVD Line: 43673

//  <item> SFDITEM_FIELD__UART0_FBRD_DIVFRAC
//    <name> DIVFRAC </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x4001C028) These bits hold the baud fractional divisor. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_FBRD >> 0) & 0x3F), ((UART0_FBRD = (UART0_FBRD & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART0_FBRD  -----------------------------------
// SVD Line: 43663

//  <rtree> SFDITEM_REG__UART0_FBRD
//    <name> FBRD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C028) Fractional Baud Rate Divisor </i>
//    <loc> ( (unsigned int)((UART0_FBRD >> 0) & 0xFFFFFFFF), ((UART0_FBRD = (UART0_FBRD & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_FBRD_DIVFRAC </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_LCRH  -------------------------------
// SVD Line: 43682

unsigned int UART0_LCRH __AT (0x4001C02C);



// -------------------------------  Field Item: UART0_LCRH_SPS  -----------------------------------
// SVD Line: 43692

//  <item> SFDITEM_FIELD__UART0_LCRH_SPS
//    <name> SPS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C02C) This bit holds the stick parity select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.7..7> SPS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_WLEN  ----------------------------------
// SVD Line: 43699

//  <item> SFDITEM_FIELD__UART0_LCRH_WLEN
//    <name> WLEN </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x4001C02C) These bits hold the write length. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_LCRH >> 5) & 0x3), ((UART0_LCRH = (UART0_LCRH & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_FEN  -----------------------------------
// SVD Line: 43706

//  <item> SFDITEM_FIELD__UART0_LCRH_FEN
//    <name> FEN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C02C) This bit holds the FIFO enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.4..4> FEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_STP2  ----------------------------------
// SVD Line: 43713

//  <item> SFDITEM_FIELD__UART0_LCRH_STP2
//    <name> STP2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C02C) This bit holds the two stop bits select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.3..3> STP2
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_EPS  -----------------------------------
// SVD Line: 43720

//  <item> SFDITEM_FIELD__UART0_LCRH_EPS
//    <name> EPS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C02C) This bit holds the even parity select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.2..2> EPS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_PEN  -----------------------------------
// SVD Line: 43727

//  <item> SFDITEM_FIELD__UART0_LCRH_PEN
//    <name> PEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C02C) This bit holds the parity enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.1..1> PEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_LCRH_BRK  -----------------------------------
// SVD Line: 43734

//  <item> SFDITEM_FIELD__UART0_LCRH_BRK
//    <name> BRK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C02C) This bit holds the break set. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_LCRH ) </loc>
//      <o.0..0> BRK
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: UART0_LCRH  -----------------------------------
// SVD Line: 43682

//  <rtree> SFDITEM_REG__UART0_LCRH
//    <name> LCRH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C02C) Line Control High </i>
//    <loc> ( (unsigned int)((UART0_LCRH >> 0) & 0xFFFFFFFF), ((UART0_LCRH = (UART0_LCRH & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_LCRH_SPS </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_WLEN </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_FEN </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_STP2 </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_EPS </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_PEN </item>
//    <item> SFDITEM_FIELD__UART0_LCRH_BRK </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART0_CR  --------------------------------
// SVD Line: 43743

unsigned int UART0_CR __AT (0x4001C030);



// -------------------------------  Field Item: UART0_CR_CTSEN  -----------------------------------
// SVD Line: 43753

//  <item> SFDITEM_FIELD__UART0_CR_CTSEN
//    <name> CTSEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4001C030) This bit enables CTS hardware flow control. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.15..15> CTSEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_RTSEN  -----------------------------------
// SVD Line: 43760

//  <item> SFDITEM_FIELD__UART0_CR_RTSEN
//    <name> RTSEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4001C030) This bit enables RTS hardware flow control. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.14..14> RTSEN
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_OUT2  -----------------------------------
// SVD Line: 43767

//  <item> SFDITEM_FIELD__UART0_CR_OUT2
//    <name> OUT2 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4001C030) This bit holds modem Out2. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.13..13> OUT2
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_OUT1  -----------------------------------
// SVD Line: 43774

//  <item> SFDITEM_FIELD__UART0_CR_OUT1
//    <name> OUT1 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001C030) This bit holds modem Out1. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.12..12> OUT1
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_RTS  ------------------------------------
// SVD Line: 43781

//  <item> SFDITEM_FIELD__UART0_CR_RTS
//    <name> RTS </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001C030) This bit enables request to send. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.11..11> RTS
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_DTR  ------------------------------------
// SVD Line: 43788

//  <item> SFDITEM_FIELD__UART0_CR_DTR
//    <name> DTR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C030) This bit enables data transmit ready. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.10..10> DTR
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_RXE  ------------------------------------
// SVD Line: 43795

//  <item> SFDITEM_FIELD__UART0_CR_RXE
//    <name> RXE </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C030) This bit is the receive enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.9..9> RXE
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_TXE  ------------------------------------
// SVD Line: 43802

//  <item> SFDITEM_FIELD__UART0_CR_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C030) This bit is the transmit enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.8..8> TXE
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART0_CR_LBE  ------------------------------------
// SVD Line: 43809

//  <item> SFDITEM_FIELD__UART0_CR_LBE
//    <name> LBE </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C030) This bit is the loopback enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.7..7> LBE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_CLKSEL  ----------------------------------
// SVD Line: 43816

//  <item> SFDITEM_FIELD__UART0_CR_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x4001C030) \nThis bitfield is the UART clock select.\n0 : NOCLK = No UART clock. This is the low power default. value.\n1 : 24MHZ = 24 MHz clock. value.\n2 : 12MHZ = 12 MHz clock. value.\n3 : 6MHZ = 6 MHz clock. value.\n4 : 3MHZ = 3 MHz clock. value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.6..4> CLKSEL
//        <0=> 0: NOCLK = No UART clock. This is the low power default. value.
//        <1=> 1: 24MHZ = 24 MHz clock. value.
//        <2=> 2: 12MHZ = 12 MHz clock. value.
//        <3=> 3: 6MHZ = 6 MHz clock. value.
//        <4=> 4: 3MHZ = 3 MHz clock. value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_CLKEN  -----------------------------------
// SVD Line: 43849

//  <item> SFDITEM_FIELD__UART0_CR_CLKEN
//    <name> CLKEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C030) This bit is the UART clock enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.3..3> CLKEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_SIRLP  -----------------------------------
// SVD Line: 43856

//  <item> SFDITEM_FIELD__UART0_CR_SIRLP
//    <name> SIRLP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C030) This bit is the SIR low power select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.2..2> SIRLP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_SIREN  -----------------------------------
// SVD Line: 43863

//  <item> SFDITEM_FIELD__UART0_CR_SIREN
//    <name> SIREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C030) This bit is the SIR ENDEC enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.1..1> SIREN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_CR_UARTEN  ----------------------------------
// SVD Line: 43870

//  <item> SFDITEM_FIELD__UART0_CR_UARTEN
//    <name> UARTEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C030) This bit is the UART enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_CR ) </loc>
//      <o.0..0> UARTEN
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART0_CR  ------------------------------------
// SVD Line: 43743

//  <rtree> SFDITEM_REG__UART0_CR
//    <name> CR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C030) Control Register </i>
//    <loc> ( (unsigned int)((UART0_CR >> 0) & 0xFFFFFFFF), ((UART0_CR = (UART0_CR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_CR_CTSEN </item>
//    <item> SFDITEM_FIELD__UART0_CR_RTSEN </item>
//    <item> SFDITEM_FIELD__UART0_CR_OUT2 </item>
//    <item> SFDITEM_FIELD__UART0_CR_OUT1 </item>
//    <item> SFDITEM_FIELD__UART0_CR_RTS </item>
//    <item> SFDITEM_FIELD__UART0_CR_DTR </item>
//    <item> SFDITEM_FIELD__UART0_CR_RXE </item>
//    <item> SFDITEM_FIELD__UART0_CR_TXE </item>
//    <item> SFDITEM_FIELD__UART0_CR_LBE </item>
//    <item> SFDITEM_FIELD__UART0_CR_CLKSEL </item>
//    <item> SFDITEM_FIELD__UART0_CR_CLKEN </item>
//    <item> SFDITEM_FIELD__UART0_CR_SIRLP </item>
//    <item> SFDITEM_FIELD__UART0_CR_SIREN </item>
//    <item> SFDITEM_FIELD__UART0_CR_UARTEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_IFLS  -------------------------------
// SVD Line: 43879

unsigned int UART0_IFLS __AT (0x4001C034);



// -----------------------------  Field Item: UART0_IFLS_RXIFLSEL  --------------------------------
// SVD Line: 43889

//  <item> SFDITEM_FIELD__UART0_IFLS_RXIFLSEL
//    <name> RXIFLSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4001C034) These bits hold the receive FIFO interrupt level. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_IFLS >> 3) & 0x7), ((UART0_IFLS = (UART0_IFLS & ~(0x7UL << 3 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: UART0_IFLS_TXIFLSEL  --------------------------------
// SVD Line: 43896

//  <item> SFDITEM_FIELD__UART0_IFLS_TXIFLSEL
//    <name> TXIFLSEL </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4001C034) These bits hold the transmit FIFO interrupt level. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART0_IFLS >> 0) & 0x7), ((UART0_IFLS = (UART0_IFLS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART0_IFLS  -----------------------------------
// SVD Line: 43879

//  <rtree> SFDITEM_REG__UART0_IFLS
//    <name> IFLS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C034) FIFO Interrupt Level Select </i>
//    <loc> ( (unsigned int)((UART0_IFLS >> 0) & 0xFFFFFFFF), ((UART0_IFLS = (UART0_IFLS & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_IFLS_RXIFLSEL </item>
//    <item> SFDITEM_FIELD__UART0_IFLS_TXIFLSEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_IER  --------------------------------
// SVD Line: 43905

unsigned int UART0_IER __AT (0x4001C038);



// -------------------------------  Field Item: UART0_IER_OEIM  -----------------------------------
// SVD Line: 43915

//  <item> SFDITEM_FIELD__UART0_IER_OEIM
//    <name> OEIM </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C038) This bit holds the overflow interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.10..10> OEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_BEIM  -----------------------------------
// SVD Line: 43922

//  <item> SFDITEM_FIELD__UART0_IER_BEIM
//    <name> BEIM </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C038) This bit holds the break error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.9..9> BEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_PEIM  -----------------------------------
// SVD Line: 43929

//  <item> SFDITEM_FIELD__UART0_IER_PEIM
//    <name> PEIM </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C038) This bit holds the parity error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.8..8> PEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_FEIM  -----------------------------------
// SVD Line: 43936

//  <item> SFDITEM_FIELD__UART0_IER_FEIM
//    <name> FEIM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C038) This bit holds the framing error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.7..7> FEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_RTIM  -----------------------------------
// SVD Line: 43943

//  <item> SFDITEM_FIELD__UART0_IER_RTIM
//    <name> RTIM </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001C038) This bit holds the receive timeout interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.6..6> RTIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_TXIM  -----------------------------------
// SVD Line: 43950

//  <item> SFDITEM_FIELD__UART0_IER_TXIM
//    <name> TXIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001C038) This bit holds the transmit interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.5..5> TXIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IER_RXIM  -----------------------------------
// SVD Line: 43957

//  <item> SFDITEM_FIELD__UART0_IER_RXIM
//    <name> RXIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C038) This bit holds the receive interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.4..4> RXIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IER_DSRMIM  ----------------------------------
// SVD Line: 43964

//  <item> SFDITEM_FIELD__UART0_IER_DSRMIM
//    <name> DSRMIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C038) This bit holds the modem DSR interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.3..3> DSRMIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IER_DCDMIM  ----------------------------------
// SVD Line: 43971

//  <item> SFDITEM_FIELD__UART0_IER_DCDMIM
//    <name> DCDMIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C038) This bit holds the modem DCD interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.2..2> DCDMIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IER_CTSMIM  ----------------------------------
// SVD Line: 43978

//  <item> SFDITEM_FIELD__UART0_IER_CTSMIM
//    <name> CTSMIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C038) This bit holds the modem CTS interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.1..1> CTSMIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART0_IER_TXCMPMIM  ---------------------------------
// SVD Line: 43985

//  <item> SFDITEM_FIELD__UART0_IER_TXCMPMIM
//    <name> TXCMPMIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C038) This bit holds the modem TXCMP interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IER ) </loc>
//      <o.0..0> TXCMPMIM
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART0_IER  -----------------------------------
// SVD Line: 43905

//  <rtree> SFDITEM_REG__UART0_IER
//    <name> IER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C038) Interrupt Enable </i>
//    <loc> ( (unsigned int)((UART0_IER >> 0) & 0xFFFFFFFF), ((UART0_IER = (UART0_IER & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_IER_OEIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_BEIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_PEIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_FEIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_RTIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_TXIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_RXIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_DSRMIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_DCDMIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_CTSMIM </item>
//    <item> SFDITEM_FIELD__UART0_IER_TXCMPMIM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_IES  --------------------------------
// SVD Line: 43994

unsigned int UART0_IES __AT (0x4001C03C);



// -------------------------------  Field Item: UART0_IES_OERIS  ----------------------------------
// SVD Line: 44004

//  <item> SFDITEM_FIELD__UART0_IES_OERIS
//    <name> OERIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C03C) This bit holds the overflow interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.10..10> OERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_BERIS  ----------------------------------
// SVD Line: 44011

//  <item> SFDITEM_FIELD__UART0_IES_BERIS
//    <name> BERIS </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C03C) This bit holds the break error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.9..9> BERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_PERIS  ----------------------------------
// SVD Line: 44018

//  <item> SFDITEM_FIELD__UART0_IES_PERIS
//    <name> PERIS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C03C) This bit holds the parity error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.8..8> PERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_FERIS  ----------------------------------
// SVD Line: 44025

//  <item> SFDITEM_FIELD__UART0_IES_FERIS
//    <name> FERIS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C03C) This bit holds the framing error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.7..7> FERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_RTRIS  ----------------------------------
// SVD Line: 44032

//  <item> SFDITEM_FIELD__UART0_IES_RTRIS
//    <name> RTRIS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001C03C) This bit holds the receive timeout interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.6..6> RTRIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_TXRIS  ----------------------------------
// SVD Line: 44039

//  <item> SFDITEM_FIELD__UART0_IES_TXRIS
//    <name> TXRIS </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001C03C) This bit holds the transmit interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.5..5> TXRIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IES_RXRIS  ----------------------------------
// SVD Line: 44046

//  <item> SFDITEM_FIELD__UART0_IES_RXRIS
//    <name> RXRIS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C03C) This bit holds the receive interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.4..4> RXRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IES_DSRMRIS  ---------------------------------
// SVD Line: 44053

//  <item> SFDITEM_FIELD__UART0_IES_DSRMRIS
//    <name> DSRMRIS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C03C) This bit holds the modem DSR interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.3..3> DSRMRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IES_DCDMRIS  ---------------------------------
// SVD Line: 44060

//  <item> SFDITEM_FIELD__UART0_IES_DCDMRIS
//    <name> DCDMRIS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C03C) This bit holds the modem DCD interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.2..2> DCDMRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IES_CTSMRIS  ---------------------------------
// SVD Line: 44067

//  <item> SFDITEM_FIELD__UART0_IES_CTSMRIS
//    <name> CTSMRIS </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C03C) This bit holds the modem CTS interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.1..1> CTSMRIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART0_IES_TXCMPMRIS  --------------------------------
// SVD Line: 44074

//  <item> SFDITEM_FIELD__UART0_IES_TXCMPMRIS
//    <name> TXCMPMRIS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C03C) This bit holds the modem TXCMP interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IES ) </loc>
//      <o.0..0> TXCMPMRIS
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART0_IES  -----------------------------------
// SVD Line: 43994

//  <rtree> SFDITEM_REG__UART0_IES
//    <name> IES </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C03C) Interrupt Status </i>
//    <loc> ( (unsigned int)((UART0_IES >> 0) & 0xFFFFFFFF), ((UART0_IES = (UART0_IES & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_IES_OERIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_BERIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_PERIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_FERIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_RTRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_TXRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_RXRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_DSRMRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_DCDMRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_CTSMRIS </item>
//    <item> SFDITEM_FIELD__UART0_IES_TXCMPMRIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_MIS  --------------------------------
// SVD Line: 44083

unsigned int UART0_MIS __AT (0x4001C040);



// -------------------------------  Field Item: UART0_MIS_OEMIS  ----------------------------------
// SVD Line: 44093

//  <item> SFDITEM_FIELD__UART0_MIS_OEMIS
//    <name> OEMIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C040) This bit holds the overflow interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.10..10> OEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_BEMIS  ----------------------------------
// SVD Line: 44100

//  <item> SFDITEM_FIELD__UART0_MIS_BEMIS
//    <name> BEMIS </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C040) This bit holds the break error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.9..9> BEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_PEMIS  ----------------------------------
// SVD Line: 44107

//  <item> SFDITEM_FIELD__UART0_MIS_PEMIS
//    <name> PEMIS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C040) This bit holds the parity error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.8..8> PEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_FEMIS  ----------------------------------
// SVD Line: 44114

//  <item> SFDITEM_FIELD__UART0_MIS_FEMIS
//    <name> FEMIS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C040) This bit holds the framing error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.7..7> FEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_RTMIS  ----------------------------------
// SVD Line: 44121

//  <item> SFDITEM_FIELD__UART0_MIS_RTMIS
//    <name> RTMIS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001C040) This bit holds the receive timeout interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.6..6> RTMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_TXMIS  ----------------------------------
// SVD Line: 44128

//  <item> SFDITEM_FIELD__UART0_MIS_TXMIS
//    <name> TXMIS </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001C040) This bit holds the transmit interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.5..5> TXMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_MIS_RXMIS  ----------------------------------
// SVD Line: 44135

//  <item> SFDITEM_FIELD__UART0_MIS_RXMIS
//    <name> RXMIS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C040) This bit holds the receive interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.4..4> RXMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_MIS_DSRMMIS  ---------------------------------
// SVD Line: 44142

//  <item> SFDITEM_FIELD__UART0_MIS_DSRMMIS
//    <name> DSRMMIS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C040) This bit holds the modem DSR interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.3..3> DSRMMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_MIS_DCDMMIS  ---------------------------------
// SVD Line: 44149

//  <item> SFDITEM_FIELD__UART0_MIS_DCDMMIS
//    <name> DCDMMIS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C040) This bit holds the modem DCD interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.2..2> DCDMMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_MIS_CTSMMIS  ---------------------------------
// SVD Line: 44156

//  <item> SFDITEM_FIELD__UART0_MIS_CTSMMIS
//    <name> CTSMMIS </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C040) This bit holds the modem CTS interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.1..1> CTSMMIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART0_MIS_TXCMPMMIS  --------------------------------
// SVD Line: 44163

//  <item> SFDITEM_FIELD__UART0_MIS_TXCMPMMIS
//    <name> TXCMPMMIS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C040) This bit holds the modem TXCMP interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_MIS ) </loc>
//      <o.0..0> TXCMPMMIS
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART0_MIS  -----------------------------------
// SVD Line: 44083

//  <rtree> SFDITEM_REG__UART0_MIS
//    <name> MIS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C040) Masked Interrupt Status </i>
//    <loc> ( (unsigned int)((UART0_MIS >> 0) & 0xFFFFFFFF), ((UART0_MIS = (UART0_MIS & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_MIS_OEMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_BEMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_PEMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_FEMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_RTMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_TXMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_RXMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_DSRMMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_DCDMMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_CTSMMIS </item>
//    <item> SFDITEM_FIELD__UART0_MIS_TXCMPMMIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART0_IEC  --------------------------------
// SVD Line: 44172

unsigned int UART0_IEC __AT (0x4001C044);



// -------------------------------  Field Item: UART0_IEC_OEIC  -----------------------------------
// SVD Line: 44182

//  <item> SFDITEM_FIELD__UART0_IEC_OEIC
//    <name> OEIC </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001C044) This bit holds the overflow interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.10..10> OEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_BEIC  -----------------------------------
// SVD Line: 44189

//  <item> SFDITEM_FIELD__UART0_IEC_BEIC
//    <name> BEIC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001C044) This bit holds the break error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.9..9> BEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_PEIC  -----------------------------------
// SVD Line: 44196

//  <item> SFDITEM_FIELD__UART0_IEC_PEIC
//    <name> PEIC </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001C044) This bit holds the parity error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.8..8> PEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_FEIC  -----------------------------------
// SVD Line: 44203

//  <item> SFDITEM_FIELD__UART0_IEC_FEIC
//    <name> FEIC </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001C044) This bit holds the framing error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.7..7> FEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_RTIC  -----------------------------------
// SVD Line: 44210

//  <item> SFDITEM_FIELD__UART0_IEC_RTIC
//    <name> RTIC </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001C044) This bit holds the receive timeout interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.6..6> RTIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_TXIC  -----------------------------------
// SVD Line: 44217

//  <item> SFDITEM_FIELD__UART0_IEC_TXIC
//    <name> TXIC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001C044) This bit holds the transmit interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.5..5> TXIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART0_IEC_RXIC  -----------------------------------
// SVD Line: 44224

//  <item> SFDITEM_FIELD__UART0_IEC_RXIC
//    <name> RXIC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001C044) This bit holds the receive interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.4..4> RXIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IEC_DSRMIC  ----------------------------------
// SVD Line: 44231

//  <item> SFDITEM_FIELD__UART0_IEC_DSRMIC
//    <name> DSRMIC </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001C044) This bit holds the modem DSR interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.3..3> DSRMIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IEC_DCDMIC  ----------------------------------
// SVD Line: 44238

//  <item> SFDITEM_FIELD__UART0_IEC_DCDMIC
//    <name> DCDMIC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001C044) This bit holds the modem DCD interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.2..2> DCDMIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART0_IEC_CTSMIC  ----------------------------------
// SVD Line: 44245

//  <item> SFDITEM_FIELD__UART0_IEC_CTSMIC
//    <name> CTSMIC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001C044) This bit holds the modem CTS interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.1..1> CTSMIC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART0_IEC_TXCMPMIC  ---------------------------------
// SVD Line: 44252

//  <item> SFDITEM_FIELD__UART0_IEC_TXCMPMIC
//    <name> TXCMPMIC </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001C044) This bit holds the modem TXCMP interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART0_IEC ) </loc>
//      <o.0..0> TXCMPMIC
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART0_IEC  -----------------------------------
// SVD Line: 44172

//  <rtree> SFDITEM_REG__UART0_IEC
//    <name> IEC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001C044) Interrupt Clear </i>
//    <loc> ( (unsigned int)((UART0_IEC >> 0) & 0xFFFFFFFF), ((UART0_IEC = (UART0_IEC & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART0_IEC_OEIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_BEIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_PEIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_FEIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_RTIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_TXIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_RXIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_DSRMIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_DCDMIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_CTSMIC </item>
//    <item> SFDITEM_FIELD__UART0_IEC_TXCMPMIC </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: UART0  -------------------------------------
// SVD Line: 43308

//  <view> UART0
//    <name> UART0 </name>
//    <item> SFDITEM_REG__UART0_DR </item>
//    <item> SFDITEM_REG__UART0_RSR </item>
//    <item> SFDITEM_REG__UART0_FR </item>
//    <item> SFDITEM_REG__UART0_ILPR </item>
//    <item> SFDITEM_REG__UART0_IBRD </item>
//    <item> SFDITEM_REG__UART0_FBRD </item>
//    <item> SFDITEM_REG__UART0_LCRH </item>
//    <item> SFDITEM_REG__UART0_CR </item>
//    <item> SFDITEM_REG__UART0_IFLS </item>
//    <item> SFDITEM_REG__UART0_IER </item>
//    <item> SFDITEM_REG__UART0_IES </item>
//    <item> SFDITEM_REG__UART0_MIS </item>
//    <item> SFDITEM_REG__UART0_IEC </item>
//  </view>
//  


// -----------------------------  Register Item Address: UART1_DR  --------------------------------
// SVD Line: 43327

unsigned int UART1_DR __AT (0x4001D000);



// -------------------------------  Field Item: UART1_DR_OEDATA  ----------------------------------
// SVD Line: 43337

//  <item> SFDITEM_FIELD__UART1_DR_OEDATA
//    <name> OEDATA </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001D000) \nThis is the overrun error indicator.\n0 : NOERR = No error on UART OEDATA, overrun error indicator. value.\n1 : ERR = Error on UART OEDATA, overrun error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_DR ) </loc>
//      <o.11..11> OEDATA
//        <0=> 0: NOERR = No error on UART OEDATA, overrun error indicator. value.
//        <1=> 1: ERR = Error on UART OEDATA, overrun error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART1_DR_BEDATA  ----------------------------------
// SVD Line: 43355

//  <item> SFDITEM_FIELD__UART1_DR_BEDATA
//    <name> BEDATA </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D000) \nThis is the break error indicator.\n0 : NOERR = No error on UART BEDATA, break error indicator. value.\n1 : ERR = Error on UART BEDATA, break error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_DR ) </loc>
//      <o.10..10> BEDATA
//        <0=> 0: NOERR = No error on UART BEDATA, break error indicator. value.
//        <1=> 1: ERR = Error on UART BEDATA, break error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART1_DR_PEDATA  ----------------------------------
// SVD Line: 43373

//  <item> SFDITEM_FIELD__UART1_DR_PEDATA
//    <name> PEDATA </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D000) \nThis is the parity error indicator.\n0 : NOERR = No error on UART PEDATA, parity error indicator. value.\n1 : ERR = Error on UART PEDATA, parity error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_DR ) </loc>
//      <o.9..9> PEDATA
//        <0=> 0: NOERR = No error on UART PEDATA, parity error indicator. value.
//        <1=> 1: ERR = Error on UART PEDATA, parity error indicator. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART1_DR_FEDATA  ----------------------------------
// SVD Line: 43391

//  <item> SFDITEM_FIELD__UART1_DR_FEDATA
//    <name> FEDATA </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D000) \nThis is the framing error indicator.\n0 : NOERR = No error on UART FEDATA, framing error indicator. value.\n1 : ERR = Error on UART FEDATA, framing error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_DR ) </loc>
//      <o.8..8> FEDATA
//        <0=> 0: NOERR = No error on UART FEDATA, framing error indicator. value.
//        <1=> 1: ERR = Error on UART FEDATA, framing error indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_DR_DATA  -----------------------------------
// SVD Line: 43409

//  <item> SFDITEM_FIELD__UART1_DR_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4001D000) This is the UART data port. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_DR >> 0) & 0xFF), ((UART1_DR = (UART1_DR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: UART1_DR  ------------------------------------
// SVD Line: 43327

//  <rtree> SFDITEM_REG__UART1_DR
//    <name> DR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D000) UART Data Register </i>
//    <loc> ( (unsigned int)((UART1_DR >> 0) & 0xFFFFFFFF), ((UART1_DR = (UART1_DR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_DR_OEDATA </item>
//    <item> SFDITEM_FIELD__UART1_DR_BEDATA </item>
//    <item> SFDITEM_FIELD__UART1_DR_PEDATA </item>
//    <item> SFDITEM_FIELD__UART1_DR_FEDATA </item>
//    <item> SFDITEM_FIELD__UART1_DR_DATA </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_RSR  --------------------------------
// SVD Line: 43418

unsigned int UART1_RSR __AT (0x4001D004);



// ------------------------------  Field Item: UART1_RSR_OESTAT  ----------------------------------
// SVD Line: 43428

//  <item> SFDITEM_FIELD__UART1_RSR_OESTAT
//    <name> OESTAT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D004) \nThis is the overrun error indicator.\n0 : NOERR = No error on UART OESTAT, overrun error indicator. value.\n1 : ERR = Error on UART OESTAT, overrun error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_RSR ) </loc>
//      <o.3..3> OESTAT
//        <0=> 0: NOERR = No error on UART OESTAT, overrun error indicator. value.
//        <1=> 1: ERR = Error on UART OESTAT, overrun error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART1_RSR_BESTAT  ----------------------------------
// SVD Line: 43446

//  <item> SFDITEM_FIELD__UART1_RSR_BESTAT
//    <name> BESTAT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D004) \nThis is the break error indicator.\n0 : NOERR = No error on UART BESTAT, break error indicator. value.\n1 : ERR = Error on UART BESTAT, break error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_RSR ) </loc>
//      <o.2..2> BESTAT
//        <0=> 0: NOERR = No error on UART BESTAT, break error indicator. value.
//        <1=> 1: ERR = Error on UART BESTAT, break error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART1_RSR_PESTAT  ----------------------------------
// SVD Line: 43464

//  <item> SFDITEM_FIELD__UART1_RSR_PESTAT
//    <name> PESTAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D004) \nThis is the parity error indicator.\n0 : NOERR = No error on UART PESTAT, parity error indicator. value.\n1 : ERR = Error on UART PESTAT, parity error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_RSR ) </loc>
//      <o.1..1> PESTAT
//        <0=> 0: NOERR = No error on UART PESTAT, parity error indicator. value.
//        <1=> 1: ERR = Error on UART PESTAT, parity error indicator. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: UART1_RSR_FESTAT  ----------------------------------
// SVD Line: 43482

//  <item> SFDITEM_FIELD__UART1_RSR_FESTAT
//    <name> FESTAT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D004) \nThis is the framing error indicator.\n0 : NOERR = No error on UART FESTAT, framing error indicator. value.\n1 : ERR = Error on UART FESTAT, framing error indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_RSR ) </loc>
//      <o.0..0> FESTAT
//        <0=> 0: NOERR = No error on UART FESTAT, framing error indicator. value.
//        <1=> 1: ERR = Error on UART FESTAT, framing error indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART1_RSR  -----------------------------------
// SVD Line: 43418

//  <rtree> SFDITEM_REG__UART1_RSR
//    <name> RSR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D004) UART Status Register </i>
//    <loc> ( (unsigned int)((UART1_RSR >> 0) & 0xFFFFFFFF), ((UART1_RSR = (UART1_RSR & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_RSR_OESTAT </item>
//    <item> SFDITEM_FIELD__UART1_RSR_BESTAT </item>
//    <item> SFDITEM_FIELD__UART1_RSR_PESTAT </item>
//    <item> SFDITEM_FIELD__UART1_RSR_FESTAT </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART1_FR  --------------------------------
// SVD Line: 43502

unsigned int UART1_FR __AT (0x4001D018);



// -------------------------------  Field Item: UART1_FR_TXBUSY  ----------------------------------
// SVD Line: 43512

//  <item> SFDITEM_FIELD__UART1_FR_TXBUSY
//    <name> TXBUSY </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D018) This bit holds the transmit BUSY indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.8..8> TXBUSY
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_TXFE  -----------------------------------
// SVD Line: 43519

//  <item> SFDITEM_FIELD__UART1_FR_TXFE
//    <name> TXFE </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D018) \nThis bit holds the transmit FIFO empty indicator.\n0 : Reserved - do not use\n1 : XMTFIFO_EMPTY = Transmit fifo is empty. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.7..7> TXFE
//        <0=> 0: 
//        <1=> 1: XMTFIFO_EMPTY = Transmit fifo is empty. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_RXFF  -----------------------------------
// SVD Line: 43532

//  <item> SFDITEM_FIELD__UART1_FR_RXFF
//    <name> RXFF </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001D018) \nThis bit holds the receive FIFO full indicator.\n0 : Reserved - do not use\n1 : RCVFIFO_FULL = Receive fifo is full. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.6..6> RXFF
//        <0=> 0: 
//        <1=> 1: RCVFIFO_FULL = Receive fifo is full. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_TXFF  -----------------------------------
// SVD Line: 43545

//  <item> SFDITEM_FIELD__UART1_FR_TXFF
//    <name> TXFF </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001D018) \nThis bit holds the transmit FIFO full indicator.\n0 : Reserved - do not use\n1 : XMTFIFO_FULL = Transmit fifo is full. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.5..5> TXFF
//        <0=> 0: 
//        <1=> 1: XMTFIFO_FULL = Transmit fifo is full. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_RXFE  -----------------------------------
// SVD Line: 43558

//  <item> SFDITEM_FIELD__UART1_FR_RXFE
//    <name> RXFE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D018) \nThis bit holds the receive FIFO empty indicator.\n0 : Reserved - do not use\n1 : RCVFIFO_EMPTY = Receive fifo is empty. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.4..4> RXFE
//        <0=> 0: 
//        <1=> 1: RCVFIFO_EMPTY = Receive fifo is empty. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_BUSY  -----------------------------------
// SVD Line: 43571

//  <item> SFDITEM_FIELD__UART1_FR_BUSY
//    <name> BUSY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D018) \nThis bit holds the busy indicator.\n0 : Reserved - do not use\n1 : BUSY = UART busy indicator. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.3..3> BUSY
//        <0=> 0: 
//        <1=> 1: BUSY = UART busy indicator. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_DCD  ------------------------------------
// SVD Line: 43584

//  <item> SFDITEM_FIELD__UART1_FR_DCD
//    <name> DCD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D018) \nThis bit holds the data carrier detect indicator.\n0 : Reserved - do not use\n1 : DETECTED = Data carrier detect detected. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.2..2> DCD
//        <0=> 0: 
//        <1=> 1: DETECTED = Data carrier detect detected. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_DSR  ------------------------------------
// SVD Line: 43597

//  <item> SFDITEM_FIELD__UART1_FR_DSR
//    <name> DSR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D018) \nThis bit holds the data set ready indicator.\n0 : Reserved - do not use\n1 : READY = Data set ready. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.1..1> DSR
//        <0=> 0: 
//        <1=> 1: READY = Data set ready. value.
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART1_FR_CTS  ------------------------------------
// SVD Line: 43610

//  <item> SFDITEM_FIELD__UART1_FR_CTS
//    <name> CTS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D018) \nThis bit holds the clear to send indicator.\n0 : Reserved - do not use\n1 : CLEARTOSEND = Clear to send is indicated. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_FR ) </loc>
//      <o.0..0> CTS
//        <0=> 0: 
//        <1=> 1: CLEARTOSEND = Clear to send is indicated. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART1_FR  ------------------------------------
// SVD Line: 43502

//  <rtree> SFDITEM_REG__UART1_FR
//    <name> FR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D018) Flag Register </i>
//    <loc> ( (unsigned int)((UART1_FR >> 0) & 0xFFFFFFFF), ((UART1_FR = (UART1_FR & ~(0x1FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_FR_TXBUSY </item>
//    <item> SFDITEM_FIELD__UART1_FR_TXFE </item>
//    <item> SFDITEM_FIELD__UART1_FR_RXFF </item>
//    <item> SFDITEM_FIELD__UART1_FR_TXFF </item>
//    <item> SFDITEM_FIELD__UART1_FR_RXFE </item>
//    <item> SFDITEM_FIELD__UART1_FR_BUSY </item>
//    <item> SFDITEM_FIELD__UART1_FR_DCD </item>
//    <item> SFDITEM_FIELD__UART1_FR_DSR </item>
//    <item> SFDITEM_FIELD__UART1_FR_CTS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_ILPR  -------------------------------
// SVD Line: 43625

unsigned int UART1_ILPR __AT (0x4001D020);



// -----------------------------  Field Item: UART1_ILPR_ILPDVSR  ---------------------------------
// SVD Line: 43635

//  <item> SFDITEM_FIELD__UART1_ILPR_ILPDVSR
//    <name> ILPDVSR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4001D020) These bits hold the IrDA counter divisor. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_ILPR >> 0) & 0xFF), ((UART1_ILPR = (UART1_ILPR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART1_ILPR  -----------------------------------
// SVD Line: 43625

//  <rtree> SFDITEM_REG__UART1_ILPR
//    <name> ILPR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D020) IrDA Counter </i>
//    <loc> ( (unsigned int)((UART1_ILPR >> 0) & 0xFFFFFFFF), ((UART1_ILPR = (UART1_ILPR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_ILPR_ILPDVSR </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_IBRD  -------------------------------
// SVD Line: 43644

unsigned int UART1_IBRD __AT (0x4001D024);



// ------------------------------  Field Item: UART1_IBRD_DIVINT  ---------------------------------
// SVD Line: 43654

//  <item> SFDITEM_FIELD__UART1_IBRD_DIVINT
//    <name> DIVINT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4001D024) These bits hold the baud integer divisor. </i>
//    <edit> 
//      <loc> ( (unsigned short)((UART1_IBRD >> 0) & 0xFFFF), ((UART1_IBRD = (UART1_IBRD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART1_IBRD  -----------------------------------
// SVD Line: 43644

//  <rtree> SFDITEM_REG__UART1_IBRD
//    <name> IBRD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D024) Integer Baud Rate Divisor </i>
//    <loc> ( (unsigned int)((UART1_IBRD >> 0) & 0xFFFFFFFF), ((UART1_IBRD = (UART1_IBRD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_IBRD_DIVINT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_FBRD  -------------------------------
// SVD Line: 43663

unsigned int UART1_FBRD __AT (0x4001D028);



// -----------------------------  Field Item: UART1_FBRD_DIVFRAC  ---------------------------------
// SVD Line: 43673

//  <item> SFDITEM_FIELD__UART1_FBRD_DIVFRAC
//    <name> DIVFRAC </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x4001D028) These bits hold the baud fractional divisor. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_FBRD >> 0) & 0x3F), ((UART1_FBRD = (UART1_FBRD & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART1_FBRD  -----------------------------------
// SVD Line: 43663

//  <rtree> SFDITEM_REG__UART1_FBRD
//    <name> FBRD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D028) Fractional Baud Rate Divisor </i>
//    <loc> ( (unsigned int)((UART1_FBRD >> 0) & 0xFFFFFFFF), ((UART1_FBRD = (UART1_FBRD & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_FBRD_DIVFRAC </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_LCRH  -------------------------------
// SVD Line: 43682

unsigned int UART1_LCRH __AT (0x4001D02C);



// -------------------------------  Field Item: UART1_LCRH_SPS  -----------------------------------
// SVD Line: 43692

//  <item> SFDITEM_FIELD__UART1_LCRH_SPS
//    <name> SPS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D02C) This bit holds the stick parity select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.7..7> SPS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_WLEN  ----------------------------------
// SVD Line: 43699

//  <item> SFDITEM_FIELD__UART1_LCRH_WLEN
//    <name> WLEN </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x4001D02C) These bits hold the write length. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_LCRH >> 5) & 0x3), ((UART1_LCRH = (UART1_LCRH & ~(0x3UL << 5 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 5 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_FEN  -----------------------------------
// SVD Line: 43706

//  <item> SFDITEM_FIELD__UART1_LCRH_FEN
//    <name> FEN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D02C) This bit holds the FIFO enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.4..4> FEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_STP2  ----------------------------------
// SVD Line: 43713

//  <item> SFDITEM_FIELD__UART1_LCRH_STP2
//    <name> STP2 </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D02C) This bit holds the two stop bits select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.3..3> STP2
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_EPS  -----------------------------------
// SVD Line: 43720

//  <item> SFDITEM_FIELD__UART1_LCRH_EPS
//    <name> EPS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D02C) This bit holds the even parity select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.2..2> EPS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_PEN  -----------------------------------
// SVD Line: 43727

//  <item> SFDITEM_FIELD__UART1_LCRH_PEN
//    <name> PEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D02C) This bit holds the parity enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.1..1> PEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_LCRH_BRK  -----------------------------------
// SVD Line: 43734

//  <item> SFDITEM_FIELD__UART1_LCRH_BRK
//    <name> BRK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D02C) This bit holds the break set. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_LCRH ) </loc>
//      <o.0..0> BRK
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: UART1_LCRH  -----------------------------------
// SVD Line: 43682

//  <rtree> SFDITEM_REG__UART1_LCRH
//    <name> LCRH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D02C) Line Control High </i>
//    <loc> ( (unsigned int)((UART1_LCRH >> 0) & 0xFFFFFFFF), ((UART1_LCRH = (UART1_LCRH & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_LCRH_SPS </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_WLEN </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_FEN </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_STP2 </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_EPS </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_PEN </item>
//    <item> SFDITEM_FIELD__UART1_LCRH_BRK </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART1_CR  --------------------------------
// SVD Line: 43743

unsigned int UART1_CR __AT (0x4001D030);



// -------------------------------  Field Item: UART1_CR_CTSEN  -----------------------------------
// SVD Line: 43753

//  <item> SFDITEM_FIELD__UART1_CR_CTSEN
//    <name> CTSEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4001D030) This bit enables CTS hardware flow control. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.15..15> CTSEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_RTSEN  -----------------------------------
// SVD Line: 43760

//  <item> SFDITEM_FIELD__UART1_CR_RTSEN
//    <name> RTSEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4001D030) This bit enables RTS hardware flow control. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.14..14> RTSEN
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_OUT2  -----------------------------------
// SVD Line: 43767

//  <item> SFDITEM_FIELD__UART1_CR_OUT2
//    <name> OUT2 </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4001D030) This bit holds modem Out2. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.13..13> OUT2
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_OUT1  -----------------------------------
// SVD Line: 43774

//  <item> SFDITEM_FIELD__UART1_CR_OUT1
//    <name> OUT1 </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4001D030) This bit holds modem Out1. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.12..12> OUT1
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_RTS  ------------------------------------
// SVD Line: 43781

//  <item> SFDITEM_FIELD__UART1_CR_RTS
//    <name> RTS </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4001D030) This bit enables request to send. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.11..11> RTS
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_DTR  ------------------------------------
// SVD Line: 43788

//  <item> SFDITEM_FIELD__UART1_CR_DTR
//    <name> DTR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D030) This bit enables data transmit ready. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.10..10> DTR
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_RXE  ------------------------------------
// SVD Line: 43795

//  <item> SFDITEM_FIELD__UART1_CR_RXE
//    <name> RXE </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D030) This bit is the receive enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.9..9> RXE
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_TXE  ------------------------------------
// SVD Line: 43802

//  <item> SFDITEM_FIELD__UART1_CR_TXE
//    <name> TXE </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D030) This bit is the transmit enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.8..8> TXE
//    </check>
//  </item>
//  


// --------------------------------  Field Item: UART1_CR_LBE  ------------------------------------
// SVD Line: 43809

//  <item> SFDITEM_FIELD__UART1_CR_LBE
//    <name> LBE </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D030) This bit is the loopback enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.7..7> LBE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_CLKSEL  ----------------------------------
// SVD Line: 43816

//  <item> SFDITEM_FIELD__UART1_CR_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x4001D030) \nThis bitfield is the UART clock select.\n0 : NOCLK = No UART clock. This is the low power default. value.\n1 : 24MHZ = 24 MHz clock. value.\n2 : 12MHZ = 12 MHz clock. value.\n3 : 6MHZ = 6 MHz clock. value.\n4 : 3MHZ = 3 MHz clock. value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.6..4> CLKSEL
//        <0=> 0: NOCLK = No UART clock. This is the low power default. value.
//        <1=> 1: 24MHZ = 24 MHz clock. value.
//        <2=> 2: 12MHZ = 12 MHz clock. value.
//        <3=> 3: 6MHZ = 6 MHz clock. value.
//        <4=> 4: 3MHZ = 3 MHz clock. value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_CLKEN  -----------------------------------
// SVD Line: 43849

//  <item> SFDITEM_FIELD__UART1_CR_CLKEN
//    <name> CLKEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D030) This bit is the UART clock enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.3..3> CLKEN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_SIRLP  -----------------------------------
// SVD Line: 43856

//  <item> SFDITEM_FIELD__UART1_CR_SIRLP
//    <name> SIRLP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D030) This bit is the SIR low power select. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.2..2> SIRLP
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_SIREN  -----------------------------------
// SVD Line: 43863

//  <item> SFDITEM_FIELD__UART1_CR_SIREN
//    <name> SIREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D030) This bit is the SIR ENDEC enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.1..1> SIREN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_CR_UARTEN  ----------------------------------
// SVD Line: 43870

//  <item> SFDITEM_FIELD__UART1_CR_UARTEN
//    <name> UARTEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D030) This bit is the UART enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_CR ) </loc>
//      <o.0..0> UARTEN
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART1_CR  ------------------------------------
// SVD Line: 43743

//  <rtree> SFDITEM_REG__UART1_CR
//    <name> CR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D030) Control Register </i>
//    <loc> ( (unsigned int)((UART1_CR >> 0) & 0xFFFFFFFF), ((UART1_CR = (UART1_CR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_CR_CTSEN </item>
//    <item> SFDITEM_FIELD__UART1_CR_RTSEN </item>
//    <item> SFDITEM_FIELD__UART1_CR_OUT2 </item>
//    <item> SFDITEM_FIELD__UART1_CR_OUT1 </item>
//    <item> SFDITEM_FIELD__UART1_CR_RTS </item>
//    <item> SFDITEM_FIELD__UART1_CR_DTR </item>
//    <item> SFDITEM_FIELD__UART1_CR_RXE </item>
//    <item> SFDITEM_FIELD__UART1_CR_TXE </item>
//    <item> SFDITEM_FIELD__UART1_CR_LBE </item>
//    <item> SFDITEM_FIELD__UART1_CR_CLKSEL </item>
//    <item> SFDITEM_FIELD__UART1_CR_CLKEN </item>
//    <item> SFDITEM_FIELD__UART1_CR_SIRLP </item>
//    <item> SFDITEM_FIELD__UART1_CR_SIREN </item>
//    <item> SFDITEM_FIELD__UART1_CR_UARTEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_IFLS  -------------------------------
// SVD Line: 43879

unsigned int UART1_IFLS __AT (0x4001D034);



// -----------------------------  Field Item: UART1_IFLS_RXIFLSEL  --------------------------------
// SVD Line: 43889

//  <item> SFDITEM_FIELD__UART1_IFLS_RXIFLSEL
//    <name> RXIFLSEL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x4001D034) These bits hold the receive FIFO interrupt level. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_IFLS >> 3) & 0x7), ((UART1_IFLS = (UART1_IFLS & ~(0x7UL << 3 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 3 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: UART1_IFLS_TXIFLSEL  --------------------------------
// SVD Line: 43896

//  <item> SFDITEM_FIELD__UART1_IFLS_TXIFLSEL
//    <name> TXIFLSEL </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4001D034) These bits hold the transmit FIFO interrupt level. </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART1_IFLS >> 0) & 0x7), ((UART1_IFLS = (UART1_IFLS & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART1_IFLS  -----------------------------------
// SVD Line: 43879

//  <rtree> SFDITEM_REG__UART1_IFLS
//    <name> IFLS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D034) FIFO Interrupt Level Select </i>
//    <loc> ( (unsigned int)((UART1_IFLS >> 0) & 0xFFFFFFFF), ((UART1_IFLS = (UART1_IFLS & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_IFLS_RXIFLSEL </item>
//    <item> SFDITEM_FIELD__UART1_IFLS_TXIFLSEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_IER  --------------------------------
// SVD Line: 43905

unsigned int UART1_IER __AT (0x4001D038);



// -------------------------------  Field Item: UART1_IER_OEIM  -----------------------------------
// SVD Line: 43915

//  <item> SFDITEM_FIELD__UART1_IER_OEIM
//    <name> OEIM </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D038) This bit holds the overflow interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.10..10> OEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_BEIM  -----------------------------------
// SVD Line: 43922

//  <item> SFDITEM_FIELD__UART1_IER_BEIM
//    <name> BEIM </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D038) This bit holds the break error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.9..9> BEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_PEIM  -----------------------------------
// SVD Line: 43929

//  <item> SFDITEM_FIELD__UART1_IER_PEIM
//    <name> PEIM </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D038) This bit holds the parity error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.8..8> PEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_FEIM  -----------------------------------
// SVD Line: 43936

//  <item> SFDITEM_FIELD__UART1_IER_FEIM
//    <name> FEIM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D038) This bit holds the framing error interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.7..7> FEIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_RTIM  -----------------------------------
// SVD Line: 43943

//  <item> SFDITEM_FIELD__UART1_IER_RTIM
//    <name> RTIM </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001D038) This bit holds the receive timeout interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.6..6> RTIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_TXIM  -----------------------------------
// SVD Line: 43950

//  <item> SFDITEM_FIELD__UART1_IER_TXIM
//    <name> TXIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001D038) This bit holds the transmit interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.5..5> TXIM
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IER_RXIM  -----------------------------------
// SVD Line: 43957

//  <item> SFDITEM_FIELD__UART1_IER_RXIM
//    <name> RXIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D038) This bit holds the receive interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.4..4> RXIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IER_DSRMIM  ----------------------------------
// SVD Line: 43964

//  <item> SFDITEM_FIELD__UART1_IER_DSRMIM
//    <name> DSRMIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D038) This bit holds the modem DSR interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.3..3> DSRMIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IER_DCDMIM  ----------------------------------
// SVD Line: 43971

//  <item> SFDITEM_FIELD__UART1_IER_DCDMIM
//    <name> DCDMIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D038) This bit holds the modem DCD interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.2..2> DCDMIM
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IER_CTSMIM  ----------------------------------
// SVD Line: 43978

//  <item> SFDITEM_FIELD__UART1_IER_CTSMIM
//    <name> CTSMIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D038) This bit holds the modem CTS interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.1..1> CTSMIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART1_IER_TXCMPMIM  ---------------------------------
// SVD Line: 43985

//  <item> SFDITEM_FIELD__UART1_IER_TXCMPMIM
//    <name> TXCMPMIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D038) This bit holds the modem TXCMP interrupt enable. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IER ) </loc>
//      <o.0..0> TXCMPMIM
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART1_IER  -----------------------------------
// SVD Line: 43905

//  <rtree> SFDITEM_REG__UART1_IER
//    <name> IER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D038) Interrupt Enable </i>
//    <loc> ( (unsigned int)((UART1_IER >> 0) & 0xFFFFFFFF), ((UART1_IER = (UART1_IER & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_IER_OEIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_BEIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_PEIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_FEIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_RTIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_TXIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_RXIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_DSRMIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_DCDMIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_CTSMIM </item>
//    <item> SFDITEM_FIELD__UART1_IER_TXCMPMIM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_IES  --------------------------------
// SVD Line: 43994

unsigned int UART1_IES __AT (0x4001D03C);



// -------------------------------  Field Item: UART1_IES_OERIS  ----------------------------------
// SVD Line: 44004

//  <item> SFDITEM_FIELD__UART1_IES_OERIS
//    <name> OERIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D03C) This bit holds the overflow interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.10..10> OERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_BERIS  ----------------------------------
// SVD Line: 44011

//  <item> SFDITEM_FIELD__UART1_IES_BERIS
//    <name> BERIS </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D03C) This bit holds the break error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.9..9> BERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_PERIS  ----------------------------------
// SVD Line: 44018

//  <item> SFDITEM_FIELD__UART1_IES_PERIS
//    <name> PERIS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D03C) This bit holds the parity error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.8..8> PERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_FERIS  ----------------------------------
// SVD Line: 44025

//  <item> SFDITEM_FIELD__UART1_IES_FERIS
//    <name> FERIS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D03C) This bit holds the framing error interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.7..7> FERIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_RTRIS  ----------------------------------
// SVD Line: 44032

//  <item> SFDITEM_FIELD__UART1_IES_RTRIS
//    <name> RTRIS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001D03C) This bit holds the receive timeout interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.6..6> RTRIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_TXRIS  ----------------------------------
// SVD Line: 44039

//  <item> SFDITEM_FIELD__UART1_IES_TXRIS
//    <name> TXRIS </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001D03C) This bit holds the transmit interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.5..5> TXRIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IES_RXRIS  ----------------------------------
// SVD Line: 44046

//  <item> SFDITEM_FIELD__UART1_IES_RXRIS
//    <name> RXRIS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D03C) This bit holds the receive interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.4..4> RXRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IES_DSRMRIS  ---------------------------------
// SVD Line: 44053

//  <item> SFDITEM_FIELD__UART1_IES_DSRMRIS
//    <name> DSRMRIS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D03C) This bit holds the modem DSR interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.3..3> DSRMRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IES_DCDMRIS  ---------------------------------
// SVD Line: 44060

//  <item> SFDITEM_FIELD__UART1_IES_DCDMRIS
//    <name> DCDMRIS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D03C) This bit holds the modem DCD interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.2..2> DCDMRIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IES_CTSMRIS  ---------------------------------
// SVD Line: 44067

//  <item> SFDITEM_FIELD__UART1_IES_CTSMRIS
//    <name> CTSMRIS </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D03C) This bit holds the modem CTS interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.1..1> CTSMRIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART1_IES_TXCMPMRIS  --------------------------------
// SVD Line: 44074

//  <item> SFDITEM_FIELD__UART1_IES_TXCMPMRIS
//    <name> TXCMPMRIS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D03C) This bit holds the modem TXCMP interrupt status. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IES ) </loc>
//      <o.0..0> TXCMPMRIS
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART1_IES  -----------------------------------
// SVD Line: 43994

//  <rtree> SFDITEM_REG__UART1_IES
//    <name> IES </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D03C) Interrupt Status </i>
//    <loc> ( (unsigned int)((UART1_IES >> 0) & 0xFFFFFFFF), ((UART1_IES = (UART1_IES & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_IES_OERIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_BERIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_PERIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_FERIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_RTRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_TXRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_RXRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_DSRMRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_DCDMRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_CTSMRIS </item>
//    <item> SFDITEM_FIELD__UART1_IES_TXCMPMRIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_MIS  --------------------------------
// SVD Line: 44083

unsigned int UART1_MIS __AT (0x4001D040);



// -------------------------------  Field Item: UART1_MIS_OEMIS  ----------------------------------
// SVD Line: 44093

//  <item> SFDITEM_FIELD__UART1_MIS_OEMIS
//    <name> OEMIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D040) This bit holds the overflow interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.10..10> OEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_BEMIS  ----------------------------------
// SVD Line: 44100

//  <item> SFDITEM_FIELD__UART1_MIS_BEMIS
//    <name> BEMIS </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D040) This bit holds the break error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.9..9> BEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_PEMIS  ----------------------------------
// SVD Line: 44107

//  <item> SFDITEM_FIELD__UART1_MIS_PEMIS
//    <name> PEMIS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D040) This bit holds the parity error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.8..8> PEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_FEMIS  ----------------------------------
// SVD Line: 44114

//  <item> SFDITEM_FIELD__UART1_MIS_FEMIS
//    <name> FEMIS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D040) This bit holds the framing error interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.7..7> FEMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_RTMIS  ----------------------------------
// SVD Line: 44121

//  <item> SFDITEM_FIELD__UART1_MIS_RTMIS
//    <name> RTMIS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001D040) This bit holds the receive timeout interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.6..6> RTMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_TXMIS  ----------------------------------
// SVD Line: 44128

//  <item> SFDITEM_FIELD__UART1_MIS_TXMIS
//    <name> TXMIS </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001D040) This bit holds the transmit interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.5..5> TXMIS
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_MIS_RXMIS  ----------------------------------
// SVD Line: 44135

//  <item> SFDITEM_FIELD__UART1_MIS_RXMIS
//    <name> RXMIS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D040) This bit holds the receive interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.4..4> RXMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_MIS_DSRMMIS  ---------------------------------
// SVD Line: 44142

//  <item> SFDITEM_FIELD__UART1_MIS_DSRMMIS
//    <name> DSRMMIS </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D040) This bit holds the modem DSR interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.3..3> DSRMMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_MIS_DCDMMIS  ---------------------------------
// SVD Line: 44149

//  <item> SFDITEM_FIELD__UART1_MIS_DCDMMIS
//    <name> DCDMMIS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D040) This bit holds the modem DCD interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.2..2> DCDMMIS
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_MIS_CTSMMIS  ---------------------------------
// SVD Line: 44156

//  <item> SFDITEM_FIELD__UART1_MIS_CTSMMIS
//    <name> CTSMMIS </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D040) This bit holds the modem CTS interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.1..1> CTSMMIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART1_MIS_TXCMPMMIS  --------------------------------
// SVD Line: 44163

//  <item> SFDITEM_FIELD__UART1_MIS_TXCMPMMIS
//    <name> TXCMPMMIS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D040) This bit holds the modem TXCMP interrupt status masked. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_MIS ) </loc>
//      <o.0..0> TXCMPMMIS
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART1_MIS  -----------------------------------
// SVD Line: 44083

//  <rtree> SFDITEM_REG__UART1_MIS
//    <name> MIS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D040) Masked Interrupt Status </i>
//    <loc> ( (unsigned int)((UART1_MIS >> 0) & 0xFFFFFFFF), ((UART1_MIS = (UART1_MIS & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_MIS_OEMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_BEMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_PEMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_FEMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_RTMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_TXMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_RXMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_DSRMMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_DCDMMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_CTSMMIS </item>
//    <item> SFDITEM_FIELD__UART1_MIS_TXCMPMMIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART1_IEC  --------------------------------
// SVD Line: 44172

unsigned int UART1_IEC __AT (0x4001D044);



// -------------------------------  Field Item: UART1_IEC_OEIC  -----------------------------------
// SVD Line: 44182

//  <item> SFDITEM_FIELD__UART1_IEC_OEIC
//    <name> OEIC </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4001D044) This bit holds the overflow interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.10..10> OEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_BEIC  -----------------------------------
// SVD Line: 44189

//  <item> SFDITEM_FIELD__UART1_IEC_BEIC
//    <name> BEIC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4001D044) This bit holds the break error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.9..9> BEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_PEIC  -----------------------------------
// SVD Line: 44196

//  <item> SFDITEM_FIELD__UART1_IEC_PEIC
//    <name> PEIC </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4001D044) This bit holds the parity error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.8..8> PEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_FEIC  -----------------------------------
// SVD Line: 44203

//  <item> SFDITEM_FIELD__UART1_IEC_FEIC
//    <name> FEIC </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4001D044) This bit holds the framing error interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.7..7> FEIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_RTIC  -----------------------------------
// SVD Line: 44210

//  <item> SFDITEM_FIELD__UART1_IEC_RTIC
//    <name> RTIC </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4001D044) This bit holds the receive timeout interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.6..6> RTIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_TXIC  -----------------------------------
// SVD Line: 44217

//  <item> SFDITEM_FIELD__UART1_IEC_TXIC
//    <name> TXIC </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4001D044) This bit holds the transmit interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.5..5> TXIC
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART1_IEC_RXIC  -----------------------------------
// SVD Line: 44224

//  <item> SFDITEM_FIELD__UART1_IEC_RXIC
//    <name> RXIC </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4001D044) This bit holds the receive interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.4..4> RXIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IEC_DSRMIC  ----------------------------------
// SVD Line: 44231

//  <item> SFDITEM_FIELD__UART1_IEC_DSRMIC
//    <name> DSRMIC </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4001D044) This bit holds the modem DSR interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.3..3> DSRMIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IEC_DCDMIC  ----------------------------------
// SVD Line: 44238

//  <item> SFDITEM_FIELD__UART1_IEC_DCDMIC
//    <name> DCDMIC </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4001D044) This bit holds the modem DCD interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.2..2> DCDMIC
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART1_IEC_CTSMIC  ----------------------------------
// SVD Line: 44245

//  <item> SFDITEM_FIELD__UART1_IEC_CTSMIC
//    <name> CTSMIC </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4001D044) This bit holds the modem CTS interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.1..1> CTSMIC
//    </check>
//  </item>
//  


// -----------------------------  Field Item: UART1_IEC_TXCMPMIC  ---------------------------------
// SVD Line: 44252

//  <item> SFDITEM_FIELD__UART1_IEC_TXCMPMIC
//    <name> TXCMPMIC </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4001D044) This bit holds the modem TXCMP interrupt clear. </i>
//    <check> 
//      <loc> ( (unsigned int) UART1_IEC ) </loc>
//      <o.0..0> TXCMPMIC
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART1_IEC  -----------------------------------
// SVD Line: 44172

//  <rtree> SFDITEM_REG__UART1_IEC
//    <name> IEC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4001D044) Interrupt Clear </i>
//    <loc> ( (unsigned int)((UART1_IEC >> 0) & 0xFFFFFFFF), ((UART1_IEC = (UART1_IEC & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART1_IEC_OEIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_BEIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_PEIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_FEIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_RTIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_TXIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_RXIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_DSRMIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_DCDMIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_CTSMIC </item>
//    <item> SFDITEM_FIELD__UART1_IEC_TXCMPMIC </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: UART1  -------------------------------------
// SVD Line: 44263

//  <view> UART1
//    <name> UART1 </name>
//    <item> SFDITEM_REG__UART1_DR </item>
//    <item> SFDITEM_REG__UART1_RSR </item>
//    <item> SFDITEM_REG__UART1_FR </item>
//    <item> SFDITEM_REG__UART1_ILPR </item>
//    <item> SFDITEM_REG__UART1_IBRD </item>
//    <item> SFDITEM_REG__UART1_FBRD </item>
//    <item> SFDITEM_REG__UART1_LCRH </item>
//    <item> SFDITEM_REG__UART1_CR </item>
//    <item> SFDITEM_REG__UART1_IFLS </item>
//    <item> SFDITEM_REG__UART1_IER </item>
//    <item> SFDITEM_REG__UART1_IES </item>
//    <item> SFDITEM_REG__UART1_MIS </item>
//    <item> SFDITEM_REG__UART1_IEC </item>
//  </view>
//  


// ----------------------------  Register Item Address: VCOMP_CFG  --------------------------------
// SVD Line: 44291

unsigned int VCOMP_CFG __AT (0x4000C000);



// ------------------------------  Field Item: VCOMP_CFG_LVLSEL  ----------------------------------
// SVD Line: 44301

//  <item> SFDITEM_FIELD__VCOMP_CFG_LVLSEL
//    <name> LVLSEL </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4000C000) \nWhen the reference input NSEL is set to NSEL_DAC, this bitfield selects the voltage level for the negative input to the comparator.\n0 : 0P58V = Set Reference input to 0.58 Volts. value.\n1 : 0P77V = Set Reference input to 0.77 Volts. value.\n2 : 0P97V = Set Reference input to 0.97 Volts. value.\n3 : 1P16V = Set Reference input to 1.16 Volts. value.\n4 : 1P35V = Set Reference input to 1.35 Volts. value.\n5 : 1P55V = Set Reference input to 1.55 Volts. value.\n6 : 1P74V = Set Reference input to 1.74 Volts. value.\n7 : 1P93V = Set Reference input to 1.93 Volts. value.\n8 : 2P13V = Set Reference input to 2.13 Volts. value.\n9 : 2P32V = Set Reference input to 2.32 Volts. value.\n10 : 2P51V = Set Reference input to 2.51 Volts. value.\n11 : 2P71V = Set Reference input to 2.71 Volts. value.\n12 : 2P90V = Set Reference input to 2.90 Volts. value.\n13 : 3P09V = Set Reference input to 3.09 Volts. value.\n14 : 3P29V = Set Reference input to 3.29 Volts. value.\n15 : 3P48V = Set Reference input to 3.48 Volts. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) VCOMP_CFG ) </loc>
//      <o.19..16> LVLSEL
//        <0=> 0: 0P58V = Set Reference input to 0.58 Volts. value.
//        <1=> 1: 0P77V = Set Reference input to 0.77 Volts. value.
//        <2=> 2: 0P97V = Set Reference input to 0.97 Volts. value.
//        <3=> 3: 1P16V = Set Reference input to 1.16 Volts. value.
//        <4=> 4: 1P35V = Set Reference input to 1.35 Volts. value.
//        <5=> 5: 1P55V = Set Reference input to 1.55 Volts. value.
//        <6=> 6: 1P74V = Set Reference input to 1.74 Volts. value.
//        <7=> 7: 1P93V = Set Reference input to 1.93 Volts. value.
//        <8=> 8: 2P13V = Set Reference input to 2.13 Volts. value.
//        <9=> 9: 2P32V = Set Reference input to 2.32 Volts. value.
//        <10=> 10: 2P51V = Set Reference input to 2.51 Volts. value.
//        <11=> 11: 2P71V = Set Reference input to 2.71 Volts. value.
//        <12=> 12: 2P90V = Set Reference input to 2.90 Volts. value.
//        <13=> 13: 3P09V = Set Reference input to 3.09 Volts. value.
//        <14=> 14: 3P29V = Set Reference input to 3.29 Volts. value.
//        <15=> 15: 3P48V = Set Reference input to 3.48 Volts. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: VCOMP_CFG_NSEL  -----------------------------------
// SVD Line: 44389

//  <item> SFDITEM_FIELD__VCOMP_CFG_NSEL
//    <name> NSEL </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x4000C000) \nThis bitfield selects the negative input to the comparator.\n0 : VREFEXT1 = Use external reference 1 for reference input. value.\n1 : VREFEXT2 = Use external reference 2 for reference input. value.\n2 : VREFEXT3 = Use external reference 3 for reference input. value.\n3 : DAC = Use DAC output selected by LVLSEL for reference input. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) VCOMP_CFG ) </loc>
//      <o.9..8> NSEL
//        <0=> 0: VREFEXT1 = Use external reference 1 for reference input. value.
//        <1=> 1: VREFEXT2 = Use external reference 2 for reference input. value.
//        <2=> 2: VREFEXT3 = Use external reference 3 for reference input. value.
//        <3=> 3: DAC = Use DAC output selected by LVLSEL for reference input. value.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: VCOMP_CFG_PSEL  -----------------------------------
// SVD Line: 44417

//  <item> SFDITEM_FIELD__VCOMP_CFG_PSEL
//    <name> PSEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x4000C000) \nThis bitfield selects the positive input to the comparator.\n0 : VDDADJ = Use VDDADJ for the positive input. value.\n1 : VTEMP = Use the temperature sensor output for the positive input. Note: If this channel is selected for PSEL, the bandap circuit required for temperature comparisons will automatically turn on. The bandgap circuit requires 11us to stabalize. value.\n2 : VEXT1 = Use external voltage 0 for positive input. value.\n3 : VEXT2 = Use external voltage 1 for positive input. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) VCOMP_CFG ) </loc>
//      <o.1..0> PSEL
//        <0=> 0: VDDADJ = Use VDDADJ for the positive input. value.
//        <1=> 1: VTEMP = Use the temperature sensor output for the positive input. Note: If this channel is selected for PSEL, the bandap circuit required for temperature comparisons will automatically turn on. The bandgap circuit requires 11us to stabalize. value.
//        <2=> 2: VEXT1 = Use external voltage 0 for positive input. value.
//        <3=> 3: VEXT2 = Use external voltage 1 for positive input. value.
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: VCOMP_CFG  -----------------------------------
// SVD Line: 44291

//  <rtree> SFDITEM_REG__VCOMP_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C000) Configuration Register </i>
//    <loc> ( (unsigned int)((VCOMP_CFG >> 0) & 0xFFFFFFFF), ((VCOMP_CFG = (VCOMP_CFG & ~(0xF0303UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0303) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_CFG_LVLSEL </item>
//    <item> SFDITEM_FIELD__VCOMP_CFG_NSEL </item>
//    <item> SFDITEM_FIELD__VCOMP_CFG_PSEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: VCOMP_STAT  -------------------------------
// SVD Line: 44447

unsigned int VCOMP_STAT __AT (0x4000C004);



// -----------------------------  Field Item: VCOMP_STAT_PWDSTAT  ---------------------------------
// SVD Line: 44457

//  <item> SFDITEM_FIELD__VCOMP_STAT_PWDSTAT
//    <name> PWDSTAT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000C004) \nThis bit indicates the power down state of the voltage comparator.\n0 : Reserved - do not use\n1 : POWERED_DOWN = The voltage comparator is powered down. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) VCOMP_STAT ) </loc>
//      <o.1..1> PWDSTAT
//        <0=> 0: 
//        <1=> 1: POWERED_DOWN = The voltage comparator is powered down. value.
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: VCOMP_STAT_CMPOUT  ---------------------------------
// SVD Line: 44470

//  <item> SFDITEM_FIELD__VCOMP_STAT_CMPOUT
//    <name> CMPOUT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000C004) \nThis bit is 1 if the positive input of the comparator is greater than the negative input.\n0 : VOUT_LOW = The negative input of the comparator is greater than the positive input. value.\n1 : VOUT_HIGH = The positive input of the comparator is greater than the negative input. value. </i>
//    <combo> 
//      <loc> ( (unsigned int) VCOMP_STAT ) </loc>
//      <o.0..0> CMPOUT
//        <0=> 0: VOUT_LOW = The negative input of the comparator is greater than the positive input. value.
//        <1=> 1: VOUT_HIGH = The positive input of the comparator is greater than the negative input. value.
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: VCOMP_STAT  -----------------------------------
// SVD Line: 44447

//  <rtree> SFDITEM_REG__VCOMP_STAT
//    <name> STAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C004) Status Register </i>
//    <loc> ( (unsigned int)((VCOMP_STAT >> 0) & 0xFFFFFFFF), ((VCOMP_STAT = (VCOMP_STAT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_STAT_PWDSTAT </item>
//    <item> SFDITEM_FIELD__VCOMP_STAT_CMPOUT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: VCOMP_PWDKEY  ------------------------------
// SVD Line: 44490

unsigned int VCOMP_PWDKEY __AT (0x4000C008);



// -----------------------------  Field Item: VCOMP_PWDKEY_PWDKEY  --------------------------------
// SVD Line: 44500

//  <item> SFDITEM_FIELD__VCOMP_PWDKEY_PWDKEY
//    <name> PWDKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C008) Key register value. </i>
//    <edit> 
//      <loc> ( (unsigned int)((VCOMP_PWDKEY >> 0) & 0xFFFFFFFF), ((VCOMP_PWDKEY = (VCOMP_PWDKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: VCOMP_PWDKEY  ----------------------------------
// SVD Line: 44490

//  <rtree> SFDITEM_REG__VCOMP_PWDKEY
//    <name> PWDKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C008) Key Register for Powering Down the Voltage Comparator </i>
//    <loc> ( (unsigned int)((VCOMP_PWDKEY >> 0) & 0xFFFFFFFF), ((VCOMP_PWDKEY = (VCOMP_PWDKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_PWDKEY_PWDKEY </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: VCOMP_INTEN  -------------------------------
// SVD Line: 44515

unsigned int VCOMP_INTEN __AT (0x4000C200);



// ------------------------------  Field Item: VCOMP_INTEN_OUTHI  ---------------------------------
// SVD Line: 44525

//  <item> SFDITEM_FIELD__VCOMP_INTEN_OUTHI
//    <name> OUTHI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000C200) This bit is the vcompout high interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTEN ) </loc>
//      <o.1..1> OUTHI
//    </check>
//  </item>
//  


// -----------------------------  Field Item: VCOMP_INTEN_OUTLOW  ---------------------------------
// SVD Line: 44532

//  <item> SFDITEM_FIELD__VCOMP_INTEN_OUTLOW
//    <name> OUTLOW </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000C200) This bit is the vcompout low interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTEN ) </loc>
//      <o.0..0> OUTLOW
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: VCOMP_INTEN  ----------------------------------
// SVD Line: 44515

//  <rtree> SFDITEM_REG__VCOMP_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C200) Voltage Comparator Interrupt registers: Enable </i>
//    <loc> ( (unsigned int)((VCOMP_INTEN >> 0) & 0xFFFFFFFF), ((VCOMP_INTEN = (VCOMP_INTEN & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_INTEN_OUTHI </item>
//    <item> SFDITEM_FIELD__VCOMP_INTEN_OUTLOW </item>
//  </rtree>
//  


// --------------------------  Register Item Address: VCOMP_INTSTAT  ------------------------------
// SVD Line: 44541

unsigned int VCOMP_INTSTAT __AT (0x4000C204);



// -----------------------------  Field Item: VCOMP_INTSTAT_OUTHI  --------------------------------
// SVD Line: 44551

//  <item> SFDITEM_FIELD__VCOMP_INTSTAT_OUTHI
//    <name> OUTHI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000C204) This bit is the vcompout high interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTSTAT ) </loc>
//      <o.1..1> OUTHI
//    </check>
//  </item>
//  


// ----------------------------  Field Item: VCOMP_INTSTAT_OUTLOW  --------------------------------
// SVD Line: 44558

//  <item> SFDITEM_FIELD__VCOMP_INTSTAT_OUTLOW
//    <name> OUTLOW </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000C204) This bit is the vcompout low interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTSTAT ) </loc>
//      <o.0..0> OUTLOW
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: VCOMP_INTSTAT  ---------------------------------
// SVD Line: 44541

//  <rtree> SFDITEM_REG__VCOMP_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C204) Voltage Comparator Interrupt registers: Status </i>
//    <loc> ( (unsigned int)((VCOMP_INTSTAT >> 0) & 0xFFFFFFFF), ((VCOMP_INTSTAT = (VCOMP_INTSTAT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_INTSTAT_OUTHI </item>
//    <item> SFDITEM_FIELD__VCOMP_INTSTAT_OUTLOW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: VCOMP_INTCLR  ------------------------------
// SVD Line: 44567

unsigned int VCOMP_INTCLR __AT (0x4000C208);



// -----------------------------  Field Item: VCOMP_INTCLR_OUTHI  ---------------------------------
// SVD Line: 44577

//  <item> SFDITEM_FIELD__VCOMP_INTCLR_OUTHI
//    <name> OUTHI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000C208) This bit is the vcompout high interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTCLR ) </loc>
//      <o.1..1> OUTHI
//    </check>
//  </item>
//  


// -----------------------------  Field Item: VCOMP_INTCLR_OUTLOW  --------------------------------
// SVD Line: 44584

//  <item> SFDITEM_FIELD__VCOMP_INTCLR_OUTLOW
//    <name> OUTLOW </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000C208) This bit is the vcompout low interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTCLR ) </loc>
//      <o.0..0> OUTLOW
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: VCOMP_INTCLR  ----------------------------------
// SVD Line: 44567

//  <rtree> SFDITEM_REG__VCOMP_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C208) Voltage Comparator Interrupt registers: Clear </i>
//    <loc> ( (unsigned int)((VCOMP_INTCLR >> 0) & 0xFFFFFFFF), ((VCOMP_INTCLR = (VCOMP_INTCLR & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_INTCLR_OUTHI </item>
//    <item> SFDITEM_FIELD__VCOMP_INTCLR_OUTLOW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: VCOMP_INTSET  ------------------------------
// SVD Line: 44593

unsigned int VCOMP_INTSET __AT (0x4000C20C);



// -----------------------------  Field Item: VCOMP_INTSET_OUTHI  ---------------------------------
// SVD Line: 44603

//  <item> SFDITEM_FIELD__VCOMP_INTSET_OUTHI
//    <name> OUTHI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000C20C) This bit is the vcompout high interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTSET ) </loc>
//      <o.1..1> OUTHI
//    </check>
//  </item>
//  


// -----------------------------  Field Item: VCOMP_INTSET_OUTLOW  --------------------------------
// SVD Line: 44610

//  <item> SFDITEM_FIELD__VCOMP_INTSET_OUTLOW
//    <name> OUTLOW </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000C20C) This bit is the vcompout low interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) VCOMP_INTSET ) </loc>
//      <o.0..0> OUTLOW
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: VCOMP_INTSET  ----------------------------------
// SVD Line: 44593

//  <rtree> SFDITEM_REG__VCOMP_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000C20C) Voltage Comparator Interrupt registers: Set </i>
//    <loc> ( (unsigned int)((VCOMP_INTSET >> 0) & 0xFFFFFFFF), ((VCOMP_INTSET = (VCOMP_INTSET & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__VCOMP_INTSET_OUTHI </item>
//    <item> SFDITEM_FIELD__VCOMP_INTSET_OUTLOW </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: VCOMP  -------------------------------------
// SVD Line: 44272

//  <view> VCOMP
//    <name> VCOMP </name>
//    <item> SFDITEM_REG__VCOMP_CFG </item>
//    <item> SFDITEM_REG__VCOMP_STAT </item>
//    <item> SFDITEM_REG__VCOMP_PWDKEY </item>
//    <item> SFDITEM_REG__VCOMP_INTEN </item>
//    <item> SFDITEM_REG__VCOMP_INTSTAT </item>
//    <item> SFDITEM_REG__VCOMP_INTCLR </item>
//    <item> SFDITEM_REG__VCOMP_INTSET </item>
//  </view>
//  


// -----------------------------  Register Item Address: WDT_CFG  ---------------------------------
// SVD Line: 44641

unsigned int WDT_CFG __AT (0x40024000);



// -------------------------------  Field Item: WDT_CFG_CLKSEL  -----------------------------------
// SVD Line: 44651

//  <item> SFDITEM_FIELD__WDT_CFG_CLKSEL
//    <name> CLKSEL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40024000) \nSelect the frequency for the WDT. All values not enumerated below are undefined.\n0 : OFF = Low Power Mode. This setting disables the watch dog timer. value.\n1 : 128HZ = 128 Hz LFRC clock. value.\n2 : 16HZ = 16 Hz LFRC clock. value.\n3 : 1HZ = 1 Hz LFRC clock. value.\n4 : 1_16HZ = 1/16th Hz LFRC clock. value.\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_CFG ) </loc>
//      <o.26..24> CLKSEL
//        <0=> 0: OFF = Low Power Mode. This setting disables the watch dog timer. value.
//        <1=> 1: 128HZ = 128 Hz LFRC clock. value.
//        <2=> 2: 16HZ = 16 Hz LFRC clock. value.
//        <3=> 3: 1HZ = 1 Hz LFRC clock. value.
//        <4=> 4: 1_16HZ = 1/16th Hz LFRC clock. value.
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: WDT_CFG_INTVAL  -----------------------------------
// SVD Line: 44684

//  <item> SFDITEM_FIELD__WDT_CFG_INTVAL
//    <name> INTVAL </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40024000) This bitfield is the compare value for counter bits 7:0 to generate a watchdog interrupt. </i>
//    <edit> 
//      <loc> ( (unsigned char)((WDT_CFG >> 16) & 0xFF), ((WDT_CFG = (WDT_CFG & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: WDT_CFG_RESVAL  -----------------------------------
// SVD Line: 44691

//  <item> SFDITEM_FIELD__WDT_CFG_RESVAL
//    <name> RESVAL </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40024000) This bitfield is the compare value for counter bits 7:0 to generate a watchdog reset. This will cause a software reset. </i>
//    <edit> 
//      <loc> ( (unsigned char)((WDT_CFG >> 8) & 0xFF), ((WDT_CFG = (WDT_CFG & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Field Item: WDT_CFG_RESEN  -----------------------------------
// SVD Line: 44698

//  <item> SFDITEM_FIELD__WDT_CFG_RESEN
//    <name> RESEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40024000) This bitfield enables the WDT reset. This needs to be set together with the WDREN bit in REG_RSTGEN_CFG register (in reset gen) to trigger the reset. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_CFG ) </loc>
//      <o.2..2> RESEN
//    </check>
//  </item>
//  


// --------------------------------  Field Item: WDT_CFG_INTEN  -----------------------------------
// SVD Line: 44705

//  <item> SFDITEM_FIELD__WDT_CFG_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40024000) This bitfield enables the WDT interrupt. Note : This bit must be set before the interrupt status bit will reflect a watchdog timer expiration. The IER interrupt register must also be enabled for a WDT interrupt to be sent to the NVIC. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_CFG ) </loc>
//      <o.1..1> INTEN
//    </check>
//  </item>
//  


// --------------------------------  Field Item: WDT_CFG_WDTEN  -----------------------------------
// SVD Line: 44712

//  <item> SFDITEM_FIELD__WDT_CFG_WDTEN
//    <name> WDTEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40024000) This bitfield enables the WDT. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_CFG ) </loc>
//      <o.0..0> WDTEN
//    </check>
//  </item>
//  


// ---------------------------------  Register RTree: WDT_CFG  ------------------------------------
// SVD Line: 44641

//  <rtree> SFDITEM_REG__WDT_CFG
//    <name> CFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024000) Configuration Register </i>
//    <loc> ( (unsigned int)((WDT_CFG >> 0) & 0xFFFFFFFF), ((WDT_CFG = (WDT_CFG & ~(0x7FFFF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_CFG_CLKSEL </item>
//    <item> SFDITEM_FIELD__WDT_CFG_INTVAL </item>
//    <item> SFDITEM_FIELD__WDT_CFG_RESVAL </item>
//    <item> SFDITEM_FIELD__WDT_CFG_RESEN </item>
//    <item> SFDITEM_FIELD__WDT_CFG_INTEN </item>
//    <item> SFDITEM_FIELD__WDT_CFG_WDTEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: WDT_RSTRT  --------------------------------
// SVD Line: 44721

unsigned int WDT_RSTRT __AT (0x40024004);



// -------------------------------  Field Item: WDT_RSTRT_RSTRT  ----------------------------------
// SVD Line: 44731

//  <item> SFDITEM_FIELD__WDT_RSTRT_RSTRT
//    <name> RSTRT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40024004) Writing 0xB2 to WDTRSTRT restarts the watchdog timer. This is a write only register. Reading this register will only provide all 0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((WDT_RSTRT >> 0) & 0xFF), ((WDT_RSTRT = (WDT_RSTRT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: WDT_RSTRT  -----------------------------------
// SVD Line: 44721

//  <rtree> SFDITEM_REG__WDT_RSTRT
//    <name> RSTRT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024004) Restart the watchdog timer. </i>
//    <loc> ( (unsigned int)((WDT_RSTRT >> 0) & 0xFFFFFFFF), ((WDT_RSTRT = (WDT_RSTRT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_RSTRT_RSTRT </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: WDT_LOCK  --------------------------------
// SVD Line: 44746

unsigned int WDT_LOCK __AT (0x40024008);



// --------------------------------  Field Item: WDT_LOCK_LOCK  -----------------------------------
// SVD Line: 44756

//  <item> SFDITEM_FIELD__WDT_LOCK_LOCK
//    <name> LOCK </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40024008) Writing 0x3A locks the watchdog timer. Once locked, the WDTCFG reg cannot be written and WDTEN is set. </i>
//    <edit> 
//      <loc> ( (unsigned char)((WDT_LOCK >> 0) & 0xFF), ((WDT_LOCK = (WDT_LOCK & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: WDT_LOCK  ------------------------------------
// SVD Line: 44746

//  <rtree> SFDITEM_REG__WDT_LOCK
//    <name> LOCK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024008) Locks the WDT </i>
//    <loc> ( (unsigned int)((WDT_LOCK >> 0) & 0xFFFFFFFF), ((WDT_LOCK = (WDT_LOCK & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_LOCK_LOCK </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: WDT_COUNT  --------------------------------
// SVD Line: 44771

unsigned int WDT_COUNT __AT (0x4002400C);



// -------------------------------  Field Item: WDT_COUNT_COUNT  ----------------------------------
// SVD Line: 44781

//  <item> SFDITEM_FIELD__WDT_COUNT_COUNT
//    <name> COUNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4002400C) Read-Only current value of the WDT counter </i>
//    <edit> 
//      <loc> ( (unsigned char)((WDT_COUNT >> 0) & 0xFF), ((WDT_COUNT = (WDT_COUNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: WDT_COUNT  -----------------------------------
// SVD Line: 44771

//  <rtree> SFDITEM_REG__WDT_COUNT
//    <name> COUNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002400C) Current Counter Value for WDT </i>
//    <loc> ( (unsigned int)((WDT_COUNT >> 0) & 0xFFFFFFFF), ((WDT_COUNT = (WDT_COUNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_COUNT_COUNT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: WDT_INTEN  --------------------------------
// SVD Line: 44790

unsigned int WDT_INTEN __AT (0x40024200);



// ------------------------------  Field Item: WDT_INTEN_WDTINT  ----------------------------------
// SVD Line: 44800

//  <item> SFDITEM_FIELD__WDT_INTEN_WDTINT
//    <name> WDTINT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40024200) Watchdog Timer Interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_INTEN ) </loc>
//      <o.0..0> WDTINT
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: WDT_INTEN  -----------------------------------
// SVD Line: 44790

//  <rtree> SFDITEM_REG__WDT_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024200) WDT Interrupt register: Enable </i>
//    <loc> ( (unsigned int)((WDT_INTEN >> 0) & 0xFFFFFFFF), ((WDT_INTEN = (WDT_INTEN & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_INTEN_WDTINT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: WDT_INTSTAT  -------------------------------
// SVD Line: 44809

unsigned int WDT_INTSTAT __AT (0x40024204);



// -----------------------------  Field Item: WDT_INTSTAT_WDTINT  ---------------------------------
// SVD Line: 44819

//  <item> SFDITEM_FIELD__WDT_INTSTAT_WDTINT
//    <name> WDTINT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40024204) Watchdog Timer Interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_INTSTAT ) </loc>
//      <o.0..0> WDTINT
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: WDT_INTSTAT  ----------------------------------
// SVD Line: 44809

//  <rtree> SFDITEM_REG__WDT_INTSTAT
//    <name> INTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024204) WDT Interrupt register: Status </i>
//    <loc> ( (unsigned int)((WDT_INTSTAT >> 0) & 0xFFFFFFFF), ((WDT_INTSTAT = (WDT_INTSTAT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_INTSTAT_WDTINT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: WDT_INTCLR  -------------------------------
// SVD Line: 44828

unsigned int WDT_INTCLR __AT (0x40024208);



// ------------------------------  Field Item: WDT_INTCLR_WDTINT  ---------------------------------
// SVD Line: 44838

//  <item> SFDITEM_FIELD__WDT_INTCLR_WDTINT
//    <name> WDTINT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40024208) Watchdog Timer Interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_INTCLR ) </loc>
//      <o.0..0> WDTINT
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: WDT_INTCLR  -----------------------------------
// SVD Line: 44828

//  <rtree> SFDITEM_REG__WDT_INTCLR
//    <name> INTCLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40024208) WDT Interrupt register: Clear </i>
//    <loc> ( (unsigned int)((WDT_INTCLR >> 0) & 0xFFFFFFFF), ((WDT_INTCLR = (WDT_INTCLR & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_INTCLR_WDTINT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: WDT_INTSET  -------------------------------
// SVD Line: 44847

unsigned int WDT_INTSET __AT (0x4002420C);



// ------------------------------  Field Item: WDT_INTSET_WDTINT  ---------------------------------
// SVD Line: 44857

//  <item> SFDITEM_FIELD__WDT_INTSET_WDTINT
//    <name> WDTINT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4002420C) Watchdog Timer Interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) WDT_INTSET ) </loc>
//      <o.0..0> WDTINT
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: WDT_INTSET  -----------------------------------
// SVD Line: 44847

//  <rtree> SFDITEM_REG__WDT_INTSET
//    <name> INTSET </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4002420C) WDT Interrupt register: Set </i>
//    <loc> ( (unsigned int)((WDT_INTSET >> 0) & 0xFFFFFFFF), ((WDT_INTSET = (WDT_INTSET & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_INTSET_WDTINT </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: WDT  --------------------------------------
// SVD Line: 44622

//  <view> WDT
//    <name> WDT </name>
//    <item> SFDITEM_REG__WDT_CFG </item>
//    <item> SFDITEM_REG__WDT_RSTRT </item>
//    <item> SFDITEM_REG__WDT_LOCK </item>
//    <item> SFDITEM_REG__WDT_COUNT </item>
//    <item> SFDITEM_REG__WDT_INTEN </item>
//    <item> SFDITEM_REG__WDT_INTSTAT </item>
//    <item> SFDITEM_REG__WDT_INTCLR </item>
//    <item> SFDITEM_REG__WDT_INTSET </item>
//  </view>
//  


// ------------------------------   IRQ Num definition: apollo3  ----------------------------------
// SVD Line: 36



// ------------------------------------------------------------------------------------------------
// -----                              Interrupt Number Definition                             -----
// ------------------------------------------------------------------------------------------------



// ------------------------  ARM Cortex-M4 Specific Interrupt Numbers  ----------------------------

//  <qitem> Reset_IRQ
//    <name> Reset </name>
//    <i> Reset Vector, invoked on Power up and warm reset </i>
//    <loc> 1 </loc>
//  </qitem>
//  
//  <qitem> NonMaskableInt_IRQ
//    <name> NonMaskableInt </name>
//    <i> Non maskable Interrupt, cannot be stopped or preempted </i>
//    <loc> 2 </loc>
//  </qitem>
//  
//  <qitem> HardFault_IRQ
//    <name> HardFault </name>
//    <i> Hard Fault, all classes of Fault </i>
//    <loc> 3 </loc>
//  </qitem>
//  
//  <qitem> MemoryManagement_IRQ
//    <name> MemoryManagement </name>
//    <i> Memory Management, MPU mismatch, including Access Violation and No Match </i>
//    <loc> 4 </loc>
//  </qitem>
//  
//  <qitem> BusFault_IRQ
//    <name> BusFault </name>
//    <i> Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory related Fault </i>
//    <loc> 5 </loc>
//  </qitem>
//  
//  <qitem> UsageFault_IRQ
//    <name> UsageFault </name>
//    <i> Usage Fault, i.e. Undef Instruction, Illegal State Transition </i>
//    <loc> 6 </loc>
//  </qitem>
//  
//  <qitem> SVCall_IRQ
//    <name> SVCall </name>
//    <i> System Service Call via SVC instruction </i>
//    <loc> 11 </loc>
//  </qitem>
//  
//  <qitem> DebugMonitor_IRQ
//    <name> DebugMonitor </name>
//    <i> Debug Monitor </i>
//    <loc> 12 </loc>
//  </qitem>
//  
//  <qitem> PendSV_IRQ
//    <name> PendSV </name>
//    <i> Pendable request for system service </i>
//    <loc> 14 </loc>
//  </qitem>
//  
//  <qitem> SysTick_IRQ
//    <name> SysTick </name>
//    <i> System Tick Timer </i>
//    <loc> 15 </loc>
//  </qitem>
//  


// ---------------------------  apollo3 Specific Interrupt Numbers  -------------------------------

//  <qitem> BROWNOUT_IRQ
//    <name> BROWNOUT </name>
//    <i> BROWNOUT </i>
//    <loc> 16 </loc>
//  </qitem>
//  
//  <qitem> WDT_IRQ
//    <name> WDT </name>
//    <i> WDT </i>
//    <loc> 17 </loc>
//  </qitem>
//  
//  <qitem> RTC_IRQ
//    <name> RTC </name>
//    <i> RTC </i>
//    <loc> 18 </loc>
//  </qitem>
//  
//  <qitem> VCOMP_IRQ
//    <name> VCOMP </name>
//    <i> VCOMP </i>
//    <loc> 19 </loc>
//  </qitem>
//  
//  <qitem> IOSLAVE_IRQ
//    <name> IOSLAVE </name>
//    <i> IOSLAVE </i>
//    <loc> 20 </loc>
//  </qitem>
//  
//  <qitem> IOSLAVEACC_IRQ
//    <name> IOSLAVEACC </name>
//    <i> IOSLAVEACC </i>
//    <loc> 21 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR0_IRQ
//    <name> IOMSTR0 </name>
//    <i> IOMSTR0 </i>
//    <loc> 22 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR1_IRQ
//    <name> IOMSTR1 </name>
//    <i> IOMSTR1 </i>
//    <loc> 23 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR2_IRQ
//    <name> IOMSTR2 </name>
//    <i> IOMSTR2 </i>
//    <loc> 24 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR3_IRQ
//    <name> IOMSTR3 </name>
//    <i> IOMSTR3 </i>
//    <loc> 25 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR4_IRQ
//    <name> IOMSTR4 </name>
//    <i> IOMSTR4 </i>
//    <loc> 26 </loc>
//  </qitem>
//  
//  <qitem> IOMSTR5_IRQ
//    <name> IOMSTR5 </name>
//    <i> IOMSTR5 </i>
//    <loc> 27 </loc>
//  </qitem>
//  
//  <qitem> BLE_IRQ
//    <name> BLE </name>
//    <i> BLE </i>
//    <loc> 28 </loc>
//  </qitem>
//  
//  <qitem> GPIO_IRQ
//    <name> GPIO </name>
//    <i> GPIO </i>
//    <loc> 29 </loc>
//  </qitem>
//  
//  <qitem> CTIMER_IRQ
//    <name> CTIMER </name>
//    <i> CTIMER </i>
//    <loc> 30 </loc>
//  </qitem>
//  
//  <qitem> UART0_IRQ
//    <name> UART0 </name>
//    <i> UART0 </i>
//    <loc> 31 </loc>
//  </qitem>
//  
//  <qitem> UART1_IRQ
//    <name> UART1 </name>
//    <i> UART1 </i>
//    <loc> 32 </loc>
//  </qitem>
//  
//  <qitem> SCARD_IRQ
//    <name> SCARD </name>
//    <i> SCARD </i>
//    <loc> 33 </loc>
//  </qitem>
//  
//  <qitem> ADC_IRQ
//    <name> ADC </name>
//    <i> ADC </i>
//    <loc> 34 </loc>
//  </qitem>
//  
//  <qitem> PDM_IRQ
//    <name> PDM </name>
//    <i> PDM </i>
//    <loc> 35 </loc>
//  </qitem>
//  
//  <qitem> MSPI_IRQ
//    <name> MSPI </name>
//    <i> MSPI </i>
//    <loc> 36 </loc>
//  </qitem>
//  
//  <qitem> STIMER_IRQ
//    <name> STIMER </name>
//    <i> STIMER </i>
//    <loc> 38 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR0_IRQ
//    <name> STIMER_CMPR0 </name>
//    <i> STIMER_CMPR0 </i>
//    <loc> 39 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR1_IRQ
//    <name> STIMER_CMPR1 </name>
//    <i> STIMER_CMPR1 </i>
//    <loc> 40 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR2_IRQ
//    <name> STIMER_CMPR2 </name>
//    <i> STIMER_CMPR2 </i>
//    <loc> 41 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR3_IRQ
//    <name> STIMER_CMPR3 </name>
//    <i> STIMER_CMPR3 </i>
//    <loc> 42 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR4_IRQ
//    <name> STIMER_CMPR4 </name>
//    <i> STIMER_CMPR4 </i>
//    <loc> 43 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR5_IRQ
//    <name> STIMER_CMPR5 </name>
//    <i> STIMER_CMPR5 </i>
//    <loc> 44 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR6_IRQ
//    <name> STIMER_CMPR6 </name>
//    <i> STIMER_CMPR6 </i>
//    <loc> 45 </loc>
//  </qitem>
//  
//  <qitem> STIMER_CMPR7_IRQ
//    <name> STIMER_CMPR7 </name>
//    <i> STIMER_CMPR7 </i>
//    <loc> 46 </loc>
//  </qitem>
//  
//  <qitem> CLKGEN_IRQ
//    <name> CLKGEN </name>
//    <i> CLKGEN </i>
//    <loc> 47 </loc>
//  </qitem>
//  
//  <irqtable> apollo3_IRQTable
//    <name> apollo3 Interrupt Table </name>
//    <nvicPrioBits> 3 </nvicPrioBits>
//    <qitem> Reset_IRQ </qitem>
//    <qitem> NonMaskableInt_IRQ </qitem>
//    <qitem> HardFault_IRQ </qitem>
//    <qitem> MemoryManagement_IRQ </qitem>
//    <qitem> BusFault_IRQ </qitem>
//    <qitem> UsageFault_IRQ </qitem>
//    <qitem> SVCall_IRQ </qitem>
//    <qitem> DebugMonitor_IRQ </qitem>
//    <qitem> PendSV_IRQ </qitem>
//    <qitem> SysTick_IRQ </qitem>
//    <qitem> BROWNOUT_IRQ </qitem>
//    <qitem> WDT_IRQ </qitem>
//    <qitem> RTC_IRQ </qitem>
//    <qitem> VCOMP_IRQ </qitem>
//    <qitem> IOSLAVE_IRQ </qitem>
//    <qitem> IOSLAVEACC_IRQ </qitem>
//    <qitem> IOMSTR0_IRQ </qitem>
//    <qitem> IOMSTR1_IRQ </qitem>
//    <qitem> IOMSTR2_IRQ </qitem>
//    <qitem> IOMSTR3_IRQ </qitem>
//    <qitem> IOMSTR4_IRQ </qitem>
//    <qitem> IOMSTR5_IRQ </qitem>
//    <qitem> BLE_IRQ </qitem>
//    <qitem> GPIO_IRQ </qitem>
//    <qitem> CTIMER_IRQ </qitem>
//    <qitem> UART0_IRQ </qitem>
//    <qitem> UART1_IRQ </qitem>
//    <qitem> SCARD_IRQ </qitem>
//    <qitem> ADC_IRQ </qitem>
//    <qitem> PDM_IRQ </qitem>
//    <qitem> MSPI_IRQ </qitem>
//    <qitem> STIMER_IRQ </qitem>
//    <qitem> STIMER_CMPR0_IRQ </qitem>
//    <qitem> STIMER_CMPR1_IRQ </qitem>
//    <qitem> STIMER_CMPR2_IRQ </qitem>
//    <qitem> STIMER_CMPR3_IRQ </qitem>
//    <qitem> STIMER_CMPR4_IRQ </qitem>
//    <qitem> STIMER_CMPR5_IRQ </qitem>
//    <qitem> STIMER_CMPR6_IRQ </qitem>
//    <qitem> STIMER_CMPR7_IRQ </qitem>
//    <qitem> CLKGEN_IRQ </qitem>
//  </irqtable>


// -------------------------------------   Menu: apollo3  -----------------------------------------
// SVD Line: 36



// -------------------------------  Peripheral Menu: 'apollo3'  -----------------------------------



// ------------------------------------------------------------------------------------------------
// -----                                       Main Menu                                      -----
// ------------------------------------------------------------------------------------------------

//  <b> ADC
//    <m> ADC </m>
//  </b>
//  
//  <b> APBDMA
//    <m> APBDMA </m>
//  </b>
//  
//  <b> BLEIF
//    <m> BLEIF </m>
//  </b>
//  
//  <b> CACHECTRL
//    <m> CACHECTRL </m>
//  </b>
//  
//  <b> CLKGEN
//    <m> CLKGEN </m>
//  </b>
//  
//  <b> CTIMER
//    <m> CTIMER </m>
//  </b>
//  
//  <b> GPIO
//    <m> GPIO </m>
//  </b>
//  
//  <b> IOM
//    <m> IOM0 </m>
//    <m> IOM1 </m>
//    <m> IOM2 </m>
//    <m> IOM3 </m>
//    <m> IOM4 </m>
//    <m> IOM5 </m>
//  </b>
//  
//  <b> IOSLAVE
//    <m> IOSLAVE </m>
//  </b>
//  
//  <b> MCUCTRL
//    <m> MCUCTRL </m>
//  </b>
//  
//  <b> MSPI
//    <m> MSPI </m>
//  </b>
//  
//  <b> PDM
//    <m> PDM </m>
//  </b>
//  
//  <b> PWRCTRL
//    <m> PWRCTRL </m>
//  </b>
//  
//  <b> RSTGEN
//    <m> RSTGEN </m>
//  </b>
//  
//  <b> RTC
//    <m> RTC </m>
//  </b>
//  
//  <b> SCARD
//    <m> SCARD </m>
//  </b>
//  
//  <b> SECURITY
//    <m> SECURITY </m>
//  </b>
//  
//  <b> UART
//    <m> UART0 </m>
//    <m> UART1 </m>
//  </b>
//  
//  <b> VCOMP
//    <m> VCOMP </m>
//  </b>
//  
//  <b> WDT
//    <m> WDT </m>
//  </b>
//  
